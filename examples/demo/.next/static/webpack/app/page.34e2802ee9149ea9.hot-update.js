"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/../../dist/index.mjs":
/*!****************************!*\
  !*** ../../dist/index.mjs ***!
  \****************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("var react__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrowDownIcon: () => (/* binding */ ArrowDownIcon),\n/* harmony export */   AudioClientHelper: () => (/* binding */ AudioClientHelper),\n/* harmony export */   AudioOutput: () => (/* binding */ AudioOutput),\n/* harmony export */   BotIcon: () => (/* binding */ BotIcon),\n/* harmony export */   Button: () => (/* binding */ Button),\n/* harmony export */   ButtonGroup: () => (/* binding */ ButtonGroup),\n/* harmony export */   Card: () => (/* binding */ Card),\n/* harmony export */   CardAction: () => (/* binding */ CardAction),\n/* harmony export */   CardContent: () => (/* binding */ CardContent),\n/* harmony export */   CardDescription: () => (/* binding */ CardDescription),\n/* harmony export */   CardFooter: () => (/* binding */ CardFooter),\n/* harmony export */   CardHeader: () => (/* binding */ CardHeader),\n/* harmony export */   CardTitle: () => (/* binding */ CardTitle),\n/* harmony export */   CheckIcon: () => (/* binding */ CheckIcon),\n/* harmony export */   ChevronDownIcon: () => (/* binding */ ChevronDownIcon),\n/* harmony export */   ChevronRightIcon: () => (/* binding */ ChevronRightIcon),\n/* harmony export */   ChevronUpIcon: () => (/* binding */ ChevronUpIcon),\n/* harmony export */   ChevronsLeftRightEllipsisIcon: () => (/* binding */ ChevronsLeftRightEllipsisIcon),\n/* harmony export */   CircleIcon: () => (/* binding */ CircleIcon),\n/* harmony export */   ClientStatus: () => (/* binding */ ClientStatus),\n/* harmony export */   ConnectButton: () => (/* binding */ ConnectButton),\n/* harmony export */   ConnectButtonComponent: () => (/* binding */ ConnectButtonComponent),\n/* harmony export */   ConsoleTemplate: () => (/* binding */ ConsoleTemplate),\n/* harmony export */   ControlBar: () => (/* binding */ ControlBar),\n/* harmony export */   Conversation: () => (/* binding */ Conversation),\n/* harmony export */   CopyText: () => (/* binding */ CopyText),\n/* harmony export */   DataList: () => (/* binding */ DataList),\n/* harmony export */   DropdownMenu: () => (/* binding */ DropdownMenu),\n/* harmony export */   DropdownMenuCheckboxItem: () => (/* binding */ DropdownMenuCheckboxItem),\n/* harmony export */   DropdownMenuContent: () => (/* binding */ DropdownMenuContent),\n/* harmony export */   DropdownMenuGroup: () => (/* binding */ DropdownMenuGroup),\n/* harmony export */   DropdownMenuItem: () => (/* binding */ DropdownMenuItem),\n/* harmony export */   DropdownMenuLabel: () => (/* binding */ DropdownMenuLabel),\n/* harmony export */   DropdownMenuPortal: () => (/* binding */ DropdownMenuPortal),\n/* harmony export */   DropdownMenuRadioGroup: () => (/* binding */ DropdownMenuRadioGroup),\n/* harmony export */   DropdownMenuRadioItem: () => (/* binding */ DropdownMenuRadioItem),\n/* harmony export */   DropdownMenuSeparator: () => (/* binding */ DropdownMenuSeparator),\n/* harmony export */   DropdownMenuShortcut: () => (/* binding */ DropdownMenuShortcut),\n/* harmony export */   DropdownMenuSub: () => (/* binding */ DropdownMenuSub),\n/* harmony export */   DropdownMenuSubContent: () => (/* binding */ DropdownMenuSubContent),\n/* harmony export */   DropdownMenuSubTrigger: () => (/* binding */ DropdownMenuSubTrigger),\n/* harmony export */   DropdownMenuTrigger: () => (/* binding */ DropdownMenuTrigger),\n/* harmony export */   EllipsisIcon: () => (/* binding */ EllipsisIcon),\n/* harmony export */   EllipsisVerticalIcon: () => (/* binding */ EllipsisVerticalIcon),\n/* harmony export */   ErrorCard: () => (/* binding */ ErrorCard),\n/* harmony export */   FullScreenContainer: () => (/* binding */ FullScreenContainer),\n/* harmony export */   FunnelIcon: () => (/* binding */ FunnelIcon),\n/* harmony export */   InfoIcon: () => (/* binding */ InfoIcon),\n/* harmony export */   Input: () => (/* binding */ Input),\n/* harmony export */   LayoutSection: () => (/* binding */ LayoutSection),\n/* harmony export */   LineChartIcon: () => (/* binding */ LineChartIcon),\n/* harmony export */   LoaderIcon: () => (/* binding */ LoaderIcon),\n/* harmony export */   LoaderSpinner: () => (/* binding */ LoaderSpinner),\n/* harmony export */   LogoutIcon: () => (/* binding */ LogoutIcon),\n/* harmony export */   MessagesSquareIcon: () => (/* binding */ MessagesSquareIcon),\n/* harmony export */   MicIcon: () => (/* binding */ MicIcon),\n/* harmony export */   MicOffIcon: () => (/* binding */ MicOffIcon),\n/* harmony export */   MoonIcon: () => (/* binding */ MoonIcon),\n/* harmony export */   Panel: () => (/* binding */ Panel$1),\n/* harmony export */   PanelActions: () => (/* binding */ PanelActions),\n/* harmony export */   PanelContent: () => (/* binding */ PanelContent),\n/* harmony export */   PanelFooter: () => (/* binding */ PanelFooter),\n/* harmony export */   PanelHeader: () => (/* binding */ PanelHeader),\n/* harmony export */   PanelTitle: () => (/* binding */ PanelTitle),\n/* harmony export */   PhoneCallEndIcon: () => (/* binding */ PhoneCallEndIcon),\n/* harmony export */   PhoneCallIcon: () => (/* binding */ PhoneCallIcon),\n/* harmony export */   PipecatLogo: () => (/* binding */ PipecatLogo),\n/* harmony export */   Popover: () => (/* binding */ Popover),\n/* harmony export */   PopoverAnchor: () => (/* binding */ PopoverAnchor),\n/* harmony export */   PopoverContent: () => (/* binding */ PopoverContent),\n/* harmony export */   PopoverTrigger: () => (/* binding */ PopoverTrigger),\n/* harmony export */   ResizableHandle: () => (/* binding */ ResizableHandle),\n/* harmony export */   ResizablePanel: () => (/* binding */ ResizablePanel),\n/* harmony export */   ResizablePanelGroup: () => (/* binding */ ResizablePanelGroup),\n/* harmony export */   Select: () => (/* binding */ Select),\n/* harmony export */   SelectChevronIcon: () => (/* binding */ SelectChevronIcon),\n/* harmony export */   SelectContent: () => (/* binding */ SelectContent),\n/* harmony export */   SelectGroup: () => (/* binding */ SelectGroup),\n/* harmony export */   SelectGuide: () => (/* binding */ SelectGuide),\n/* harmony export */   SelectItem: () => (/* binding */ SelectItem),\n/* harmony export */   SelectScrollDownButton: () => (/* binding */ SelectScrollDownButton),\n/* harmony export */   SelectScrollUpButton: () => (/* binding */ SelectScrollUpButton),\n/* harmony export */   SelectSeparator: () => (/* binding */ SelectSeparator),\n/* harmony export */   SelectTrigger: () => (/* binding */ SelectTrigger),\n/* harmony export */   SelectValue: () => (/* binding */ SelectValue),\n/* harmony export */   SendIcon: () => (/* binding */ SendIcon),\n/* harmony export */   SessionInfo: () => (/* binding */ SessionInfo),\n/* harmony export */   SunIcon: () => (/* binding */ SunIcon),\n/* harmony export */   Tabs: () => (/* binding */ Tabs),\n/* harmony export */   TabsContent: () => (/* binding */ TabsContent),\n/* harmony export */   TabsList: () => (/* binding */ TabsList),\n/* harmony export */   TabsTrigger: () => (/* binding */ TabsTrigger),\n/* harmony export */   ThemeModeToggle: () => (/* binding */ ThemeModeToggle),\n/* harmony export */   ThemeProvider: () => (/* binding */ ThemeProvider),\n/* harmony export */   Thinking: () => (/* binding */ Thinking),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TooltipContent: () => (/* binding */ TooltipContent),\n/* harmony export */   TooltipProvider: () => (/* binding */ TooltipProvider),\n/* harmony export */   TooltipTrigger: () => (/* binding */ TooltipTrigger),\n/* harmony export */   TranscriptOverlay: () => (/* binding */ TranscriptOverlay),\n/* harmony export */   TranscriptOverlayComponent: () => (/* binding */ TranscriptOverlayComponent),\n/* harmony export */   TranscriptOverlayPartComponent: () => (/* binding */ TranscriptOverlayPartComponent),\n/* harmony export */   UserAudioComponent: () => (/* binding */ UserAudioComponent),\n/* harmony export */   UserAudioControl: () => (/* binding */ UserAudioControl),\n/* harmony export */   UserVideoComponent: () => (/* binding */ UserVideoComponent),\n/* harmony export */   UserVideoControl: () => (/* binding */ UserVideoControl),\n/* harmony export */   VideoIcon: () => (/* binding */ VideoIcon),\n/* harmony export */   VideoOffIcon: () => (/* binding */ VideoOffIcon),\n/* harmony export */   VoiceVisualizer: () => (/* binding */ VoiceVisualizer),\n/* harmony export */   VolumeIcon: () => (/* binding */ VolumeIcon),\n/* harmony export */   VolumeOffIcon: () => (/* binding */ VolumeOffIcon),\n/* harmony export */   XIcon: () => (/* binding */ XIcon)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pipecat-ai/client-react */ \"(app-pages-browser)/../../node_modules/@pipecat-ai/client-react/dist/index.module.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Metrics-B9xaddk1.js */ \"(app-pages-browser)/../../dist/Metrics-B9xaddk1.js\");\n/* harmony import */ var _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pipecat-ai/client-js */ \"(app-pages-browser)/../../node_modules/@pipecat-ai/client-js/dist/index.module.js\");\n/* harmony import */ var _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @daily-co/daily-js */ \"(app-pages-browser)/../../node_modules/@daily-co/daily-js/dist/daily-esm.js\");\n/* harmony import */ var _pipecat_ai_daily_transport__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @pipecat-ai/daily-transport */ \"(app-pages-browser)/../../node_modules/@pipecat-ai/daily-transport/dist/index.module.js\");\n/* harmony import */ var _pipecat_ai_small_webrtc_transport__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @pipecat-ai/small-webrtc-transport */ \"(app-pages-browser)/../../node_modules/@pipecat-ai/small-webrtc-transport/dist/index.module.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$(), _s29 = $RefreshSig$(), _s30 = $RefreshSig$(), _s31 = $RefreshSig$(), _s32 = $RefreshSig$(), _s33 = $RefreshSig$(), _s34 = $RefreshSig$(), _s35 = $RefreshSig$(), _s36 = $RefreshSig$(), _s37 = $RefreshSig$(), _s38 = $RefreshSig$(), _s39 = $RefreshSig$(), _s40 = $RefreshSig$(), _s41 = $RefreshSig$(), _s42 = $RefreshSig$(), _s43 = $RefreshSig$(), _s44 = $RefreshSig$(), _s45 = $RefreshSig$(), _s46 = $RefreshSig$(), _s47 = $RefreshSig$(), _s48 = $RefreshSig$(), _s49 = $RefreshSig$(), _s50 = $RefreshSig$(), _s51 = $RefreshSig$(), _s52 = $RefreshSig$(), _s53 = $RefreshSig$(), _s54 = $RefreshSig$(), _s55 = $RefreshSig$(), _s56 = $RefreshSig$(), _s57 = $RefreshSig$(), _s58 = $RefreshSig$(), _s59 = $RefreshSig$(), _s60 = $RefreshSig$(), _s61 = $RefreshSig$(), _s62 = $RefreshSig$(), _s63 = $RefreshSig$(), _s64 = $RefreshSig$(), _s65 = $RefreshSig$(), _s66 = $RefreshSig$(), _s67 = $RefreshSig$(), _s68 = $RefreshSig$(), _s69 = $RefreshSig$(), _s70 = $RefreshSig$(), _s71 = $RefreshSig$(), _s72 = $RefreshSig$(), _s73 = $RefreshSig$(), _s74 = $RefreshSig$(), _s75 = $RefreshSig$(), _s76 = $RefreshSig$(), _s77 = $RefreshSig$(), _s78 = $RefreshSig$(), _s79 = $RefreshSig$(), _s80 = $RefreshSig$(), _s81 = $RefreshSig$(), _s82 = $RefreshSig$(), _s83 = $RefreshSig$(), _s84 = $RefreshSig$(), _s85 = $RefreshSig$(), _s86 = $RefreshSig$(), _s87 = $RefreshSig$(), _s88 = $RefreshSig$(), _s89 = $RefreshSig$(), _s90 = $RefreshSig$(), _s91 = $RefreshSig$(), _s92 = $RefreshSig$(), _s93 = $RefreshSig$(), _s94 = $RefreshSig$(), _s95 = $RefreshSig$(), _s96 = $RefreshSig$(), _s97 = $RefreshSig$(), _s98 = $RefreshSig$(), _s99 = $RefreshSig$(), _s100 = $RefreshSig$(), _s101 = $RefreshSig$(), _s102 = $RefreshSig$(), _s103 = $RefreshSig$(), _s104 = $RefreshSig$(), _s105 = $RefreshSig$(), _s106 = $RefreshSig$(), _s107 = $RefreshSig$(), _s108 = $RefreshSig$(), _s109 = $RefreshSig$(), _s110 = $RefreshSig$(), _s111 = $RefreshSig$(), _s112 = $RefreshSig$(), _s113 = $RefreshSig$(), _s114 = $RefreshSig$(), _s115 = $RefreshSig$(), _s116 = $RefreshSig$(), _s117 = $RefreshSig$(), _s118 = $RefreshSig$(), _s119 = $RefreshSig$(), _s120 = $RefreshSig$(), _s121 = $RefreshSig$(), _s122 = $RefreshSig$(), _s123 = $RefreshSig$(), _s124 = $RefreshSig$(), _s125 = $RefreshSig$(), _s126 = $RefreshSig$(), _s127 = $RefreshSig$(), _s128 = $RefreshSig$(), _s129 = $RefreshSig$(), _s130 = $RefreshSig$(), _s131 = $RefreshSig$(), _s132 = $RefreshSig$(), _s133 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\nfunction clamp$1(value1, param) {\n    let [min2, max2] = param;\n    return Math.min(max2, Math.max(min2, value1));\n}\nfunction composeEventHandlers(originalEventHandler, ourEventHandler) {\n    let { checkForDefaultPrevented = true } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return function handleEvent(event) {\n        originalEventHandler == null ? void 0 : originalEventHandler(event);\n        if (checkForDefaultPrevented === false || !event.defaultPrevented) {\n            return ourEventHandler == null ? void 0 : ourEventHandler(event);\n        }\n    };\n}\nfunction createContextScope(scopeName) {\n    let createContextScopeDeps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    let defaultContexts = [];\n    function createContext3(rootComponentName, defaultContext) {\n        var _s = $RefreshSig$(), _s1 = $RefreshSig$();\n        const BaseContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(defaultContext);\n        const index2 = defaultContexts.length;\n        defaultContexts = [\n            ...defaultContexts,\n            defaultContext\n        ];\n        const Provider2 = (props2)=>{\n            _s();\n            var _a;\n            const { scope, children, ...context } = props2;\n            const Context = ((_a = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a[index2]) || BaseContext;\n            const value1 = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n                \"createContextScope.createContext3.Provider2.useMemo[value]\": ()=>context\n            }[\"createContextScope.createContext3.Provider2.useMemo[value]\"], Object.values(context));\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Context.Provider, {\n                value: value1,\n                children\n            });\n        };\n        _s(Provider2, \"tPauEVZ6EeuERV9ttvKTwQ7++Gw=\");\n        Provider2.displayName = rootComponentName + \"Provider\";\n        function useContext2(consumerName, scope) {\n            _s1();\n            var _a;\n            const Context = ((_a = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a[index2]) || BaseContext;\n            const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Context);\n            if (context) return context;\n            if (defaultContext !== void 0) return defaultContext;\n            throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n        }\n        _s1(useContext2, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n        return [\n            Provider2,\n            useContext2\n        ];\n    }\n    const createScope = ()=>{\n        var _s = $RefreshSig$();\n        const scopeContexts = defaultContexts.map((defaultContext)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(defaultContext);\n        });\n        return _s(function useScope(scope) {\n            _s();\n            const contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;\n            return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n                \"createContextScope.createScope.useScope.useMemo\": ()=>({\n                        [\"__scope\".concat(scopeName)]: {\n                            ...scope,\n                            [scopeName]: contexts\n                        }\n                    })\n            }[\"createContextScope.createScope.useScope.useMemo\"], [\n                scope,\n                contexts\n            ]);\n        }, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n    };\n    createScope.scopeName = scopeName;\n    return [\n        createContext3,\n        composeContextScopes(createScope, ...createContextScopeDeps)\n    ];\n}\nfunction composeContextScopes() {\n    for(var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++){\n        scopes[_key] = arguments[_key];\n    }\n    const baseScope = scopes[0];\n    if (scopes.length === 1) return baseScope;\n    const createScope = ()=>{\n        var _s = $RefreshSig$();\n        const scopeHooks = scopes.map((createScope2)=>({\n                useScope: createScope2(),\n                scopeName: createScope2.scopeName\n            }));\n        return _s(function useComposedScopes(overrideScopes) {\n            _s();\n            var _s1 = $RefreshSig$();\n            const nextScopes = scopeHooks.reduce(_s1((nextScopes2, param)=>{\n                let { useScope, scopeName } = param;\n                _s1();\n                const scopeProps = useScope(overrideScopes);\n                const currentScope = scopeProps[\"__scope\".concat(scopeName)];\n                return {\n                    ...nextScopes2,\n                    ...currentScope\n                };\n            }, \"u4SEl84URpjHX6Z2NY+fK/APDPQ=\", true), {});\n            return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n                \"composeContextScopes.createScope.useComposedScopes.useMemo\": ()=>({\n                        [\"__scope\".concat(baseScope.scopeName)]: nextScopes\n                    })\n            }[\"composeContextScopes.createScope.useComposedScopes.useMemo\"], [\n                nextScopes\n            ]);\n        }, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n    };\n    createScope.scopeName = baseScope.scopeName;\n    return createScope;\n}\nfunction setRef(ref, value1) {\n    if (typeof ref === \"function\") {\n        return ref(value1);\n    } else if (ref !== null && ref !== void 0) {\n        ref.current = value1;\n    }\n}\nfunction composeRefs() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    return (node)=>{\n        let hasCleanup = false;\n        const cleanups = refs.map((ref)=>{\n            const cleanup = setRef(ref, node);\n            if (!hasCleanup && typeof cleanup == \"function\") {\n                hasCleanup = true;\n            }\n            return cleanup;\n        });\n        if (hasCleanup) {\n            return ()=>{\n                for(let i = 0; i < cleanups.length; i++){\n                    const cleanup = cleanups[i];\n                    if (typeof cleanup == \"function\") {\n                        cleanup();\n                    } else {\n                        setRef(refs[i], null);\n                    }\n                }\n            };\n        }\n    };\n}\nfunction useComposedRefs() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    _s();\n    return react__WEBPACK_IMPORTED_MODULE_1__.useCallback(composeRefs(...refs), refs);\n}\n_s(useComposedRefs, \"epj4qY15NHsef74wNqHIp5fdZmg=\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlot(ownerName) {\n    const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);\n    const Slot2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props2, forwardedRef)=>{\n        const { children, ...slotProps } = props2;\n        const childrenArray = react__WEBPACK_IMPORTED_MODULE_1__.Children.toArray(children);\n        const slottable = childrenArray.find(isSlottable);\n        if (slottable) {\n            const newElement = slottable.props.children;\n            const newChildren = childrenArray.map((child)=>{\n                if (child === slottable) {\n                    if (react__WEBPACK_IMPORTED_MODULE_1__.Children.count(newElement) > 1) return react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null);\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(newElement) ? newElement.props.children : null;\n                } else {\n                    return child;\n                }\n            });\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SlotClone, {\n                ...slotProps,\n                ref: forwardedRef,\n                children: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(newElement) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(newElement, void 0, newChildren) : null\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SlotClone, {\n            ...slotProps,\n            ref: forwardedRef,\n            children\n        });\n    });\n    Slot2.displayName = \"\".concat(ownerName, \".Slot\");\n    return Slot2;\n}\nvar Slot$3 = /* @__PURE__ */ createSlot(\"Slot\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlotClone(ownerName) {\n    const SlotClone = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props2, forwardedRef)=>{\n        const { children, ...slotProps } = props2;\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(children)) {\n            const childrenRef = getElementRef$1(children);\n            const props22 = mergeProps(slotProps, children.props);\n            if (children.type !== react__WEBPACK_IMPORTED_MODULE_1__.Fragment) {\n                props22.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(children, props22);\n        }\n        return react__WEBPACK_IMPORTED_MODULE_1__.Children.count(children) > 1 ? react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null) : null;\n    });\n    SlotClone.displayName = \"\".concat(ownerName, \".SlotClone\");\n    return SlotClone;\n}\nvar SLOTTABLE_IDENTIFIER = Symbol(\"radix.slottable\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlottable(ownerName) {\n    const Slottable2 = (param)=>{\n        let { children } = param;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children\n        });\n    };\n    Slottable2.displayName = \"\".concat(ownerName, \".Slottable\");\n    Slottable2.__radixId = SLOTTABLE_IDENTIFIER;\n    return Slottable2;\n}\nfunction isSlottable(child) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(child) && typeof child.type === \"function\" && \"__radixId\" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;\n}\nfunction mergeProps(slotProps, childProps) {\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            if (slotPropValue && childPropValue) {\n                overrideProps[propName] = function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    const result = childPropValue(...args);\n                    slotPropValue(...args);\n                    return result;\n                };\n            } else if (slotPropValue) {\n                overrideProps[propName] = slotPropValue;\n            }\n        } else if (propName === \"style\") {\n            overrideProps[propName] = {\n                ...slotPropValue,\n                ...childPropValue\n            };\n        } else if (propName === \"className\") {\n            overrideProps[propName] = [\n                slotPropValue,\n                childPropValue\n            ].filter(Boolean).join(\" \");\n        }\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nfunction getElementRef$1(element) {\n    var _a, _b;\n    let getter = (_a = Object.getOwnPropertyDescriptor(element.props, \"ref\")) == null ? void 0 : _a.get;\n    let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.ref;\n    }\n    getter = (_b = Object.getOwnPropertyDescriptor(element, \"ref\")) == null ? void 0 : _b.get;\n    mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.props.ref;\n    }\n    return element.props.ref || element.ref;\n}\nfunction createCollection(name) {\n    var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n    const PROVIDER_NAME2 = name + \"CollectionProvider\";\n    const [createCollectionContext, createCollectionScope2] = createContextScope(PROVIDER_NAME2);\n    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME2, {\n        collectionRef: {\n            current: null\n        },\n        itemMap: /* @__PURE__ */ new Map()\n    });\n    const CollectionProvider = (props2)=>{\n        _s();\n        const { scope, children } = props2;\n        const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n        const itemMap = react__WEBPACK_IMPORTED_MODULE_1__.useRef(/* @__PURE__ */ new Map()).current;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CollectionProviderImpl, {\n            scope,\n            itemMap,\n            collectionRef: ref,\n            children\n        });\n    };\n    _s(CollectionProvider, \"i9R1RY532Tsw7syarXwOonBpwXM=\");\n    CollectionProvider.displayName = PROVIDER_NAME2;\n    const COLLECTION_SLOT_NAME = name + \"CollectionSlot\";\n    const CollectionSlotImpl = /* @__PURE__ */ createSlot(COLLECTION_SLOT_NAME);\n    const CollectionSlot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s1((props2, forwardedRef)=>{\n        _s1();\n        const { scope, children } = props2;\n        const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n        const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CollectionSlotImpl, {\n            ref: composedRefs,\n            children\n        });\n    }, \"5JQ4uy78XLW8WM+YuDpNgF/JIVs=\", false, function() {\n        return [\n            useCollectionContext,\n            useComposedRefs\n        ];\n    }));\n    CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n    const ITEM_SLOT_NAME = name + \"CollectionItemSlot\";\n    const ITEM_DATA_ATTR = \"data-radix-collection-item\";\n    const CollectionItemSlotImpl = /* @__PURE__ */ createSlot(ITEM_SLOT_NAME);\n    const CollectionItemSlot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s2((props2, forwardedRef)=>{\n        _s2();\n        const { scope, children, ...itemData } = props2;\n        const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n        const composedRefs = useComposedRefs(forwardedRef, ref);\n        const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n            \"createCollection.CollectionItemSlot.useEffect\": ()=>{\n                context.itemMap.set(ref, {\n                    ref,\n                    ...itemData\n                });\n                return ({\n                    \"createCollection.CollectionItemSlot.useEffect\": ()=>void context.itemMap.delete(ref)\n                })[\"createCollection.CollectionItemSlot.useEffect\"];\n            }\n        }[\"createCollection.CollectionItemSlot.useEffect\"]);\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CollectionItemSlotImpl, {\n            ...{\n                [ITEM_DATA_ATTR]: \"\"\n            },\n            ref: composedRefs,\n            children\n        });\n    }, \"eauD3DgWC2VdU7voCXLDR4PeA+k=\", false, function() {\n        return [\n            useComposedRefs,\n            useCollectionContext\n        ];\n    }));\n    CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n    function useCollection2(scope) {\n        _s3();\n        const context = useCollectionContext(name + \"CollectionConsumer\", scope);\n        const getItems = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"createCollection.useCollection2.useCallback[getItems]\": ()=>{\n                const collectionNode = context.collectionRef.current;\n                if (!collectionNode) return [];\n                const orderedNodes = Array.from(collectionNode.querySelectorAll(\"[\".concat(ITEM_DATA_ATTR, \"]\")));\n                const items = Array.from(context.itemMap.values());\n                const orderedItems = items.sort({\n                    \"createCollection.useCollection2.useCallback[getItems].orderedItems\": (a, b)=>orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)\n                }[\"createCollection.useCollection2.useCallback[getItems].orderedItems\"]);\n                return orderedItems;\n            }\n        }[\"createCollection.useCollection2.useCallback[getItems]\"], [\n            context.collectionRef,\n            context.itemMap\n        ]);\n        return getItems;\n    }\n    _s3(useCollection2, \"jCyvzZFUzVDqeEjq0R8vi6mUa78=\", false, function() {\n        return [\n            useCollectionContext\n        ];\n    });\n    return [\n        {\n            Provider: CollectionProvider,\n            Slot: CollectionSlot,\n            ItemSlot: CollectionItemSlot\n        },\n        useCollection2,\n        createCollectionScope2\n    ];\n}\nvar DirectionContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction useDirection(localDir) {\n    _s1();\n    const globalDir = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DirectionContext);\n    return localDir || globalDir || \"ltr\";\n}\n_s1(useDirection, \"Dyp5LNtc3jInRztlo7OKcE6vbIw=\");\nvar NODES = [\n    \"a\",\n    \"button\",\n    \"div\",\n    \"form\",\n    \"h2\",\n    \"h3\",\n    \"img\",\n    \"input\",\n    \"label\",\n    \"li\",\n    \"nav\",\n    \"ol\",\n    \"p\",\n    \"select\",\n    \"span\",\n    \"svg\",\n    \"ul\"\n];\nvar Primitive = NODES.reduce(_c = (primitive, node)=>{\n    const Slot2 = /* @__PURE__ */ createSlot(\"Primitive.\".concat(node));\n    const Node2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props2, forwardedRef)=>{\n        const { asChild, ...primitiveProps } = props2;\n        const Comp = asChild ? Slot2 : node;\n        if (true) {\n            window[Symbol.for(\"radix-ui\")] = true;\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Comp, {\n            ...primitiveProps,\n            ref: forwardedRef\n        });\n    });\n    Node2.displayName = \"Primitive.\".concat(node);\n    return {\n        ...primitive,\n        [node]: Node2\n    };\n}, {});\n_c1 = Primitive;\nfunction dispatchDiscreteCustomEvent(target, event) {\n    if (target) react_dom__WEBPACK_IMPORTED_MODULE_3__.flushSync(()=>target.dispatchEvent(event));\n}\nfunction useCallbackRef$1(callback) {\n    _s2();\n    const callbackRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(callback);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useCallbackRef$1.useEffect\": ()=>{\n            callbackRef.current = callback;\n        }\n    }[\"useCallbackRef$1.useEffect\"]);\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useCallbackRef$1.useMemo\": ()=>({\n                \"useCallbackRef$1.useMemo\": function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    var _a;\n                    return (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef, ...args);\n                }\n            })[\"useCallbackRef$1.useMemo\"]\n    }[\"useCallbackRef$1.useMemo\"], []);\n}\n_s2(useCallbackRef$1, \"SmGaH/nKwK47PDNwL1mpt0Q/3Os=\");\nfunction useEscapeKeydown(onEscapeKeyDownProp) {\n    let ownerDocument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalThis == null ? void 0 : globalThis.document;\n    _s3();\n    const onEscapeKeyDown = useCallbackRef$1(onEscapeKeyDownProp);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useEscapeKeydown.useEffect\": ()=>{\n            const handleKeyDown = {\n                \"useEscapeKeydown.useEffect.handleKeyDown\": (event)=>{\n                    if (event.key === \"Escape\") {\n                        onEscapeKeyDown(event);\n                    }\n                }\n            }[\"useEscapeKeydown.useEffect.handleKeyDown\"];\n            ownerDocument.addEventListener(\"keydown\", handleKeyDown, {\n                capture: true\n            });\n            return ({\n                \"useEscapeKeydown.useEffect\": ()=>ownerDocument.removeEventListener(\"keydown\", handleKeyDown, {\n                        capture: true\n                    })\n            })[\"useEscapeKeydown.useEffect\"];\n        }\n    }[\"useEscapeKeydown.useEffect\"], [\n        onEscapeKeyDown,\n        ownerDocument\n    ]);\n}\n_s3(useEscapeKeydown, \"uVS7Wu/JfinBPWVPV6Sr6Qzi+KI=\", false, function() {\n    return [\n        useCallbackRef$1\n    ];\n});\nvar DISMISSABLE_LAYER_NAME = \"DismissableLayer\";\nvar CONTEXT_UPDATE = \"dismissableLayer.update\";\nvar POINTER_DOWN_OUTSIDE = \"dismissableLayer.pointerDownOutside\";\nvar FOCUS_OUTSIDE = \"dismissableLayer.focusOutside\";\nvar originalBodyPointerEvents;\nvar DismissableLayerContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    layers: /* @__PURE__ */ new Set(),\n    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),\n    branches: /* @__PURE__ */ new Set()\n});\nvar DismissableLayer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s4((props2, forwardedRef)=>{\n    _s4();\n    const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props2;\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DismissableLayerContext);\n    const [node, setNode] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    var _ref;\n    const ownerDocument = (_ref = node == null ? void 0 : node.ownerDocument) !== null && _ref !== void 0 ? _ref : globalThis == null ? void 0 : globalThis.document;\n    const [, force] = react__WEBPACK_IMPORTED_MODULE_1__.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"DismissableLayer.useComposedRefs[composedRefs]\": (node2)=>setNode(node2)\n    }[\"DismissableLayer.useComposedRefs[composedRefs]\"]);\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [\n        ...context.layersWithOutsidePointerEventsDisabled\n    ].slice(-1);\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);\n    const index2 = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;\n    const pointerDownOutside = usePointerDownOutside({\n        \"DismissableLayer.usePointerDownOutside[pointerDownOutside]\": (event)=>{\n            const target = event.target;\n            const isPointerDownOnBranch = [\n                ...context.branches\n            ].some({\n                \"DismissableLayer.usePointerDownOutside[pointerDownOutside].isPointerDownOnBranch\": (branch)=>branch.contains(target)\n            }[\"DismissableLayer.usePointerDownOutside[pointerDownOutside].isPointerDownOnBranch\"]);\n            if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n            onPointerDownOutside == null ? void 0 : onPointerDownOutside(event);\n            onInteractOutside == null ? void 0 : onInteractOutside(event);\n            if (!event.defaultPrevented) onDismiss == null ? void 0 : onDismiss();\n        }\n    }[\"DismissableLayer.usePointerDownOutside[pointerDownOutside]\"], ownerDocument);\n    const focusOutside = useFocusOutside({\n        \"DismissableLayer.useFocusOutside[focusOutside]\": (event)=>{\n            const target = event.target;\n            const isFocusInBranch = [\n                ...context.branches\n            ].some({\n                \"DismissableLayer.useFocusOutside[focusOutside].isFocusInBranch\": (branch)=>branch.contains(target)\n            }[\"DismissableLayer.useFocusOutside[focusOutside].isFocusInBranch\"]);\n            if (isFocusInBranch) return;\n            onFocusOutside == null ? void 0 : onFocusOutside(event);\n            onInteractOutside == null ? void 0 : onInteractOutside(event);\n            if (!event.defaultPrevented) onDismiss == null ? void 0 : onDismiss();\n        }\n    }[\"DismissableLayer.useFocusOutside[focusOutside]\"], ownerDocument);\n    useEscapeKeydown({\n        \"DismissableLayer.useEscapeKeydown\": (event)=>{\n            const isHighestLayer = index2 === context.layers.size - 1;\n            if (!isHighestLayer) return;\n            onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event);\n            if (!event.defaultPrevented && onDismiss) {\n                event.preventDefault();\n                onDismiss();\n            }\n        }\n    }[\"DismissableLayer.useEscapeKeydown\"], ownerDocument);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayer.useEffect\": ()=>{\n            if (!node) return;\n            if (disableOutsidePointerEvents) {\n                if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n                    originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n                    ownerDocument.body.style.pointerEvents = \"none\";\n                }\n                context.layersWithOutsidePointerEventsDisabled.add(node);\n            }\n            context.layers.add(node);\n            dispatchUpdate();\n            return ({\n                \"DismissableLayer.useEffect\": ()=>{\n                    if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {\n                        ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n                    }\n                }\n            })[\"DismissableLayer.useEffect\"];\n        }\n    }[\"DismissableLayer.useEffect\"], [\n        node,\n        ownerDocument,\n        disableOutsidePointerEvents,\n        context\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayer.useEffect\": ()=>{\n            return ({\n                \"DismissableLayer.useEffect\": ()=>{\n                    if (!node) return;\n                    context.layers.delete(node);\n                    context.layersWithOutsidePointerEventsDisabled.delete(node);\n                    dispatchUpdate();\n                }\n            })[\"DismissableLayer.useEffect\"];\n        }\n    }[\"DismissableLayer.useEffect\"], [\n        node,\n        context\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayer.useEffect\": ()=>{\n            const handleUpdate = {\n                \"DismissableLayer.useEffect.handleUpdate\": ()=>force({})\n            }[\"DismissableLayer.useEffect.handleUpdate\"];\n            document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n            return ({\n                \"DismissableLayer.useEffect\": ()=>document.removeEventListener(CONTEXT_UPDATE, handleUpdate)\n            })[\"DismissableLayer.useEffect\"];\n        }\n    }[\"DismissableLayer.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        ...layerProps,\n        ref: composedRefs,\n        style: {\n            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? \"auto\" : \"none\" : void 0,\n            ...props2.style\n        },\n        onFocusCapture: composeEventHandlers(props2.onFocusCapture, focusOutside.onFocusCapture),\n        onBlurCapture: composeEventHandlers(props2.onBlurCapture, focusOutside.onBlurCapture),\n        onPointerDownCapture: composeEventHandlers(props2.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)\n    });\n}, \"Cv1Mp9NkKD7dAs9oYGx4QOBfHI8=\", false, function() {\n    return [\n        useComposedRefs,\n        usePointerDownOutside,\n        useFocusOutside,\n        useEscapeKeydown\n    ];\n}));\n_c2 = DismissableLayer;\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\nvar BRANCH_NAME = \"DismissableLayerBranch\";\nvar DismissableLayerBranch = /*#__PURE__*/ _s5(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c3 = _s5((props2, forwardedRef)=>{\n    _s5();\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DismissableLayerContext);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayerBranch.useEffect\": ()=>{\n            const node = ref.current;\n            if (node) {\n                context.branches.add(node);\n                return ({\n                    \"DismissableLayerBranch.useEffect\": ()=>{\n                        context.branches.delete(node);\n                    }\n                })[\"DismissableLayerBranch.useEffect\"];\n            }\n        }\n    }[\"DismissableLayerBranch.useEffect\"], [\n        context.branches\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        ...props2,\n        ref: composedRefs\n    });\n}, \"GBdJ+COKIgE+yfoxVYovlSfvJLw=\", false, function() {\n    return [\n        useComposedRefs\n    ];\n})), \"GBdJ+COKIgE+yfoxVYovlSfvJLw=\", false, function() {\n    return [\n        useComposedRefs\n    ];\n});\n_c4 = DismissableLayerBranch;\nDismissableLayerBranch.displayName = BRANCH_NAME;\nfunction usePointerDownOutside(onPointerDownOutside) {\n    let ownerDocument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalThis == null ? void 0 : globalThis.document;\n    _s6();\n    const handlePointerDownOutside = useCallbackRef$1(onPointerDownOutside);\n    const isPointerInsideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const handleClickRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef({\n        \"usePointerDownOutside.useRef[handleClickRef]\": ()=>{}\n    }[\"usePointerDownOutside.useRef[handleClickRef]\"]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"usePointerDownOutside.useEffect\": ()=>{\n            const handlePointerDown2 = {\n                \"usePointerDownOutside.useEffect.handlePointerDown2\": (event)=>{\n                    if (event.target && !isPointerInsideReactTreeRef.current) {\n                        let handleAndDispatchPointerDownOutsideEvent2 = {\n                            \"usePointerDownOutside.useEffect.handlePointerDown2.handleAndDispatchPointerDownOutsideEvent2\": function() {\n                                handleAndDispatchCustomEvent(POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {\n                                    discrete: true\n                                });\n                            }\n                        }[\"usePointerDownOutside.useEffect.handlePointerDown2.handleAndDispatchPointerDownOutsideEvent2\"];\n                        const eventDetail = {\n                            originalEvent: event\n                        };\n                        if (event.pointerType === \"touch\") {\n                            ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n                            handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;\n                            ownerDocument.addEventListener(\"click\", handleClickRef.current, {\n                                once: true\n                            });\n                        } else {\n                            handleAndDispatchPointerDownOutsideEvent2();\n                        }\n                    } else {\n                        ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n                    }\n                    isPointerInsideReactTreeRef.current = false;\n                }\n            }[\"usePointerDownOutside.useEffect.handlePointerDown2\"];\n            const timerId = window.setTimeout({\n                \"usePointerDownOutside.useEffect.timerId\": ()=>{\n                    ownerDocument.addEventListener(\"pointerdown\", handlePointerDown2);\n                }\n            }[\"usePointerDownOutside.useEffect.timerId\"], 0);\n            return ({\n                \"usePointerDownOutside.useEffect\": ()=>{\n                    window.clearTimeout(timerId);\n                    ownerDocument.removeEventListener(\"pointerdown\", handlePointerDown2);\n                    ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n                }\n            })[\"usePointerDownOutside.useEffect\"];\n        }\n    }[\"usePointerDownOutside.useEffect\"], [\n        ownerDocument,\n        handlePointerDownOutside\n    ]);\n    return {\n        // ensures we check React component tree (not just DOM tree)\n        onPointerDownCapture: ()=>isPointerInsideReactTreeRef.current = true\n    };\n}\n_s6(usePointerDownOutside, \"xQqB3NOzk4YD/67FKPzIN70G07Y=\", false, function() {\n    return [\n        useCallbackRef$1\n    ];\n});\nfunction useFocusOutside(onFocusOutside) {\n    let ownerDocument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : globalThis == null ? void 0 : globalThis.document;\n    _s7();\n    const handleFocusOutside = useCallbackRef$1(onFocusOutside);\n    const isFocusInsideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useFocusOutside.useEffect\": ()=>{\n            const handleFocus = {\n                \"useFocusOutside.useEffect.handleFocus\": (event)=>{\n                    if (event.target && !isFocusInsideReactTreeRef.current) {\n                        const eventDetail = {\n                            originalEvent: event\n                        };\n                        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n                            discrete: false\n                        });\n                    }\n                }\n            }[\"useFocusOutside.useEffect.handleFocus\"];\n            ownerDocument.addEventListener(\"focusin\", handleFocus);\n            return ({\n                \"useFocusOutside.useEffect\": ()=>ownerDocument.removeEventListener(\"focusin\", handleFocus)\n            })[\"useFocusOutside.useEffect\"];\n        }\n    }[\"useFocusOutside.useEffect\"], [\n        ownerDocument,\n        handleFocusOutside\n    ]);\n    return {\n        onFocusCapture: ()=>isFocusInsideReactTreeRef.current = true,\n        onBlurCapture: ()=>isFocusInsideReactTreeRef.current = false\n    };\n}\n_s7(useFocusOutside, \"EC4i48o5ehipjVzVA2H6L3+4L8Q=\", false, function() {\n    return [\n        useCallbackRef$1\n    ];\n});\nfunction dispatchUpdate() {\n    const event = new CustomEvent(CONTEXT_UPDATE);\n    document.dispatchEvent(event);\n}\nfunction handleAndDispatchCustomEvent(name, handler, detail, param) {\n    let { discrete } = param;\n    const target = detail.originalEvent.target;\n    const event = new CustomEvent(name, {\n        bubbles: false,\n        cancelable: true,\n        detail\n    });\n    if (handler) target.addEventListener(name, handler, {\n        once: true\n    });\n    if (discrete) {\n        dispatchDiscreteCustomEvent(target, event);\n    } else {\n        target.dispatchEvent(event);\n    }\n}\nvar count$1 = 0;\nfunction useFocusGuards() {\n    _s8();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useFocusGuards.useEffect\": ()=>{\n            const edgeGuards = document.querySelectorAll(\"[data-radix-focus-guard]\");\n            var _edgeGuards_;\n            document.body.insertAdjacentElement(\"afterbegin\", (_edgeGuards_ = edgeGuards[0]) !== null && _edgeGuards_ !== void 0 ? _edgeGuards_ : createFocusGuard());\n            var _edgeGuards_1;\n            document.body.insertAdjacentElement(\"beforeend\", (_edgeGuards_1 = edgeGuards[1]) !== null && _edgeGuards_1 !== void 0 ? _edgeGuards_1 : createFocusGuard());\n            count$1++;\n            return ({\n                \"useFocusGuards.useEffect\": ()=>{\n                    if (count$1 === 1) {\n                        document.querySelectorAll(\"[data-radix-focus-guard]\").forEach({\n                            \"useFocusGuards.useEffect\": (node)=>node.remove()\n                        }[\"useFocusGuards.useEffect\"]);\n                    }\n                    count$1--;\n                }\n            })[\"useFocusGuards.useEffect\"];\n        }\n    }[\"useFocusGuards.useEffect\"], []);\n}\n_s8(useFocusGuards, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nfunction createFocusGuard() {\n    const element = document.createElement(\"span\");\n    element.setAttribute(\"data-radix-focus-guard\", \"\");\n    element.tabIndex = 0;\n    element.style.outline = \"none\";\n    element.style.opacity = \"0\";\n    element.style.position = \"fixed\";\n    element.style.pointerEvents = \"none\";\n    return element;\n}\nvar AUTOFOCUS_ON_MOUNT = \"focusScope.autoFocusOnMount\";\nvar AUTOFOCUS_ON_UNMOUNT = \"focusScope.autoFocusOnUnmount\";\nvar EVENT_OPTIONS$1 = {\n    bubbles: false,\n    cancelable: true\n};\nvar FOCUS_SCOPE_NAME = \"FocusScope\";\nvar FocusScope = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s9((props2, forwardedRef)=>{\n    _s9();\n    const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props2;\n    const [container, setContainer] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const onMountAutoFocus = useCallbackRef$1(onMountAutoFocusProp);\n    const onUnmountAutoFocus = useCallbackRef$1(onUnmountAutoFocusProp);\n    const lastFocusedElementRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"FocusScope.useComposedRefs[composedRefs]\": (node)=>setContainer(node)\n    }[\"FocusScope.useComposedRefs[composedRefs]\"]);\n    const focusScope = react__WEBPACK_IMPORTED_MODULE_1__.useRef({\n        paused: false,\n        pause () {\n            this.paused = true;\n        },\n        resume () {\n            this.paused = false;\n        }\n    }).current;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"FocusScope.useEffect\": ()=>{\n            if (trapped) {\n                let handleFocusIn2 = {\n                    \"FocusScope.useEffect.handleFocusIn2\": function(event) {\n                        if (focusScope.paused || !container) return;\n                        const target = event.target;\n                        if (container.contains(target)) {\n                            lastFocusedElementRef.current = target;\n                        } else {\n                            focus(lastFocusedElementRef.current, {\n                                select: true\n                            });\n                        }\n                    }\n                }[\"FocusScope.useEffect.handleFocusIn2\"], handleFocusOut2 = {\n                    \"FocusScope.useEffect.handleFocusOut2\": function(event) {\n                        if (focusScope.paused || !container) return;\n                        const relatedTarget = event.relatedTarget;\n                        if (relatedTarget === null) return;\n                        if (!container.contains(relatedTarget)) {\n                            focus(lastFocusedElementRef.current, {\n                                select: true\n                            });\n                        }\n                    }\n                }[\"FocusScope.useEffect.handleFocusOut2\"], handleMutations2 = {\n                    \"FocusScope.useEffect.handleMutations2\": function(mutations) {\n                        const focusedElement = document.activeElement;\n                        if (focusedElement !== document.body) return;\n                        for (const mutation of mutations){\n                            if (mutation.removedNodes.length > 0) focus(container);\n                        }\n                    }\n                }[\"FocusScope.useEffect.handleMutations2\"];\n                document.addEventListener(\"focusin\", handleFocusIn2);\n                document.addEventListener(\"focusout\", handleFocusOut2);\n                const mutationObserver = new MutationObserver(handleMutations2);\n                if (container) mutationObserver.observe(container, {\n                    childList: true,\n                    subtree: true\n                });\n                return ({\n                    \"FocusScope.useEffect\": ()=>{\n                        document.removeEventListener(\"focusin\", handleFocusIn2);\n                        document.removeEventListener(\"focusout\", handleFocusOut2);\n                        mutationObserver.disconnect();\n                    }\n                })[\"FocusScope.useEffect\"];\n            }\n        }\n    }[\"FocusScope.useEffect\"], [\n        trapped,\n        container,\n        focusScope.paused\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"FocusScope.useEffect\": ()=>{\n            if (container) {\n                focusScopesStack.add(focusScope);\n                const previouslyFocusedElement = document.activeElement;\n                const hasFocusedCandidate = container.contains(previouslyFocusedElement);\n                if (!hasFocusedCandidate) {\n                    const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS$1);\n                    container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n                    container.dispatchEvent(mountEvent);\n                    if (!mountEvent.defaultPrevented) {\n                        focusFirst$2(removeLinks(getTabbableCandidates(container)), {\n                            select: true\n                        });\n                        if (document.activeElement === previouslyFocusedElement) {\n                            focus(container);\n                        }\n                    }\n                }\n                return ({\n                    \"FocusScope.useEffect\": ()=>{\n                        container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n                        setTimeout({\n                            \"FocusScope.useEffect\": ()=>{\n                                const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS$1);\n                                container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n                                container.dispatchEvent(unmountEvent);\n                                if (!unmountEvent.defaultPrevented) {\n                                    focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {\n                                        select: true\n                                    });\n                                }\n                                container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n                                focusScopesStack.remove(focusScope);\n                            }\n                        }[\"FocusScope.useEffect\"], 0);\n                    }\n                })[\"FocusScope.useEffect\"];\n            }\n        }\n    }[\"FocusScope.useEffect\"], [\n        container,\n        onMountAutoFocus,\n        onUnmountAutoFocus,\n        focusScope\n    ]);\n    const handleKeyDown = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"FocusScope.useCallback[handleKeyDown]\": (event)=>{\n            if (!loop && !trapped) return;\n            if (focusScope.paused) return;\n            const isTabKey = event.key === \"Tab\" && !event.altKey && !event.ctrlKey && !event.metaKey;\n            const focusedElement = document.activeElement;\n            if (isTabKey && focusedElement) {\n                const container2 = event.currentTarget;\n                const [first, last] = getTabbableEdges(container2);\n                const hasTabbableElementsInside = first && last;\n                if (!hasTabbableElementsInside) {\n                    if (focusedElement === container2) event.preventDefault();\n                } else {\n                    if (!event.shiftKey && focusedElement === last) {\n                        event.preventDefault();\n                        if (loop) focus(first, {\n                            select: true\n                        });\n                    } else if (event.shiftKey && focusedElement === first) {\n                        event.preventDefault();\n                        if (loop) focus(last, {\n                            select: true\n                        });\n                    }\n                }\n            }\n        }\n    }[\"FocusScope.useCallback[handleKeyDown]\"], [\n        loop,\n        trapped,\n        focusScope.paused\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        tabIndex: -1,\n        ...scopeProps,\n        ref: composedRefs,\n        onKeyDown: handleKeyDown\n    });\n}, \"oL5B22Fsl49zhxISSjwGiITDkKE=\", false, function() {\n    return [\n        useCallbackRef$1,\n        useCallbackRef$1,\n        useComposedRefs\n    ];\n}));\n_c5 = FocusScope;\nFocusScope.displayName = FOCUS_SCOPE_NAME;\nfunction focusFirst$2(candidates) {\n    let { select = false } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const previouslyFocusedElement = document.activeElement;\n    for (const candidate of candidates){\n        focus(candidate, {\n            select\n        });\n        if (document.activeElement !== previouslyFocusedElement) return;\n    }\n}\nfunction getTabbableEdges(container) {\n    const candidates = getTabbableCandidates(container);\n    const first = findVisible(candidates, container);\n    const last = findVisible(candidates.reverse(), container);\n    return [\n        first,\n        last\n    ];\n}\nfunction getTabbableCandidates(container) {\n    const nodes = [];\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n        acceptNode: (node)=>{\n            const isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n            if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n            return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n        }\n    });\n    while(walker.nextNode())nodes.push(walker.currentNode);\n    return nodes;\n}\nfunction findVisible(elements, container) {\n    for (const element of elements){\n        if (!isHidden(element, {\n            upTo: container\n        })) return element;\n    }\n}\nfunction isHidden(node, param) {\n    let { upTo } = param;\n    if (getComputedStyle(node).visibility === \"hidden\") return true;\n    while(node){\n        if (upTo !== void 0 && node === upTo) return false;\n        if (getComputedStyle(node).display === \"none\") return true;\n        node = node.parentElement;\n    }\n    return false;\n}\nfunction isSelectableInput(element) {\n    return element instanceof HTMLInputElement && \"select\" in element;\n}\nfunction focus(element) {\n    let { select = false } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (element && element.focus) {\n        const previouslyFocusedElement = document.activeElement;\n        element.focus({\n            preventScroll: true\n        });\n        if (element !== previouslyFocusedElement && isSelectableInput(element) && select) element.select();\n    }\n}\nvar focusScopesStack = createFocusScopesStack();\nfunction createFocusScopesStack() {\n    let stack = [];\n    return {\n        add (focusScope) {\n            const activeFocusScope = stack[0];\n            if (focusScope !== activeFocusScope) {\n                activeFocusScope == null ? void 0 : activeFocusScope.pause();\n            }\n            stack = arrayRemove(stack, focusScope);\n            stack.unshift(focusScope);\n        },\n        remove (focusScope) {\n            var _a;\n            stack = arrayRemove(stack, focusScope);\n            (_a = stack[0]) == null ? void 0 : _a.resume();\n        }\n    };\n}\nfunction arrayRemove(array, item) {\n    const updatedArray = [\n        ...array\n    ];\n    const index2 = updatedArray.indexOf(item);\n    if (index2 !== -1) {\n        updatedArray.splice(index2, 1);\n    }\n    return updatedArray;\n}\nfunction removeLinks(items) {\n    return items.filter((item)=>item.tagName !== \"A\");\n}\nvar useLayoutEffect2 = (globalThis == null ? void 0 : globalThis.document) ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : ()=>{};\nvar useReactId = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_1__, 2)))[\" useId \".trim().toString()] || (()=>void 0);\nvar count = 0;\nfunction useId$1(deterministicId) {\n    _s10();\n    const [id, setId] = react__WEBPACK_IMPORTED_MODULE_1__.useState(useReactId());\n    useLayoutEffect2({\n        \"useId$1.useLayoutEffect2\": ()=>{\n            setId({\n                \"useId$1.useLayoutEffect2\": (reactId)=>reactId !== null && reactId !== void 0 ? reactId : String(count++)\n            }[\"useId$1.useLayoutEffect2\"]);\n        }\n    }[\"useId$1.useLayoutEffect2\"], [\n        deterministicId\n    ]);\n    return deterministicId || (id ? \"radix-\".concat(id) : \"\");\n}\n_s10(useId$1, \"SRIQmLZeRXV8RAX/yJZz0a/Dr4U=\", false, function() {\n    return [\n        useLayoutEffect2\n    ];\n});\nconst sides = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = (v)=>({\n        x: v,\n        y: v\n    });\nconst oppositeSideMap = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nconst oppositeAlignmentMap = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction clamp(start, value1, end) {\n    return max(start, min(value1, end));\n}\nfunction evaluate(value1, param) {\n    return typeof value1 === \"function\" ? value1(param) : value1;\n}\nfunction getSide(placement) {\n    return placement.split(\"-\")[0];\n}\nfunction getAlignment(placement) {\n    return placement.split(\"-\")[1];\n}\nfunction getOppositeAxis(axis) {\n    return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction getAxisLength(axis) {\n    return axis === \"y\" ? \"height\" : \"width\";\n}\nfunction getSideAxis(placement) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].includes(getSide(placement)) ? \"y\" : \"x\";\n}\nfunction getAlignmentAxis(placement) {\n    return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n    if (rtl === void 0) {\n        rtl = false;\n    }\n    const alignment = getAlignment(placement);\n    const alignmentAxis = getAlignmentAxis(placement);\n    const length = getAxisLength(alignmentAxis);\n    let mainAlignmentSide = alignmentAxis === \"x\" ? alignment === (rtl ? \"end\" : \"start\") ? \"right\" : \"left\" : alignment === \"start\" ? \"bottom\" : \"top\";\n    if (rects.reference[length] > rects.floating[length]) {\n        mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n    }\n    return [\n        mainAlignmentSide,\n        getOppositePlacement(mainAlignmentSide)\n    ];\n}\nfunction getExpandedPlacements(placement) {\n    const oppositePlacement = getOppositePlacement(placement);\n    return [\n        getOppositeAlignmentPlacement(placement),\n        oppositePlacement,\n        getOppositeAlignmentPlacement(oppositePlacement)\n    ];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n    return placement.replace(/start|end/g, (alignment)=>oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n    const lr = [\n        \"left\",\n        \"right\"\n    ];\n    const rl = [\n        \"right\",\n        \"left\"\n    ];\n    const tb = [\n        \"top\",\n        \"bottom\"\n    ];\n    const bt = [\n        \"bottom\",\n        \"top\"\n    ];\n    switch(side){\n        case \"top\":\n        case \"bottom\":\n            if (rtl) return isStart ? rl : lr;\n            return isStart ? lr : rl;\n        case \"left\":\n        case \"right\":\n            return isStart ? tb : bt;\n        default:\n            return [];\n    }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n    const alignment = getAlignment(placement);\n    let list = getSideList(getSide(placement), direction === \"start\", rtl);\n    if (alignment) {\n        list = list.map((side)=>side + \"-\" + alignment);\n        if (flipAlignment) {\n            list = list.concat(list.map(getOppositeAlignmentPlacement));\n        }\n    }\n    return list;\n}\nfunction getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, (side)=>oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        ...padding\n    };\n}\nfunction getPaddingObject(padding) {\n    return typeof padding !== \"number\" ? expandPaddingObject(padding) : {\n        top: padding,\n        right: padding,\n        bottom: padding,\n        left: padding\n    };\n}\nfunction rectToClientRect(rect) {\n    const { x, y, width, height } = rect;\n    return {\n        width,\n        height,\n        top: y,\n        left: x,\n        right: x + width,\n        bottom: y + height,\n        x,\n        y\n    };\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n    let { reference, floating } = _ref;\n    const sideAxis = getSideAxis(placement);\n    const alignmentAxis = getAlignmentAxis(placement);\n    const alignLength = getAxisLength(alignmentAxis);\n    const side = getSide(placement);\n    const isVertical = sideAxis === \"y\";\n    const commonX = reference.x + reference.width / 2 - floating.width / 2;\n    const commonY = reference.y + reference.height / 2 - floating.height / 2;\n    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n    let coords;\n    switch(side){\n        case \"top\":\n            coords = {\n                x: commonX,\n                y: reference.y - floating.height\n            };\n            break;\n        case \"bottom\":\n            coords = {\n                x: commonX,\n                y: reference.y + reference.height\n            };\n            break;\n        case \"right\":\n            coords = {\n                x: reference.x + reference.width,\n                y: commonY\n            };\n            break;\n        case \"left\":\n            coords = {\n                x: reference.x - floating.width,\n                y: commonY\n            };\n            break;\n        default:\n            coords = {\n                x: reference.x,\n                y: reference.y\n            };\n    }\n    switch(getAlignment(placement)){\n        case \"start\":\n            coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n        case \"end\":\n            coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n    }\n    return coords;\n}\nconst computePosition$1 = async (reference, floating, config)=>{\n    const { placement = \"bottom\", strategy = \"absolute\", middleware = [], platform: platform2 } = config;\n    const validMiddleware = middleware.filter(Boolean);\n    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));\n    let rects = await platform2.getElementRects({\n        reference,\n        floating,\n        strategy\n    });\n    let { x, y } = computeCoordsFromPlacement(rects, placement, rtl);\n    let statefulPlacement = placement;\n    let middlewareData = {};\n    let resetCount = 0;\n    for(let i = 0; i < validMiddleware.length; i++){\n        const { name, fn } = validMiddleware[i];\n        const { x: nextX, y: nextY, data, reset } = await fn({\n            x,\n            y,\n            initialPlacement: placement,\n            placement: statefulPlacement,\n            strategy,\n            middlewareData,\n            rects,\n            platform: platform2,\n            elements: {\n                reference,\n                floating\n            }\n        });\n        x = nextX != null ? nextX : x;\n        y = nextY != null ? nextY : y;\n        middlewareData = {\n            ...middlewareData,\n            [name]: {\n                ...middlewareData[name],\n                ...data\n            }\n        };\n        if (reset && resetCount <= 50) {\n            resetCount++;\n            if (typeof reset === \"object\") {\n                if (reset.placement) {\n                    statefulPlacement = reset.placement;\n                }\n                if (reset.rects) {\n                    rects = reset.rects === true ? await platform2.getElementRects({\n                        reference,\n                        floating,\n                        strategy\n                    }) : reset.rects;\n                }\n                ({ x, y } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n            }\n            i = -1;\n        }\n    }\n    return {\n        x,\n        y,\n        placement: statefulPlacement,\n        strategy,\n        middlewareData\n    };\n};\nasync function detectOverflow(state, options) {\n    var _await$platform$isEle;\n    if (options === void 0) {\n        options = {};\n    }\n    const { x, y, platform: platform2, rects, elements, strategy } = state;\n    const { boundary = \"clippingAncestors\", rootBoundary = \"viewport\", elementContext = \"floating\", altBoundary = false, padding = 0 } = evaluate(options, state);\n    const paddingObject = getPaddingObject(padding);\n    const altContext = elementContext === \"floating\" ? \"reference\" : \"floating\";\n    const element = elements[altBoundary ? altContext : elementContext];\n    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({\n        element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),\n        boundary,\n        rootBoundary,\n        strategy\n    }));\n    const rect = elementContext === \"floating\" ? {\n        x,\n        y,\n        width: rects.floating.width,\n        height: rects.floating.height\n    } : rects.reference;\n    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));\n    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {\n        x: 1,\n        y: 1\n    } : {\n        x: 1,\n        y: 1\n    };\n    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({\n        elements,\n        rect,\n        offsetParent,\n        strategy\n    }) : rect);\n    return {\n        top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n        bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n        left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n        right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n    };\n}\nconst arrow$3 = (options)=>({\n        name: \"arrow\",\n        options,\n        async fn (state) {\n            const { x, y, placement, rects, platform: platform2, elements, middlewareData } = state;\n            const { element, padding = 0 } = evaluate(options, state) || {};\n            if (element == null) {\n                return {};\n            }\n            const paddingObject = getPaddingObject(padding);\n            const coords = {\n                x,\n                y\n            };\n            const axis = getAlignmentAxis(placement);\n            const length = getAxisLength(axis);\n            const arrowDimensions = await platform2.getDimensions(element);\n            const isYAxis = axis === \"y\";\n            const minProp = isYAxis ? \"top\" : \"left\";\n            const maxProp = isYAxis ? \"bottom\" : \"right\";\n            const clientProp = isYAxis ? \"clientHeight\" : \"clientWidth\";\n            const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n            const startDiff = coords[axis] - rects.reference[axis];\n            const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));\n            let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n            if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {\n                clientSize = elements.floating[clientProp] || rects.floating[length];\n            }\n            const centerToReference = endDiff / 2 - startDiff / 2;\n            const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n            const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n            const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n            const min$1 = minPadding;\n            const max2 = clientSize - arrowDimensions[length] - maxPadding;\n            const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n            const offset2 = clamp(min$1, center, max2);\n            const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n            const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;\n            return {\n                [axis]: coords[axis] + alignmentOffset,\n                data: {\n                    [axis]: offset2,\n                    centerOffset: center - offset2 - alignmentOffset,\n                    ...shouldAddOffset && {\n                        alignmentOffset\n                    }\n                },\n                reset: shouldAddOffset\n            };\n        }\n    });\nconst flip$2 = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"flip\",\n        options,\n        async fn (state) {\n            var _middlewareData$arrow, _middlewareData$flip;\n            const { placement, middlewareData, rects, initialPlacement, platform: platform2, elements } = state;\n            const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = true, fallbackPlacements: specifiedFallbackPlacements, fallbackStrategy = \"bestFit\", fallbackAxisSideDirection = \"none\", flipAlignment = true, ...detectOverflowOptions } = evaluate(options, state);\n            if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n                return {};\n            }\n            const side = getSide(placement);\n            const initialSideAxis = getSideAxis(initialPlacement);\n            const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n            const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n            const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [\n                getOppositePlacement(initialPlacement)\n            ] : getExpandedPlacements(initialPlacement));\n            const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== \"none\";\n            if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n                fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n            }\n            const placements = [\n                initialPlacement,\n                ...fallbackPlacements\n            ];\n            const overflow = await detectOverflow(state, detectOverflowOptions);\n            const overflows = [];\n            let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n            if (checkMainAxis) {\n                overflows.push(overflow[side]);\n            }\n            if (checkCrossAxis) {\n                const sides2 = getAlignmentSides(placement, rects, rtl);\n                overflows.push(overflow[sides2[0]], overflow[sides2[1]]);\n            }\n            overflowsData = [\n                ...overflowsData,\n                {\n                    placement,\n                    overflows\n                }\n            ];\n            if (!overflows.every((side2)=>side2 <= 0)) {\n                var _middlewareData$flip2, _overflowsData$filter;\n                const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n                const nextPlacement = placements[nextIndex];\n                if (nextPlacement) {\n                    const ignoreCrossAxisOverflow = checkCrossAxis === \"alignment\" ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n                    if (!ignoreCrossAxisOverflow || // We leave the current main axis only if every placement on that axis\n                    // overflows the main axis.\n                    overflowsData.every((d)=>d.overflows[0] > 0 && getSideAxis(d.placement) === initialSideAxis)) {\n                        return {\n                            data: {\n                                index: nextIndex,\n                                overflows: overflowsData\n                            },\n                            reset: {\n                                placement: nextPlacement\n                            }\n                        };\n                    }\n                }\n                let resetPlacement = (_overflowsData$filter = overflowsData.filter((d)=>d.overflows[0] <= 0).sort((a, b)=>a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n                if (!resetPlacement) {\n                    switch(fallbackStrategy){\n                        case \"bestFit\":\n                            {\n                                var _overflowsData$filter2;\n                                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d)=>{\n                                    if (hasFallbackAxisSideDirection) {\n                                        const currentSideAxis = getSideAxis(d.placement);\n                                        return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal\n                                        // reading directions favoring greater width.\n                                        currentSideAxis === \"y\";\n                                    }\n                                    return true;\n                                }).map((d)=>[\n                                        d.placement,\n                                        d.overflows.filter((overflow2)=>overflow2 > 0).reduce((acc, overflow2)=>acc + overflow2, 0)\n                                    ]).sort((a, b)=>a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                                if (placement2) {\n                                    resetPlacement = placement2;\n                                }\n                                break;\n                            }\n                        case \"initialPlacement\":\n                            resetPlacement = initialPlacement;\n                            break;\n                    }\n                }\n                if (placement !== resetPlacement) {\n                    return {\n                        reset: {\n                            placement: resetPlacement\n                        }\n                    };\n                }\n            }\n            return {};\n        }\n    };\n};\nfunction getSideOffsets(overflow, rect) {\n    return {\n        top: overflow.top - rect.height,\n        right: overflow.right - rect.width,\n        bottom: overflow.bottom - rect.height,\n        left: overflow.left - rect.width\n    };\n}\nfunction isAnySideFullyClipped(overflow) {\n    return sides.some((side)=>overflow[side] >= 0);\n}\nconst hide$2 = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"hide\",\n        options,\n        async fn (state) {\n            const { rects } = state;\n            const { strategy = \"referenceHidden\", ...detectOverflowOptions } = evaluate(options, state);\n            switch(strategy){\n                case \"referenceHidden\":\n                    {\n                        const overflow = await detectOverflow(state, {\n                            ...detectOverflowOptions,\n                            elementContext: \"reference\"\n                        });\n                        const offsets = getSideOffsets(overflow, rects.reference);\n                        return {\n                            data: {\n                                referenceHiddenOffsets: offsets,\n                                referenceHidden: isAnySideFullyClipped(offsets)\n                            }\n                        };\n                    }\n                case \"escaped\":\n                    {\n                        const overflow = await detectOverflow(state, {\n                            ...detectOverflowOptions,\n                            altBoundary: true\n                        });\n                        const offsets = getSideOffsets(overflow, rects.floating);\n                        return {\n                            data: {\n                                escapedOffsets: offsets,\n                                escaped: isAnySideFullyClipped(offsets)\n                            }\n                        };\n                    }\n                default:\n                    {\n                        return {};\n                    }\n            }\n        }\n    };\n};\nasync function convertValueToCoords(state, options) {\n    const { placement, platform: platform2, elements } = state;\n    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n    const side = getSide(placement);\n    const alignment = getAlignment(placement);\n    const isVertical = getSideAxis(placement) === \"y\";\n    const mainAxisMulti = [\n        \"left\",\n        \"top\"\n    ].includes(side) ? -1 : 1;\n    const crossAxisMulti = rtl && isVertical ? -1 : 1;\n    const rawValue = evaluate(options, state);\n    let { mainAxis, crossAxis, alignmentAxis } = typeof rawValue === \"number\" ? {\n        mainAxis: rawValue,\n        crossAxis: 0,\n        alignmentAxis: null\n    } : {\n        mainAxis: rawValue.mainAxis || 0,\n        crossAxis: rawValue.crossAxis || 0,\n        alignmentAxis: rawValue.alignmentAxis\n    };\n    if (alignment && typeof alignmentAxis === \"number\") {\n        crossAxis = alignment === \"end\" ? alignmentAxis * -1 : alignmentAxis;\n    }\n    return isVertical ? {\n        x: crossAxis * crossAxisMulti,\n        y: mainAxis * mainAxisMulti\n    } : {\n        x: mainAxis * mainAxisMulti,\n        y: crossAxis * crossAxisMulti\n    };\n}\nconst offset$2 = function(options) {\n    if (options === void 0) {\n        options = 0;\n    }\n    return {\n        name: \"offset\",\n        options,\n        async fn (state) {\n            var _middlewareData$offse, _middlewareData$arrow;\n            const { x, y, placement, middlewareData } = state;\n            const diffCoords = await convertValueToCoords(state, options);\n            if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n                return {};\n            }\n            return {\n                x: x + diffCoords.x,\n                y: y + diffCoords.y,\n                data: {\n                    ...diffCoords,\n                    placement\n                }\n            };\n        }\n    };\n};\nconst shift$2 = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"shift\",\n        options,\n        async fn (state) {\n            const { x, y, placement } = state;\n            const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = false, limiter = {\n                fn: (_ref)=>{\n                    let { x: x2, y: y2 } = _ref;\n                    return {\n                        x: x2,\n                        y: y2\n                    };\n                }\n            }, ...detectOverflowOptions } = evaluate(options, state);\n            const coords = {\n                x,\n                y\n            };\n            const overflow = await detectOverflow(state, detectOverflowOptions);\n            const crossAxis = getSideAxis(getSide(placement));\n            const mainAxis = getOppositeAxis(crossAxis);\n            let mainAxisCoord = coords[mainAxis];\n            let crossAxisCoord = coords[crossAxis];\n            if (checkMainAxis) {\n                const minSide = mainAxis === \"y\" ? \"top\" : \"left\";\n                const maxSide = mainAxis === \"y\" ? \"bottom\" : \"right\";\n                const min2 = mainAxisCoord + overflow[minSide];\n                const max2 = mainAxisCoord - overflow[maxSide];\n                mainAxisCoord = clamp(min2, mainAxisCoord, max2);\n            }\n            if (checkCrossAxis) {\n                const minSide = crossAxis === \"y\" ? \"top\" : \"left\";\n                const maxSide = crossAxis === \"y\" ? \"bottom\" : \"right\";\n                const min2 = crossAxisCoord + overflow[minSide];\n                const max2 = crossAxisCoord - overflow[maxSide];\n                crossAxisCoord = clamp(min2, crossAxisCoord, max2);\n            }\n            const limitedCoords = limiter.fn({\n                ...state,\n                [mainAxis]: mainAxisCoord,\n                [crossAxis]: crossAxisCoord\n            });\n            return {\n                ...limitedCoords,\n                data: {\n                    x: limitedCoords.x - x,\n                    y: limitedCoords.y - y,\n                    enabled: {\n                        [mainAxis]: checkMainAxis,\n                        [crossAxis]: checkCrossAxis\n                    }\n                }\n            };\n        }\n    };\n};\nconst limitShift$2 = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        options,\n        fn (state) {\n            const { x, y, placement, rects, middlewareData } = state;\n            const { offset: offset2 = 0, mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = true } = evaluate(options, state);\n            const coords = {\n                x,\n                y\n            };\n            const crossAxis = getSideAxis(placement);\n            const mainAxis = getOppositeAxis(crossAxis);\n            let mainAxisCoord = coords[mainAxis];\n            let crossAxisCoord = coords[crossAxis];\n            const rawOffset = evaluate(offset2, state);\n            const computedOffset = typeof rawOffset === \"number\" ? {\n                mainAxis: rawOffset,\n                crossAxis: 0\n            } : {\n                mainAxis: 0,\n                crossAxis: 0,\n                ...rawOffset\n            };\n            if (checkMainAxis) {\n                const len = mainAxis === \"y\" ? \"height\" : \"width\";\n                const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n                const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n                if (mainAxisCoord < limitMin) {\n                    mainAxisCoord = limitMin;\n                } else if (mainAxisCoord > limitMax) {\n                    mainAxisCoord = limitMax;\n                }\n            }\n            if (checkCrossAxis) {\n                var _middlewareData$offse, _middlewareData$offse2;\n                const len = mainAxis === \"y\" ? \"width\" : \"height\";\n                const isOriginSide = [\n                    \"top\",\n                    \"left\"\n                ].includes(getSide(placement));\n                const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n                const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n                if (crossAxisCoord < limitMin) {\n                    crossAxisCoord = limitMin;\n                } else if (crossAxisCoord > limitMax) {\n                    crossAxisCoord = limitMax;\n                }\n            }\n            return {\n                [mainAxis]: mainAxisCoord,\n                [crossAxis]: crossAxisCoord\n            };\n        }\n    };\n};\nconst size$2 = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"size\",\n        options,\n        async fn (state) {\n            var _state$middlewareData, _state$middlewareData2;\n            const { placement, rects, platform: platform2, elements } = state;\n            const { apply = ()=>{}, ...detectOverflowOptions } = evaluate(options, state);\n            const overflow = await detectOverflow(state, detectOverflowOptions);\n            const side = getSide(placement);\n            const alignment = getAlignment(placement);\n            const isYAxis = getSideAxis(placement) === \"y\";\n            const { width, height } = rects.floating;\n            let heightSide;\n            let widthSide;\n            if (side === \"top\" || side === \"bottom\") {\n                heightSide = side;\n                widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? \"start\" : \"end\") ? \"left\" : \"right\";\n            } else {\n                widthSide = side;\n                heightSide = alignment === \"end\" ? \"top\" : \"bottom\";\n            }\n            const maximumClippingHeight = height - overflow.top - overflow.bottom;\n            const maximumClippingWidth = width - overflow.left - overflow.right;\n            const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n            const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n            const noShift = !state.middlewareData.shift;\n            let availableHeight = overflowAvailableHeight;\n            let availableWidth = overflowAvailableWidth;\n            if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n                availableWidth = maximumClippingWidth;\n            }\n            if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n                availableHeight = maximumClippingHeight;\n            }\n            if (noShift && !alignment) {\n                const xMin = max(overflow.left, 0);\n                const xMax = max(overflow.right, 0);\n                const yMin = max(overflow.top, 0);\n                const yMax = max(overflow.bottom, 0);\n                if (isYAxis) {\n                    availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n                } else {\n                    availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n                }\n            }\n            await apply({\n                ...state,\n                availableWidth,\n                availableHeight\n            });\n            const nextDimensions = await platform2.getDimensions(elements.floating);\n            if (width !== nextDimensions.width || height !== nextDimensions.height) {\n                return {\n                    reset: {\n                        rects: true\n                    }\n                };\n            }\n            return {};\n        }\n    };\n};\nfunction hasWindow() {\n    return \"object\" !== \"undefined\";\n}\nfunction getNodeName(node) {\n    if (isNode(node)) {\n        return (node.nodeName || \"\").toLowerCase();\n    }\n    return \"#document\";\n}\nfunction getWindow(node) {\n    var _node$ownerDocument;\n    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n    var _ref;\n    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value1) {\n    if (!hasWindow()) {\n        return false;\n    }\n    return value1 instanceof Node || value1 instanceof getWindow(value1).Node;\n}\nfunction isElement(value1) {\n    if (!hasWindow()) {\n        return false;\n    }\n    return value1 instanceof Element || value1 instanceof getWindow(value1).Element;\n}\nfunction isHTMLElement$1(value1) {\n    if (!hasWindow()) {\n        return false;\n    }\n    return value1 instanceof HTMLElement || value1 instanceof getWindow(value1).HTMLElement;\n}\nfunction isShadowRoot(value1) {\n    if (!hasWindow() || typeof ShadowRoot === \"undefined\") {\n        return false;\n    }\n    return value1 instanceof ShadowRoot || value1 instanceof getWindow(value1).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n    const { overflow, overflowX, overflowY, display } = getComputedStyle$1(element);\n    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && ![\n        \"inline\",\n        \"contents\"\n    ].includes(display);\n}\nfunction isTableElement(element) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n    return [\n        \":popover-open\",\n        \":modal\"\n    ].some((selector)=>{\n        try {\n            return element.matches(selector);\n        } catch (e) {\n            return false;\n        }\n    });\n}\nfunction isContainingBlock(elementOrCss) {\n    const webkit = isWebKit();\n    const css = isElement(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;\n    return [\n        \"transform\",\n        \"translate\",\n        \"scale\",\n        \"rotate\",\n        \"perspective\"\n    ].some((value1)=>css[value1] ? css[value1] !== \"none\" : false) || (css.containerType ? css.containerType !== \"normal\" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== \"none\" : false) || !webkit && (css.filter ? css.filter !== \"none\" : false) || [\n        \"transform\",\n        \"translate\",\n        \"scale\",\n        \"rotate\",\n        \"perspective\",\n        \"filter\"\n    ].some((value1)=>(css.willChange || \"\").includes(value1)) || [\n        \"paint\",\n        \"layout\",\n        \"strict\",\n        \"content\"\n    ].some((value1)=>(css.contain || \"\").includes(value1));\n}\nfunction getContainingBlock(element) {\n    let currentNode = getParentNode(element);\n    while(isHTMLElement$1(currentNode) && !isLastTraversableNode(currentNode)){\n        if (isContainingBlock(currentNode)) {\n            return currentNode;\n        } else if (isTopLayer(currentNode)) {\n            return null;\n        }\n        currentNode = getParentNode(currentNode);\n    }\n    return null;\n}\nfunction isWebKit() {\n    if (typeof CSS === \"undefined\" || !CSS.supports) return false;\n    return CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction isLastTraversableNode(node) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].includes(getNodeName(node));\n}\nfunction getComputedStyle$1(element) {\n    return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n    if (isElement(element)) {\n        return {\n            scrollLeft: element.scrollLeft,\n            scrollTop: element.scrollTop\n        };\n    }\n    return {\n        scrollLeft: element.scrollX,\n        scrollTop: element.scrollY\n    };\n}\nfunction getParentNode(node) {\n    if (getNodeName(node) === \"html\") {\n        return node;\n    }\n    const result = // Step into the shadow DOM of the parent of a slotted node.\n    node.assignedSlot || // DOM Element detected.\n    node.parentNode || // ShadowRoot detected.\n    isShadowRoot(node) && node.host || // Fallback.\n    getDocumentElement(node);\n    return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n    const parentNode = getParentNode(node);\n    if (isLastTraversableNode(parentNode)) {\n        return node.ownerDocument ? node.ownerDocument.body : node.body;\n    }\n    if (isHTMLElement$1(parentNode) && isOverflowElement(parentNode)) {\n        return parentNode;\n    }\n    return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n    var _node$ownerDocument2;\n    if (list === void 0) {\n        list = [];\n    }\n    if (traverseIframes === void 0) {\n        traverseIframes = true;\n    }\n    const scrollableAncestor = getNearestOverflowAncestor(node);\n    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n    const win = getWindow(scrollableAncestor);\n    if (isBody) {\n        const frameElement = getFrameElement(win);\n        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n    }\n    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\nfunction getCssDimensions(element) {\n    const css = getComputedStyle$1(element);\n    let width = parseFloat(css.width) || 0;\n    let height = parseFloat(css.height) || 0;\n    const hasOffset = isHTMLElement$1(element);\n    const offsetWidth = hasOffset ? element.offsetWidth : width;\n    const offsetHeight = hasOffset ? element.offsetHeight : height;\n    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n    if (shouldFallback) {\n        width = offsetWidth;\n        height = offsetHeight;\n    }\n    return {\n        width,\n        height,\n        $: shouldFallback\n    };\n}\nfunction unwrapElement(element) {\n    return !isElement(element) ? element.contextElement : element;\n}\nfunction getScale(element) {\n    const domElement = unwrapElement(element);\n    if (!isHTMLElement$1(domElement)) {\n        return createCoords(1);\n    }\n    const rect = domElement.getBoundingClientRect();\n    const { width, height, $ } = getCssDimensions(domElement);\n    let x = ($ ? round(rect.width) : rect.width) / width;\n    let y = ($ ? round(rect.height) : rect.height) / height;\n    if (!x || !Number.isFinite(x)) {\n        x = 1;\n    }\n    if (!y || !Number.isFinite(y)) {\n        y = 1;\n    }\n    return {\n        x,\n        y\n    };\n}\nconst noOffsets = /* @__PURE__ */ createCoords(0);\nfunction getVisualOffsets(element) {\n    const win = getWindow(element);\n    if (!isWebKit() || !win.visualViewport) {\n        return noOffsets;\n    }\n    return {\n        x: win.visualViewport.offsetLeft,\n        y: win.visualViewport.offsetTop\n    };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n    if (isFixed === void 0) {\n        isFixed = false;\n    }\n    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n        return false;\n    }\n    return isFixed;\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n    if (includeScale === void 0) {\n        includeScale = false;\n    }\n    if (isFixedStrategy === void 0) {\n        isFixedStrategy = false;\n    }\n    const clientRect = element.getBoundingClientRect();\n    const domElement = unwrapElement(element);\n    let scale = createCoords(1);\n    if (includeScale) {\n        if (offsetParent) {\n            if (isElement(offsetParent)) {\n                scale = getScale(offsetParent);\n            }\n        } else {\n            scale = getScale(element);\n        }\n    }\n    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n    let x = (clientRect.left + visualOffsets.x) / scale.x;\n    let y = (clientRect.top + visualOffsets.y) / scale.y;\n    let width = clientRect.width / scale.x;\n    let height = clientRect.height / scale.y;\n    if (domElement) {\n        const win = getWindow(domElement);\n        const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n        let currentWin = win;\n        let currentIFrame = getFrameElement(currentWin);\n        while(currentIFrame && offsetParent && offsetWin !== currentWin){\n            const iframeScale = getScale(currentIFrame);\n            const iframeRect = currentIFrame.getBoundingClientRect();\n            const css = getComputedStyle$1(currentIFrame);\n            const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n            const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n            x *= iframeScale.x;\n            y *= iframeScale.y;\n            width *= iframeScale.x;\n            height *= iframeScale.y;\n            x += left;\n            y += top;\n            currentWin = getWindow(currentIFrame);\n            currentIFrame = getFrameElement(currentWin);\n        }\n    }\n    return rectToClientRect({\n        width,\n        height,\n        x,\n        y\n    });\n}\nfunction getWindowScrollBarX(element, rect) {\n    const leftScroll = getNodeScroll(element).scrollLeft;\n    if (!rect) {\n        return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n    }\n    return rect.left + leftScroll;\n}\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n    if (ignoreScrollbarX === void 0) {\n        ignoreScrollbarX = false;\n    }\n    const htmlRect = documentElement.getBoundingClientRect();\n    const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : // RTL <body> scrollbar.\n    getWindowScrollBarX(documentElement, htmlRect));\n    const y = htmlRect.top + scroll.scrollTop;\n    return {\n        x,\n        y\n    };\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n    let { elements, rect, offsetParent, strategy } = _ref;\n    const isFixed = strategy === \"fixed\";\n    const documentElement = getDocumentElement(offsetParent);\n    const topLayer = elements ? isTopLayer(elements.floating) : false;\n    if (offsetParent === documentElement || topLayer && isFixed) {\n        return rect;\n    }\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    let scale = createCoords(1);\n    const offsets = createCoords(0);\n    const isOffsetParentAnElement = isHTMLElement$1(offsetParent);\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement$1(offsetParent)) {\n            const offsetRect = getBoundingClientRect(offsetParent);\n            scale = getScale(offsetParent);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        }\n    }\n    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n    return {\n        width: rect.width * scale.x,\n        height: rect.height * scale.y,\n        x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n        y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n    };\n}\nfunction getClientRects(element) {\n    return Array.from(element.getClientRects());\n}\nfunction getDocumentRect(element) {\n    const html = getDocumentElement(element);\n    const scroll = getNodeScroll(element);\n    const body = element.ownerDocument.body;\n    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n    let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n    const y = -scroll.scrollTop;\n    if (getComputedStyle$1(body).direction === \"rtl\") {\n        x += max(html.clientWidth, body.clientWidth) - width;\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getViewportRect(element, strategy) {\n    const win = getWindow(element);\n    const html = getDocumentElement(element);\n    const visualViewport = win.visualViewport;\n    let width = html.clientWidth;\n    let height = html.clientHeight;\n    let x = 0;\n    let y = 0;\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        const visualViewportBased = isWebKit();\n        if (!visualViewportBased || visualViewportBased && strategy === \"fixed\") {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getInnerBoundingClientRect(element, strategy) {\n    const clientRect = getBoundingClientRect(element, true, strategy === \"fixed\");\n    const top = clientRect.top + element.clientTop;\n    const left = clientRect.left + element.clientLeft;\n    const scale = isHTMLElement$1(element) ? getScale(element) : createCoords(1);\n    const width = element.clientWidth * scale.x;\n    const height = element.clientHeight * scale.y;\n    const x = left * scale.x;\n    const y = top * scale.y;\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n    let rect;\n    if (clippingAncestor === \"viewport\") {\n        rect = getViewportRect(element, strategy);\n    } else if (clippingAncestor === \"document\") {\n        rect = getDocumentRect(getDocumentElement(element));\n    } else if (isElement(clippingAncestor)) {\n        rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n    } else {\n        const visualOffsets = getVisualOffsets(element);\n        rect = {\n            x: clippingAncestor.x - visualOffsets.x,\n            y: clippingAncestor.y - visualOffsets.y,\n            width: clippingAncestor.width,\n            height: clippingAncestor.height\n        };\n    }\n    return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n    const parentNode = getParentNode(element);\n    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n        return false;\n    }\n    return getComputedStyle$1(parentNode).position === \"fixed\" || hasFixedPositionAncestor(parentNode, stopNode);\n}\nfunction getClippingElementAncestors(element, cache) {\n    const cachedResult = cache.get(element);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    let result = getOverflowAncestors(element, [], false).filter((el)=>isElement(el) && getNodeName(el) !== \"body\");\n    let currentContainingBlockComputedStyle = null;\n    const elementIsFixed = getComputedStyle$1(element).position === \"fixed\";\n    let currentNode = elementIsFixed ? getParentNode(element) : element;\n    while(isElement(currentNode) && !isLastTraversableNode(currentNode)){\n        const computedStyle = getComputedStyle$1(currentNode);\n        const currentNodeIsContaining = isContainingBlock(currentNode);\n        if (!currentNodeIsContaining && computedStyle.position === \"fixed\") {\n            currentContainingBlockComputedStyle = null;\n        }\n        const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === \"static\" && !!currentContainingBlockComputedStyle && [\n            \"absolute\",\n            \"fixed\"\n        ].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n        if (shouldDropCurrentNode) {\n            result = result.filter((ancestor)=>ancestor !== currentNode);\n        } else {\n            currentContainingBlockComputedStyle = computedStyle;\n        }\n        currentNode = getParentNode(currentNode);\n    }\n    cache.set(element, result);\n    return result;\n}\nfunction getClippingRect(_ref) {\n    let { element, boundary, rootBoundary, strategy } = _ref;\n    const elementClippingAncestors = boundary === \"clippingAncestors\" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n    const clippingAncestors = [\n        ...elementClippingAncestors,\n        rootBoundary\n    ];\n    const firstClippingAncestor = clippingAncestors[0];\n    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor)=>{\n        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n        accRect.top = max(rect.top, accRect.top);\n        accRect.right = min(rect.right, accRect.right);\n        accRect.bottom = min(rect.bottom, accRect.bottom);\n        accRect.left = max(rect.left, accRect.left);\n        return accRect;\n    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n    return {\n        width: clippingRect.right - clippingRect.left,\n        height: clippingRect.bottom - clippingRect.top,\n        x: clippingRect.left,\n        y: clippingRect.top\n    };\n}\nfunction getDimensions(element) {\n    const { width, height } = getCssDimensions(element);\n    return {\n        width,\n        height\n    };\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n    const isOffsetParentAnElement = isHTMLElement$1(offsetParent);\n    const documentElement = getDocumentElement(offsetParent);\n    const isFixed = strategy === \"fixed\";\n    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    const offsets = createCoords(0);\n    function setLeftRTLScrollbarOffset() {\n        offsets.x = getWindowScrollBarX(documentElement);\n    }\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isOffsetParentAnElement) {\n            const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        } else if (documentElement) {\n            setLeftRTLScrollbarOffset();\n        }\n    }\n    if (isFixed && !isOffsetParentAnElement && documentElement) {\n        setLeftRTLScrollbarOffset();\n    }\n    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n    const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n    const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n    return {\n        x,\n        y,\n        width: rect.width,\n        height: rect.height\n    };\n}\nfunction isStaticPositioned(element) {\n    return getComputedStyle$1(element).position === \"static\";\n}\nfunction getTrueOffsetParent(element, polyfill) {\n    if (!isHTMLElement$1(element) || getComputedStyle$1(element).position === \"fixed\") {\n        return null;\n    }\n    if (polyfill) {\n        return polyfill(element);\n    }\n    let rawOffsetParent = element.offsetParent;\n    if (getDocumentElement(element) === rawOffsetParent) {\n        rawOffsetParent = rawOffsetParent.ownerDocument.body;\n    }\n    return rawOffsetParent;\n}\nfunction getOffsetParent(element, polyfill) {\n    const win = getWindow(element);\n    if (isTopLayer(element)) {\n        return win;\n    }\n    if (!isHTMLElement$1(element)) {\n        let svgOffsetParent = getParentNode(element);\n        while(svgOffsetParent && !isLastTraversableNode(svgOffsetParent)){\n            if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n                return svgOffsetParent;\n            }\n            svgOffsetParent = getParentNode(svgOffsetParent);\n        }\n        return win;\n    }\n    let offsetParent = getTrueOffsetParent(element, polyfill);\n    while(offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)){\n        offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n    }\n    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n        return win;\n    }\n    return offsetParent || getContainingBlock(element) || win;\n}\nconst getElementRects = async function(data) {\n    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n    const getDimensionsFn = this.getDimensions;\n    const floatingDimensions = await getDimensionsFn(data.floating);\n    return {\n        reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n        floating: {\n            x: 0,\n            y: 0,\n            width: floatingDimensions.width,\n            height: floatingDimensions.height\n        }\n    };\n};\nfunction isRTL(element) {\n    return getComputedStyle$1(element).direction === \"rtl\";\n}\nconst platform = {\n    convertOffsetParentRelativeRectToViewportRelativeRect,\n    getDocumentElement,\n    getClippingRect,\n    getOffsetParent,\n    getElementRects,\n    getClientRects,\n    getDimensions,\n    getScale,\n    isElement,\n    isRTL\n};\nfunction rectsAreEqual(a, b) {\n    return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\nfunction observeMove(element, onMove) {\n    let io = null;\n    let timeoutId;\n    const root = getDocumentElement(element);\n    function cleanup() {\n        var _io;\n        clearTimeout(timeoutId);\n        (_io = io) == null || _io.disconnect();\n        io = null;\n    }\n    function refresh(skip, threshold) {\n        if (skip === void 0) {\n            skip = false;\n        }\n        if (threshold === void 0) {\n            threshold = 1;\n        }\n        cleanup();\n        const elementRectForRootMargin = element.getBoundingClientRect();\n        const { left, top, width, height } = elementRectForRootMargin;\n        if (!skip) {\n            onMove();\n        }\n        if (!width || !height) {\n            return;\n        }\n        const insetTop = floor(top);\n        const insetRight = floor(root.clientWidth - (left + width));\n        const insetBottom = floor(root.clientHeight - (top + height));\n        const insetLeft = floor(left);\n        const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n        const options = {\n            rootMargin,\n            threshold: max(0, min(1, threshold)) || 1\n        };\n        let isFirstUpdate = true;\n        function handleObserve(entries) {\n            const ratio = entries[0].intersectionRatio;\n            if (ratio !== threshold) {\n                if (!isFirstUpdate) {\n                    return refresh();\n                }\n                if (!ratio) {\n                    timeoutId = setTimeout(()=>{\n                        refresh(false, 1e-7);\n                    }, 1e3);\n                } else {\n                    refresh(false, ratio);\n                }\n            }\n            if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n                refresh();\n            }\n            isFirstUpdate = false;\n        }\n        try {\n            io = new IntersectionObserver(handleObserve, {\n                ...options,\n                // Handle <iframe>s\n                root: root.ownerDocument\n            });\n        } catch (_e) {\n            io = new IntersectionObserver(handleObserve, options);\n        }\n        io.observe(element);\n    }\n    refresh(true);\n    return cleanup;\n}\nfunction autoUpdate(reference, floating, update, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { ancestorScroll = true, ancestorResize = true, elementResize = typeof ResizeObserver === \"function\", layoutShift = typeof IntersectionObserver === \"function\", animationFrame = false } = options;\n    const referenceEl = unwrapElement(reference);\n    const ancestors = ancestorScroll || ancestorResize ? [\n        ...referenceEl ? getOverflowAncestors(referenceEl) : [],\n        ...getOverflowAncestors(floating)\n    ] : [];\n    ancestors.forEach((ancestor)=>{\n        ancestorScroll && ancestor.addEventListener(\"scroll\", update, {\n            passive: true\n        });\n        ancestorResize && ancestor.addEventListener(\"resize\", update);\n    });\n    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n    let reobserveFrame = -1;\n    let resizeObserver = null;\n    if (elementResize) {\n        resizeObserver = new ResizeObserver((_ref)=>{\n            let [firstEntry] = _ref;\n            if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n                resizeObserver.unobserve(floating);\n                cancelAnimationFrame(reobserveFrame);\n                reobserveFrame = requestAnimationFrame(()=>{\n                    var _resizeObserver;\n                    (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n                });\n            }\n            update();\n        });\n        if (referenceEl && !animationFrame) {\n            resizeObserver.observe(referenceEl);\n        }\n        resizeObserver.observe(floating);\n    }\n    let frameId;\n    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n    if (animationFrame) {\n        frameLoop();\n    }\n    function frameLoop() {\n        const nextRefRect = getBoundingClientRect(reference);\n        if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n            update();\n        }\n        prevRefRect = nextRefRect;\n        frameId = requestAnimationFrame(frameLoop);\n    }\n    update();\n    return ()=>{\n        var _resizeObserver2;\n        ancestors.forEach((ancestor)=>{\n            ancestorScroll && ancestor.removeEventListener(\"scroll\", update);\n            ancestorResize && ancestor.removeEventListener(\"resize\", update);\n        });\n        cleanupIo == null || cleanupIo();\n        (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n        resizeObserver = null;\n        if (animationFrame) {\n            cancelAnimationFrame(frameId);\n        }\n    };\n}\nconst offset$1 = offset$2;\nconst shift$1 = shift$2;\nconst flip$1 = flip$2;\nconst size$1 = size$2;\nconst hide$1 = hide$2;\nconst arrow$2 = arrow$3;\nconst limitShift$1 = limitShift$2;\nconst computePosition = (reference, floating, options)=>{\n    const cache = /* @__PURE__ */ new Map();\n    const mergedOptions = {\n        platform,\n        ...options\n    };\n    const platformWithCache = {\n        ...mergedOptions.platform,\n        _c: cache\n    };\n    return computePosition$1(reference, floating, {\n        ...mergedOptions,\n        platform: platformWithCache\n    });\n};\nvar isClient = typeof document !== \"undefined\";\nvar noop = function noop2() {};\nvar index = isClient ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : noop;\nfunction deepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (typeof a === \"function\" && a.toString() === b.toString()) {\n        return true;\n    }\n    let length;\n    let i;\n    let keys;\n    if (a && b && typeof a === \"object\") {\n        if (Array.isArray(a)) {\n            length = a.length;\n            if (length !== b.length) return false;\n            for(i = length; i-- !== 0;){\n                if (!deepEqual(a[i], b[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) {\n            return false;\n        }\n        for(i = length; i-- !== 0;){\n            if (!({}).hasOwnProperty.call(b, keys[i])) {\n                return false;\n            }\n        }\n        for(i = length; i-- !== 0;){\n            const key = keys[i];\n            if (key === \"_owner\" && a.$$typeof) {\n                continue;\n            }\n            if (!deepEqual(a[key], b[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\nfunction getDPR(element) {\n    if (false) {}\n    const win = element.ownerDocument.defaultView || window;\n    return win.devicePixelRatio || 1;\n}\nfunction roundByDPR(element, value1) {\n    const dpr = getDPR(element);\n    return Math.round(value1 * dpr) / dpr;\n}\nfunction useLatestRef(value1) {\n    _s11();\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(value1);\n    index(()=>{\n        ref.current = value1;\n    });\n    return ref;\n}\n_s11(useLatestRef, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\nfunction useFloating(options) {\n    _s12();\n    if (options === void 0) {\n        options = {};\n    }\n    const { placement = \"bottom\", strategy = \"absolute\", middleware = [], platform: platform2, elements: { reference: externalReference, floating: externalFloating } = {}, transform = true, whileElementsMounted, open } = options;\n    const [data, setData] = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        x: 0,\n        y: 0,\n        strategy,\n        placement,\n        middlewareData: {},\n        isPositioned: false\n    });\n    const [latestMiddleware, setLatestMiddleware] = react__WEBPACK_IMPORTED_MODULE_1__.useState(middleware);\n    if (!deepEqual(latestMiddleware, middleware)) {\n        setLatestMiddleware(middleware);\n    }\n    const [_reference, _setReference] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [_floating, _setFloating] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const setReference = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useFloating.useCallback[setReference]\": (node)=>{\n            if (node !== referenceRef.current) {\n                referenceRef.current = node;\n                _setReference(node);\n            }\n        }\n    }[\"useFloating.useCallback[setReference]\"], []);\n    const setFloating = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useFloating.useCallback[setFloating]\": (node)=>{\n            if (node !== floatingRef.current) {\n                floatingRef.current = node;\n                _setFloating(node);\n            }\n        }\n    }[\"useFloating.useCallback[setFloating]\"], []);\n    const referenceEl = externalReference || _reference;\n    const floatingEl = externalFloating || _floating;\n    const referenceRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const floatingRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const dataRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(data);\n    const hasWhileElementsMounted = whileElementsMounted != null;\n    const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n    const platformRef = useLatestRef(platform2);\n    const openRef = useLatestRef(open);\n    const update = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useFloating.useCallback[update]\": ()=>{\n            if (!referenceRef.current || !floatingRef.current) {\n                return;\n            }\n            const config = {\n                placement,\n                strategy,\n                middleware: latestMiddleware\n            };\n            if (platformRef.current) {\n                config.platform = platformRef.current;\n            }\n            computePosition(referenceRef.current, floatingRef.current, config).then({\n                \"useFloating.useCallback[update]\": (data2)=>{\n                    const fullData = {\n                        ...data2,\n                        // The floating element's position may be recomputed while it's closed\n                        // but still mounted (such as when transitioning out). To ensure\n                        // `isPositioned` will be `false` initially on the next open, avoid\n                        // setting it to `true` when `open === false` (must be specified).\n                        isPositioned: openRef.current !== false\n                    };\n                    if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n                        dataRef.current = fullData;\n                        react_dom__WEBPACK_IMPORTED_MODULE_3__.flushSync({\n                            \"useFloating.useCallback[update]\": ()=>{\n                                setData(fullData);\n                            }\n                        }[\"useFloating.useCallback[update]\"]);\n                    }\n                }\n            }[\"useFloating.useCallback[update]\"]);\n        }\n    }[\"useFloating.useCallback[update]\"], [\n        latestMiddleware,\n        placement,\n        strategy,\n        platformRef,\n        openRef\n    ]);\n    index(()=>{\n        if (open === false && dataRef.current.isPositioned) {\n            dataRef.current.isPositioned = false;\n            setData((data2)=>({\n                    ...data2,\n                    isPositioned: false\n                }));\n        }\n    }, [\n        open\n    ]);\n    const isMountedRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    index(()=>{\n        isMountedRef.current = true;\n        return ()=>{\n            isMountedRef.current = false;\n        };\n    }, []);\n    index(()=>{\n        if (referenceEl) referenceRef.current = referenceEl;\n        if (floatingEl) floatingRef.current = floatingEl;\n        if (referenceEl && floatingEl) {\n            if (whileElementsMountedRef.current) {\n                return whileElementsMountedRef.current(referenceEl, floatingEl, update);\n            }\n            update();\n        }\n    }, [\n        referenceEl,\n        floatingEl,\n        update,\n        whileElementsMountedRef,\n        hasWhileElementsMounted\n    ]);\n    const refs = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useFloating.useMemo[refs]\": ()=>({\n                reference: referenceRef,\n                floating: floatingRef,\n                setReference,\n                setFloating\n            })\n    }[\"useFloating.useMemo[refs]\"], [\n        setReference,\n        setFloating\n    ]);\n    const elements = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useFloating.useMemo[elements]\": ()=>({\n                reference: referenceEl,\n                floating: floatingEl\n            })\n    }[\"useFloating.useMemo[elements]\"], [\n        referenceEl,\n        floatingEl\n    ]);\n    const floatingStyles = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useFloating.useMemo[floatingStyles]\": ()=>{\n            const initialStyles = {\n                position: strategy,\n                left: 0,\n                top: 0\n            };\n            if (!elements.floating) {\n                return initialStyles;\n            }\n            const x = roundByDPR(elements.floating, data.x);\n            const y = roundByDPR(elements.floating, data.y);\n            if (transform) {\n                return {\n                    ...initialStyles,\n                    transform: \"translate(\" + x + \"px, \" + y + \"px)\",\n                    ...getDPR(elements.floating) >= 1.5 && {\n                        willChange: \"transform\"\n                    }\n                };\n            }\n            return {\n                position: strategy,\n                left: x,\n                top: y\n            };\n        }\n    }[\"useFloating.useMemo[floatingStyles]\"], [\n        strategy,\n        transform,\n        elements.floating,\n        data.x,\n        data.y\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useFloating.useMemo\": ()=>({\n                ...data,\n                update,\n                refs,\n                elements,\n                floatingStyles\n            })\n    }[\"useFloating.useMemo\"], [\n        data,\n        update,\n        refs,\n        elements,\n        floatingStyles\n    ]);\n}\n_s12(useFloating, \"XAHTmgTUxWuleeuSZsrxFzZS2ho=\", false, function() {\n    return [\n        useLatestRef,\n        useLatestRef,\n        useLatestRef\n    ];\n});\nconst arrow$1 = (options)=>{\n    function isRef(value1) {\n        return ({}).hasOwnProperty.call(value1, \"current\");\n    }\n    return {\n        name: \"arrow\",\n        options,\n        fn (state) {\n            const { element, padding } = typeof options === \"function\" ? options(state) : options;\n            if (element && isRef(element)) {\n                if (element.current != null) {\n                    return arrow$2({\n                        element: element.current,\n                        padding\n                    }).fn(state);\n                }\n                return {};\n            }\n            if (element) {\n                return arrow$2({\n                    element,\n                    padding\n                }).fn(state);\n            }\n            return {};\n        }\n    };\n};\nconst offset = (options, deps)=>({\n        ...offset$1(options),\n        options: [\n            options,\n            deps\n        ]\n    });\nconst shift = (options, deps)=>({\n        ...shift$1(options),\n        options: [\n            options,\n            deps\n        ]\n    });\nconst limitShift = (options, deps)=>({\n        ...limitShift$1(options),\n        options: [\n            options,\n            deps\n        ]\n    });\nconst flip = (options, deps)=>({\n        ...flip$1(options),\n        options: [\n            options,\n            deps\n        ]\n    });\nconst size = (options, deps)=>({\n        ...size$1(options),\n        options: [\n            options,\n            deps\n        ]\n    });\nconst hide = (options, deps)=>({\n        ...hide$1(options),\n        options: [\n            options,\n            deps\n        ]\n    });\nconst arrow = (options, deps)=>({\n        ...arrow$1(options),\n        options: [\n            options,\n            deps\n        ]\n    });\nvar NAME$1 = \"Arrow\";\nvar Arrow$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c6 = (props2, forwardedRef)=>{\n    const { children, width = 10, height = 5, ...arrowProps } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.svg, {\n        ...arrowProps,\n        ref: forwardedRef,\n        width,\n        height,\n        viewBox: \"0 0 30 10\",\n        preserveAspectRatio: \"none\",\n        children: props2.asChild ? children : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"polygon\", {\n            points: \"0,0 30,0 15,10\"\n        })\n    });\n});\n_c7 = Arrow$1;\nArrow$1.displayName = NAME$1;\nvar Root$2 = Arrow$1;\nfunction useSize(element) {\n    _s13();\n    const [size2, setSize] = react__WEBPACK_IMPORTED_MODULE_1__.useState(void 0);\n    useLayoutEffect2({\n        \"useSize.useLayoutEffect2\": ()=>{\n            if (element) {\n                setSize({\n                    width: element.offsetWidth,\n                    height: element.offsetHeight\n                });\n                const resizeObserver = new ResizeObserver({\n                    \"useSize.useLayoutEffect2\": (entries)=>{\n                        if (!Array.isArray(entries)) {\n                            return;\n                        }\n                        if (!entries.length) {\n                            return;\n                        }\n                        const entry = entries[0];\n                        let width;\n                        let height;\n                        if (\"borderBoxSize\" in entry) {\n                            const borderSizeEntry = entry[\"borderBoxSize\"];\n                            const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n                            width = borderSize[\"inlineSize\"];\n                            height = borderSize[\"blockSize\"];\n                        } else {\n                            width = element.offsetWidth;\n                            height = element.offsetHeight;\n                        }\n                        setSize({\n                            width,\n                            height\n                        });\n                    }\n                }[\"useSize.useLayoutEffect2\"]);\n                resizeObserver.observe(element, {\n                    box: \"border-box\"\n                });\n                return ({\n                    \"useSize.useLayoutEffect2\": ()=>resizeObserver.unobserve(element)\n                })[\"useSize.useLayoutEffect2\"];\n            } else {\n                setSize(void 0);\n            }\n        }\n    }[\"useSize.useLayoutEffect2\"], [\n        element\n    ]);\n    return size2;\n}\n_s13(useSize, \"MUTdKijGh2ebfplLy3+PhzrHoOU=\", false, function() {\n    return [\n        useLayoutEffect2\n    ];\n});\nvar POPPER_NAME = \"Popper\";\nvar [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);\nvar [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);\nvar Popper = (props2)=>{\n    _s14();\n    const { __scopePopper, children } = props2;\n    const [anchor, setAnchor] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopperProvider, {\n        scope: __scopePopper,\n        anchor,\n        onAnchorChange: setAnchor,\n        children\n    });\n};\n_s14(Popper, \"wxYvbWVl4wPDiI7jlInCOrjrm3Y=\");\n_c8 = Popper;\nPopper.displayName = POPPER_NAME;\nvar ANCHOR_NAME$2 = \"PopperAnchor\";\nvar PopperAnchor = /*#__PURE__*/ _s15(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c9 = _s15((props2, forwardedRef)=>{\n    _s15();\n    const { __scopePopper, virtualRef, ...anchorProps } = props2;\n    const context = usePopperContext(ANCHOR_NAME$2, __scopePopper);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"PopperAnchor.useEffect\": ()=>{\n            context.onAnchorChange((virtualRef == null ? void 0 : virtualRef.current) || ref.current);\n        }\n    }[\"PopperAnchor.useEffect\"]);\n    return virtualRef ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        ...anchorProps,\n        ref: composedRefs\n    });\n}, \"aNTYZQIUknAyxpmCTV83WEqvsAs=\", false, function() {\n    return [\n        usePopperContext,\n        useComposedRefs\n    ];\n})), \"aNTYZQIUknAyxpmCTV83WEqvsAs=\", false, function() {\n    return [\n        usePopperContext,\n        useComposedRefs\n    ];\n});\n_c10 = PopperAnchor;\nPopperAnchor.displayName = ANCHOR_NAME$2;\nvar CONTENT_NAME$6 = \"PopperContent\";\nvar [PopperContentProvider, useContentContext] = createPopperContext(CONTENT_NAME$6);\nvar PopperContent = /*#__PURE__*/ _s16(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c11 = _s16((props2, forwardedRef)=>{\n    _s16();\n    var _a, _b, _c, _d, _e, _f;\n    const { __scopePopper, side = \"bottom\", sideOffset = 0, align = \"center\", alignOffset = 0, arrowPadding = 0, avoidCollisions = true, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = \"partial\", hideWhenDetached = false, updatePositionStrategy = \"optimized\", onPlaced, ...contentProps } = props2;\n    const context = usePopperContext(CONTENT_NAME$6, __scopePopper);\n    const [content, setContent] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"PopperContent.useComposedRefs[composedRefs]\": (node)=>setContent(node)\n    }[\"PopperContent.useComposedRefs[composedRefs]\"]);\n    const [arrow$12, setArrow] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const arrowSize = useSize(arrow$12);\n    var _ref;\n    const arrowWidth = (_ref = arrowSize == null ? void 0 : arrowSize.width) !== null && _ref !== void 0 ? _ref : 0;\n    var _ref1;\n    const arrowHeight = (_ref1 = arrowSize == null ? void 0 : arrowSize.height) !== null && _ref1 !== void 0 ? _ref1 : 0;\n    const desiredPlacement = side + (align !== \"center\" ? \"-\" + align : \"\");\n    const collisionPadding = typeof collisionPaddingProp === \"number\" ? collisionPaddingProp : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        ...collisionPaddingProp\n    };\n    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [\n        collisionBoundary\n    ];\n    const hasExplicitBoundaries = boundary.length > 0;\n    const detectOverflowOptions = {\n        padding: collisionPadding,\n        boundary: boundary.filter(isNotNull),\n        // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries\n        altBoundary: hasExplicitBoundaries\n    };\n    const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({\n        // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues\n        strategy: \"fixed\",\n        placement: desiredPlacement,\n        whileElementsMounted: {\n            \"PopperContent.useFloating\": function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const cleanup = autoUpdate(...args, {\n                    animationFrame: updatePositionStrategy === \"always\"\n                });\n                return cleanup;\n            }\n        }[\"PopperContent.useFloating\"],\n        elements: {\n            reference: context.anchor\n        },\n        middleware: [\n            offset({\n                mainAxis: sideOffset + arrowHeight,\n                alignmentAxis: alignOffset\n            }),\n            avoidCollisions && shift({\n                mainAxis: true,\n                crossAxis: false,\n                limiter: sticky === \"partial\" ? limitShift() : void 0,\n                ...detectOverflowOptions\n            }),\n            avoidCollisions && flip({\n                ...detectOverflowOptions\n            }),\n            size({\n                ...detectOverflowOptions,\n                apply: {\n                    \"PopperContent.useFloating\": (param)=>{\n                        let { elements, rects, availableWidth, availableHeight } = param;\n                        const { width: anchorWidth, height: anchorHeight } = rects.reference;\n                        const contentStyle = elements.floating.style;\n                        contentStyle.setProperty(\"--radix-popper-available-width\", \"\".concat(availableWidth, \"px\"));\n                        contentStyle.setProperty(\"--radix-popper-available-height\", \"\".concat(availableHeight, \"px\"));\n                        contentStyle.setProperty(\"--radix-popper-anchor-width\", \"\".concat(anchorWidth, \"px\"));\n                        contentStyle.setProperty(\"--radix-popper-anchor-height\", \"\".concat(anchorHeight, \"px\"));\n                    }\n                }[\"PopperContent.useFloating\"]\n            }),\n            arrow$12 && arrow({\n                element: arrow$12,\n                padding: arrowPadding\n            }),\n            transformOrigin({\n                arrowWidth,\n                arrowHeight\n            }),\n            hideWhenDetached && hide({\n                strategy: \"referenceHidden\",\n                ...detectOverflowOptions\n            })\n        ]\n    });\n    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);\n    const handlePlaced = useCallbackRef$1(onPlaced);\n    useLayoutEffect2({\n        \"PopperContent.useLayoutEffect2\": ()=>{\n            if (isPositioned) {\n                handlePlaced == null ? void 0 : handlePlaced();\n            }\n        }\n    }[\"PopperContent.useLayoutEffect2\"], [\n        isPositioned,\n        handlePlaced\n    ]);\n    const arrowX = (_a = middlewareData.arrow) == null ? void 0 : _a.x;\n    const arrowY = (_b = middlewareData.arrow) == null ? void 0 : _b.y;\n    const cannotCenterArrow = ((_c = middlewareData.arrow) == null ? void 0 : _c.centerOffset) !== 0;\n    const [contentZIndex, setContentZIndex] = react__WEBPACK_IMPORTED_MODULE_1__.useState();\n    useLayoutEffect2({\n        \"PopperContent.useLayoutEffect2\": ()=>{\n            if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n        }\n    }[\"PopperContent.useLayoutEffect2\"], [\n        content\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref: refs.setFloating,\n        \"data-radix-popper-content-wrapper\": \"\",\n        style: {\n            ...floatingStyles,\n            transform: isPositioned ? floatingStyles.transform : \"translate(0, -200%)\",\n            // keep off the page when measuring\n            minWidth: \"max-content\",\n            zIndex: contentZIndex,\n            [\"--radix-popper-transform-origin\"]: [\n                (_d = middlewareData.transformOrigin) == null ? void 0 : _d.x,\n                (_e = middlewareData.transformOrigin) == null ? void 0 : _e.y\n            ].join(\" \"),\n            // hide the content if using the hide middleware and should be hidden\n            // set visibility to hidden and disable pointer events so the UI behaves\n            // as if the PopperContent isn't there at all\n            ...((_f = middlewareData.hide) == null ? void 0 : _f.referenceHidden) && {\n                visibility: \"hidden\",\n                pointerEvents: \"none\"\n            }\n        },\n        dir: props2.dir,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopperContentProvider, {\n            scope: __scopePopper,\n            placedSide,\n            onArrowChange: setArrow,\n            arrowX,\n            arrowY,\n            shouldHideArrow: cannotCenterArrow,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n                \"data-side\": placedSide,\n                \"data-align\": placedAlign,\n                ...contentProps,\n                ref: composedRefs,\n                style: {\n                    ...contentProps.style,\n                    // if the PopperContent hasn't been placed yet (not all measurements done)\n                    // we prevent animations so that users's animation don't kick in too early referring wrong sides\n                    animation: !isPositioned ? \"none\" : void 0\n                }\n            })\n        })\n    });\n}, \"NC1za5D4iRzVo0F11c0cR/8ABL0=\", false, function() {\n    return [\n        usePopperContext,\n        useComposedRefs,\n        useSize,\n        useFloating,\n        useCallbackRef$1,\n        useLayoutEffect2,\n        useLayoutEffect2\n    ];\n})), \"NC1za5D4iRzVo0F11c0cR/8ABL0=\", false, function() {\n    return [\n        usePopperContext,\n        useComposedRefs,\n        useSize,\n        useFloating,\n        useCallbackRef$1,\n        useLayoutEffect2,\n        useLayoutEffect2\n    ];\n});\n_c12 = PopperContent;\nPopperContent.displayName = CONTENT_NAME$6;\nvar ARROW_NAME$5 = \"PopperArrow\";\nvar OPPOSITE_SIDE = {\n    top: \"bottom\",\n    right: \"left\",\n    bottom: \"top\",\n    left: \"right\"\n};\nvar PopperArrow = /*#__PURE__*/ _s17(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c13 = _s17(function PopperArrow2(props2, forwardedRef) {\n    _s17();\n    const { __scopePopper, ...arrowProps } = props2;\n    const contentContext = useContentContext(ARROW_NAME$5, __scopePopper);\n    const baseSide = OPPOSITE_SIDE[contentContext.placedSide];\n    return(// we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n    // doesn't report size as we'd expect on SVG elements.\n    // it reports their bounding box which is effectively the largest path inside the SVG.\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        ref: contentContext.onArrowChange,\n        style: {\n            position: \"absolute\",\n            left: contentContext.arrowX,\n            top: contentContext.arrowY,\n            [baseSide]: 0,\n            transformOrigin: {\n                top: \"\",\n                right: \"0 0\",\n                bottom: \"center 0\",\n                left: \"100% 0\"\n            }[contentContext.placedSide],\n            transform: {\n                top: \"translateY(100%)\",\n                right: \"translateY(50%) rotate(90deg) translateX(-50%)\",\n                bottom: \"rotate(180deg)\",\n                left: \"translateY(50%) rotate(-90deg) translateX(50%)\"\n            }[contentContext.placedSide],\n            visibility: contentContext.shouldHideArrow ? \"hidden\" : void 0\n        },\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root$2, {\n            ...arrowProps,\n            ref: forwardedRef,\n            style: {\n                ...arrowProps.style,\n                // ensures the element can be measured correctly (mostly for if SVG)\n                display: \"block\"\n            }\n        })\n    }));\n}, \"VtYBvsFWU0YFzmBU5dyx7SVFyFY=\", false, function() {\n    return [\n        useContentContext\n    ];\n})), \"VtYBvsFWU0YFzmBU5dyx7SVFyFY=\", false, function() {\n    return [\n        useContentContext\n    ];\n});\n_c14 = PopperArrow;\nPopperArrow.displayName = ARROW_NAME$5;\nfunction isNotNull(value1) {\n    return value1 !== null;\n}\nvar transformOrigin = (options)=>({\n        name: \"transformOrigin\",\n        options,\n        fn (data) {\n            var _a, _b, _c;\n            const { placement, rects, middlewareData } = data;\n            const cannotCenterArrow = ((_a = middlewareData.arrow) == null ? void 0 : _a.centerOffset) !== 0;\n            const isArrowHidden = cannotCenterArrow;\n            const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;\n            const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;\n            const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);\n            const noArrowAlign = {\n                start: \"0%\",\n                center: \"50%\",\n                end: \"100%\"\n            }[placedAlign];\n            var _ref;\n            const arrowXCenter = ((_ref = (_b = middlewareData.arrow) == null ? void 0 : _b.x) !== null && _ref !== void 0 ? _ref : 0) + arrowWidth / 2;\n            var _ref1;\n            const arrowYCenter = ((_ref1 = (_c = middlewareData.arrow) == null ? void 0 : _c.y) !== null && _ref1 !== void 0 ? _ref1 : 0) + arrowHeight / 2;\n            let x = \"\";\n            let y = \"\";\n            if (placedSide === \"bottom\") {\n                x = isArrowHidden ? noArrowAlign : \"\".concat(arrowXCenter, \"px\");\n                y = \"\".concat(-arrowHeight, \"px\");\n            } else if (placedSide === \"top\") {\n                x = isArrowHidden ? noArrowAlign : \"\".concat(arrowXCenter, \"px\");\n                y = \"\".concat(rects.floating.height + arrowHeight, \"px\");\n            } else if (placedSide === \"right\") {\n                x = \"\".concat(-arrowHeight, \"px\");\n                y = isArrowHidden ? noArrowAlign : \"\".concat(arrowYCenter, \"px\");\n            } else if (placedSide === \"left\") {\n                x = \"\".concat(rects.floating.width + arrowHeight, \"px\");\n                y = isArrowHidden ? noArrowAlign : \"\".concat(arrowYCenter, \"px\");\n            }\n            return {\n                data: {\n                    x,\n                    y\n                }\n            };\n        }\n    });\nfunction getSideAndAlignFromPlacement(placement) {\n    const [side, align = \"center\"] = placement.split(\"-\");\n    return [\n        side,\n        align\n    ];\n}\nvar Root2$4 = Popper;\nvar Anchor = PopperAnchor;\nvar Content$1 = PopperContent;\nvar Arrow = PopperArrow;\nvar PORTAL_NAME$5 = \"Portal\";\nvar Portal$4 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s18((props2, forwardedRef)=>{\n    _s18();\n    var _a;\n    const { container: containerProp, ...portalProps } = props2;\n    const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    useLayoutEffect2({\n        \"Portal$4.useLayoutEffect2\": ()=>setMounted(true)\n    }[\"Portal$4.useLayoutEffect2\"], []);\n    const container = containerProp || mounted && ((_a = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : _a.body);\n    return container ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        ...portalProps,\n        ref: forwardedRef\n    }), container) : null;\n}, \"atYI5tO5VrRILMBozELgAwhUtMo=\", false, function() {\n    return [\n        useLayoutEffect2\n    ];\n}));\n_c15 = Portal$4;\nPortal$4.displayName = PORTAL_NAME$5;\nvar useInsertionEffect = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_1__, 2)))[\" useInsertionEffect \".trim().toString()] || useLayoutEffect2;\nfunction useControllableState(param) {\n    let { prop, defaultProp, onChange = ()=>{}, caller } = param;\n    _s19();\n    const [uncontrolledProp, setUncontrolledProp, onChangeRef] = useUncontrolledState({\n        defaultProp,\n        onChange\n    });\n    const isControlled = prop !== void 0;\n    const value1 = isControlled ? prop : uncontrolledProp;\n    {\n        const isControlledRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(prop !== void 0);\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n            \"useControllableState.useEffect\": ()=>{\n                const wasControlled = isControlledRef.current;\n                if (wasControlled !== isControlled) {\n                    const from = wasControlled ? \"controlled\" : \"uncontrolled\";\n                    const to = isControlled ? \"controlled\" : \"uncontrolled\";\n                    console.warn(\"\".concat(caller, \" is changing from \").concat(from, \" to \").concat(to, \". Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.\"));\n                }\n                isControlledRef.current = isControlled;\n            }\n        }[\"useControllableState.useEffect\"], [\n            isControlled,\n            caller\n        ]);\n    }\n    const setValue = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useControllableState.useCallback[setValue]\": (nextValue)=>{\n            var _a;\n            if (isControlled) {\n                const value2 = isFunction(nextValue) ? nextValue(prop) : nextValue;\n                if (value2 !== prop) {\n                    (_a = onChangeRef.current) == null ? void 0 : _a.call(onChangeRef, value2);\n                }\n            } else {\n                setUncontrolledProp(nextValue);\n            }\n        }\n    }[\"useControllableState.useCallback[setValue]\"], [\n        isControlled,\n        prop,\n        setUncontrolledProp,\n        onChangeRef\n    ]);\n    return [\n        value1,\n        setValue\n    ];\n}\n_s19(useControllableState, \"kGqC3owQ3izYzHP0rDNvv6Vq3fk=\", false, function() {\n    return [\n        useUncontrolledState\n    ];\n});\nfunction useUncontrolledState(param) {\n    let { defaultProp, onChange } = param;\n    _s20();\n    const [value1, setValue] = react__WEBPACK_IMPORTED_MODULE_1__.useState(defaultProp);\n    const prevValueRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(value1);\n    const onChangeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(onChange);\n    useInsertionEffect({\n        \"useUncontrolledState.useInsertionEffect\": ()=>{\n            onChangeRef.current = onChange;\n        }\n    }[\"useUncontrolledState.useInsertionEffect\"], [\n        onChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useUncontrolledState.useEffect\": ()=>{\n            var _a;\n            if (prevValueRef.current !== value1) {\n                (_a = onChangeRef.current) == null ? void 0 : _a.call(onChangeRef, value1);\n                prevValueRef.current = value1;\n            }\n        }\n    }[\"useUncontrolledState.useEffect\"], [\n        value1,\n        prevValueRef\n    ]);\n    return [\n        value1,\n        setValue,\n        onChangeRef\n    ];\n}\n_s20(useUncontrolledState, \"3h0qHZ/1AyfNkzg03PGywB5pC7Y=\", false, function() {\n    return [\n        useInsertionEffect\n    ];\n});\nfunction isFunction(value1) {\n    return typeof value1 === \"function\";\n}\nfunction usePrevious(value1) {\n    _s21();\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef({\n        value: value1,\n        previous: value1\n    });\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"usePrevious.useMemo\": ()=>{\n            if (ref.current.value !== value1) {\n                ref.current.previous = ref.current.value;\n                ref.current.value = value1;\n            }\n            return ref.current.previous;\n        }\n    }[\"usePrevious.useMemo\"], [\n        value1\n    ]);\n}\n_s21(usePrevious, \"ByE6CK57tkoA8UB2NSxtIltRrK4=\");\nvar VISUALLY_HIDDEN_STYLES = Object.freeze({\n    // See: https://github.com/twbs/bootstrap/blob/main/scss/mixins/_visually-hidden.scss\n    position: \"absolute\",\n    border: 0,\n    width: 1,\n    height: 1,\n    padding: 0,\n    margin: -1,\n    overflow: \"hidden\",\n    clip: \"rect(0, 0, 0, 0)\",\n    whiteSpace: \"nowrap\",\n    wordWrap: \"normal\"\n});\nvar NAME = \"VisuallyHidden\";\nvar VisuallyHidden = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c16 = (props2, forwardedRef)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.span, {\n        ...props2,\n        ref: forwardedRef,\n        style: {\n            ...VISUALLY_HIDDEN_STYLES,\n            ...props2.style\n        }\n    });\n});\n_c17 = VisuallyHidden;\nVisuallyHidden.displayName = NAME;\nvar Root$1 = VisuallyHidden;\nvar getDefaultParent = function(originalTarget) {\n    if (typeof document === \"undefined\") {\n        return null;\n    }\n    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;\n    return sampleTarget.ownerDocument.body;\n};\nvar counterMap = /* @__PURE__ */ new WeakMap();\nvar uncontrolledNodes = /* @__PURE__ */ new WeakMap();\nvar markerMap = {};\nvar lockCount = 0;\nvar unwrapHost = function(node) {\n    return node && (node.host || unwrapHost(node.parentNode));\n};\nvar correctTargets = function(parent, targets) {\n    return targets.map(function(target) {\n        if (parent.contains(target)) {\n            return target;\n        }\n        var correctedTarget = unwrapHost(target);\n        if (correctedTarget && parent.contains(correctedTarget)) {\n            return correctedTarget;\n        }\n        console.error(\"aria-hidden\", target, \"in not contained inside\", parent, \". Doing nothing\");\n        return null;\n    }).filter(function(x) {\n        return Boolean(x);\n    });\n};\nvar applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {\n    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [\n        originalTarget\n    ]);\n    if (!markerMap[markerName]) {\n        markerMap[markerName] = /* @__PURE__ */ new WeakMap();\n    }\n    var markerCounter = markerMap[markerName];\n    var hiddenNodes = [];\n    var elementsToKeep = /* @__PURE__ */ new Set();\n    var elementsToStop = new Set(targets);\n    var keep = function(el) {\n        if (!el || elementsToKeep.has(el)) {\n            return;\n        }\n        elementsToKeep.add(el);\n        keep(el.parentNode);\n    };\n    targets.forEach(keep);\n    var deep = function(parent) {\n        if (!parent || elementsToStop.has(parent)) {\n            return;\n        }\n        Array.prototype.forEach.call(parent.children, function(node) {\n            if (elementsToKeep.has(node)) {\n                deep(node);\n            } else {\n                try {\n                    var attr = node.getAttribute(controlAttribute);\n                    var alreadyHidden = attr !== null && attr !== \"false\";\n                    var counterValue = (counterMap.get(node) || 0) + 1;\n                    var markerValue = (markerCounter.get(node) || 0) + 1;\n                    counterMap.set(node, counterValue);\n                    markerCounter.set(node, markerValue);\n                    hiddenNodes.push(node);\n                    if (counterValue === 1 && alreadyHidden) {\n                        uncontrolledNodes.set(node, true);\n                    }\n                    if (markerValue === 1) {\n                        node.setAttribute(markerName, \"true\");\n                    }\n                    if (!alreadyHidden) {\n                        node.setAttribute(controlAttribute, \"true\");\n                    }\n                } catch (e) {\n                    console.error(\"aria-hidden: cannot operate on \", node, e);\n                }\n            }\n        });\n    };\n    deep(parentNode);\n    elementsToKeep.clear();\n    lockCount++;\n    return function() {\n        hiddenNodes.forEach(function(node) {\n            var counterValue = counterMap.get(node) - 1;\n            var markerValue = markerCounter.get(node) - 1;\n            counterMap.set(node, counterValue);\n            markerCounter.set(node, markerValue);\n            if (!counterValue) {\n                if (!uncontrolledNodes.has(node)) {\n                    node.removeAttribute(controlAttribute);\n                }\n                uncontrolledNodes.delete(node);\n            }\n            if (!markerValue) {\n                node.removeAttribute(markerName);\n            }\n        });\n        lockCount--;\n        if (!lockCount) {\n            counterMap = /* @__PURE__ */ new WeakMap();\n            counterMap = /* @__PURE__ */ new WeakMap();\n            uncontrolledNodes = /* @__PURE__ */ new WeakMap();\n            markerMap = {};\n        }\n    };\n};\nvar hideOthers = function(originalTarget, parentNode, markerName) {\n    if (markerName === void 0) {\n        markerName = \"data-aria-hidden\";\n    }\n    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [\n        originalTarget\n    ]);\n    var activeParentNode = getDefaultParent(originalTarget);\n    if (!activeParentNode) {\n        return function() {\n            return null;\n        };\n    }\n    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll(\"[aria-live], script\")));\n    return applyAttributeToOthers(targets, activeParentNode, markerName, \"aria-hidden\");\n};\nvar __assign = function() {\n    __assign = Object.assign || function __assign2(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nvar zeroRightClassName = \"right-scroll-bar-position\";\nvar fullWidthClassName = \"width-before-scroll-bar\";\nvar noScrollbarsClassName = \"with-scroll-bars-hidden\";\nvar removedBarSizeVariable = \"--removed-body-scroll-bar-size\";\nfunction assignRef(ref, value1) {\n    if (typeof ref === \"function\") {\n        ref(value1);\n    } else if (ref) {\n        ref.current = value1;\n    }\n    return ref;\n}\nfunction useCallbackRef(initialValue, callback) {\n    _s22();\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        \"useCallbackRef.useState\": function() {\n            return {\n                // value\n                value: initialValue,\n                // last callback\n                callback,\n                // \"memoized\" public interface\n                facade: {\n                    get current () {\n                        return ref.value;\n                    },\n                    set current (value){\n                        var last = ref.value;\n                        if (last !== value) {\n                            ref.value = value;\n                            ref.callback(value, last);\n                        }\n                    }\n                }\n            };\n        }\n    }[\"useCallbackRef.useState\"])[0];\n    ref.callback = callback;\n    return ref.facade;\n}\n_s22(useCallbackRef, \"7rNyFrw5FVpFFCFYkWAjQci0NUk=\");\nvar useIsomorphicLayoutEffect$1 =  true ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : 0;\nvar currentValues = /* @__PURE__ */ new WeakMap();\nfunction useMergeRefs(refs, defaultValue) {\n    _s23();\n    var callbackRef = useCallbackRef(null, {\n        \"useMergeRefs.useCallbackRef[callbackRef]\": function(newValue) {\n            return refs.forEach({\n                \"useMergeRefs.useCallbackRef[callbackRef]\": function(ref) {\n                    return assignRef(ref, newValue);\n                }\n            }[\"useMergeRefs.useCallbackRef[callbackRef]\"]);\n        }\n    }[\"useMergeRefs.useCallbackRef[callbackRef]\"]);\n    useIsomorphicLayoutEffect$1({\n        \"useMergeRefs.useIsomorphicLayoutEffect$1\": function() {\n            var oldValue = currentValues.get(callbackRef);\n            if (oldValue) {\n                var prevRefs_1 = new Set(oldValue);\n                var nextRefs_1 = new Set(refs);\n                var current_1 = callbackRef.current;\n                prevRefs_1.forEach({\n                    \"useMergeRefs.useIsomorphicLayoutEffect$1\": function(ref) {\n                        if (!nextRefs_1.has(ref)) {\n                            assignRef(ref, null);\n                        }\n                    }\n                }[\"useMergeRefs.useIsomorphicLayoutEffect$1\"]);\n                nextRefs_1.forEach({\n                    \"useMergeRefs.useIsomorphicLayoutEffect$1\": function(ref) {\n                        if (!prevRefs_1.has(ref)) {\n                            assignRef(ref, current_1);\n                        }\n                    }\n                }[\"useMergeRefs.useIsomorphicLayoutEffect$1\"]);\n            }\n            currentValues.set(callbackRef, refs);\n        }\n    }[\"useMergeRefs.useIsomorphicLayoutEffect$1\"], [\n        refs\n    ]);\n    return callbackRef;\n}\n_s23(useMergeRefs, \"QNd1GyKIaRJf6VvGRaWdWkiMr3o=\", false, function() {\n    return [\n        useCallbackRef,\n        useIsomorphicLayoutEffect$1\n    ];\n});\nfunction ItoI(a) {\n    return a;\n}\n_c18 = ItoI;\nfunction innerCreateMedium(defaults, middleware) {\n    if (middleware === void 0) {\n        middleware = ItoI;\n    }\n    var buffer = [];\n    var assigned = false;\n    var medium = {\n        read: function() {\n            if (assigned) {\n                throw new Error(\"Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.\");\n            }\n            if (buffer.length) {\n                return buffer[buffer.length - 1];\n            }\n            return defaults;\n        },\n        useMedium: function(data) {\n            var item = middleware(data, assigned);\n            buffer.push(item);\n            return function() {\n                buffer = buffer.filter(function(x) {\n                    return x !== item;\n                });\n            };\n        },\n        assignSyncMedium: function(cb) {\n            assigned = true;\n            while(buffer.length){\n                var cbs = buffer;\n                buffer = [];\n                cbs.forEach(cb);\n            }\n            buffer = {\n                push: function(x) {\n                    return cb(x);\n                },\n                filter: function() {\n                    return buffer;\n                }\n            };\n        },\n        assignMedium: function(cb) {\n            assigned = true;\n            var pendingQueue = [];\n            if (buffer.length) {\n                var cbs = buffer;\n                buffer = [];\n                cbs.forEach(cb);\n                pendingQueue = buffer;\n            }\n            var executeQueue = function() {\n                var cbs2 = pendingQueue;\n                pendingQueue = [];\n                cbs2.forEach(cb);\n            };\n            var cycle = function() {\n                return Promise.resolve().then(executeQueue);\n            };\n            cycle();\n            buffer = {\n                push: function(x) {\n                    pendingQueue.push(x);\n                    cycle();\n                },\n                filter: function(filter) {\n                    pendingQueue = pendingQueue.filter(filter);\n                    return buffer;\n                }\n            };\n        }\n    };\n    return medium;\n}\nfunction createSidecarMedium(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var medium = innerCreateMedium(null);\n    medium.options = __assign({\n        async: true,\n        ssr: false\n    }, options);\n    return medium;\n}\nvar SideCar$1 = function(_a) {\n    var sideCar = _a.sideCar, rest = __rest(_a, [\n        \"sideCar\"\n    ]);\n    if (!sideCar) {\n        throw new Error(\"Sidecar: please provide `sideCar` property to import the right car\");\n    }\n    var Target = sideCar.read();\n    if (!Target) {\n        throw new Error(\"Sidecar medium not found\");\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Target, __assign({}, rest));\n};\n_c19 = SideCar$1;\nSideCar$1.isSideCarExport = true;\nfunction exportSidecar(medium, exported) {\n    _s24();\n    medium.useMedium(exported);\n    return SideCar$1;\n}\n_s24(exportSidecar, \"0aCgnTyM7atAXXeFUpjbshty2ms=\", true);\nvar effectCar = createSidecarMedium();\nvar nothing = function() {\n    return;\n};\nvar RemoveScroll = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s25(function(props2, parentRef) {\n    _s25();\n    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var _a = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        onScrollCapture: nothing,\n        onWheelCapture: nothing,\n        onTouchMoveCapture: nothing\n    }), callbacks = _a[0], setCallbacks = _a[1];\n    var forwardProps = props2.forwardProps, children = props2.children, className = props2.className, removeScrollBar = props2.removeScrollBar, enabled = props2.enabled, shards = props2.shards, sideCar = props2.sideCar, noRelative = props2.noRelative, noIsolation = props2.noIsolation, inert = props2.inert, allowPinchZoom = props2.allowPinchZoom, _b = props2.as, Container = _b === void 0 ? \"div\" : _b, gapMode = props2.gapMode, rest = __rest(props2, [\n        \"forwardProps\",\n        \"children\",\n        \"className\",\n        \"removeScrollBar\",\n        \"enabled\",\n        \"shards\",\n        \"sideCar\",\n        \"noRelative\",\n        \"noIsolation\",\n        \"inert\",\n        \"allowPinchZoom\",\n        \"as\",\n        \"gapMode\"\n    ]);\n    var SideCar2 = sideCar;\n    var containerRef = useMergeRefs([\n        ref,\n        parentRef\n    ]);\n    var containerProps = __assign(__assign({}, rest), callbacks);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, enabled && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SideCar2, {\n        sideCar: effectCar,\n        removeScrollBar,\n        shards,\n        noRelative,\n        noIsolation,\n        inert,\n        setCallbacks,\n        allowPinchZoom: !!allowPinchZoom,\n        lockRef: ref,\n        gapMode\n    }), forwardProps ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(react__WEBPACK_IMPORTED_MODULE_1__.Children.only(children), __assign(__assign({}, containerProps), {\n        ref: containerRef\n    })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Container, __assign({}, containerProps, {\n        className,\n        ref: containerRef\n    }), children));\n}, \"apjj+Qn1L55FnVfIKkA8vOS2WlY=\", false, function() {\n    return [\n        useMergeRefs\n    ];\n}));\n_c20 = RemoveScroll;\nRemoveScroll.defaultProps = {\n    enabled: true,\n    removeScrollBar: true,\n    inert: false\n};\nRemoveScroll.classNames = {\n    fullWidth: fullWidthClassName,\n    zeroRight: zeroRightClassName\n};\nvar getNonce = function() {\n    if (true) {\n        return __webpack_require__.nc;\n    }\n    return void 0;\n};\nfunction makeStyleTag() {\n    if (!document) return null;\n    var tag = document.createElement(\"style\");\n    tag.type = \"text/css\";\n    var nonce = getNonce();\n    if (nonce) {\n        tag.setAttribute(\"nonce\", nonce);\n    }\n    return tag;\n}\nfunction injectStyles(tag, css) {\n    if (tag.styleSheet) {\n        tag.styleSheet.cssText = css;\n    } else {\n        tag.appendChild(document.createTextNode(css));\n    }\n}\nfunction insertStyleTag(tag) {\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    head.appendChild(tag);\n}\nvar stylesheetSingleton = function() {\n    var counter2 = 0;\n    var stylesheet = null;\n    return {\n        add: function(style) {\n            if (counter2 == 0) {\n                if (stylesheet = makeStyleTag()) {\n                    injectStyles(stylesheet, style);\n                    insertStyleTag(stylesheet);\n                }\n            }\n            counter2++;\n        },\n        remove: function() {\n            counter2--;\n            if (!counter2 && stylesheet) {\n                stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);\n                stylesheet = null;\n            }\n        }\n    };\n};\nvar styleHookSingleton = function() {\n    var _s = $RefreshSig$();\n    var sheet = stylesheetSingleton();\n    return _s(function(styles, isDynamic) {\n        _s();\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n            \"styleHookSingleton.useEffect\": function() {\n                sheet.add(styles);\n                return ({\n                    \"styleHookSingleton.useEffect\": function() {\n                        sheet.remove();\n                    }\n                })[\"styleHookSingleton.useEffect\"];\n            }\n        }[\"styleHookSingleton.useEffect\"], [\n            styles && isDynamic\n        ]);\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n};\nvar styleSingleton = function() {\n    var _s = $RefreshSig$();\n    var useStyle = styleHookSingleton();\n    var Sheet = function(_a) {\n        _s();\n        var styles = _a.styles, dynamic = _a.dynamic;\n        useStyle(styles, dynamic);\n        return null;\n    };\n    _s(Sheet, \"AniA8RSjZxnebI5dYsYaENQ1HaE=\", false, function() {\n        return [\n            useStyle\n        ];\n    });\n    return Sheet;\n};\nvar zeroGap = {\n    left: 0,\n    top: 0,\n    right: 0,\n    gap: 0\n};\nvar parse = function(x) {\n    return parseInt(x || \"\", 10) || 0;\n};\nvar getOffset = function(gapMode) {\n    var cs = window.getComputedStyle(document.body);\n    var left = cs[gapMode === \"padding\" ? \"paddingLeft\" : \"marginLeft\"];\n    var top = cs[gapMode === \"padding\" ? \"paddingTop\" : \"marginTop\"];\n    var right = cs[gapMode === \"padding\" ? \"paddingRight\" : \"marginRight\"];\n    return [\n        parse(left),\n        parse(top),\n        parse(right)\n    ];\n};\nvar getGapWidth = function(gapMode) {\n    if (gapMode === void 0) {\n        gapMode = \"margin\";\n    }\n    if (false) {}\n    var offsets = getOffset(gapMode);\n    var documentWidth = document.documentElement.clientWidth;\n    var windowWidth = window.innerWidth;\n    return {\n        left: offsets[0],\n        top: offsets[1],\n        right: offsets[2],\n        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])\n    };\n};\nvar Style = styleSingleton();\n_c21 = Style;\nvar lockAttribute = \"data-scroll-locked\";\nvar getStyles = function(_a, allowRelative, gapMode, important) {\n    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;\n    if (gapMode === void 0) {\n        gapMode = \"margin\";\n    }\n    return \"\\n  .\".concat(noScrollbarsClassName, \" {\\n   overflow: hidden \").concat(important, \";\\n   padding-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  body[\").concat(lockAttribute, \"] {\\n    overflow: hidden \").concat(important, \";\\n    overscroll-behavior: contain;\\n    \").concat([\n        allowRelative && \"position: relative \".concat(important, \";\"),\n        gapMode === \"margin\" && \"\\n    padding-left: \".concat(left, \"px;\\n    padding-top: \").concat(top, \"px;\\n    padding-right: \").concat(right, \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n    \"),\n        gapMode === \"padding\" && \"padding-right: \".concat(gap, \"px \").concat(important, \";\")\n    ].filter(Boolean).join(\"\"), \"\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" {\\n    right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" {\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" .\").concat(zeroRightClassName, \" {\\n    right: 0 \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" .\").concat(fullWidthClassName, \" {\\n    margin-right: 0 \").concat(important, \";\\n  }\\n  \\n  body[\").concat(lockAttribute, \"] {\\n    \").concat(removedBarSizeVariable, \": \").concat(gap, \"px;\\n  }\\n\");\n};\nvar getCurrentUseCounter = function() {\n    var counter2 = parseInt(document.body.getAttribute(lockAttribute) || \"0\", 10);\n    return isFinite(counter2) ? counter2 : 0;\n};\nvar useLockAttribute = function() {\n    _s26();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useLockAttribute.useEffect\": function() {\n            document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());\n            return ({\n                \"useLockAttribute.useEffect\": function() {\n                    var newCounter = getCurrentUseCounter() - 1;\n                    if (newCounter <= 0) {\n                        document.body.removeAttribute(lockAttribute);\n                    } else {\n                        document.body.setAttribute(lockAttribute, newCounter.toString());\n                    }\n                }\n            })[\"useLockAttribute.useEffect\"];\n        }\n    }[\"useLockAttribute.useEffect\"], []);\n};\n_s26(useLockAttribute, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nvar RemoveScrollBar = function(_a) {\n    _s27();\n    var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? \"margin\" : _b;\n    useLockAttribute();\n    var gap = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"RemoveScrollBar.useMemo[gap]\": function() {\n            return getGapWidth(gapMode);\n        }\n    }[\"RemoveScrollBar.useMemo[gap]\"], [\n        gapMode\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Style, {\n        styles: getStyles(gap, !noRelative, gapMode, !noImportant ? \"!important\" : \"\")\n    });\n};\n_s27(RemoveScrollBar, \"vC53FQEzYejZxD8H9BLjjpRLdwo=\", false, function() {\n    return [\n        useLockAttribute\n    ];\n});\n_c22 = RemoveScrollBar;\nvar passiveSupported = false;\nif (true) {\n    try {\n        var options = Object.defineProperty({}, \"passive\", {\n            get: function() {\n                passiveSupported = true;\n                return true;\n            }\n        });\n        window.addEventListener(\"test\", options, options);\n        window.removeEventListener(\"test\", options, options);\n    } catch (err) {\n        passiveSupported = false;\n    }\n}\nvar nonPassive = passiveSupported ? {\n    passive: false\n} : false;\nvar alwaysContainsScroll = function(node) {\n    return node.tagName === \"TEXTAREA\";\n};\nvar elementCanBeScrolled = function(node, overflow) {\n    if (!(node instanceof Element)) {\n        return false;\n    }\n    var styles = window.getComputedStyle(node);\n    return(// not-not-scrollable\n    styles[overflow] !== \"hidden\" && // contains scroll inside self\n    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === \"visible\"));\n};\nvar elementCouldBeVScrolled = function(node) {\n    return elementCanBeScrolled(node, \"overflowY\");\n};\nvar elementCouldBeHScrolled = function(node) {\n    return elementCanBeScrolled(node, \"overflowX\");\n};\nvar locationCouldBeScrolled = function(axis, node) {\n    var ownerDocument = node.ownerDocument;\n    var current = node;\n    do {\n        if (typeof ShadowRoot !== \"undefined\" && current instanceof ShadowRoot) {\n            current = current.host;\n        }\n        var isScrollable = elementCouldBeScrolled(axis, current);\n        if (isScrollable) {\n            var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];\n            if (scrollHeight > clientHeight) {\n                return true;\n            }\n        }\n        current = current.parentNode;\n    }while (current && current !== ownerDocument.body);\n    return false;\n};\nvar getVScrollVariables = function(_a) {\n    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;\n    return [\n        scrollTop,\n        scrollHeight,\n        clientHeight\n    ];\n};\nvar getHScrollVariables = function(_a) {\n    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;\n    return [\n        scrollLeft,\n        scrollWidth,\n        clientWidth\n    ];\n};\nvar elementCouldBeScrolled = function(axis, node) {\n    return axis === \"v\" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);\n};\nvar getScrollVariables = function(axis, node) {\n    return axis === \"v\" ? getVScrollVariables(node) : getHScrollVariables(node);\n};\nvar getDirectionFactor = function(axis, direction) {\n    return axis === \"h\" && direction === \"rtl\" ? -1 : 1;\n};\nvar handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {\n    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);\n    var delta = directionFactor * sourceDelta;\n    var target = event.target;\n    var targetInLock = endTarget.contains(target);\n    var shouldCancelScroll = false;\n    var isDeltaPositive = delta > 0;\n    var availableScroll = 0;\n    var availableScrollTop = 0;\n    do {\n        if (!target) {\n            break;\n        }\n        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];\n        var elementScroll = scroll_1 - capacity - directionFactor * position;\n        if (position || elementScroll) {\n            if (elementCouldBeScrolled(axis, target)) {\n                availableScroll += elementScroll;\n                availableScrollTop += position;\n            }\n        }\n        var parent_1 = target.parentNode;\n        target = parent_1 && parent_1.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? parent_1.host : parent_1;\n    }while (// portaled content\n    !targetInLock && target !== document.body || // self content\n    targetInLock && (endTarget.contains(target) || endTarget === target));\n    if (isDeltaPositive && (Math.abs(availableScroll) < 1 || false)) {\n        shouldCancelScroll = true;\n    } else if (!isDeltaPositive && (Math.abs(availableScrollTop) < 1 || false)) {\n        shouldCancelScroll = true;\n    }\n    return shouldCancelScroll;\n};\nvar getTouchXY = function(event) {\n    return \"changedTouches\" in event ? [\n        event.changedTouches[0].clientX,\n        event.changedTouches[0].clientY\n    ] : [\n        0,\n        0\n    ];\n};\nvar getDeltaXY = function(event) {\n    return [\n        event.deltaX,\n        event.deltaY\n    ];\n};\nvar extractRef = function(ref) {\n    return ref && \"current\" in ref ? ref.current : ref;\n};\nvar deltaCompare = function(x, y) {\n    return x[0] === y[0] && x[1] === y[1];\n};\nvar generateStyle = function(id) {\n    return \"\\n  .block-interactivity-\".concat(id, \" {pointer-events: none;}\\n  .allow-interactivity-\").concat(id, \" {pointer-events: all;}\\n\");\n};\nvar idCounter = 0;\nvar lockStack = [];\nfunction RemoveScrollSideCar(props2) {\n    _s28();\n    var shouldPreventQueue = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n    var touchStartRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef([\n        0,\n        0\n    ]);\n    var activeAxis = react__WEBPACK_IMPORTED_MODULE_1__.useRef();\n    var id = react__WEBPACK_IMPORTED_MODULE_1__.useState(idCounter++)[0];\n    var Style2 = react__WEBPACK_IMPORTED_MODULE_1__.useState(styleSingleton)[0];\n    var lastProps = react__WEBPACK_IMPORTED_MODULE_1__.useRef(props2);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RemoveScrollSideCar.useEffect\": function() {\n            lastProps.current = props2;\n        }\n    }[\"RemoveScrollSideCar.useEffect\"], [\n        props2\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RemoveScrollSideCar.useEffect\": function() {\n            if (props2.inert) {\n                document.body.classList.add(\"block-interactivity-\".concat(id));\n                var allow_1 = __spreadArray([\n                    props2.lockRef.current\n                ], (props2.shards || []).map(extractRef), true).filter(Boolean);\n                allow_1.forEach({\n                    \"RemoveScrollSideCar.useEffect\": function(el) {\n                        return el.classList.add(\"allow-interactivity-\".concat(id));\n                    }\n                }[\"RemoveScrollSideCar.useEffect\"]);\n                return ({\n                    \"RemoveScrollSideCar.useEffect\": function() {\n                        document.body.classList.remove(\"block-interactivity-\".concat(id));\n                        allow_1.forEach({\n                            \"RemoveScrollSideCar.useEffect\": function(el) {\n                                return el.classList.remove(\"allow-interactivity-\".concat(id));\n                            }\n                        }[\"RemoveScrollSideCar.useEffect\"]);\n                    }\n                })[\"RemoveScrollSideCar.useEffect\"];\n            }\n            return;\n        }\n    }[\"RemoveScrollSideCar.useEffect\"], [\n        props2.inert,\n        props2.lockRef.current,\n        props2.shards\n    ]);\n    var shouldCancelEvent = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[shouldCancelEvent]\": function(event, parent) {\n            if (\"touches\" in event && event.touches.length === 2 || event.type === \"wheel\" && event.ctrlKey) {\n                return !lastProps.current.allowPinchZoom;\n            }\n            var touch = getTouchXY(event);\n            var touchStart = touchStartRef.current;\n            var deltaX = \"deltaX\" in event ? event.deltaX : touchStart[0] - touch[0];\n            var deltaY = \"deltaY\" in event ? event.deltaY : touchStart[1] - touch[1];\n            var currentAxis;\n            var target = event.target;\n            var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? \"h\" : \"v\";\n            if (\"touches\" in event && moveDirection === \"h\" && target.type === \"range\") {\n                return false;\n            }\n            var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);\n            if (!canBeScrolledInMainDirection) {\n                return true;\n            }\n            if (canBeScrolledInMainDirection) {\n                currentAxis = moveDirection;\n            } else {\n                currentAxis = moveDirection === \"v\" ? \"h\" : \"v\";\n                canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);\n            }\n            if (!canBeScrolledInMainDirection) {\n                return false;\n            }\n            if (!activeAxis.current && \"changedTouches\" in event && (deltaX || deltaY)) {\n                activeAxis.current = currentAxis;\n            }\n            if (!currentAxis) {\n                return true;\n            }\n            var cancelingAxis = activeAxis.current || currentAxis;\n            return handleScroll(cancelingAxis, parent, event, cancelingAxis === \"h\" ? deltaX : deltaY);\n        }\n    }[\"RemoveScrollSideCar.useCallback[shouldCancelEvent]\"], []);\n    var shouldPrevent = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[shouldPrevent]\": function(_event) {\n            var event = _event;\n            if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {\n                return;\n            }\n            var delta = \"deltaY\" in event ? getDeltaXY(event) : getTouchXY(event);\n            var sourceEvent = shouldPreventQueue.current.filter({\n                \"RemoveScrollSideCar.useCallback[shouldPrevent]\": function(e) {\n                    return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);\n                }\n            }[\"RemoveScrollSideCar.useCallback[shouldPrevent]\"])[0];\n            if (sourceEvent && sourceEvent.should) {\n                if (event.cancelable) {\n                    event.preventDefault();\n                }\n                return;\n            }\n            if (!sourceEvent) {\n                var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter({\n                    \"RemoveScrollSideCar.useCallback[shouldPrevent].shardNodes\": function(node) {\n                        return node.contains(event.target);\n                    }\n                }[\"RemoveScrollSideCar.useCallback[shouldPrevent].shardNodes\"]);\n                var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;\n                if (shouldStop) {\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                }\n            }\n        }\n    }[\"RemoveScrollSideCar.useCallback[shouldPrevent]\"], []);\n    var shouldCancel = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[shouldCancel]\": function(name, delta, target, should) {\n            var event = {\n                name,\n                delta,\n                target,\n                should,\n                shadowParent: getOutermostShadowParent(target)\n            };\n            shouldPreventQueue.current.push(event);\n            setTimeout({\n                \"RemoveScrollSideCar.useCallback[shouldCancel]\": function() {\n                    shouldPreventQueue.current = shouldPreventQueue.current.filter({\n                        \"RemoveScrollSideCar.useCallback[shouldCancel]\": function(e) {\n                            return e !== event;\n                        }\n                    }[\"RemoveScrollSideCar.useCallback[shouldCancel]\"]);\n                }\n            }[\"RemoveScrollSideCar.useCallback[shouldCancel]\"], 1);\n        }\n    }[\"RemoveScrollSideCar.useCallback[shouldCancel]\"], []);\n    var scrollTouchStart = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[scrollTouchStart]\": function(event) {\n            touchStartRef.current = getTouchXY(event);\n            activeAxis.current = void 0;\n        }\n    }[\"RemoveScrollSideCar.useCallback[scrollTouchStart]\"], []);\n    var scrollWheel = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[scrollWheel]\": function(event) {\n            shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props2.lockRef.current));\n        }\n    }[\"RemoveScrollSideCar.useCallback[scrollWheel]\"], []);\n    var scrollTouchMove = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[scrollTouchMove]\": function(event) {\n            shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props2.lockRef.current));\n        }\n    }[\"RemoveScrollSideCar.useCallback[scrollTouchMove]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RemoveScrollSideCar.useEffect\": function() {\n            lockStack.push(Style2);\n            props2.setCallbacks({\n                onScrollCapture: scrollWheel,\n                onWheelCapture: scrollWheel,\n                onTouchMoveCapture: scrollTouchMove\n            });\n            document.addEventListener(\"wheel\", shouldPrevent, nonPassive);\n            document.addEventListener(\"touchmove\", shouldPrevent, nonPassive);\n            document.addEventListener(\"touchstart\", scrollTouchStart, nonPassive);\n            return ({\n                \"RemoveScrollSideCar.useEffect\": function() {\n                    lockStack = lockStack.filter({\n                        \"RemoveScrollSideCar.useEffect\": function(inst) {\n                            return inst !== Style2;\n                        }\n                    }[\"RemoveScrollSideCar.useEffect\"]);\n                    document.removeEventListener(\"wheel\", shouldPrevent, nonPassive);\n                    document.removeEventListener(\"touchmove\", shouldPrevent, nonPassive);\n                    document.removeEventListener(\"touchstart\", scrollTouchStart, nonPassive);\n                }\n            })[\"RemoveScrollSideCar.useEffect\"];\n        }\n    }[\"RemoveScrollSideCar.useEffect\"], []);\n    var removeScrollBar = props2.removeScrollBar, inert = props2.inert;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, inert ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Style2, {\n        styles: generateStyle(id)\n    }) : null, removeScrollBar ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RemoveScrollBar, {\n        noRelative: props2.noRelative,\n        gapMode: props2.gapMode\n    }) : null);\n}\n_s28(RemoveScrollSideCar, \"hqgd7bag6g1XbtT0GV1StJZ+Ot8=\");\n_c23 = RemoveScrollSideCar;\nfunction getOutermostShadowParent(node) {\n    var shadowParent = null;\n    while(node !== null){\n        if (node instanceof ShadowRoot) {\n            shadowParent = node.host;\n            node = node.host;\n        }\n        node = node.parentNode;\n    }\n    return shadowParent;\n}\nconst SideCar = exportSidecar(effectCar, RemoveScrollSideCar);\nvar ReactRemoveScroll = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(props2, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RemoveScroll, __assign({}, props2, {\n        ref,\n        sideCar: SideCar\n    }));\n});\n_c24 = ReactRemoveScroll;\nReactRemoveScroll.classNames = RemoveScroll.classNames;\nvar OPEN_KEYS = [\n    \" \",\n    \"Enter\",\n    \"ArrowUp\",\n    \"ArrowDown\"\n];\nvar SELECTION_KEYS$1 = [\n    \" \",\n    \"Enter\"\n];\nvar SELECT_NAME = \"Select\";\nvar [Collection$2, useCollection$2, createCollectionScope$2] = createCollection(SELECT_NAME);\nvar [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n    createCollectionScope$2,\n    createPopperScope\n]);\nvar usePopperScope$3 = createPopperScope();\nvar [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);\nvar [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);\nvar Select$1 = (props2)=>{\n    _s29();\n    const { __scopeSelect, children, open: openProp, defaultOpen, onOpenChange, value: valueProp, defaultValue, onValueChange, dir, name, autoComplete, disabled, required, form } = props2;\n    const popperScope = usePopperScope$3(__scopeSelect);\n    const [trigger, setTrigger] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [valueNode, setValueNode] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [valueNodeHasChildren, setValueNodeHasChildren] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const direction = useDirection(dir);\n    const [open, setOpen] = useControllableState({\n        prop: openProp,\n        defaultProp: defaultOpen !== null && defaultOpen !== void 0 ? defaultOpen : false,\n        onChange: onOpenChange,\n        caller: SELECT_NAME\n    });\n    const [value1, setValue] = useControllableState({\n        prop: valueProp,\n        defaultProp: defaultValue,\n        onChange: onValueChange,\n        caller: SELECT_NAME\n    });\n    const triggerPointerDownPosRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const isFormControl = trigger ? form || !!trigger.closest(\"form\") : true;\n    const [nativeOptionsSet, setNativeOptionsSet] = react__WEBPACK_IMPORTED_MODULE_1__.useState(/* @__PURE__ */ new Set());\n    const nativeSelectKey = Array.from(nativeOptionsSet).map((option)=>option.props.value).join(\";\");\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$4, {\n        ...popperScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SelectProvider, {\n            required,\n            scope: __scopeSelect,\n            trigger,\n            onTriggerChange: setTrigger,\n            valueNode,\n            onValueNodeChange: setValueNode,\n            valueNodeHasChildren,\n            onValueNodeHasChildrenChange: setValueNodeHasChildren,\n            contentId: useId$1(),\n            value: value1,\n            onValueChange: setValue,\n            open,\n            onOpenChange: setOpen,\n            dir: direction,\n            triggerPointerDownPosRef,\n            disabled,\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection$2.Provider, {\n                    scope: __scopeSelect,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectNativeOptionsProvider, {\n                        scope: props2.__scopeSelect,\n                        onNativeOptionAdd: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                            \"Select$1.useCallback\": (option)=>{\n                                setNativeOptionsSet({\n                                    \"Select$1.useCallback\": (prev)=>new Set(prev).add(option)\n                                }[\"Select$1.useCallback\"]);\n                            }\n                        }[\"Select$1.useCallback\"], []),\n                        onNativeOptionRemove: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                            \"Select$1.useCallback\": (option)=>{\n                                setNativeOptionsSet({\n                                    \"Select$1.useCallback\": (prev)=>{\n                                        const optionsSet = new Set(prev);\n                                        optionsSet.delete(option);\n                                        return optionsSet;\n                                    }\n                                }[\"Select$1.useCallback\"]);\n                            }\n                        }[\"Select$1.useCallback\"], []),\n                        children\n                    })\n                }),\n                isFormControl ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SelectBubbleInput, {\n                    \"aria-hidden\": true,\n                    required,\n                    tabIndex: -1,\n                    name,\n                    autoComplete,\n                    value: value1,\n                    onChange: (event)=>setValue(event.target.value),\n                    disabled,\n                    form,\n                    children: [\n                        value1 === void 0 ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"option\", {\n                            value: \"\"\n                        }) : null,\n                        Array.from(nativeOptionsSet)\n                    ]\n                }, nativeSelectKey) : null\n            ]\n        })\n    });\n};\n_s29(Select$1, \"+RPhv1nejJW/PTp7fpUpsGZIVsM=\", false, function() {\n    return [\n        usePopperScope$3,\n        useDirection,\n        useControllableState,\n        useControllableState,\n        useId$1\n    ];\n});\n_c25 = Select$1;\nSelect$1.displayName = SELECT_NAME;\nvar TRIGGER_NAME$4 = \"SelectTrigger\";\nvar SelectTrigger$1 = /*#__PURE__*/ _s30(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c26 = _s30((props2, forwardedRef)=>{\n    _s30();\n    const { __scopeSelect, disabled = false, ...triggerProps } = props2;\n    const popperScope = usePopperScope$3(__scopeSelect);\n    const context = useSelectContext(TRIGGER_NAME$4, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection$2(__scopeSelect);\n    const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(\"touch\");\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch({\n        \"SelectTrigger$1.useTypeaheadSearch\": (search)=>{\n            const enabledItems = getItems().filter({\n                \"SelectTrigger$1.useTypeaheadSearch.enabledItems\": (item)=>!item.disabled\n            }[\"SelectTrigger$1.useTypeaheadSearch.enabledItems\"]);\n            const currentItem = enabledItems.find({\n                \"SelectTrigger$1.useTypeaheadSearch.currentItem\": (item)=>item.value === context.value\n            }[\"SelectTrigger$1.useTypeaheadSearch.currentItem\"]);\n            const nextItem = findNextItem(enabledItems, search, currentItem);\n            if (nextItem !== void 0) {\n                context.onValueChange(nextItem.value);\n            }\n        }\n    }[\"SelectTrigger$1.useTypeaheadSearch\"]);\n    const handleOpen = (pointerEvent)=>{\n        if (!isDisabled) {\n            context.onOpenChange(true);\n            resetTypeahead();\n        }\n        if (pointerEvent) {\n            context.triggerPointerDownPosRef.current = {\n                x: Math.round(pointerEvent.pageX),\n                y: Math.round(pointerEvent.pageY)\n            };\n        }\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Anchor, {\n        asChild: true,\n        ...popperScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.button, {\n            type: \"button\",\n            role: \"combobox\",\n            \"aria-controls\": context.contentId,\n            \"aria-expanded\": context.open,\n            \"aria-required\": context.required,\n            \"aria-autocomplete\": \"none\",\n            dir: context.dir,\n            \"data-state\": context.open ? \"open\" : \"closed\",\n            disabled: isDisabled,\n            \"data-disabled\": isDisabled ? \"\" : void 0,\n            \"data-placeholder\": shouldShowPlaceholder(context.value) ? \"\" : void 0,\n            ...triggerProps,\n            ref: composedRefs,\n            onClick: composeEventHandlers(triggerProps.onClick, (event)=>{\n                event.currentTarget.focus();\n                if (pointerTypeRef.current !== \"mouse\") {\n                    handleOpen(event);\n                }\n            }),\n            onPointerDown: composeEventHandlers(triggerProps.onPointerDown, (event)=>{\n                pointerTypeRef.current = event.pointerType;\n                const target = event.target;\n                if (target.hasPointerCapture(event.pointerId)) {\n                    target.releasePointerCapture(event.pointerId);\n                }\n                if (event.button === 0 && event.ctrlKey === false && event.pointerType === \"mouse\") {\n                    handleOpen(event);\n                    event.preventDefault();\n                }\n            }),\n            onKeyDown: composeEventHandlers(triggerProps.onKeyDown, (event)=>{\n                const isTypingAhead = searchRef.current !== \"\";\n                const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n                if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n                if (isTypingAhead && event.key === \" \") return;\n                if (OPEN_KEYS.includes(event.key)) {\n                    handleOpen();\n                    event.preventDefault();\n                }\n            })\n        })\n    });\n}, \"C0hu8sUIDtxRUXUizNI9kpeIvrA=\", false, function() {\n    return [\n        usePopperScope$3,\n        useSelectContext,\n        useComposedRefs,\n        useCollection$2,\n        useTypeaheadSearch\n    ];\n})), \"C0hu8sUIDtxRUXUizNI9kpeIvrA=\", false, function() {\n    return [\n        usePopperScope$3,\n        useSelectContext,\n        useComposedRefs,\n        useCollection$2,\n        useTypeaheadSearch\n    ];\n});\n_c27 = SelectTrigger$1;\nSelectTrigger$1.displayName = TRIGGER_NAME$4;\nvar VALUE_NAME = \"SelectValue\";\nvar SelectValue$1 = /*#__PURE__*/ _s31(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c28 = _s31((props2, forwardedRef)=>{\n    _s31();\n    const { __scopeSelect, className, style, children, placeholder = \"\", ...valueProps } = props2;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== void 0;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n    useLayoutEffect2({\n        \"SelectValue$1.useLayoutEffect2\": ()=>{\n            onValueNodeHasChildrenChange(hasChildren);\n        }\n    }[\"SelectValue$1.useLayoutEffect2\"], [\n        onValueNodeHasChildrenChange,\n        hasChildren\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.span, {\n        ...valueProps,\n        ref: composedRefs,\n        style: {\n            pointerEvents: \"none\"\n        },\n        children: shouldShowPlaceholder(context.value) ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: placeholder\n        }) : children\n    });\n}, \"SbWgC7jDT3oiT90z05yimdOdMrk=\", false, function() {\n    return [\n        useSelectContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n})), \"SbWgC7jDT3oiT90z05yimdOdMrk=\", false, function() {\n    return [\n        useSelectContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n});\n_c29 = SelectValue$1;\nSelectValue$1.displayName = VALUE_NAME;\nvar ICON_NAME = \"SelectIcon\";\nvar SelectIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c30 = (props2, forwardedRef)=>{\n    const { __scopeSelect, children, ...iconProps } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.span, {\n        \"aria-hidden\": true,\n        ...iconProps,\n        ref: forwardedRef,\n        children: children || \"▼\"\n    });\n});\n_c31 = SelectIcon;\nSelectIcon.displayName = ICON_NAME;\nvar PORTAL_NAME$4 = \"SelectPortal\";\nvar SelectPortal = (props2)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal$4, {\n        asChild: true,\n        ...props2\n    });\n};\n_c32 = SelectPortal;\nSelectPortal.displayName = PORTAL_NAME$4;\nvar CONTENT_NAME$5 = \"SelectContent\";\nvar SelectContent$1 = /*#__PURE__*/ _s32(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c33 = _s32((props2, forwardedRef)=>{\n    _s32();\n    const context = useSelectContext(CONTENT_NAME$5, props2.__scopeSelect);\n    const [fragment, setFragment] = react__WEBPACK_IMPORTED_MODULE_1__.useState();\n    useLayoutEffect2({\n        \"SelectContent$1.useLayoutEffect2\": ()=>{\n            setFragment(new DocumentFragment());\n        }\n    }[\"SelectContent$1.useLayoutEffect2\"], []);\n    if (!context.open) {\n        const frag = fragment;\n        return frag ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectContentProvider, {\n            scope: props2.__scopeSelect,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection$2.Slot, {\n                scope: props2.__scopeSelect,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    children: props2.children\n                })\n            })\n        }), frag) : null;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectContentImpl, {\n        ...props2,\n        ref: forwardedRef\n    });\n}, \"ZZuXCMkNiC95yzHyjiVteeA0Y7c=\", false, function() {\n    return [\n        useSelectContext,\n        useLayoutEffect2\n    ];\n})), \"ZZuXCMkNiC95yzHyjiVteeA0Y7c=\", false, function() {\n    return [\n        useSelectContext,\n        useLayoutEffect2\n    ];\n});\n_c34 = SelectContent$1;\nSelectContent$1.displayName = CONTENT_NAME$5;\nvar CONTENT_MARGIN = 10;\nvar [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME$5);\nvar CONTENT_IMPL_NAME = \"SelectContentImpl\";\nvar Slot$2 = /* @__PURE__ */ createSlot(\"SelectContent.RemoveScroll\");\nvar SelectContentImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s33((props2, forwardedRef)=>{\n    _s33();\n    const { __scopeSelect, position = \"item-aligned\", onCloseAutoFocus, onEscapeKeyDown, onPointerDownOutside, //\n    // PopperContent props\n    side, sideOffset, align, alignOffset, arrowPadding, collisionBoundary, collisionPadding, sticky, hideWhenDetached, avoidCollisions, //\n    ...contentProps } = props2;\n    const context = useSelectContext(CONTENT_NAME$5, __scopeSelect);\n    const [content, setContent] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [viewport, setViewport] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"SelectContentImpl.useComposedRefs[composedRefs]\": (node)=>setContent(node)\n    }[\"SelectContentImpl.useComposedRefs[composedRefs]\"]);\n    const [selectedItem, setSelectedItem] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [selectedItemText, setSelectedItemText] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const getItems = useCollection$2(__scopeSelect);\n    const [isPositioned, setIsPositioned] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const firstValidItemFoundRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SelectContentImpl.useEffect\": ()=>{\n            if (content) return hideOthers(content);\n        }\n    }[\"SelectContentImpl.useEffect\"], [\n        content\n    ]);\n    useFocusGuards();\n    const focusFirst2 = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectContentImpl.useCallback[focusFirst2]\": (candidates)=>{\n            const [firstItem, ...restItems] = getItems().map({\n                \"SelectContentImpl.useCallback[focusFirst2]\": (item)=>item.ref.current\n            }[\"SelectContentImpl.useCallback[focusFirst2]\"]);\n            const [lastItem] = restItems.slice(-1);\n            const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n            for (const candidate of candidates){\n                if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n                candidate == null ? void 0 : candidate.scrollIntoView({\n                    block: \"nearest\"\n                });\n                if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n                if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n                candidate == null ? void 0 : candidate.focus();\n                if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n            }\n        }\n    }[\"SelectContentImpl.useCallback[focusFirst2]\"], [\n        getItems,\n        viewport\n    ]);\n    const focusSelectedItem = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectContentImpl.useCallback[focusSelectedItem]\": ()=>focusFirst2([\n                selectedItem,\n                content\n            ])\n    }[\"SelectContentImpl.useCallback[focusSelectedItem]\"], [\n        focusFirst2,\n        selectedItem,\n        content\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SelectContentImpl.useEffect\": ()=>{\n            if (isPositioned) {\n                focusSelectedItem();\n            }\n        }\n    }[\"SelectContentImpl.useEffect\"], [\n        isPositioned,\n        focusSelectedItem\n    ]);\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SelectContentImpl.useEffect\": ()=>{\n            if (content) {\n                let pointerMoveDelta = {\n                    x: 0,\n                    y: 0\n                };\n                const handlePointerMove2 = {\n                    \"SelectContentImpl.useEffect.handlePointerMove2\": (event)=>{\n                        var _a, _b;\n                        var _ref, _ref1;\n                        pointerMoveDelta = {\n                            x: Math.abs(Math.round(event.pageX) - ((_ref = (_a = triggerPointerDownPosRef.current) == null ? void 0 : _a.x) !== null && _ref !== void 0 ? _ref : 0)),\n                            y: Math.abs(Math.round(event.pageY) - ((_ref1 = (_b = triggerPointerDownPosRef.current) == null ? void 0 : _b.y) !== null && _ref1 !== void 0 ? _ref1 : 0))\n                        };\n                    }\n                }[\"SelectContentImpl.useEffect.handlePointerMove2\"];\n                const handlePointerUp2 = {\n                    \"SelectContentImpl.useEffect.handlePointerUp2\": (event)=>{\n                        if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n                            event.preventDefault();\n                        } else {\n                            if (!content.contains(event.target)) {\n                                onOpenChange(false);\n                            }\n                        }\n                        document.removeEventListener(\"pointermove\", handlePointerMove2);\n                        triggerPointerDownPosRef.current = null;\n                    }\n                }[\"SelectContentImpl.useEffect.handlePointerUp2\"];\n                if (triggerPointerDownPosRef.current !== null) {\n                    document.addEventListener(\"pointermove\", handlePointerMove2);\n                    document.addEventListener(\"pointerup\", handlePointerUp2, {\n                        capture: true,\n                        once: true\n                    });\n                }\n                return ({\n                    \"SelectContentImpl.useEffect\": ()=>{\n                        document.removeEventListener(\"pointermove\", handlePointerMove2);\n                        document.removeEventListener(\"pointerup\", handlePointerUp2, {\n                            capture: true\n                        });\n                    }\n                })[\"SelectContentImpl.useEffect\"];\n            }\n        }\n    }[\"SelectContentImpl.useEffect\"], [\n        content,\n        onOpenChange,\n        triggerPointerDownPosRef\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SelectContentImpl.useEffect\": ()=>{\n            const close = {\n                \"SelectContentImpl.useEffect.close\": ()=>onOpenChange(false)\n            }[\"SelectContentImpl.useEffect.close\"];\n            window.addEventListener(\"blur\", close);\n            window.addEventListener(\"resize\", close);\n            return ({\n                \"SelectContentImpl.useEffect\": ()=>{\n                    window.removeEventListener(\"blur\", close);\n                    window.removeEventListener(\"resize\", close);\n                }\n            })[\"SelectContentImpl.useEffect\"];\n        }\n    }[\"SelectContentImpl.useEffect\"], [\n        onOpenChange\n    ]);\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch({\n        \"SelectContentImpl.useTypeaheadSearch\": (search)=>{\n            const enabledItems = getItems().filter({\n                \"SelectContentImpl.useTypeaheadSearch.enabledItems\": (item)=>!item.disabled\n            }[\"SelectContentImpl.useTypeaheadSearch.enabledItems\"]);\n            const currentItem = enabledItems.find({\n                \"SelectContentImpl.useTypeaheadSearch.currentItem\": (item)=>item.ref.current === document.activeElement\n            }[\"SelectContentImpl.useTypeaheadSearch.currentItem\"]);\n            const nextItem = findNextItem(enabledItems, search, currentItem);\n            if (nextItem) {\n                setTimeout({\n                    \"SelectContentImpl.useTypeaheadSearch\": ()=>nextItem.ref.current.focus()\n                }[\"SelectContentImpl.useTypeaheadSearch\"]);\n            }\n        }\n    }[\"SelectContentImpl.useTypeaheadSearch\"]);\n    const itemRefCallback = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectContentImpl.useCallback[itemRefCallback]\": (node, value1, disabled)=>{\n            const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n            const isSelectedItem = context.value !== void 0 && context.value === value1;\n            if (isSelectedItem || isFirstValidItem) {\n                setSelectedItem(node);\n                if (isFirstValidItem) firstValidItemFoundRef.current = true;\n            }\n        }\n    }[\"SelectContentImpl.useCallback[itemRefCallback]\"], [\n        context.value\n    ]);\n    const handleItemLeave = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectContentImpl.useCallback[handleItemLeave]\": ()=>content == null ? void 0 : content.focus()\n    }[\"SelectContentImpl.useCallback[handleItemLeave]\"], [\n        content\n    ]);\n    const itemTextRefCallback = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectContentImpl.useCallback[itemTextRefCallback]\": (node, value1, disabled)=>{\n            const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n            const isSelectedItem = context.value !== void 0 && context.value === value1;\n            if (isSelectedItem || isFirstValidItem) {\n                setSelectedItemText(node);\n            }\n        }\n    }[\"SelectContentImpl.useCallback[itemTextRefCallback]\"], [\n        context.value\n    ]);\n    const SelectPosition = position === \"popper\" ? SelectPopperPosition : SelectItemAlignedPosition;\n    const popperContentProps = SelectPosition === SelectPopperPosition ? {\n        side,\n        sideOffset,\n        align,\n        alignOffset,\n        arrowPadding,\n        collisionBoundary,\n        collisionPadding,\n        sticky,\n        hideWhenDetached,\n        avoidCollisions\n    } : {};\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectContentProvider, {\n        scope: __scopeSelect,\n        content,\n        viewport,\n        onViewportChange: setViewport,\n        itemRefCallback,\n        selectedItem,\n        onItemLeave: handleItemLeave,\n        itemTextRefCallback,\n        focusSelectedItem,\n        selectedItemText,\n        position,\n        isPositioned,\n        searchRef,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ReactRemoveScroll, {\n            as: Slot$2,\n            allowPinchZoom: true,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FocusScope, {\n                asChild: true,\n                trapped: context.open,\n                onMountAutoFocus: (event)=>{\n                    event.preventDefault();\n                },\n                onUnmountAutoFocus: composeEventHandlers(onCloseAutoFocus, (event)=>{\n                    var _a;\n                    (_a = context.trigger) == null ? void 0 : _a.focus({\n                        preventScroll: true\n                    });\n                    event.preventDefault();\n                }),\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DismissableLayer, {\n                    asChild: true,\n                    disableOutsidePointerEvents: true,\n                    onEscapeKeyDown,\n                    onPointerDownOutside,\n                    onFocusOutside: (event)=>event.preventDefault(),\n                    onDismiss: ()=>context.onOpenChange(false),\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectPosition, {\n                        role: \"listbox\",\n                        id: context.contentId,\n                        \"data-state\": context.open ? \"open\" : \"closed\",\n                        dir: context.dir,\n                        onContextMenu: (event)=>event.preventDefault(),\n                        ...contentProps,\n                        ...popperContentProps,\n                        onPlaced: ()=>setIsPositioned(true),\n                        ref: composedRefs,\n                        style: {\n                            // flex layout so we can place the scroll buttons properly\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            // reset the outline by default as the content MAY get focused\n                            outline: \"none\",\n                            ...contentProps.style\n                        },\n                        onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event)=>{\n                            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n                            if (event.key === \"Tab\") event.preventDefault();\n                            if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n                            if ([\n                                \"ArrowUp\",\n                                \"ArrowDown\",\n                                \"Home\",\n                                \"End\"\n                            ].includes(event.key)) {\n                                const items = getItems().filter((item)=>!item.disabled);\n                                let candidateNodes = items.map((item)=>item.ref.current);\n                                if ([\n                                    \"ArrowUp\",\n                                    \"End\"\n                                ].includes(event.key)) {\n                                    candidateNodes = candidateNodes.slice().reverse();\n                                }\n                                if ([\n                                    \"ArrowUp\",\n                                    \"ArrowDown\"\n                                ].includes(event.key)) {\n                                    const currentElement = event.target;\n                                    const currentIndex = candidateNodes.indexOf(currentElement);\n                                    candidateNodes = candidateNodes.slice(currentIndex + 1);\n                                }\n                                setTimeout(()=>focusFirst2(candidateNodes));\n                                event.preventDefault();\n                            }\n                        })\n                    })\n                })\n            })\n        })\n    });\n}, \"KQOf6H7C6+DePoBKSDrQU/0FmO0=\", false, function() {\n    return [\n        useSelectContext,\n        useComposedRefs,\n        useCollection$2,\n        useFocusGuards,\n        useTypeaheadSearch\n    ];\n}));\n_c35 = SelectContentImpl;\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\nvar ITEM_ALIGNED_POSITION_NAME = \"SelectItemAlignedPosition\";\nvar SelectItemAlignedPosition = /*#__PURE__*/ _s34(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c36 = _s34((props2, forwardedRef)=>{\n    _s34();\n    const { __scopeSelect, onPlaced, ...popperProps } = props2;\n    const context = useSelectContext(CONTENT_NAME$5, __scopeSelect);\n    const contentContext = useSelectContentContext(CONTENT_NAME$5, __scopeSelect);\n    const [contentWrapper, setContentWrapper] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [content, setContent] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"SelectItemAlignedPosition.useComposedRefs[composedRefs]\": (node)=>setContent(node)\n    }[\"SelectItemAlignedPosition.useComposedRefs[composedRefs]\"]);\n    const getItems = useCollection$2(__scopeSelect);\n    const shouldExpandOnScrollRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const shouldRepositionRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(true);\n    const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;\n    const position = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectItemAlignedPosition.useCallback[position]\": ()=>{\n            if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {\n                const triggerRect = context.trigger.getBoundingClientRect();\n                const contentRect = content.getBoundingClientRect();\n                const valueNodeRect = context.valueNode.getBoundingClientRect();\n                const itemTextRect = selectedItemText.getBoundingClientRect();\n                if (context.dir !== \"rtl\") {\n                    const itemTextOffset = itemTextRect.left - contentRect.left;\n                    const left = valueNodeRect.left - itemTextOffset;\n                    const leftDelta = triggerRect.left - left;\n                    const minContentWidth = triggerRect.width + leftDelta;\n                    const contentWidth = Math.max(minContentWidth, contentRect.width);\n                    const rightEdge = window.innerWidth - CONTENT_MARGIN;\n                    const clampedLeft = clamp$1(left, [\n                        CONTENT_MARGIN,\n                        // Prevents the content from going off the starting edge of the\n                        // viewport. It may still go off the ending edge, but this can be\n                        // controlled by the user since they may want to manage overflow in a\n                        // specific way.\n                        // https://github.com/radix-ui/primitives/issues/2049\n                        Math.max(CONTENT_MARGIN, rightEdge - contentWidth)\n                    ]);\n                    contentWrapper.style.minWidth = minContentWidth + \"px\";\n                    contentWrapper.style.left = clampedLeft + \"px\";\n                } else {\n                    const itemTextOffset = contentRect.right - itemTextRect.right;\n                    const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n                    const rightDelta = window.innerWidth - triggerRect.right - right;\n                    const minContentWidth = triggerRect.width + rightDelta;\n                    const contentWidth = Math.max(minContentWidth, contentRect.width);\n                    const leftEdge = window.innerWidth - CONTENT_MARGIN;\n                    const clampedRight = clamp$1(right, [\n                        CONTENT_MARGIN,\n                        Math.max(CONTENT_MARGIN, leftEdge - contentWidth)\n                    ]);\n                    contentWrapper.style.minWidth = minContentWidth + \"px\";\n                    contentWrapper.style.right = clampedRight + \"px\";\n                }\n                const items = getItems();\n                const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                const itemsHeight = viewport.scrollHeight;\n                const contentStyles = window.getComputedStyle(content);\n                const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n                const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n                const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n                const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n                const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;\n                const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n                const viewportStyles = window.getComputedStyle(viewport);\n                const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n                const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n                const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n                const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n                const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n                const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n                const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n                const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n                const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n                if (willAlignWithoutTopOverflow) {\n                    const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;\n                    contentWrapper.style.bottom = \"0px\";\n                    const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n                    const clampedTriggerMiddleToBottomEdge = Math.max(triggerMiddleToBottomEdge, selectedItemHalfHeight + // viewport might have padding bottom, include it to avoid a scrollable viewport\n                    (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth);\n                    const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n                    contentWrapper.style.height = height + \"px\";\n                } else {\n                    const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;\n                    contentWrapper.style.top = \"0px\";\n                    const clampedTopEdgeToTriggerMiddle = Math.max(topEdgeToTriggerMiddle, contentBorderTopWidth + viewport.offsetTop + // viewport might have padding top, include it to avoid a scrollable viewport\n                    (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight);\n                    const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n                    contentWrapper.style.height = height + \"px\";\n                    viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n                }\n                contentWrapper.style.margin = \"\".concat(CONTENT_MARGIN, \"px 0\");\n                contentWrapper.style.minHeight = minContentHeight + \"px\";\n                contentWrapper.style.maxHeight = availableHeight + \"px\";\n                onPlaced == null ? void 0 : onPlaced();\n                requestAnimationFrame({\n                    \"SelectItemAlignedPosition.useCallback[position]\": ()=>shouldExpandOnScrollRef.current = true\n                }[\"SelectItemAlignedPosition.useCallback[position]\"]);\n            }\n        }\n    }[\"SelectItemAlignedPosition.useCallback[position]\"], [\n        getItems,\n        context.trigger,\n        context.valueNode,\n        contentWrapper,\n        content,\n        viewport,\n        selectedItem,\n        selectedItemText,\n        context.dir,\n        onPlaced\n    ]);\n    useLayoutEffect2({\n        \"SelectItemAlignedPosition.useLayoutEffect2\": ()=>position()\n    }[\"SelectItemAlignedPosition.useLayoutEffect2\"], [\n        position\n    ]);\n    const [contentZIndex, setContentZIndex] = react__WEBPACK_IMPORTED_MODULE_1__.useState();\n    useLayoutEffect2({\n        \"SelectItemAlignedPosition.useLayoutEffect2\": ()=>{\n            if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n        }\n    }[\"SelectItemAlignedPosition.useLayoutEffect2\"], [\n        content\n    ]);\n    const handleScrollButtonChange = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectItemAlignedPosition.useCallback[handleScrollButtonChange]\": (node)=>{\n            if (node && shouldRepositionRef.current === true) {\n                position();\n                focusSelectedItem == null ? void 0 : focusSelectedItem();\n                shouldRepositionRef.current = false;\n            }\n        }\n    }[\"SelectItemAlignedPosition.useCallback[handleScrollButtonChange]\"], [\n        position,\n        focusSelectedItem\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectViewportProvider, {\n        scope: __scopeSelect,\n        contentWrapper,\n        shouldExpandOnScrollRef,\n        onScrollButtonChange: handleScrollButtonChange,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            ref: setContentWrapper,\n            style: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                position: \"fixed\",\n                zIndex: contentZIndex\n            },\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n                ...popperProps,\n                ref: composedRefs,\n                style: {\n                    // When we get the height of the content, it includes borders. If we were to set\n                    // the height without having `boxSizing: 'border-box'` it would be too big.\n                    boxSizing: \"border-box\",\n                    // We need to ensure the content doesn't get taller than the wrapper\n                    maxHeight: \"100%\",\n                    ...popperProps.style\n                }\n            })\n        })\n    });\n}, \"lirXrAhvZy1V1xLceB36sZYrWQ4=\", false, function() {\n    return [\n        useSelectContext,\n        useSelectContentContext,\n        useComposedRefs,\n        useCollection$2,\n        useLayoutEffect2,\n        useLayoutEffect2\n    ];\n})), \"lirXrAhvZy1V1xLceB36sZYrWQ4=\", false, function() {\n    return [\n        useSelectContext,\n        useSelectContentContext,\n        useComposedRefs,\n        useCollection$2,\n        useLayoutEffect2,\n        useLayoutEffect2\n    ];\n});\n_c37 = SelectItemAlignedPosition;\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\nvar POPPER_POSITION_NAME = \"SelectPopperPosition\";\nvar SelectPopperPosition = /*#__PURE__*/ _s35(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c38 = _s35((props2, forwardedRef)=>{\n    _s35();\n    const { __scopeSelect, align = \"start\", collisionPadding = CONTENT_MARGIN, ...popperProps } = props2;\n    const popperScope = usePopperScope$3(__scopeSelect);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Content$1, {\n        ...popperScope,\n        ...popperProps,\n        ref: forwardedRef,\n        align,\n        collisionPadding,\n        style: {\n            // Ensure border-box for floating-ui calculations\n            boxSizing: \"border-box\",\n            ...popperProps.style,\n            // re-namespace exposed content custom properties\n            ...{\n                \"--radix-select-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n                \"--radix-select-content-available-width\": \"var(--radix-popper-available-width)\",\n                \"--radix-select-content-available-height\": \"var(--radix-popper-available-height)\",\n                \"--radix-select-trigger-width\": \"var(--radix-popper-anchor-width)\",\n                \"--radix-select-trigger-height\": \"var(--radix-popper-anchor-height)\"\n            }\n        }\n    });\n}, \"BpqY5WzV0YcG0de2XsYA9V0frTM=\", false, function() {\n    return [\n        usePopperScope$3\n    ];\n})), \"BpqY5WzV0YcG0de2XsYA9V0frTM=\", false, function() {\n    return [\n        usePopperScope$3\n    ];\n});\n_c39 = SelectPopperPosition;\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\nvar [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME$5, {});\nvar VIEWPORT_NAME = \"SelectViewport\";\nvar SelectViewport = /*#__PURE__*/ _s36(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c40 = _s36((props2, forwardedRef)=>{\n    _s36();\n    const { __scopeSelect, nonce, ...viewportProps } = props2;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"style\", {\n                dangerouslySetInnerHTML: {\n                    __html: \"[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}\"\n                },\n                nonce\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection$2.Slot, {\n                scope: __scopeSelect,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n                    \"data-radix-select-viewport\": \"\",\n                    role: \"presentation\",\n                    ...viewportProps,\n                    ref: composedRefs,\n                    style: {\n                        // we use position: 'relative' here on the `viewport` so that when we call\n                        // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n                        // (independent of the scrollUpButton).\n                        position: \"relative\",\n                        flex: 1,\n                        // Viewport should only be scrollable in the vertical direction.\n                        // This won't work in vertical writing modes, so we'll need to\n                        // revisit this if/when that is supported\n                        // https://developer.chrome.com/blog/vertical-form-controls\n                        overflow: \"hidden auto\",\n                        ...viewportProps.style\n                    },\n                    onScroll: composeEventHandlers(viewportProps.onScroll, (event)=>{\n                        const viewport = event.currentTarget;\n                        const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\n                        if ((shouldExpandOnScrollRef == null ? void 0 : shouldExpandOnScrollRef.current) && contentWrapper) {\n                            const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                            if (scrolledBy > 0) {\n                                const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                                const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                                const cssHeight = parseFloat(contentWrapper.style.height);\n                                const prevHeight = Math.max(cssMinHeight, cssHeight);\n                                if (prevHeight < availableHeight) {\n                                    const nextHeight = prevHeight + scrolledBy;\n                                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                                    const heightDiff = nextHeight - clampedNextHeight;\n                                    contentWrapper.style.height = clampedNextHeight + \"px\";\n                                    if (contentWrapper.style.bottom === \"0px\") {\n                                        viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                                        contentWrapper.style.justifyContent = \"flex-end\";\n                                    }\n                                }\n                            }\n                        }\n                        prevScrollTopRef.current = viewport.scrollTop;\n                    })\n                })\n            })\n        ]\n    });\n}, \"XupGGKfsCoXBlLl1goZr8AcWTcs=\", false, function() {\n    return [\n        useSelectContentContext,\n        useSelectViewportContext,\n        useComposedRefs\n    ];\n})), \"XupGGKfsCoXBlLl1goZr8AcWTcs=\", false, function() {\n    return [\n        useSelectContentContext,\n        useSelectViewportContext,\n        useComposedRefs\n    ];\n});\n_c41 = SelectViewport;\nSelectViewport.displayName = VIEWPORT_NAME;\nvar GROUP_NAME$3 = \"SelectGroup\";\nvar [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME$3);\nvar SelectGroup$1 = /*#__PURE__*/ _s37(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c42 = _s37((props2, forwardedRef)=>{\n    _s37();\n    const { __scopeSelect, ...groupProps } = props2;\n    const groupId = useId$1();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectGroupContextProvider, {\n        scope: __scopeSelect,\n        id: groupId,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n            role: \"group\",\n            \"aria-labelledby\": groupId,\n            ...groupProps,\n            ref: forwardedRef\n        })\n    });\n}, \"u73aiCPmRHuKkEta4OUTP+gw/NY=\", false, function() {\n    return [\n        useId$1\n    ];\n})), \"u73aiCPmRHuKkEta4OUTP+gw/NY=\", false, function() {\n    return [\n        useId$1\n    ];\n});\n_c43 = SelectGroup$1;\nSelectGroup$1.displayName = GROUP_NAME$3;\nvar LABEL_NAME$2 = \"SelectLabel\";\nvar SelectLabel = /*#__PURE__*/ _s38(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c44 = _s38((props2, forwardedRef)=>{\n    _s38();\n    const { __scopeSelect, ...labelProps } = props2;\n    const groupContext = useSelectGroupContext(LABEL_NAME$2, __scopeSelect);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        id: groupContext.id,\n        ...labelProps,\n        ref: forwardedRef\n    });\n}, \"6DR4oNi5I3VPerTuJFdlRDJAXcE=\", false, function() {\n    return [\n        useSelectGroupContext\n    ];\n})), \"6DR4oNi5I3VPerTuJFdlRDJAXcE=\", false, function() {\n    return [\n        useSelectGroupContext\n    ];\n});\n_c45 = SelectLabel;\nSelectLabel.displayName = LABEL_NAME$2;\nvar ITEM_NAME$3 = \"SelectItem\";\nvar [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME$3);\nvar SelectItem$1 = /*#__PURE__*/ _s39(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c46 = _s39((props2, forwardedRef)=>{\n    _s39();\n    const { __scopeSelect, value: value1, disabled = false, textValue: textValueProp, ...itemProps } = props2;\n    const context = useSelectContext(ITEM_NAME$3, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME$3, __scopeSelect);\n    const isSelected = context.value === value1;\n    const [textValue, setTextValue] = react__WEBPACK_IMPORTED_MODULE_1__.useState(textValueProp !== null && textValueProp !== void 0 ? textValueProp : \"\");\n    const [isFocused, setIsFocused] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"SelectItem$1.useComposedRefs[composedRefs]\": (node)=>{\n            var _a;\n            return (_a = contentContext.itemRefCallback) == null ? void 0 : _a.call(contentContext, node, value1, disabled);\n        }\n    }[\"SelectItem$1.useComposedRefs[composedRefs]\"]);\n    const textId = useId$1();\n    const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(\"touch\");\n    const handleSelect = ()=>{\n        if (!disabled) {\n            context.onValueChange(value1);\n            context.onOpenChange(false);\n        }\n    };\n    if (value1 === \"\") {\n        throw new Error(\"A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.\");\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectItemContextProvider, {\n        scope: __scopeSelect,\n        value: value1,\n        disabled,\n        textId,\n        isSelected,\n        onItemTextChange: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"SelectItem$1.useCallback\": (node)=>{\n                setTextValue({\n                    \"SelectItem$1.useCallback\": (prevTextValue)=>{\n                        var _ref;\n                        return prevTextValue || ((_ref = node == null ? void 0 : node.textContent) !== null && _ref !== void 0 ? _ref : \"\").trim();\n                    }\n                }[\"SelectItem$1.useCallback\"]);\n            }\n        }[\"SelectItem$1.useCallback\"], []),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection$2.ItemSlot, {\n            scope: __scopeSelect,\n            value: value1,\n            disabled,\n            textValue,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n                role: \"option\",\n                \"aria-labelledby\": textId,\n                \"data-highlighted\": isFocused ? \"\" : void 0,\n                \"aria-selected\": isSelected && isFocused,\n                \"data-state\": isSelected ? \"checked\" : \"unchecked\",\n                \"aria-disabled\": disabled || void 0,\n                \"data-disabled\": disabled ? \"\" : void 0,\n                tabIndex: disabled ? void 0 : -1,\n                ...itemProps,\n                ref: composedRefs,\n                onFocus: composeEventHandlers(itemProps.onFocus, ()=>setIsFocused(true)),\n                onBlur: composeEventHandlers(itemProps.onBlur, ()=>setIsFocused(false)),\n                onClick: composeEventHandlers(itemProps.onClick, ()=>{\n                    if (pointerTypeRef.current !== \"mouse\") handleSelect();\n                }),\n                onPointerUp: composeEventHandlers(itemProps.onPointerUp, ()=>{\n                    if (pointerTypeRef.current === \"mouse\") handleSelect();\n                }),\n                onPointerDown: composeEventHandlers(itemProps.onPointerDown, (event)=>{\n                    pointerTypeRef.current = event.pointerType;\n                }),\n                onPointerMove: composeEventHandlers(itemProps.onPointerMove, (event)=>{\n                    var _a;\n                    pointerTypeRef.current = event.pointerType;\n                    if (disabled) {\n                        (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);\n                    } else if (pointerTypeRef.current === \"mouse\") {\n                        event.currentTarget.focus({\n                            preventScroll: true\n                        });\n                    }\n                }),\n                onPointerLeave: composeEventHandlers(itemProps.onPointerLeave, (event)=>{\n                    var _a;\n                    if (event.currentTarget === document.activeElement) {\n                        (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);\n                    }\n                }),\n                onKeyDown: composeEventHandlers(itemProps.onKeyDown, (event)=>{\n                    var _a;\n                    const isTypingAhead = ((_a = contentContext.searchRef) == null ? void 0 : _a.current) !== \"\";\n                    if (isTypingAhead && event.key === \" \") return;\n                    if (SELECTION_KEYS$1.includes(event.key)) handleSelect();\n                    if (event.key === \" \") event.preventDefault();\n                })\n            })\n        })\n    });\n}, \"uhX0oUEqZWMCCNTlBwFki10XW2E=\", false, function() {\n    return [\n        useSelectContext,\n        useSelectContentContext,\n        useComposedRefs,\n        useId$1\n    ];\n})), \"uhX0oUEqZWMCCNTlBwFki10XW2E=\", false, function() {\n    return [\n        useSelectContext,\n        useSelectContentContext,\n        useComposedRefs,\n        useId$1\n    ];\n});\n_c47 = SelectItem$1;\nSelectItem$1.displayName = ITEM_NAME$3;\nvar ITEM_TEXT_NAME = \"SelectItemText\";\nvar SelectItemText = /*#__PURE__*/ _s40(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c48 = _s40((props2, forwardedRef)=>{\n    _s40();\n    const { __scopeSelect, className, style, ...itemTextProps } = props2;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"SelectItemText.useComposedRefs[composedRefs]\": (node)=>setItemTextNode(node)\n    }[\"SelectItemText.useComposedRefs[composedRefs]\"], itemContext.onItemTextChange, {\n        \"SelectItemText.useComposedRefs[composedRefs]\": (node)=>{\n            var _a;\n            return (_a = contentContext.itemTextRefCallback) == null ? void 0 : _a.call(contentContext, node, itemContext.value, itemContext.disabled);\n        }\n    }[\"SelectItemText.useComposedRefs[composedRefs]\"]);\n    const textContent = itemTextNode == null ? void 0 : itemTextNode.textContent;\n    const nativeOption = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"SelectItemText.useMemo[nativeOption]\": ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"option\", {\n                value: itemContext.value,\n                disabled: itemContext.disabled,\n                children: textContent\n            }, itemContext.value)\n    }[\"SelectItemText.useMemo[nativeOption]\"], [\n        itemContext.disabled,\n        itemContext.value,\n        textContent\n    ]);\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect2({\n        \"SelectItemText.useLayoutEffect2\": ()=>{\n            onNativeOptionAdd(nativeOption);\n            return ({\n                \"SelectItemText.useLayoutEffect2\": ()=>onNativeOptionRemove(nativeOption)\n            })[\"SelectItemText.useLayoutEffect2\"];\n        }\n    }[\"SelectItemText.useLayoutEffect2\"], [\n        onNativeOptionAdd,\n        onNativeOptionRemove,\n        nativeOption\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.span, {\n                id: itemContext.textId,\n                ...itemTextProps,\n                ref: composedRefs\n            }),\n            itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal(itemTextProps.children, context.valueNode) : null\n        ]\n    });\n}, \"2mAh3iUJ4yqFl6aJP+nTwBKvkvI=\", false, function() {\n    return [\n        useSelectContext,\n        useSelectContentContext,\n        useSelectItemContext,\n        useSelectNativeOptionsContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n})), \"2mAh3iUJ4yqFl6aJP+nTwBKvkvI=\", false, function() {\n    return [\n        useSelectContext,\n        useSelectContentContext,\n        useSelectItemContext,\n        useSelectNativeOptionsContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n});\n_c49 = SelectItemText;\nSelectItemText.displayName = ITEM_TEXT_NAME;\nvar ITEM_INDICATOR_NAME$1 = \"SelectItemIndicator\";\nvar SelectItemIndicator = /*#__PURE__*/ _s41(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c50 = _s41((props2, forwardedRef)=>{\n    _s41();\n    const { __scopeSelect, ...itemIndicatorProps } = props2;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME$1, __scopeSelect);\n    return itemContext.isSelected ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.span, {\n        \"aria-hidden\": true,\n        ...itemIndicatorProps,\n        ref: forwardedRef\n    }) : null;\n}, \"Xe0OoxTaz4ol6wYFGO8hLOwBfcM=\", false, function() {\n    return [\n        useSelectItemContext\n    ];\n})), \"Xe0OoxTaz4ol6wYFGO8hLOwBfcM=\", false, function() {\n    return [\n        useSelectItemContext\n    ];\n});\n_c51 = SelectItemIndicator;\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME$1;\nvar SCROLL_UP_BUTTON_NAME = \"SelectScrollUpButton\";\nvar SelectScrollUpButton$1 = /*#__PURE__*/ _s42(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c52 = _s42((props2, forwardedRef)=>{\n    _s42();\n    const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props2.__scopeSelect);\n    const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props2.__scopeSelect);\n    const [canScrollUp, setCanScrollUp] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n    useLayoutEffect2({\n        \"SelectScrollUpButton$1.useLayoutEffect2\": ()=>{\n            if (contentContext.viewport && contentContext.isPositioned) {\n                let handleScroll2 = {\n                    \"SelectScrollUpButton$1.useLayoutEffect2.handleScroll2\": function() {\n                        const canScrollUp2 = viewport.scrollTop > 0;\n                        setCanScrollUp(canScrollUp2);\n                    }\n                }[\"SelectScrollUpButton$1.useLayoutEffect2.handleScroll2\"];\n                const viewport = contentContext.viewport;\n                handleScroll2();\n                viewport.addEventListener(\"scroll\", handleScroll2);\n                return ({\n                    \"SelectScrollUpButton$1.useLayoutEffect2\": ()=>viewport.removeEventListener(\"scroll\", handleScroll2)\n                })[\"SelectScrollUpButton$1.useLayoutEffect2\"];\n            }\n        }\n    }[\"SelectScrollUpButton$1.useLayoutEffect2\"], [\n        contentContext.viewport,\n        contentContext.isPositioned\n    ]);\n    return canScrollUp ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectScrollButtonImpl, {\n        ...props2,\n        ref: composedRefs,\n        onAutoScroll: ()=>{\n            const { viewport, selectedItem } = contentContext;\n            if (viewport && selectedItem) {\n                viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n            }\n        }\n    }) : null;\n}, \"jkmmXRiDNtvsht88BWY9nOUoT84=\", false, function() {\n    return [\n        useSelectContentContext,\n        useSelectViewportContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n})), \"jkmmXRiDNtvsht88BWY9nOUoT84=\", false, function() {\n    return [\n        useSelectContentContext,\n        useSelectViewportContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n});\n_c53 = SelectScrollUpButton$1;\nSelectScrollUpButton$1.displayName = SCROLL_UP_BUTTON_NAME;\nvar SCROLL_DOWN_BUTTON_NAME = \"SelectScrollDownButton\";\nvar SelectScrollDownButton$1 = /*#__PURE__*/ _s43(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c54 = _s43((props2, forwardedRef)=>{\n    _s43();\n    const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props2.__scopeSelect);\n    const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props2.__scopeSelect);\n    const [canScrollDown, setCanScrollDown] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n    useLayoutEffect2({\n        \"SelectScrollDownButton$1.useLayoutEffect2\": ()=>{\n            if (contentContext.viewport && contentContext.isPositioned) {\n                let handleScroll2 = {\n                    \"SelectScrollDownButton$1.useLayoutEffect2.handleScroll2\": function() {\n                        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n                        const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;\n                        setCanScrollDown(canScrollDown2);\n                    }\n                }[\"SelectScrollDownButton$1.useLayoutEffect2.handleScroll2\"];\n                const viewport = contentContext.viewport;\n                handleScroll2();\n                viewport.addEventListener(\"scroll\", handleScroll2);\n                return ({\n                    \"SelectScrollDownButton$1.useLayoutEffect2\": ()=>viewport.removeEventListener(\"scroll\", handleScroll2)\n                })[\"SelectScrollDownButton$1.useLayoutEffect2\"];\n            }\n        }\n    }[\"SelectScrollDownButton$1.useLayoutEffect2\"], [\n        contentContext.viewport,\n        contentContext.isPositioned\n    ]);\n    return canScrollDown ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectScrollButtonImpl, {\n        ...props2,\n        ref: composedRefs,\n        onAutoScroll: ()=>{\n            const { viewport, selectedItem } = contentContext;\n            if (viewport && selectedItem) {\n                viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n            }\n        }\n    }) : null;\n}, \"FOb4XPL6bRmLWGCAif3WHtr7iKI=\", false, function() {\n    return [\n        useSelectContentContext,\n        useSelectViewportContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n})), \"FOb4XPL6bRmLWGCAif3WHtr7iKI=\", false, function() {\n    return [\n        useSelectContentContext,\n        useSelectViewportContext,\n        useComposedRefs,\n        useLayoutEffect2\n    ];\n});\n_c55 = SelectScrollDownButton$1;\nSelectScrollDownButton$1.displayName = SCROLL_DOWN_BUTTON_NAME;\nvar SelectScrollButtonImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s44((props2, forwardedRef)=>{\n    _s44();\n    const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props2;\n    const contentContext = useSelectContentContext(\"SelectScrollButton\", __scopeSelect);\n    const autoScrollTimerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const getItems = useCollection$2(__scopeSelect);\n    const clearAutoScrollTimer = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SelectScrollButtonImpl.useCallback[clearAutoScrollTimer]\": ()=>{\n            if (autoScrollTimerRef.current !== null) {\n                window.clearInterval(autoScrollTimerRef.current);\n                autoScrollTimerRef.current = null;\n            }\n        }\n    }[\"SelectScrollButtonImpl.useCallback[clearAutoScrollTimer]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SelectScrollButtonImpl.useEffect\": ()=>{\n            return ({\n                \"SelectScrollButtonImpl.useEffect\": ()=>clearAutoScrollTimer()\n            })[\"SelectScrollButtonImpl.useEffect\"];\n        }\n    }[\"SelectScrollButtonImpl.useEffect\"], [\n        clearAutoScrollTimer\n    ]);\n    useLayoutEffect2({\n        \"SelectScrollButtonImpl.useLayoutEffect2\": ()=>{\n            var _a;\n            const activeItem = getItems().find({\n                \"SelectScrollButtonImpl.useLayoutEffect2.activeItem\": (item)=>item.ref.current === document.activeElement\n            }[\"SelectScrollButtonImpl.useLayoutEffect2.activeItem\"]);\n            (_a = activeItem == null ? void 0 : activeItem.ref.current) == null ? void 0 : _a.scrollIntoView({\n                block: \"nearest\"\n            });\n        }\n    }[\"SelectScrollButtonImpl.useLayoutEffect2\"], [\n        getItems\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        \"aria-hidden\": true,\n        ...scrollIndicatorProps,\n        ref: forwardedRef,\n        style: {\n            flexShrink: 0,\n            ...scrollIndicatorProps.style\n        },\n        onPointerDown: composeEventHandlers(scrollIndicatorProps.onPointerDown, ()=>{\n            if (autoScrollTimerRef.current === null) {\n                autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n            }\n        }),\n        onPointerMove: composeEventHandlers(scrollIndicatorProps.onPointerMove, ()=>{\n            var _a;\n            (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);\n            if (autoScrollTimerRef.current === null) {\n                autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n            }\n        }),\n        onPointerLeave: composeEventHandlers(scrollIndicatorProps.onPointerLeave, ()=>{\n            clearAutoScrollTimer();\n        })\n    });\n}, \"GRX9ihaT0MAq+bxFixvh7sO0xRI=\", false, function() {\n    return [\n        useSelectContentContext,\n        useCollection$2,\n        useLayoutEffect2\n    ];\n}));\n_c56 = SelectScrollButtonImpl;\nvar SEPARATOR_NAME$2 = \"SelectSeparator\";\nvar SelectSeparator$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c57 = (props2, forwardedRef)=>{\n    const { __scopeSelect, ...separatorProps } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        \"aria-hidden\": true,\n        ...separatorProps,\n        ref: forwardedRef\n    });\n});\n_c58 = SelectSeparator$1;\nSelectSeparator$1.displayName = SEPARATOR_NAME$2;\nvar ARROW_NAME$4 = \"SelectArrow\";\nvar SelectArrow = /*#__PURE__*/ _s45(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c59 = _s45((props2, forwardedRef)=>{\n    _s45();\n    const { __scopeSelect, ...arrowProps } = props2;\n    const popperScope = usePopperScope$3(__scopeSelect);\n    const context = useSelectContext(ARROW_NAME$4, __scopeSelect);\n    const contentContext = useSelectContentContext(ARROW_NAME$4, __scopeSelect);\n    return context.open && contentContext.position === \"popper\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Arrow, {\n        ...popperScope,\n        ...arrowProps,\n        ref: forwardedRef\n    }) : null;\n}, \"qfjTrDHZGV5bh8HilGPKK+Nd6LM=\", false, function() {\n    return [\n        usePopperScope$3,\n        useSelectContext,\n        useSelectContentContext\n    ];\n})), \"qfjTrDHZGV5bh8HilGPKK+Nd6LM=\", false, function() {\n    return [\n        usePopperScope$3,\n        useSelectContext,\n        useSelectContentContext\n    ];\n});\n_c60 = SelectArrow;\nSelectArrow.displayName = ARROW_NAME$4;\nvar BUBBLE_INPUT_NAME = \"SelectBubbleInput\";\nvar SelectBubbleInput = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s46((param, forwardedRef)=>{\n    let { __scopeSelect, value: value1, ...props2 } = param;\n    _s46();\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value1);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SelectBubbleInput.useEffect\": ()=>{\n            const select = ref.current;\n            if (!select) return;\n            const selectProto = window.HTMLSelectElement.prototype;\n            const descriptor = Object.getOwnPropertyDescriptor(selectProto, \"value\");\n            const setValue = descriptor.set;\n            if (prevValue !== value1 && setValue) {\n                const event = new Event(\"change\", {\n                    bubbles: true\n                });\n                setValue.call(select, value1);\n                select.dispatchEvent(event);\n            }\n        }\n    }[\"SelectBubbleInput.useEffect\"], [\n        prevValue,\n        value1\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.select, {\n        ...props2,\n        style: {\n            ...VISUALLY_HIDDEN_STYLES,\n            ...props2.style\n        },\n        ref: composedRefs,\n        defaultValue: value1\n    });\n}, \"a6042gtFxAndvzVew5zmo9RhLu4=\", false, function() {\n    return [\n        useComposedRefs,\n        usePrevious\n    ];\n}));\n_c61 = SelectBubbleInput;\nSelectBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction shouldShowPlaceholder(value1) {\n    return value1 === \"\" || value1 === void 0;\n}\nfunction useTypeaheadSearch(onSearchChange) {\n    _s47();\n    const handleSearchChange = useCallbackRef$1(onSearchChange);\n    const searchRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(\"\");\n    const timerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    const handleTypeaheadSearch = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useTypeaheadSearch.useCallback[handleTypeaheadSearch]\": (key)=>{\n            const search = searchRef.current + key;\n            handleSearchChange(search);\n            (function updateSearch(value1) {\n                searchRef.current = value1;\n                window.clearTimeout(timerRef.current);\n                if (value1 !== \"\") timerRef.current = window.setTimeout({\n                    \"useTypeaheadSearch.useCallback[handleTypeaheadSearch].updateSearch\": ()=>updateSearch(\"\")\n                }[\"useTypeaheadSearch.useCallback[handleTypeaheadSearch].updateSearch\"], 1e3);\n            })(search);\n        }\n    }[\"useTypeaheadSearch.useCallback[handleTypeaheadSearch]\"], [\n        handleSearchChange\n    ]);\n    const resetTypeahead = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useTypeaheadSearch.useCallback[resetTypeahead]\": ()=>{\n            searchRef.current = \"\";\n            window.clearTimeout(timerRef.current);\n        }\n    }[\"useTypeaheadSearch.useCallback[resetTypeahead]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useTypeaheadSearch.useEffect\": ()=>{\n            return ({\n                \"useTypeaheadSearch.useEffect\": ()=>window.clearTimeout(timerRef.current)\n            })[\"useTypeaheadSearch.useEffect\"];\n        }\n    }[\"useTypeaheadSearch.useEffect\"], []);\n    return [\n        searchRef,\n        handleTypeaheadSearch,\n        resetTypeahead\n    ];\n}\n_s47(useTypeaheadSearch, \"wl9dUF5u3TiFl/8U6Y9QH+2er6o=\", false, function() {\n    return [\n        useCallbackRef$1\n    ];\n});\nfunction findNextItem(items, search, currentItem) {\n    const isRepeated = search.length > 1 && Array.from(search).every((char)=>char === search[0]);\n    const normalizedSearch = isRepeated ? search[0] : search;\n    const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n    let wrappedItems = wrapArray$2(items, Math.max(currentItemIndex, 0));\n    const excludeCurrentItem = normalizedSearch.length === 1;\n    if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v)=>v !== currentItem);\n    const nextItem = wrappedItems.find((item)=>item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase()));\n    return nextItem !== currentItem ? nextItem : void 0;\n}\nfunction wrapArray$2(array, startIndex) {\n    return array.map((_, index2)=>array[(startIndex + index2) % array.length]);\n}\nvar Root2$3 = Select$1;\nvar Trigger$4 = SelectTrigger$1;\nvar Value = SelectValue$1;\nvar Icon$1 = SelectIcon;\nvar Portal$3 = SelectPortal;\nvar Content2$4 = SelectContent$1;\nvar Viewport = SelectViewport;\nvar Group$1 = SelectGroup$1;\nvar Item$1 = SelectItem$1;\nvar ItemText = SelectItemText;\nvar ItemIndicator$1 = SelectItemIndicator;\nvar ScrollUpButton = SelectScrollUpButton$1;\nvar ScrollDownButton = SelectScrollDownButton$1;\nvar Separator$1 = SelectSeparator$1;\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst toCamelCase = (string)=>string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2)=>p2 ? p2.toUpperCase() : p1.toLowerCase());\nconst toPascalCase = (string)=>{\n    const camelCase = toCamelCase(string);\n    return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n};\nconst mergeClasses = function() {\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    return classes.filter((className, index2, array)=>{\n        return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index2;\n    }).join(\" \").trim();\n};\nconst hasA11yProp = (props2)=>{\n    for(const prop in props2){\n        if (prop.startsWith(\"aria-\") || prop === \"role\" || prop === \"title\") {\n            return true;\n        }\n    }\n};\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ var defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const Icon = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((param, ref)=>{\n    let { color = \"currentColor\", size: size2 = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, iconNode, ...rest } = param;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"svg\", {\n        ref,\n        ...defaultAttributes,\n        width: size2,\n        height: size2,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size2) : strokeWidth,\n        className: mergeClasses(\"lucide\", className),\n        ...!children && !hasA11yProp(rest) && {\n            \"aria-hidden\": \"true\"\n        },\n        ...rest\n    }, [\n        ...iconNode.map((param)=>{\n            let [tag, attrs] = param;\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(tag, attrs);\n        }),\n        ...Array.isArray(children) ? children : [\n            children\n        ]\n    ]);\n});\n_c62 = Icon;\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const createLucideIcon = (iconName, iconNode)=>{\n    const Component = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((param, ref)=>{\n        let { className, ...props2 } = param;\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(Icon, {\n            ref,\n            iconNode,\n            className: mergeClasses(\"lucide-\".concat(toKebabCase(toPascalCase(iconName))), \"lucide-\".concat(iconName), className),\n            ...props2\n        });\n    });\n    Component.displayName = toPascalCase(iconName);\n    return Component;\n};\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$u = [\n    [\n        \"path\",\n        {\n            d: \"M12 5v14\",\n            key: \"s699le\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m19 12-7 7-7-7\",\n            key: \"1idqje\"\n        }\n    ]\n];\nconst ArrowDown = createLucideIcon(\"arrow-down\", __iconNode$u);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$t = [\n    [\n        \"path\",\n        {\n            d: \"M12 8V4H8\",\n            key: \"hb8ula\"\n        }\n    ],\n    [\n        \"rect\",\n        {\n            width: \"16\",\n            height: \"12\",\n            x: \"4\",\n            y: \"8\",\n            rx: \"2\",\n            key: \"enze0r\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M2 14h2\",\n            key: \"vft8re\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M20 14h2\",\n            key: \"4cs60a\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M15 13v2\",\n            key: \"1xurst\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M9 13v2\",\n            key: \"rq6x2g\"\n        }\n    ]\n];\nconst Bot = createLucideIcon(\"bot\", __iconNode$t);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$s = [\n    [\n        \"path\",\n        {\n            d: \"M3 3v16a2 2 0 0 0 2 2h16\",\n            key: \"c24i48\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m19 9-5 5-4-4-3 3\",\n            key: \"2osh9i\"\n        }\n    ]\n];\nconst ChartLine = createLucideIcon(\"chart-line\", __iconNode$s);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$r = [\n    [\n        \"path\",\n        {\n            d: \"M20 6 9 17l-5-5\",\n            key: \"1gmf2c\"\n        }\n    ]\n];\nconst Check = createLucideIcon(\"check\", __iconNode$r);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$q = [\n    [\n        \"path\",\n        {\n            d: \"m6 9 6 6 6-6\",\n            key: \"qrunsl\"\n        }\n    ]\n];\nconst ChevronDown = createLucideIcon(\"chevron-down\", __iconNode$q);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$p = [\n    [\n        \"path\",\n        {\n            d: \"m9 18 6-6-6-6\",\n            key: \"mthhwq\"\n        }\n    ]\n];\nconst ChevronRight = createLucideIcon(\"chevron-right\", __iconNode$p);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$o = [\n    [\n        \"path\",\n        {\n            d: \"m18 15-6-6-6 6\",\n            key: \"153udz\"\n        }\n    ]\n];\nconst ChevronUp = createLucideIcon(\"chevron-up\", __iconNode$o);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$n = [\n    [\n        \"path\",\n        {\n            d: \"M12 12h.01\",\n            key: \"1mp3jc\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16 12h.01\",\n            key: \"1l6xoz\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m17 7 5 5-5 5\",\n            key: \"1xlxn0\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m7 7-5 5 5 5\",\n            key: \"19njba\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M8 12h.01\",\n            key: \"czm47f\"\n        }\n    ]\n];\nconst ChevronsLeftRightEllipsis = createLucideIcon(\"chevrons-left-right-ellipsis\", __iconNode$n);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$m = [\n    [\n        \"path\",\n        {\n            d: \"m7 15 5 5 5-5\",\n            key: \"1hf1tw\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m7 9 5-5 5 5\",\n            key: \"sgt6xg\"\n        }\n    ]\n];\nconst ChevronsUpDown = createLucideIcon(\"chevrons-up-down\", __iconNode$m);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$l = [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ]\n];\nconst Circle = createLucideIcon(\"circle\", __iconNode$l);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$k = [\n    [\n        \"path\",\n        {\n            d: \"m12 15 2 2 4-4\",\n            key: \"2c609p\"\n        }\n    ],\n    [\n        \"rect\",\n        {\n            width: \"14\",\n            height: \"14\",\n            x: \"8\",\n            y: \"8\",\n            rx: \"2\",\n            ry: \"2\",\n            key: \"17jyea\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\",\n            key: \"zix9uf\"\n        }\n    ]\n];\nconst CopyCheck = createLucideIcon(\"copy-check\", __iconNode$k);\n_c63 = CopyCheck;\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$j = [\n    [\n        \"rect\",\n        {\n            width: \"14\",\n            height: \"14\",\n            x: \"8\",\n            y: \"8\",\n            rx: \"2\",\n            ry: \"2\",\n            key: \"17jyea\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\",\n            key: \"zix9uf\"\n        }\n    ]\n];\nconst Copy = createLucideIcon(\"copy\", __iconNode$j);\n_c64 = Copy;\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$i = [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"1\",\n            key: \"41hilf\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"5\",\n            r: \"1\",\n            key: \"gxeob9\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"19\",\n            r: \"1\",\n            key: \"lyex9k\"\n        }\n    ]\n];\nconst EllipsisVertical = createLucideIcon(\"ellipsis-vertical\", __iconNode$i);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$h = [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"1\",\n            key: \"41hilf\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"19\",\n            cy: \"12\",\n            r: \"1\",\n            key: \"1wjl8i\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"5\",\n            cy: \"12\",\n            r: \"1\",\n            key: \"1pcz8c\"\n        }\n    ]\n];\nconst Ellipsis = createLucideIcon(\"ellipsis\", __iconNode$h);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$g = [\n    [\n        \"path\",\n        {\n            d: \"M10 20a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341L21.74 4.67A1 1 0 0 0 21 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14z\",\n            key: \"sc7q7i\"\n        }\n    ]\n];\nconst Funnel = createLucideIcon(\"funnel\", __iconNode$g);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$f = [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 16v-4\",\n            key: \"1dtifu\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 8h.01\",\n            key: \"e9boi3\"\n        }\n    ]\n];\nconst Info = createLucideIcon(\"info\", __iconNode$f);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$e = [\n    [\n        \"path\",\n        {\n            d: \"M21 12a9 9 0 1 1-6.219-8.56\",\n            key: \"13zald\"\n        }\n    ]\n];\nconst LoaderCircle = createLucideIcon(\"loader-circle\", __iconNode$e);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$d = [\n    [\n        \"path\",\n        {\n            d: \"m16 17 5-5-5-5\",\n            key: \"1bji2h\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M21 12H9\",\n            key: \"dn1m92\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\",\n            key: \"1uf3rs\"\n        }\n    ]\n];\nconst LogOut = createLucideIcon(\"log-out\", __iconNode$d);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$c = [\n    [\n        \"path\",\n        {\n            d: \"M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z\",\n            key: \"p1xzt8\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1\",\n            key: \"1cx29u\"\n        }\n    ]\n];\nconst MessagesSquare = createLucideIcon(\"messages-square\", __iconNode$c);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$b = [\n    [\n        \"line\",\n        {\n            x1: \"2\",\n            x2: \"22\",\n            y1: \"2\",\n            y2: \"22\",\n            key: \"a6p6uj\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M18.89 13.23A7.12 7.12 0 0 0 19 12v-2\",\n            key: \"80xlxr\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M5 10v2a7 7 0 0 0 12 5\",\n            key: \"p2k8kg\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M15 9.34V5a3 3 0 0 0-5.68-1.33\",\n            key: \"1gzdoj\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M9 9v3a3 3 0 0 0 5.12 2.12\",\n            key: \"r2i35w\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"19\",\n            y2: \"22\",\n            key: \"x3vr5v\"\n        }\n    ]\n];\nconst MicOff = createLucideIcon(\"mic-off\", __iconNode$b);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$a = [\n    [\n        \"path\",\n        {\n            d: \"M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z\",\n            key: \"131961\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M19 10v2a7 7 0 0 1-14 0v-2\",\n            key: \"1vc78b\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"19\",\n            y2: \"22\",\n            key: \"x3vr5v\"\n        }\n    ]\n];\nconst Mic = createLucideIcon(\"mic\", __iconNode$a);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$9 = [\n    [\n        \"path\",\n        {\n            d: \"M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z\",\n            key: \"a7tn18\"\n        }\n    ]\n];\nconst Moon = createLucideIcon(\"moon\", __iconNode$9);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$8 = [\n    [\n        \"path\",\n        {\n            d: \"M13 2a9 9 0 0 1 9 9\",\n            key: \"1itnx2\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M13 6a5 5 0 0 1 5 5\",\n            key: \"11nki7\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384\",\n            key: \"9njp5v\"\n        }\n    ]\n];\nconst PhoneCall = createLucideIcon(\"phone-call\", __iconNode$8);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$7 = [\n    [\n        \"path\",\n        {\n            d: \"M10.1 13.9a14 14 0 0 0 3.732 2.668 1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2 18 18 0 0 1-12.728-5.272\",\n            key: \"1wngk7\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M22 2 2 22\",\n            key: \"y4kqgn\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M4.76 13.582A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 .244.473\",\n            key: \"10hv5p\"\n        }\n    ]\n];\nconst PhoneOff = createLucideIcon(\"phone-off\", __iconNode$7);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$6 = [\n    [\n        \"path\",\n        {\n            d: \"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z\",\n            key: \"1ffxy3\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m21.854 2.147-10.94 10.939\",\n            key: \"12cjpa\"\n        }\n    ]\n];\nconst Send = createLucideIcon(\"send\", __iconNode$6);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$5 = [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"4\",\n            key: \"4exip2\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 2v2\",\n            key: \"tus03m\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 20v2\",\n            key: \"1lh1kg\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m4.93 4.93 1.41 1.41\",\n            key: \"149t6j\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m17.66 17.66 1.41 1.41\",\n            key: \"ptbguv\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M2 12h2\",\n            key: \"1t8f8n\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M20 12h2\",\n            key: \"1q8mjw\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m6.34 17.66-1.41 1.41\",\n            key: \"1m8zz5\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m19.07 4.93-1.41 1.41\",\n            key: \"1shlcs\"\n        }\n    ]\n];\nconst Sun = createLucideIcon(\"sun\", __iconNode$5);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$4 = [\n    [\n        \"path\",\n        {\n            d: \"M10.66 6H14a2 2 0 0 1 2 2v2.5l5.248-3.062A.5.5 0 0 1 22 7.87v8.196\",\n            key: \"w8jjjt\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2\",\n            key: \"1xawa7\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m2 2 20 20\",\n            key: \"1ooewy\"\n        }\n    ]\n];\nconst VideoOff = createLucideIcon(\"video-off\", __iconNode$4);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$3 = [\n    [\n        \"path\",\n        {\n            d: \"m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5\",\n            key: \"ftymec\"\n        }\n    ],\n    [\n        \"rect\",\n        {\n            x: \"2\",\n            y: \"6\",\n            width: \"14\",\n            height: \"12\",\n            rx: \"2\",\n            key: \"158x01\"\n        }\n    ]\n];\nconst Video = createLucideIcon(\"video\", __iconNode$3);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$2 = [\n    [\n        \"path\",\n        {\n            d: \"M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z\",\n            key: \"uqj9uw\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16 9a5 5 0 0 1 0 6\",\n            key: \"1q6k2b\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M19.364 18.364a9 9 0 0 0 0-12.728\",\n            key: \"ijwkga\"\n        }\n    ]\n];\nconst Volume2 = createLucideIcon(\"volume-2\", __iconNode$2);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode$1 = [\n    [\n        \"path\",\n        {\n            d: \"M16 9a5 5 0 0 1 .95 2.293\",\n            key: \"1fgyg8\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M19.364 5.636a9 9 0 0 1 1.889 9.96\",\n            key: \"l3zxae\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m2 2 20 20\",\n            key: \"1ooewy\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11\",\n            key: \"1gbwow\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M9.828 4.172A.686.686 0 0 1 11 4.657v.686\",\n            key: \"s2je0y\"\n        }\n    ]\n];\nconst VolumeOff = createLucideIcon(\"volume-off\", __iconNode$1);\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const __iconNode = [\n    [\n        \"path\",\n        {\n            d: \"M18 6 6 18\",\n            key: \"1bl5f8\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m6 6 12 12\",\n            key: \"d8bk6v\"\n        }\n    ]\n];\nconst X = createLucideIcon(\"x\", __iconNode);\nconst VolumeIcon = Volume2;\nconst VolumeOffIcon = VolumeOff;\nconst EllipsisIcon = Ellipsis;\nconst LoaderIcon = LoaderCircle;\nconst SelectChevronIcon = ChevronsUpDown;\nconst XIcon = X;\nconst PhoneCallIcon = PhoneCall;\nconst PhoneCallEndIcon = PhoneOff;\nconst ArrowDownIcon = ArrowDown;\nconst ChevronDownIcon = ChevronDown;\nconst ChevronUpIcon = ChevronUp;\nconst MicIcon = Mic;\nconst MicOffIcon = MicOff;\nconst SendIcon = Send;\nconst MoonIcon = Moon;\nconst SunIcon = Sun;\nconst CheckIcon = Check;\nconst ChevronRightIcon = ChevronRight;\nconst CircleIcon = Circle;\nconst EllipsisVerticalIcon = EllipsisVertical;\nconst VideoOffIcon = VideoOff;\nconst LineChartIcon = ChartLine;\nconst MessagesSquareIcon = MessagesSquare;\nconst FunnelIcon = Funnel;\nconst VideoIcon = Video;\nconst BotIcon = Bot;\nconst ChevronsLeftRightEllipsisIcon = ChevronsLeftRightEllipsis;\nconst InfoIcon = Info;\nconst LogoutIcon = LogOut;\nfunction getPipecatUiNamespace() {\n    return \".voice-ui-kit\";\n}\nfunction getPipecatUIContainer() {\n    var _document_querySelector;\n    return (_document_querySelector = document.querySelector(getPipecatUiNamespace())) !== null && _document_querySelector !== void 0 ? _document_querySelector : document.body;\n}\nconst falsyToString = (value1)=>typeof value1 === \"boolean\" ? \"\".concat(value1) : value1 === 0 ? \"0\" : value1;\nconst cx = _Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.c;\nconst cva = (base, config)=>(props2)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props2 === null || props2 === void 0 ? void 0 : props2.class, props2 === null || props2 === void 0 ? void 0 : props2.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props2 === null || props2 === void 0 ? void 0 : props2[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props2 && Object.entries(props2).reduce((acc, param)=>{\n            let [key, value1] = param;\n            if (value1 === void 0) {\n                return acc;\n            }\n            acc[key] = value1;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param2)=>{\n                let [key, value1] = param2;\n                return Array.isArray(value1) ? value1.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value1;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props2 === null || props2 === void 0 ? void 0 : props2.class, props2 === null || props2 === void 0 ? void 0 : props2.className);\n    };\nconst selectTriggerVariants = cva(\"vkui:border-input vkui:text-foreground vkui:data-[placeholder]:text-muted-foreground vkui:font-mono vkui:text-xs vkui:[&_svg:not([class*='text-'])]:text-muted-foreground vkui:focus-visible:border-ring vkui:focus-visible:ring-ring/50 vkui:aria-invalid:ring-destructive/20 vkui:dark:aria-invalid:ring-destructive/40 vkui:aria-invalid:border-destructive vkui:dark:bg-input/30 vkui:dark:hover:bg-input/50 vkui:flex w-fit vkui:items-center vkui:justify-between vkui:rounded-lg vkui:border vkui:bg-transparent vkui:whitespace-nowrap vkui:transition-[color,box-shadow] vkui:outline-none vkui:focus-visible:ring-[3px] vkui:disabled:cursor-not-allowed vkui:disabled:opacity-50 vkui:*:data-[slot=select-value]:line-clamp-1 vkui:*:data-[slot=select-value]:flex vkui:*:data-[slot=select-value]:items-center vkui:*:data-[slot=select-value]:gap-2 vkui:[&_svg]:pointer-events-none vkui:[&_svg]:shrink-0\", {\n    variants: {\n        size: {\n            default: \"vkui:h-8 vkui:pl-3 vkui:pr-2.5 vkui:py-2 vkui:gap-2 vkui:[&_svg]:size-3.5\",\n            sm: \"vkui:h-7 vkui:pl-3 vkui:pr-2.5 vkui:py-1.5 vkui:gap-2 vkui:[&_svg]:size-3.5\",\n            lg: \"vkui:h-10 vkui:px-3.5 vkui:py-2.5 vkui:gap-3 vkui:[&_svg]:size-4\"\n        }\n    },\n    defaultVariants: {\n        size: \"default\"\n    }\n});\nfunction Select(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$3, {\n        \"data-slot\": \"select\",\n        ...props2\n    });\n}\n_c65 = Select;\nfunction SelectGroup(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Group$1, {\n        \"data-slot\": \"select-group\",\n        ...props2\n    });\n}\n_c66 = SelectGroup;\nfunction SelectValue(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Value, {\n        \"data-slot\": \"select-value\",\n        ...props2\n    });\n}\n_c67 = SelectValue;\nfunction SelectTrigger(param) {\n    let { className, size: size2 = \"default\", children, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Trigger$4, {\n        \"data-slot\": \"select-trigger\",\n        \"data-size\": size2,\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(selectTriggerVariants({\n            size: size2\n        }), \"vkui:truncate\", className),\n        ...props2,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"vkui:truncate vkui:flex-1 vkui:min-w-0\",\n                children\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Icon$1, {\n                asChild: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectChevronIcon, {\n                    className: \"vkui:opacity-50 vkui:flex-none\"\n                })\n            })\n        ]\n    });\n}\n_c68 = SelectTrigger;\nfunction SelectGuide(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        \"data-slot\": \"select-guide\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-subtle vkui:font-sans\", className),\n        ...props2\n    });\n}\n_c69 = SelectGuide;\nfunction SelectContent(param) {\n    let { className, children, position = \"popper\", ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal$3, {\n        container: getPipecatUIContainer(),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Content2$4, {\n            \"data-slot\": \"select-content\",\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-popover vkui:text-popover-foreground vkui:data-[state=open]:animate-in vkui:data-[state=closed]:animate-out vkui:data-[state=closed]:fade-out-0 vkui:data-[state=open]:fade-in-0 vkui:data-[state=closed]:zoom-out-95 vkui:data-[state=open]:zoom-in-95 vkui:data-[side=bottom]:slide-in-from-top-2 vkui:data-[side=left]:slide-in-from-right-2 vkui:data-[side=right]:slide-in-from-left-2 vkui:data-[side=top]:slide-in-from-bottom-2 vkui:relative vkui:z-50 vkui:max-h-(--radix-select-content-available-height) vkui:min-w-[8rem] vkui:origin-(--radix-select-content-transform-origin) vkui:overflow-x-hidden vkui:overflow-y-auto vkui:rounded-md vkui:border vkui:shadow-md\", position === \"popper\" && \"vkui:data-[side=bottom]:translate-y-1 vkui:data-[side=left]:-translate-x-1 vkui:data-[side=right]:translate-x-1 vkui:data-[side=top]:-translate-y-1\", className),\n            position,\n            ...props2,\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectScrollUpButton, {}),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Viewport, {\n                    className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:p-1\", position === \"popper\" && \"vkui:h-[var(--radix-select-trigger-height)] vkui:w-full vkui:min-w-[var(--radix-select-trigger-width)] vkui:scroll-my-1\"),\n                    children\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectScrollDownButton, {})\n            ]\n        })\n    });\n}\n_c70 = SelectContent;\nfunction SelectItem(param) {\n    let { className, children, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Item$1, {\n        \"data-slot\": \"select-item\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:focus:bg-accent vkui:focus:text-accent-foreground vkui:[&_svg:not([class*='text-'])]:text-muted-foreground vkui:relative vkui:flex vkui:w-full vkui:cursor-default vkui:items-center vkui:gap-2 vkui:rounded-sm vkui:py-1.5 vkui:pr-8 vkui:pl-2 vkui:text-sm vkui:outline-hidden vkui:select-none vkui:data-[disabled]:pointer-events-none vkui:data-[disabled]:opacity-50 [&_svg]:pointer-events-none vkui:[&_svg]:shrink-0 vkui:[&_svg:not([class*='size-'])]:size-4 vkui:*:[span]:last:flex vkui:*:[span]:last:items-center vkui:*:[span]:last:gap-2\", className),\n        ...props2,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"vkui:absolute vkui:right-2 vkui:flex vkui:size-3.5 vkui:items-center vkui:justify-center\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ItemIndicator$1, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CheckIcon, {\n                        className: \"size-4\"\n                    })\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ItemText, {\n                children\n            })\n        ]\n    });\n}\n_c71 = SelectItem;\nfunction SelectSeparator(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Separator$1, {\n        \"data-slot\": \"select-separator\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-border vkui:pointer-events-none vkui:-mx-1 vkui:my-1 vkui:h-px\", className),\n        ...props2\n    });\n}\n_c72 = SelectSeparator;\nfunction SelectScrollUpButton(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ScrollUpButton, {\n        \"data-slot\": \"select-scroll-up-button\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:cursor-default vkui:items-center vkui:justify-center vkui:py-1\", className),\n        ...props2,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronUpIcon, {\n            className: \"size-4\"\n        })\n    });\n}\n_c73 = SelectScrollUpButton;\nfunction SelectScrollDownButton(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ScrollDownButton, {\n        \"data-slot\": \"select-scroll-down-button\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:cursor-default vkui:items-center vkui:justify-center vkui:py-1\", className),\n        ...props2,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronDownIcon, {\n            className: \"size-4\"\n        })\n    });\n}\n_c74 = SelectScrollDownButton;\nconst AudioOutput = (param)=>{\n    let { className } = param;\n    _s48();\n    const { availableSpeakers, selectedSpeaker, updateSpeaker } = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaDevices)();\n    const handleDeviceChange = (deviceId)=>{\n        updateSpeaker(deviceId);\n    };\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: \"vkui:flex vkui:items-center vkui:gap-4\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n                htmlFor: id,\n                className: \"vkui:text-sm vkui:font-medium vkui:text-muted-foreground vkui:whitespace-nowrap\",\n                children: \"Audio Output\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Select, {\n                value: (selectedSpeaker == null ? void 0 : selectedSpeaker.deviceId) || \"\",\n                onValueChange: handleDeviceChange,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectTrigger, {\n                        id,\n                        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:border-none vkui:w-full\", className),\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectValue, {\n                            placeholder: \"Select a speaker\"\n                        })\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectContent, {\n                        align: \"end\",\n                        children: availableSpeakers.map((device)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SelectItem, {\n                                value: device.deviceId || \"empty\",\n                                children: device.label || \"Speaker \".concat(device.deviceId.slice(0, 5))\n                            }, device.deviceId || \"empty\"))\n                    })\n                ]\n            })\n        ]\n    });\n};\n_s48(AudioOutput, \"Gv6wUAxZxnfPDwJLMum35iYjFKc=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaDevices,\n        react__WEBPACK_IMPORTED_MODULE_1__.useId\n    ];\n});\n_c75 = AudioOutput;\nconst DataList = (param)=>{\n    let { data, classNames = {} } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"dl\", {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-sm vkui:grid vkui:grid-cols-[1fr_2fr] vkui:gap-2 vkui:items-center\", classNames.container),\n        children: Object.entries(data).map((param)=>{\n            let [key, value1] = param;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"dt\", {\n                        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-muted-foreground\", classNames.key),\n                        children: key\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"dd\", {\n                        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-right vkui:font-mono vkui:text-xs vkui:min-w-0 vkui:truncate\", classNames.value),\n                        children: value1\n                    })\n                ]\n            }, key);\n        })\n    });\n};\n_c76 = DataList;\nconst ClientStatus = (param)=>{\n    let { classNames = {}, noAgentState = false, noClientState = false } = param;\n    _s49();\n    const transportState = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState)();\n    const agentConnecting = transportState === \"connecting\" || transportState === \"connected\" || transportState === \"ready\";\n    const [isBotConnected, setIsBotConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotReady, {\n        \"ClientStatus.useRTVIClientEvent\": ()=>{\n            if (noAgentState) return;\n            setIsBotConnected(true);\n        }\n    }[\"ClientStatus.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Disconnected, {\n        \"ClientStatus.useRTVIClientEvent\": ()=>{\n            if (noAgentState) return;\n            setIsBotConnected(false);\n        }\n    }[\"ClientStatus.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotDisconnected, {\n        \"ClientStatus.useRTVIClientEvent\": ()=>{\n            if (noAgentState) return;\n            setIsBotConnected(false);\n        }\n    }[\"ClientStatus.useRTVIClientEvent\"]);\n    if (noAgentState && noClientState) return null;\n    const data = {};\n    if (!noClientState) {\n        data[\"Client\"] = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:uppercase\", {\n                \"vkui:text-emerald-500\": transportState === \"connected\" || transportState === \"ready\"\n            }, classNames.clientValue),\n            children: transportState\n        });\n    }\n    if (!noAgentState) {\n        data[\"Agent\"] = isBotConnected ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-emerald-500 vkui:uppercase\", classNames.agentValue),\n            children: \"Connected\"\n        }) : agentConnecting ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:uppercase\", classNames.agentValue),\n            children: \"Connecting...\"\n        }) : \"---\";\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DataList, {\n        classNames,\n        data\n    });\n};\n_s49(ClientStatus, \"xYOzV5HvHQBsFvkaRCm/7yiH6xI=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent\n    ];\n});\n_c77 = ClientStatus;\nconst buttonVariants = cva(\"vkui:border vkui:inline-flex vkui:items-center vkui:justify-center vkui:gap-2 vkui:whitespace-nowrap vkui:rounded-element vkui:text-sm vkui:font-medium vkui:transition-all vkui:disabled:pointer-events-none vkui:disabled:opacity-50 vkui:[&_svg]:pointer-events-none vkui:shrink-0 vkui:[&_svg]:shrink-0 vkui:outline-none vkui:focus-visible:ring-ring/50 vkui:focus-visible:ring-[3px] vkui:aria-invalid:ring-destructive/20 vkui:dark:aria-invalid:ring-destructive/40 vkui:aria-invalid:border-destructive\", {\n    variants: {\n        variant: {\n            default: \"vkui:bg-primary vkui:text-primary-foreground vkui:hover:bg-primary/90 vkui:border-transparent\",\n            secondary: \"vkui:bg-secondary vkui:border-transparent vkui:text-secondary-foreground vkui:hover:bg-secondary/60 vkui:focus-visible:border-secondary\",\n            outline: \"vkui:text-foreground vkui:border vkui:bg-background vkui:hover:bg-accent vkui:dark:bg-input/30 vkui:dark:border-input vkui:dark:hover:bg-input/50 vkui:focus-visible:border-ring\",\n            destructive: \"vkui:bg-destructive vkui:border-transparent vkui:text-white vkui:hover:bg-destructive/90 vkui:focus-visible:ring-destructive/20 vkui:dark:focus-visible:ring-destructive/40 vkui:dark:bg-destructive/60\",\n            ghost: \"vkui:text-foreground vkui:border vkui:border-transparent vkui:hover:bg-accent vkui:hover:text-accent-foreground vkui:dark:hover:bg-accent/50\",\n            link: \"vkui:text-primary vkui:underline-offset-4 vkui:hover:underline vkui:border vkui:border-transparent\"\n        },\n        size: {\n            default: \"vkui:h-8 vkui:px-4 vkui:py-2 vkui:has-[>svg]:px-3 vkui:[&_svg:not([class*='size-'])]:size-5\",\n            sm: \"vkui:h-7 vkui:rounded-element vkui:gap-1.5 vkui:px-3 vkui:has-[>svg]:px-2.5 vkui:[&_svg:not([class*='size-'])]:size-4\",\n            lg: \"vkui:h-10 vkui:rounded-element vkui:px-6 vkui:has-[>svg]:px-4 vkui:[&_svg:not([class*='size-'])]:size-5\",\n            xl: \"vkui:h-12 vkui:rounded-element vkui:px-8 vkui:text-lg vkui:has-[>svg]:px-6 vkui:[&_svg:not([class*='size-'])]:size-6 vkui:gap-3\",\n            icon: \"vkui:h-8 vkui:w-8 vkui:p-0 vkui:has-[>svg]:p-0 vkui:[&_svg:not([class*='size-'])]:size-5\",\n            \"icon-sm\": \"vkui:h-7 vkui:w-7 vkui:p-0 vkui:has-[>svg]:p-0 vkui:[&_svg:not([class*='size-'])]:size-4\",\n            \"icon-xs\": \"vkui:h-6 vkui:w-6 vkui:p-0 vkui:has-[>svg]:p-0 vkui:[&_svg:not([class*='size-'])]:size-3\"\n        },\n        state: {\n            default: \"\",\n            active: \"\",\n            inactive: \"\"\n        },\n        isIcon: {\n            true: \"\",\n            false: \"\"\n        }\n    },\n    compoundVariants: [\n        {\n            size: \"default\",\n            isIcon: true,\n            className: \"vkui:size-8 vkui:@max-xs/panel:size-7 vkui:rounded-element vkui:[&_svg:not([class*='size-'])]:size-5 vkui:@max-xs/panel:[&_svg:not([class*='size-'])]:size-4\"\n        },\n        {\n            size: \"sm\",\n            isIcon: true,\n            className: \"vkui:size-7 vkui:@max-xs/panel:size-6 vkui:rounded-element vkui:[&_svg:not([class*='size-'])]:size-4 vkui:@max-xs/panel:[&_svg:not([class*='size-'])]:size-3\"\n        },\n        {\n            size: \"lg\",\n            isIcon: true,\n            className: \"vkui:size-10 vkui:@max-xs/panel:size-9 vkui:rounded-element vkui:[&_svg:not([class*='size-'])]:size-5 vkui:@max-xs/panel:[&_svg:not([class*='size-'])]:size-4\"\n        },\n        {\n            size: \"xl\",\n            isIcon: true,\n            className: \"vkui:size-12 vkui:rounded-element vkui:[&_svg:not([class*='size-'])]:size-5 vkui:@max-xs/panel:[&_svg:not([class*='size-'])]:size-4\"\n        },\n        {\n            variant: \"default\",\n            state: \"active\",\n            className: \"vkui:bg-active vkui:text-active-foreground vkui:hover:bg-active/90 vkui:focus-visible:ring-active/20 vkui:dark:focus-visible:ring-active/40\"\n        },\n        {\n            variant: \"default\",\n            state: \"inactive\",\n            className: \"vkui:bg-inactive vkui:text-inactive-foreground vkui:hover:bg-inactive/90 vkui:focus-visible:ring-inactive/20 vkui:dark:focus-visible:ring-inactive/40\"\n        },\n        {\n            variant: \"secondary\",\n            state: \"active\",\n            className: \"vkui:bg-active vkui:text-active-foreground vkui:hover:bg-active/90 vkui:focus-visible:ring-active/20 vkui:dark:focus-visible:ring-active/40 vkui:focus-visible:border-active\"\n        },\n        {\n            variant: \"secondary\",\n            state: \"inactive\",\n            className: \"vkui:bg-inactive vkui:text-inactive-foreground vkui:hover:bg-inactive/90 vkui:focus-visible:ring-inactive/20 vkui:dark:focus-visible:ring-inactive/40 vkui:focus-visible:border-inactive\"\n        },\n        {\n            variant: \"outline\",\n            state: \"active\",\n            className: \"vkui:bg-active-accent vkui:text-active vkui:border-active vkui:hover:bg-active-accent/60 vkui:dark:bg-active-accent vkui:dark:hover:bg-active-accent/60 vkui:dark:border-active vkui:focus-visible:border-active vkui:focus-visible:ring-active/20 vkui:dark:focus-visible:ring-active/40\"\n        },\n        {\n            variant: \"outline\",\n            state: \"inactive\",\n            className: \"vkui:bg-inactive-accent vkui:text-inactive vkui:border-inactive vkui:hover:bg-inactive-accent/60 vkui:dark:bg-inactive-accent vkui:dark:hover:bg-inactive-accent/60 vkui:dark:border-inactive vkui:focus-visible:border-inactive vkui:focus-visible:ring-inactive/20 vkui:dark:focus-visible:ring-inactive/40\"\n        }\n    ],\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n        state: \"default\",\n        isIcon: false\n    }\n});\nconst buttonAccentColorMap = {\n    default: {\n        default: \"--vkui-color-active\",\n        inactive: \"--vkui-color-inactive-foreground\",\n        active: \"--vkui-color-active\"\n    },\n    secondary: {\n        default: \"--vkui-color-active\",\n        inactive: \"--vkui-color-inactive-foreground\",\n        active: \"--vkui-color-active\"\n    },\n    outline: {\n        default: \"--vkui-color-active\",\n        inactive: \"--vkui-color-inactive\",\n        active: \"--vkui-color-active\"\n    },\n    destructive: {\n        default: \"--vkui-color-background\",\n        inactive: \"--vkui-color-background\",\n        active: \"--vkui-color-background\"\n    },\n    ghost: {\n        default: \"--vkui-color-active\",\n        inactive: \"--vkui-color-border\",\n        active: \"--vkui-color-active\"\n    },\n    link: {\n        default: \"--vkui-color-active\",\n        inactive: \"--vkui-color-inactive\",\n        active: \"--vkui-color-active\"\n    }\n};\nfunction Button(param) {\n    let { className, variant, size: size2, state, isIcon, isLoading = false, asChild = false, ...props2 } = param;\n    const Comp = asChild ? Slot$3 : \"button\";\n    if (isLoading) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Comp, {\n            \"data-slot\": \"button\",\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(buttonVariants({\n                variant,\n                size: size2,\n                state,\n                isIcon,\n                className\n            })),\n            ...props2,\n            disabled: true,\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoaderIcon, {\n                    className: \"vkui:animate-spin\"\n                }),\n                props2.children\n            ]\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Comp, {\n        \"data-slot\": \"button\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(buttonVariants({\n            variant,\n            size: size2,\n            state,\n            isIcon,\n            className\n        })),\n        ...props2\n    });\n}\n_c78 = Button;\nconst ConnectButtonComponent = (param)=>{\n    let { className: passedClassName, onClick, onConnect, onDisconnect, stateContent, size: size2 = \"default\", defaultVariant = \"default\", transportState } = param;\n    const getButtonProps = ()=>{\n        if (stateContent && stateContent[transportState]) {\n            return stateContent[transportState];\n        }\n        switch(transportState){\n            case \"initialized\":\n            case \"initializing\":\n            case \"disconnected\":\n                return {\n                    children: \"Connect\",\n                    variant: defaultVariant\n                };\n            case \"ready\":\n                return {\n                    children: \"Disconnect\",\n                    variant: defaultVariant,\n                    className: \"vkui:text-destructive\"\n                };\n            case \"disconnecting\":\n                return {\n                    children: \"Disconnecting...\",\n                    variant: defaultVariant\n                };\n            case \"error\":\n                return {\n                    children: \"Error\",\n                    variant: defaultVariant\n                };\n            default:\n                return {\n                    children: \"Connecting...\",\n                    variant: defaultVariant\n                };\n        }\n    };\n    const { children, className, variant } = getButtonProps();\n    const handleClick = ()=>{\n        onClick == null ? void 0 : onClick();\n        if ([\n            \"ready\",\n            \"connected\"\n        ].includes(transportState)) {\n            onDisconnect == null ? void 0 : onDisconnect();\n        } else {\n            onConnect == null ? void 0 : onConnect();\n        }\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n        onClick: handleClick,\n        variant,\n        size: size2,\n        disabled: ![\n            \"disconnected\",\n            \"initialized\",\n            \"ready\"\n        ].includes(transportState),\n        isLoading: ![\n            \"disconnected\",\n            \"initialized\",\n            \"ready\",\n            \"error\"\n        ].includes(transportState),\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(className, passedClassName),\n        children\n    });\n};\n_c79 = ConnectButtonComponent;\nconst ConnectButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(_s50((props2)=>{\n    _s50();\n    const transportState = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState)();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConnectButtonComponent, {\n        transportState,\n        ...props2\n    });\n}, \"JeKQ57I8EOLG1Dp/t1HjvSSPeHU=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState\n    ];\n}));\n_c80 = ConnectButton;\nConnectButton.displayName = \"ConnectButton\";\nconst buttonGroupVariants = cva(\"vkui:flex vkui:items-center vkui:button-group\", {\n    variants: {\n        orientation: {\n            horizontal: \"vkui:flex-row vkui:*:first:rounded-e-none vkui:*:last:rounded-s-none vkui:*:-ml-[1px] vkui:*:first:ml-0\",\n            vertical: \"vkui:flex-col vkui:*:first:rounded-b-none vkui:*:last:rounded-t-none vkui:*:-mt-[1px] vkui:*:first:mt-0 vkui:*:self-stretch\"\n        }\n    },\n    defaultVariants: {\n        orientation: \"horizontal\"\n    }\n});\nconst ButtonGroup = (param)=>{\n    let { className, orientation = \"horizontal\", children, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex\", buttonGroupVariants({\n            orientation\n        }), className),\n        ...props2,\n        children\n    });\n};\n_c81 = ButtonGroup;\nconst VoiceVisualizer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.memo(_s51((param)=>{\n    let { backgroundColor = \"transparent\", barColor = \"black\", barCount: barCount2 = 5, barGap = 12, barLineCap = \"round\", barMaxHeight = 120, barOrigin = \"center\", barWidth = 30, participantType, className } = param;\n    _s51();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const resolvedBarColorRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"black\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"VoiceVisualizer.useEffect\": ()=>{\n            function resolveColor(color) {\n                if (!color) return \"black\";\n                if (color.startsWith(\"--\")) {\n                    return getComputedStyle(document.documentElement).getPropertyValue(color).trim() || \"black\";\n                }\n                return color;\n            }\n            resolvedBarColorRef.current = resolveColor(barColor);\n        }\n    }[\"VoiceVisualizer.useEffect\"], [\n        barColor\n    ]);\n    const track = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaTrack)(\"audio\", participantType);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"VoiceVisualizer.useEffect\": ()=>{\n            if (!canvasRef.current) return;\n            const canvasWidth = barCount2 * barWidth + (barCount2 - 1) * barGap;\n            const canvasHeight = barMaxHeight;\n            const canvas = canvasRef.current;\n            const scaleFactor = 2;\n            const resizeCanvas = {\n                \"VoiceVisualizer.useEffect.resizeCanvas\": ()=>{\n                    canvas.width = canvasWidth * scaleFactor;\n                    canvas.height = canvasHeight * scaleFactor;\n                    canvas.style.width = \"\".concat(canvasWidth, \"px\");\n                    canvas.style.height = \"\".concat(canvasHeight, \"px\");\n                    canvasCtx.lineCap = barLineCap;\n                    canvasCtx.scale(scaleFactor, scaleFactor);\n                }\n            }[\"VoiceVisualizer.useEffect.resizeCanvas\"];\n            const canvasCtx = canvas.getContext(\"2d\");\n            resizeCanvas();\n            if (!track) return;\n            const audioContext = new AudioContext();\n            const source = audioContext.createMediaStreamSource(new MediaStream([\n                track\n            ]));\n            const analyser = audioContext.createAnalyser();\n            analyser.fftSize = 1024;\n            source.connect(analyser);\n            const frequencyData = new Uint8Array(analyser.frequencyBinCount);\n            canvasCtx.lineCap = barLineCap;\n            const bands = Array.from({\n                length: barCount2\n            }, {\n                \"VoiceVisualizer.useEffect.bands\": (_, i)=>{\n                    const minFreq = barCount2 > 20 ? 200 : 80;\n                    const maxFreq = 1e4;\n                    const melMin = 2595 * Math.log10(1 + minFreq / 700);\n                    const melMax = 2595 * Math.log10(1 + maxFreq / 700);\n                    const melStep = (melMax - melMin) / barCount2;\n                    const melValue = melMin + i * melStep;\n                    const startFreq = 700 * (Math.pow(10, melValue / 2595) - 1);\n                    const endFreq = 700 * (Math.pow(10, (melValue + melStep) / 2595) - 1);\n                    return {\n                        startFreq,\n                        endFreq,\n                        smoothValue: 0\n                    };\n                }\n            }[\"VoiceVisualizer.useEffect.bands\"]);\n            const getFrequencyBinIndex = {\n                \"VoiceVisualizer.useEffect.getFrequencyBinIndex\": (frequency)=>{\n                    const nyquist = audioContext.sampleRate / 2;\n                    return Math.round(frequency / nyquist * (analyser.frequencyBinCount - 1));\n                }\n            }[\"VoiceVisualizer.useEffect.getFrequencyBinIndex\"];\n            function drawSpectrum() {\n                analyser.getByteFrequencyData(frequencyData);\n                canvasCtx.clearRect(0, 0, canvas.width / scaleFactor, canvas.height / scaleFactor);\n                canvasCtx.fillStyle = backgroundColor;\n                canvasCtx.fillRect(0, 0, canvas.width / scaleFactor, canvas.height / scaleFactor);\n                let isActive = false;\n                const totalBarsWidth = bands.length * barWidth + (bands.length - 1) * barGap;\n                const startX = (canvas.width / scaleFactor - totalBarsWidth) / 2;\n                const adjustedCircleRadius = barWidth / 2;\n                const resolvedBarColor = resolvedBarColorRef.current;\n                bands.forEach({\n                    \"VoiceVisualizer.useEffect.drawSpectrum\": (band, i)=>{\n                        const startIndex = getFrequencyBinIndex(band.startFreq);\n                        const endIndex = getFrequencyBinIndex(band.endFreq);\n                        const bandData = frequencyData.slice(startIndex, endIndex);\n                        const bandValue = bandData.reduce({\n                            \"VoiceVisualizer.useEffect.drawSpectrum\": (acc, val)=>acc + val\n                        }[\"VoiceVisualizer.useEffect.drawSpectrum\"], 0) / bandData.length;\n                        const smoothingFactor = 0.2;\n                        if (bandValue < 1) {\n                            band.smoothValue = Math.max(band.smoothValue - smoothingFactor * 5, 0);\n                        } else {\n                            band.smoothValue = band.smoothValue + (bandValue - band.smoothValue) * smoothingFactor;\n                            isActive = true;\n                        }\n                        const x = startX + i * (barWidth + barGap);\n                        const minHeight = 0;\n                        const barHeight = Math.max(minHeight, Math.min(band.smoothValue / 255 * barMaxHeight, barMaxHeight));\n                        let yTop, yBottom;\n                        const canvasHeight2 = canvas.height / scaleFactor;\n                        switch(barOrigin){\n                            case \"top\":\n                                yTop = adjustedCircleRadius;\n                                yBottom = Math.min(adjustedCircleRadius + barHeight, canvasHeight2 - adjustedCircleRadius);\n                                break;\n                            case \"bottom\":\n                                yBottom = canvasHeight2 - adjustedCircleRadius;\n                                yTop = Math.max(yBottom - barHeight, adjustedCircleRadius);\n                                break;\n                            case \"center\":\n                            default:\n                                yTop = Math.max(canvasHeight2 / 2 - barHeight / 2, adjustedCircleRadius);\n                                yBottom = Math.min(canvasHeight2 / 2 + barHeight / 2, canvasHeight2 - adjustedCircleRadius);\n                                break;\n                        }\n                        if (band.smoothValue > 0) {\n                            canvasCtx.beginPath();\n                            canvasCtx.moveTo(x + barWidth / 2, yTop);\n                            canvasCtx.lineTo(x + barWidth / 2, yBottom);\n                            canvasCtx.lineWidth = barWidth;\n                            canvasCtx.strokeStyle = resolvedBarColor;\n                            canvasCtx.stroke();\n                        } else {\n                            drawInactiveCircle(adjustedCircleRadius, resolvedBarColor, x, yTop);\n                        }\n                    }\n                }[\"VoiceVisualizer.useEffect.drawSpectrum\"]);\n                if (!isActive) {\n                    drawInactiveCircles(adjustedCircleRadius, resolvedBarColor);\n                }\n                requestAnimationFrame(drawSpectrum);\n            }\n            function drawInactiveCircle(circleRadius, color, x, y) {\n                switch(barLineCap){\n                    case \"square\":\n                        canvasCtx.fillStyle = color;\n                        canvasCtx.fillRect(x + barWidth / 2 - circleRadius, y - circleRadius, circleRadius * 2, circleRadius * 2);\n                        break;\n                    case \"round\":\n                    default:\n                        canvasCtx.beginPath();\n                        canvasCtx.arc(x + barWidth / 2, y, circleRadius, 0, 2 * Math.PI);\n                        canvasCtx.fillStyle = color;\n                        canvasCtx.fill();\n                        canvasCtx.closePath();\n                        break;\n                }\n            }\n            function drawInactiveCircles(circleRadius, color) {\n                const totalBarsWidth = bands.length * barWidth + (bands.length - 1) * barGap;\n                const startX = (canvas.width / scaleFactor - totalBarsWidth) / 2;\n                const canvasHeight2 = canvas.height / scaleFactor;\n                let y;\n                switch(barOrigin){\n                    case \"top\":\n                        y = circleRadius;\n                        break;\n                    case \"bottom\":\n                        y = canvasHeight2 - circleRadius;\n                        break;\n                    case \"center\":\n                    default:\n                        y = canvasHeight2 / 2;\n                        break;\n                }\n                bands.forEach({\n                    \"VoiceVisualizer.useEffect.drawInactiveCircles\": (_, i)=>{\n                        const x = startX + i * (barWidth + barGap);\n                        drawInactiveCircle(circleRadius, color, x, y);\n                    }\n                }[\"VoiceVisualizer.useEffect.drawInactiveCircles\"]);\n            }\n            drawSpectrum();\n            window.addEventListener(\"resize\", resizeCanvas);\n            return ({\n                \"VoiceVisualizer.useEffect\": ()=>{\n                    audioContext.close();\n                    window.removeEventListener(\"resize\", resizeCanvas);\n                }\n            })[\"VoiceVisualizer.useEffect\"];\n        }\n    }[\"VoiceVisualizer.useEffect\"], [\n        backgroundColor,\n        barCount2,\n        barGap,\n        barLineCap,\n        barMaxHeight,\n        barOrigin,\n        barWidth,\n        track,\n        barColor\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"canvas\", {\n        ref: canvasRef,\n        style: {\n            display: \"block\",\n            width: \"100%\",\n            height: \"100%\"\n        },\n        className\n    });\n}, \"O0NXgTPo3m/C66yevDi58cNp/HU=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaTrack\n    ];\n}));\n_c82 = VoiceVisualizer;\nVoiceVisualizer.displayName = \"VoiceVisualizer\";\nfunction useStateMachine(initialState2, machine) {\n    _s52();\n    return react__WEBPACK_IMPORTED_MODULE_1__.useReducer({\n        \"useStateMachine.useReducer\": (state, event)=>{\n            const nextState = machine[state][event];\n            return nextState !== null && nextState !== void 0 ? nextState : state;\n        }\n    }[\"useStateMachine.useReducer\"], initialState2);\n}\n_s52(useStateMachine, \"JKK9dC9OkAPpgvtr+lhHdy62seQ=\");\nvar Presence = (props2)=>{\n    _s53();\n    const { present, children } = props2;\n    const presence = usePresence(present);\n    const child = typeof children === \"function\" ? children({\n        present: presence.isPresent\n    }) : react__WEBPACK_IMPORTED_MODULE_1__.Children.only(children);\n    const ref = useComposedRefs(presence.ref, getElementRef(child));\n    const forceMount = typeof children === \"function\";\n    return forceMount || presence.isPresent ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(child, {\n        ref\n    }) : null;\n};\n_s53(Presence, \"uNryTcoDvJa4CrInYRt27opyun0=\", false, function() {\n    return [\n        usePresence,\n        useComposedRefs\n    ];\n});\n_c83 = Presence;\nPresence.displayName = \"Presence\";\nfunction usePresence(present) {\n    _s54();\n    const [node, setNode] = react__WEBPACK_IMPORTED_MODULE_1__.useState();\n    const stylesRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const prevPresentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(present);\n    const prevAnimationNameRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(\"none\");\n    const initialState2 = present ? \"mounted\" : \"unmounted\";\n    const [state, send] = useStateMachine(initialState2, {\n        mounted: {\n            UNMOUNT: \"unmounted\",\n            ANIMATION_OUT: \"unmountSuspended\"\n        },\n        unmountSuspended: {\n            MOUNT: \"mounted\",\n            ANIMATION_END: \"unmounted\"\n        },\n        unmounted: {\n            MOUNT: \"mounted\"\n        }\n    });\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"usePresence.useEffect\": ()=>{\n            const currentAnimationName = getAnimationName(stylesRef.current);\n            prevAnimationNameRef.current = state === \"mounted\" ? currentAnimationName : \"none\";\n        }\n    }[\"usePresence.useEffect\"], [\n        state\n    ]);\n    useLayoutEffect2({\n        \"usePresence.useLayoutEffect2\": ()=>{\n            const styles = stylesRef.current;\n            const wasPresent = prevPresentRef.current;\n            const hasPresentChanged = wasPresent !== present;\n            if (hasPresentChanged) {\n                const prevAnimationName = prevAnimationNameRef.current;\n                const currentAnimationName = getAnimationName(styles);\n                if (present) {\n                    send(\"MOUNT\");\n                } else if (currentAnimationName === \"none\" || (styles == null ? void 0 : styles.display) === \"none\") {\n                    send(\"UNMOUNT\");\n                } else {\n                    const isAnimating = prevAnimationName !== currentAnimationName;\n                    if (wasPresent && isAnimating) {\n                        send(\"ANIMATION_OUT\");\n                    } else {\n                        send(\"UNMOUNT\");\n                    }\n                }\n                prevPresentRef.current = present;\n            }\n        }\n    }[\"usePresence.useLayoutEffect2\"], [\n        present,\n        send\n    ]);\n    useLayoutEffect2({\n        \"usePresence.useLayoutEffect2\": ()=>{\n            if (node) {\n                let timeoutId;\n                var _node_ownerDocument_defaultView;\n                const ownerWindow = (_node_ownerDocument_defaultView = node.ownerDocument.defaultView) !== null && _node_ownerDocument_defaultView !== void 0 ? _node_ownerDocument_defaultView : window;\n                const handleAnimationEnd = {\n                    \"usePresence.useLayoutEffect2.handleAnimationEnd\": (event)=>{\n                        const currentAnimationName = getAnimationName(stylesRef.current);\n                        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n                        if (event.target === node && isCurrentAnimation) {\n                            send(\"ANIMATION_END\");\n                            if (!prevPresentRef.current) {\n                                const currentFillMode = node.style.animationFillMode;\n                                node.style.animationFillMode = \"forwards\";\n                                timeoutId = ownerWindow.setTimeout({\n                                    \"usePresence.useLayoutEffect2.handleAnimationEnd\": ()=>{\n                                        if (node.style.animationFillMode === \"forwards\") {\n                                            node.style.animationFillMode = currentFillMode;\n                                        }\n                                    }\n                                }[\"usePresence.useLayoutEffect2.handleAnimationEnd\"]);\n                            }\n                        }\n                    }\n                }[\"usePresence.useLayoutEffect2.handleAnimationEnd\"];\n                const handleAnimationStart = {\n                    \"usePresence.useLayoutEffect2.handleAnimationStart\": (event)=>{\n                        if (event.target === node) {\n                            prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n                        }\n                    }\n                }[\"usePresence.useLayoutEffect2.handleAnimationStart\"];\n                node.addEventListener(\"animationstart\", handleAnimationStart);\n                node.addEventListener(\"animationcancel\", handleAnimationEnd);\n                node.addEventListener(\"animationend\", handleAnimationEnd);\n                return ({\n                    \"usePresence.useLayoutEffect2\": ()=>{\n                        ownerWindow.clearTimeout(timeoutId);\n                        node.removeEventListener(\"animationstart\", handleAnimationStart);\n                        node.removeEventListener(\"animationcancel\", handleAnimationEnd);\n                        node.removeEventListener(\"animationend\", handleAnimationEnd);\n                    }\n                })[\"usePresence.useLayoutEffect2\"];\n            } else {\n                send(\"ANIMATION_END\");\n            }\n        }\n    }[\"usePresence.useLayoutEffect2\"], [\n        node,\n        send\n    ]);\n    return {\n        isPresent: [\n            \"mounted\",\n            \"unmountSuspended\"\n        ].includes(state),\n        ref: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"usePresence.useCallback\": (node2)=>{\n                stylesRef.current = node2 ? getComputedStyle(node2) : null;\n                setNode(node2);\n            }\n        }[\"usePresence.useCallback\"], [])\n    };\n}\n_s54(usePresence, \"S4FjRZAwsNSjrLzgYIYDNrcbcv4=\", false, function() {\n    return [\n        useStateMachine,\n        useLayoutEffect2,\n        useLayoutEffect2\n    ];\n});\nfunction getAnimationName(styles) {\n    return (styles == null ? void 0 : styles.animationName) || \"none\";\n}\nfunction getElementRef(element) {\n    var _a, _b;\n    let getter = (_a = Object.getOwnPropertyDescriptor(element.props, \"ref\")) == null ? void 0 : _a.get;\n    let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.ref;\n    }\n    getter = (_b = Object.getOwnPropertyDescriptor(element, \"ref\")) == null ? void 0 : _b.get;\n    mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.props.ref;\n    }\n    return element.props.ref || element.ref;\n}\nvar ENTRY_FOCUS = \"rovingFocusGroup.onEntryFocus\";\nvar EVENT_OPTIONS = {\n    bubbles: false,\n    cancelable: true\n};\nvar GROUP_NAME$2 = \"RovingFocusGroup\";\nvar [Collection$1, useCollection$1, createCollectionScope$1] = createCollection(GROUP_NAME$2);\nvar [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(GROUP_NAME$2, [\n    createCollectionScope$1\n]);\nvar [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME$2);\nvar RovingFocusGroup = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c84 = (props2, forwardedRef)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection$1.Provider, {\n        scope: props2.__scopeRovingFocusGroup,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection$1.Slot, {\n            scope: props2.__scopeRovingFocusGroup,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RovingFocusGroupImpl, {\n                ...props2,\n                ref: forwardedRef\n            })\n        })\n    });\n});\n_c85 = RovingFocusGroup;\nRovingFocusGroup.displayName = GROUP_NAME$2;\nvar RovingFocusGroupImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s55((props2, forwardedRef)=>{\n    _s55();\n    const { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus, preventScrollOnEntryFocus = false, ...groupProps } = props2;\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const direction = useDirection(dir);\n    const [currentTabStopId, setCurrentTabStopId] = useControllableState({\n        prop: currentTabStopIdProp,\n        defaultProp: defaultCurrentTabStopId !== null && defaultCurrentTabStopId !== void 0 ? defaultCurrentTabStopId : null,\n        onChange: onCurrentTabStopIdChange,\n        caller: GROUP_NAME$2\n    });\n    const [isTabbingBackOut, setIsTabbingBackOut] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const handleEntryFocus = useCallbackRef$1(onEntryFocus);\n    const getItems = useCollection$1(__scopeRovingFocusGroup);\n    const isClickFocusRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const [focusableItemsCount, setFocusableItemsCount] = react__WEBPACK_IMPORTED_MODULE_1__.useState(0);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RovingFocusGroupImpl.useEffect\": ()=>{\n            const node = ref.current;\n            if (node) {\n                node.addEventListener(ENTRY_FOCUS, handleEntryFocus);\n                return ({\n                    \"RovingFocusGroupImpl.useEffect\": ()=>node.removeEventListener(ENTRY_FOCUS, handleEntryFocus)\n                })[\"RovingFocusGroupImpl.useEffect\"];\n            }\n        }\n    }[\"RovingFocusGroupImpl.useEffect\"], [\n        handleEntryFocus\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RovingFocusProvider, {\n        scope: __scopeRovingFocusGroup,\n        orientation,\n        dir: direction,\n        loop,\n        currentTabStopId,\n        onItemFocus: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"RovingFocusGroupImpl.useCallback\": (tabStopId)=>setCurrentTabStopId(tabStopId)\n        }[\"RovingFocusGroupImpl.useCallback\"], [\n            setCurrentTabStopId\n        ]),\n        onItemShiftTab: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"RovingFocusGroupImpl.useCallback\": ()=>setIsTabbingBackOut(true)\n        }[\"RovingFocusGroupImpl.useCallback\"], []),\n        onFocusableItemAdd: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"RovingFocusGroupImpl.useCallback\": ()=>setFocusableItemsCount({\n                    \"RovingFocusGroupImpl.useCallback\": (prevCount)=>prevCount + 1\n                }[\"RovingFocusGroupImpl.useCallback\"])\n        }[\"RovingFocusGroupImpl.useCallback\"], []),\n        onFocusableItemRemove: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"RovingFocusGroupImpl.useCallback\": ()=>setFocusableItemsCount({\n                    \"RovingFocusGroupImpl.useCallback\": (prevCount)=>prevCount - 1\n                }[\"RovingFocusGroupImpl.useCallback\"])\n        }[\"RovingFocusGroupImpl.useCallback\"], []),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n            tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,\n            \"data-orientation\": orientation,\n            ...groupProps,\n            ref: composedRefs,\n            style: {\n                outline: \"none\",\n                ...props2.style\n            },\n            onMouseDown: composeEventHandlers(props2.onMouseDown, ()=>{\n                isClickFocusRef.current = true;\n            }),\n            onFocus: composeEventHandlers(props2.onFocus, (event)=>{\n                const isKeyboardFocus = !isClickFocusRef.current;\n                if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {\n                    const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);\n                    event.currentTarget.dispatchEvent(entryFocusEvent);\n                    if (!entryFocusEvent.defaultPrevented) {\n                        const items = getItems().filter((item)=>item.focusable);\n                        const activeItem = items.find((item)=>item.active);\n                        const currentItem = items.find((item)=>item.id === currentTabStopId);\n                        const candidateItems = [\n                            activeItem,\n                            currentItem,\n                            ...items\n                        ].filter(Boolean);\n                        const candidateNodes = candidateItems.map((item)=>item.ref.current);\n                        focusFirst$1(candidateNodes, preventScrollOnEntryFocus);\n                    }\n                }\n                isClickFocusRef.current = false;\n            }),\n            onBlur: composeEventHandlers(props2.onBlur, ()=>setIsTabbingBackOut(false))\n        })\n    });\n}, \"7AR5V8DgQNDVWE8JmfW1xf+m0QE=\", false, function() {\n    return [\n        useComposedRefs,\n        useDirection,\n        useControllableState,\n        useCallbackRef$1,\n        useCollection$1\n    ];\n}));\n_c86 = RovingFocusGroupImpl;\nvar ITEM_NAME$2 = \"RovingFocusGroupItem\";\nvar RovingFocusGroupItem = /*#__PURE__*/ _s56(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c87 = _s56((props2, forwardedRef)=>{\n    _s56();\n    const { __scopeRovingFocusGroup, focusable = true, active = false, tabStopId, children, ...itemProps } = props2;\n    const autoId = useId$1();\n    const id = tabStopId || autoId;\n    const context = useRovingFocusContext(ITEM_NAME$2, __scopeRovingFocusGroup);\n    const isCurrentTabStop = context.currentTabStopId === id;\n    const getItems = useCollection$1(__scopeRovingFocusGroup);\n    const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } = context;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RovingFocusGroupItem.useEffect\": ()=>{\n            if (focusable) {\n                onFocusableItemAdd();\n                return ({\n                    \"RovingFocusGroupItem.useEffect\": ()=>onFocusableItemRemove()\n                })[\"RovingFocusGroupItem.useEffect\"];\n            }\n        }\n    }[\"RovingFocusGroupItem.useEffect\"], [\n        focusable,\n        onFocusableItemAdd,\n        onFocusableItemRemove\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection$1.ItemSlot, {\n        scope: __scopeRovingFocusGroup,\n        id,\n        focusable,\n        active,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.span, {\n            tabIndex: isCurrentTabStop ? 0 : -1,\n            \"data-orientation\": context.orientation,\n            ...itemProps,\n            ref: forwardedRef,\n            onMouseDown: composeEventHandlers(props2.onMouseDown, (event)=>{\n                if (!focusable) event.preventDefault();\n                else context.onItemFocus(id);\n            }),\n            onFocus: composeEventHandlers(props2.onFocus, ()=>context.onItemFocus(id)),\n            onKeyDown: composeEventHandlers(props2.onKeyDown, (event)=>{\n                if (event.key === \"Tab\" && event.shiftKey) {\n                    context.onItemShiftTab();\n                    return;\n                }\n                if (event.target !== event.currentTarget) return;\n                const focusIntent = getFocusIntent(event, context.orientation, context.dir);\n                if (focusIntent !== void 0) {\n                    if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;\n                    event.preventDefault();\n                    const items = getItems().filter((item)=>item.focusable);\n                    let candidateNodes = items.map((item)=>item.ref.current);\n                    if (focusIntent === \"last\") candidateNodes.reverse();\n                    else if (focusIntent === \"prev\" || focusIntent === \"next\") {\n                        if (focusIntent === \"prev\") candidateNodes.reverse();\n                        const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                        candidateNodes = context.loop ? wrapArray$1(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);\n                    }\n                    setTimeout(()=>focusFirst$1(candidateNodes));\n                }\n            }),\n            children: typeof children === \"function\" ? children({\n                isCurrentTabStop,\n                hasTabStop: currentTabStopId != null\n            }) : children\n        })\n    });\n}, \"IXGZz2a2mC9N+zHXbim+ibEaisM=\", false, function() {\n    return [\n        useId$1,\n        useRovingFocusContext,\n        useCollection$1\n    ];\n})), \"IXGZz2a2mC9N+zHXbim+ibEaisM=\", false, function() {\n    return [\n        useId$1,\n        useRovingFocusContext,\n        useCollection$1\n    ];\n});\n_c88 = RovingFocusGroupItem;\nRovingFocusGroupItem.displayName = ITEM_NAME$2;\nvar MAP_KEY_TO_FOCUS_INTENT = {\n    ArrowLeft: \"prev\",\n    ArrowUp: \"prev\",\n    ArrowRight: \"next\",\n    ArrowDown: \"next\",\n    PageUp: \"first\",\n    Home: \"first\",\n    PageDown: \"last\",\n    End: \"last\"\n};\nfunction getDirectionAwareKey(key, dir) {\n    if (dir !== \"rtl\") return key;\n    return key === \"ArrowLeft\" ? \"ArrowRight\" : key === \"ArrowRight\" ? \"ArrowLeft\" : key;\n}\nfunction getFocusIntent(event, orientation, dir) {\n    const key = getDirectionAwareKey(event.key, dir);\n    if (orientation === \"vertical\" && [\n        \"ArrowLeft\",\n        \"ArrowRight\"\n    ].includes(key)) return void 0;\n    if (orientation === \"horizontal\" && [\n        \"ArrowUp\",\n        \"ArrowDown\"\n    ].includes(key)) return void 0;\n    return MAP_KEY_TO_FOCUS_INTENT[key];\n}\nfunction focusFirst$1(candidates) {\n    let preventScroll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n    for (const candidate of candidates){\n        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n        candidate.focus({\n            preventScroll\n        });\n        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n    }\n}\nfunction wrapArray$1(array, startIndex) {\n    return array.map((_, index2)=>array[(startIndex + index2) % array.length]);\n}\nvar Root = RovingFocusGroup;\nvar Item = RovingFocusGroupItem;\nvar SELECTION_KEYS = [\n    \"Enter\",\n    \" \"\n];\nvar FIRST_KEYS = [\n    \"ArrowDown\",\n    \"PageUp\",\n    \"Home\"\n];\nvar LAST_KEYS = [\n    \"ArrowUp\",\n    \"PageDown\",\n    \"End\"\n];\nvar FIRST_LAST_KEYS = [\n    ...FIRST_KEYS,\n    ...LAST_KEYS\n];\nvar SUB_OPEN_KEYS = {\n    ltr: [\n        ...SELECTION_KEYS,\n        \"ArrowRight\"\n    ],\n    rtl: [\n        ...SELECTION_KEYS,\n        \"ArrowLeft\"\n    ]\n};\nvar SUB_CLOSE_KEYS = {\n    ltr: [\n        \"ArrowLeft\"\n    ],\n    rtl: [\n        \"ArrowRight\"\n    ]\n};\nvar MENU_NAME = \"Menu\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(MENU_NAME);\nvar [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [\n    createCollectionScope,\n    createPopperScope,\n    createRovingFocusGroupScope\n]);\nvar usePopperScope$2 = createPopperScope();\nvar useRovingFocusGroupScope$1 = createRovingFocusGroupScope();\nvar [MenuProvider, useMenuContext] = createMenuContext(MENU_NAME);\nvar [MenuRootProvider, useMenuRootContext] = createMenuContext(MENU_NAME);\nvar Menu = (props2)=>{\n    _s57();\n    const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props2;\n    const popperScope = usePopperScope$2(__scopeMenu);\n    const [content, setContent] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const isUsingKeyboardRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const handleOpenChange = useCallbackRef$1(onOpenChange);\n    const direction = useDirection(dir);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"Menu.useEffect\": ()=>{\n            const handleKeyDown = {\n                \"Menu.useEffect.handleKeyDown\": ()=>{\n                    isUsingKeyboardRef.current = true;\n                    document.addEventListener(\"pointerdown\", handlePointer, {\n                        capture: true,\n                        once: true\n                    });\n                    document.addEventListener(\"pointermove\", handlePointer, {\n                        capture: true,\n                        once: true\n                    });\n                }\n            }[\"Menu.useEffect.handleKeyDown\"];\n            const handlePointer = {\n                \"Menu.useEffect.handlePointer\": ()=>isUsingKeyboardRef.current = false\n            }[\"Menu.useEffect.handlePointer\"];\n            document.addEventListener(\"keydown\", handleKeyDown, {\n                capture: true\n            });\n            return ({\n                \"Menu.useEffect\": ()=>{\n                    document.removeEventListener(\"keydown\", handleKeyDown, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"pointerdown\", handlePointer, {\n                        capture: true\n                    });\n                    document.removeEventListener(\"pointermove\", handlePointer, {\n                        capture: true\n                    });\n                }\n            })[\"Menu.useEffect\"];\n        }\n    }[\"Menu.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$4, {\n        ...popperScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuProvider, {\n            scope: __scopeMenu,\n            open,\n            onOpenChange: handleOpenChange,\n            content,\n            onContentChange: setContent,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuRootProvider, {\n                scope: __scopeMenu,\n                onClose: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                    \"Menu.useCallback\": ()=>handleOpenChange(false)\n                }[\"Menu.useCallback\"], [\n                    handleOpenChange\n                ]),\n                isUsingKeyboardRef,\n                dir: direction,\n                modal,\n                children\n            })\n        })\n    });\n};\n_s57(Menu, \"8QVT80iPF6TmqxD4BNe/pyqrOm0=\", false, function() {\n    return [\n        usePopperScope$2,\n        useCallbackRef$1,\n        useDirection\n    ];\n});\n_c89 = Menu;\nMenu.displayName = MENU_NAME;\nvar ANCHOR_NAME$1 = \"MenuAnchor\";\nvar MenuAnchor = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s58((props2, forwardedRef)=>{\n    _s58();\n    const { __scopeMenu, ...anchorProps } = props2;\n    const popperScope = usePopperScope$2(__scopeMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Anchor, {\n        ...popperScope,\n        ...anchorProps,\n        ref: forwardedRef\n    });\n}, \"Vy3AiDaNvmOIbcKaNJp23kq72Dw=\", false, function() {\n    return [\n        usePopperScope$2\n    ];\n}));\n_c90 = MenuAnchor;\nMenuAnchor.displayName = ANCHOR_NAME$1;\nvar PORTAL_NAME$3 = \"MenuPortal\";\nvar [PortalProvider$2, usePortalContext$2] = createMenuContext(PORTAL_NAME$3, {\n    forceMount: void 0\n});\nvar MenuPortal = (props2)=>{\n    _s59();\n    const { __scopeMenu, forceMount, children, container } = props2;\n    const context = useMenuContext(PORTAL_NAME$3, __scopeMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortalProvider$2, {\n        scope: __scopeMenu,\n        forceMount,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n            present: forceMount || context.open,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal$4, {\n                asChild: true,\n                container,\n                children\n            })\n        })\n    });\n};\n_s59(MenuPortal, \"Jc8vKAvq94jPZkBJYIZO/X0jxQk=\", false, function() {\n    return [\n        useMenuContext\n    ];\n});\n_c91 = MenuPortal;\nMenuPortal.displayName = PORTAL_NAME$3;\nvar CONTENT_NAME$4 = \"MenuContent\";\nvar [MenuContentProvider, useMenuContentContext] = createMenuContext(CONTENT_NAME$4);\nvar MenuContent = /*#__PURE__*/ _s60(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c92 = _s60((props2, forwardedRef)=>{\n    _s60();\n    const portalContext = usePortalContext$2(CONTENT_NAME$4, props2.__scopeMenu);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props2;\n    const context = useMenuContext(CONTENT_NAME$4, props2.__scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME$4, props2.__scopeMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection.Provider, {\n        scope: props2.__scopeMenu,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n            present: forceMount || context.open,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection.Slot, {\n                scope: props2.__scopeMenu,\n                children: rootContext.modal ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuRootContentModal, {\n                    ...contentProps,\n                    ref: forwardedRef\n                }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuRootContentNonModal, {\n                    ...contentProps,\n                    ref: forwardedRef\n                })\n            })\n        })\n    });\n}, \"fHghwj764+XFScE1sXolrNjlRCI=\", false, function() {\n    return [\n        usePortalContext$2,\n        useMenuContext,\n        useMenuRootContext\n    ];\n})), \"fHghwj764+XFScE1sXolrNjlRCI=\", false, function() {\n    return [\n        usePortalContext$2,\n        useMenuContext,\n        useMenuRootContext\n    ];\n});\n_c93 = MenuContent;\nvar MenuRootContentModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s61((props2, forwardedRef)=>{\n    _s61();\n    const context = useMenuContext(CONTENT_NAME$4, props2.__scopeMenu);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MenuRootContentModal.useEffect\": ()=>{\n            const content = ref.current;\n            if (content) return hideOthers(content);\n        }\n    }[\"MenuRootContentModal.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuContentImpl, {\n        ...props2,\n        ref: composedRefs,\n        trapFocus: context.open,\n        disableOutsidePointerEvents: context.open,\n        disableOutsideScroll: true,\n        onFocusOutside: composeEventHandlers(props2.onFocusOutside, (event)=>event.preventDefault(), {\n            checkForDefaultPrevented: false\n        }),\n        onDismiss: ()=>context.onOpenChange(false)\n    });\n}, \"JZl1V6I1pr8fHXBNF9+BmgCcv1M=\", false, function() {\n    return [\n        useMenuContext,\n        useComposedRefs\n    ];\n}));\n_c94 = MenuRootContentModal;\nvar MenuRootContentNonModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s62((props2, forwardedRef)=>{\n    _s62();\n    const context = useMenuContext(CONTENT_NAME$4, props2.__scopeMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuContentImpl, {\n        ...props2,\n        ref: forwardedRef,\n        trapFocus: false,\n        disableOutsidePointerEvents: false,\n        disableOutsideScroll: false,\n        onDismiss: ()=>context.onOpenChange(false)\n    });\n}, \"Jc8vKAvq94jPZkBJYIZO/X0jxQk=\", false, function() {\n    return [\n        useMenuContext\n    ];\n}));\n_c95 = MenuRootContentNonModal;\nvar Slot$1 = /* @__PURE__ */ createSlot(\"MenuContent.ScrollLock\");\nvar MenuContentImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s63((props2, forwardedRef)=>{\n    _s63();\n    const { __scopeMenu, loop = false, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEntryFocus, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, disableOutsideScroll, ...contentProps } = props2;\n    const context = useMenuContext(CONTENT_NAME$4, __scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME$4, __scopeMenu);\n    const popperScope = usePopperScope$2(__scopeMenu);\n    const rovingFocusGroupScope = useRovingFocusGroupScope$1(__scopeMenu);\n    const getItems = useCollection(__scopeMenu);\n    const [currentItemId, setCurrentItemId] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const contentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef, context.onContentChange);\n    const timerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    const searchRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(\"\");\n    const pointerGraceTimerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    const pointerGraceIntentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const pointerDirRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(\"right\");\n    const lastPointerXRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    const ScrollLockWrapper = disableOutsideScroll ? ReactRemoveScroll : react__WEBPACK_IMPORTED_MODULE_1__.Fragment;\n    const scrollLockWrapperProps = disableOutsideScroll ? {\n        as: Slot$1,\n        allowPinchZoom: true\n    } : void 0;\n    const handleTypeaheadSearch = (key)=>{\n        var _a, _b;\n        const search = searchRef.current + key;\n        const items = getItems().filter((item)=>!item.disabled);\n        const currentItem = document.activeElement;\n        const currentMatch = (_a = items.find((item)=>item.ref.current === currentItem)) == null ? void 0 : _a.textValue;\n        const values = items.map((item)=>item.textValue);\n        const nextMatch = getNextMatch(values, search, currentMatch);\n        const newItem = (_b = items.find((item)=>item.textValue === nextMatch)) == null ? void 0 : _b.ref.current;\n        (function updateSearch(value1) {\n            searchRef.current = value1;\n            window.clearTimeout(timerRef.current);\n            if (value1 !== \"\") timerRef.current = window.setTimeout(()=>updateSearch(\"\"), 1e3);\n        })(search);\n        if (newItem) {\n            setTimeout(()=>newItem.focus());\n        }\n    };\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MenuContentImpl.useEffect\": ()=>{\n            return ({\n                \"MenuContentImpl.useEffect\": ()=>window.clearTimeout(timerRef.current)\n            })[\"MenuContentImpl.useEffect\"];\n        }\n    }[\"MenuContentImpl.useEffect\"], []);\n    useFocusGuards();\n    const isPointerMovingToSubmenu = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"MenuContentImpl.useCallback[isPointerMovingToSubmenu]\": (event)=>{\n            var _a, _b;\n            const isMovingTowards = pointerDirRef.current === ((_a = pointerGraceIntentRef.current) == null ? void 0 : _a.side);\n            return isMovingTowards && isPointerInGraceArea(event, (_b = pointerGraceIntentRef.current) == null ? void 0 : _b.area);\n        }\n    }[\"MenuContentImpl.useCallback[isPointerMovingToSubmenu]\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuContentProvider, {\n        scope: __scopeMenu,\n        searchRef,\n        onItemEnter: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"MenuContentImpl.useCallback\": (event)=>{\n                if (isPointerMovingToSubmenu(event)) event.preventDefault();\n            }\n        }[\"MenuContentImpl.useCallback\"], [\n            isPointerMovingToSubmenu\n        ]),\n        onItemLeave: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"MenuContentImpl.useCallback\": (event)=>{\n                var _a;\n                if (isPointerMovingToSubmenu(event)) return;\n                (_a = contentRef.current) == null ? void 0 : _a.focus();\n                setCurrentItemId(null);\n            }\n        }[\"MenuContentImpl.useCallback\"], [\n            isPointerMovingToSubmenu\n        ]),\n        onTriggerLeave: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"MenuContentImpl.useCallback\": (event)=>{\n                if (isPointerMovingToSubmenu(event)) event.preventDefault();\n            }\n        }[\"MenuContentImpl.useCallback\"], [\n            isPointerMovingToSubmenu\n        ]),\n        pointerGraceTimerRef,\n        onPointerGraceIntentChange: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"MenuContentImpl.useCallback\": (intent)=>{\n                pointerGraceIntentRef.current = intent;\n            }\n        }[\"MenuContentImpl.useCallback\"], []),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ScrollLockWrapper, {\n            ...scrollLockWrapperProps,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FocusScope, {\n                asChild: true,\n                trapped: trapFocus,\n                onMountAutoFocus: composeEventHandlers(onOpenAutoFocus, (event)=>{\n                    var _a;\n                    event.preventDefault();\n                    (_a = contentRef.current) == null ? void 0 : _a.focus({\n                        preventScroll: true\n                    });\n                }),\n                onUnmountAutoFocus: onCloseAutoFocus,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DismissableLayer, {\n                    asChild: true,\n                    disableOutsidePointerEvents,\n                    onEscapeKeyDown,\n                    onPointerDownOutside,\n                    onFocusOutside,\n                    onInteractOutside,\n                    onDismiss,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root, {\n                        asChild: true,\n                        ...rovingFocusGroupScope,\n                        dir: rootContext.dir,\n                        orientation: \"vertical\",\n                        loop,\n                        currentTabStopId: currentItemId,\n                        onCurrentTabStopIdChange: setCurrentItemId,\n                        onEntryFocus: composeEventHandlers(onEntryFocus, (event)=>{\n                            if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();\n                        }),\n                        preventScrollOnEntryFocus: true,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Content$1, {\n                            role: \"menu\",\n                            \"aria-orientation\": \"vertical\",\n                            \"data-state\": getOpenState(context.open),\n                            \"data-radix-menu-content\": \"\",\n                            dir: rootContext.dir,\n                            ...popperScope,\n                            ...contentProps,\n                            ref: composedRefs,\n                            style: {\n                                outline: \"none\",\n                                ...contentProps.style\n                            },\n                            onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event)=>{\n                                const target = event.target;\n                                const isKeyDownInside = target.closest(\"[data-radix-menu-content]\") === event.currentTarget;\n                                const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n                                const isCharacterKey = event.key.length === 1;\n                                if (isKeyDownInside) {\n                                    if (event.key === \"Tab\") event.preventDefault();\n                                    if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);\n                                }\n                                const content = contentRef.current;\n                                if (event.target !== content) return;\n                                if (!FIRST_LAST_KEYS.includes(event.key)) return;\n                                event.preventDefault();\n                                const items = getItems().filter((item)=>!item.disabled);\n                                const candidateNodes = items.map((item)=>item.ref.current);\n                                if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();\n                                focusFirst(candidateNodes);\n                            }),\n                            onBlur: composeEventHandlers(props2.onBlur, (event)=>{\n                                if (!event.currentTarget.contains(event.target)) {\n                                    window.clearTimeout(timerRef.current);\n                                    searchRef.current = \"\";\n                                }\n                            }),\n                            onPointerMove: composeEventHandlers(props2.onPointerMove, whenMouse((event)=>{\n                                const target = event.target;\n                                const pointerXHasChanged = lastPointerXRef.current !== event.clientX;\n                                if (event.currentTarget.contains(target) && pointerXHasChanged) {\n                                    const newDir = event.clientX > lastPointerXRef.current ? \"right\" : \"left\";\n                                    pointerDirRef.current = newDir;\n                                    lastPointerXRef.current = event.clientX;\n                                }\n                            }))\n                        })\n                    })\n                })\n            })\n        })\n    });\n}, \"V//1+cCx/JeeHQj8tBuPft5XwAA=\", false, function() {\n    return [\n        useMenuContext,\n        useMenuRootContext,\n        usePopperScope$2,\n        useRovingFocusGroupScope$1,\n        useCollection,\n        useComposedRefs,\n        useFocusGuards\n    ];\n}));\n_c96 = MenuContentImpl;\nMenuContent.displayName = CONTENT_NAME$4;\nvar GROUP_NAME$1 = \"MenuGroup\";\nvar MenuGroup = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props2, forwardedRef)=>{\n    const { __scopeMenu, ...groupProps } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        role: \"group\",\n        ...groupProps,\n        ref: forwardedRef\n    });\n});\n_c97 = MenuGroup;\nMenuGroup.displayName = GROUP_NAME$1;\nvar LABEL_NAME$1 = \"MenuLabel\";\nvar MenuLabel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c98 = (props2, forwardedRef)=>{\n    const { __scopeMenu, ...labelProps } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        ...labelProps,\n        ref: forwardedRef\n    });\n});\n_c99 = MenuLabel;\nMenuLabel.displayName = LABEL_NAME$1;\nvar ITEM_NAME$1 = \"MenuItem\";\nvar ITEM_SELECT = \"menu.itemSelect\";\nvar MenuItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s64((props2, forwardedRef)=>{\n    _s64();\n    const { disabled = false, onSelect, ...itemProps } = props2;\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const rootContext = useMenuRootContext(ITEM_NAME$1, props2.__scopeMenu);\n    const contentContext = useMenuContentContext(ITEM_NAME$1, props2.__scopeMenu);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const isPointerDownRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const handleSelect = ()=>{\n        const menuItem = ref.current;\n        if (!disabled && menuItem) {\n            const itemSelectEvent = new CustomEvent(ITEM_SELECT, {\n                bubbles: true,\n                cancelable: true\n            });\n            menuItem.addEventListener(ITEM_SELECT, (event)=>onSelect == null ? void 0 : onSelect(event), {\n                once: true\n            });\n            dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);\n            if (itemSelectEvent.defaultPrevented) {\n                isPointerDownRef.current = false;\n            } else {\n                rootContext.onClose();\n            }\n        }\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuItemImpl, {\n        ...itemProps,\n        ref: composedRefs,\n        disabled,\n        onClick: composeEventHandlers(props2.onClick, handleSelect),\n        onPointerDown: (event)=>{\n            var _a;\n            (_a = props2.onPointerDown) == null ? void 0 : _a.call(props2, event);\n            isPointerDownRef.current = true;\n        },\n        onPointerUp: composeEventHandlers(props2.onPointerUp, (event)=>{\n            var _a;\n            if (!isPointerDownRef.current) (_a = event.currentTarget) == null ? void 0 : _a.click();\n        }),\n        onKeyDown: composeEventHandlers(props2.onKeyDown, (event)=>{\n            const isTypingAhead = contentContext.searchRef.current !== \"\";\n            if (disabled || isTypingAhead && event.key === \" \") return;\n            if (SELECTION_KEYS.includes(event.key)) {\n                event.currentTarget.click();\n                event.preventDefault();\n            }\n        })\n    });\n}, \"n4NCMoANrBHYaagbUs9HO/KGL+U=\", false, function() {\n    return [\n        useMenuRootContext,\n        useMenuContentContext,\n        useComposedRefs\n    ];\n}));\n_c100 = MenuItem;\nMenuItem.displayName = ITEM_NAME$1;\nvar MenuItemImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s65((props2, forwardedRef)=>{\n    _s65();\n    const { __scopeMenu, disabled = false, textValue, ...itemProps } = props2;\n    const contentContext = useMenuContentContext(ITEM_NAME$1, __scopeMenu);\n    const rovingFocusGroupScope = useRovingFocusGroupScope$1(__scopeMenu);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const [isFocused, setIsFocused] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const [textContent, setTextContent] = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"\");\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MenuItemImpl.useEffect\": ()=>{\n            const menuItem = ref.current;\n            if (menuItem) {\n                var _menuItem_textContent;\n                setTextContent(((_menuItem_textContent = menuItem.textContent) !== null && _menuItem_textContent !== void 0 ? _menuItem_textContent : \"\").trim());\n            }\n        }\n    }[\"MenuItemImpl.useEffect\"], [\n        itemProps.children\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection.ItemSlot, {\n        scope: __scopeMenu,\n        disabled,\n        textValue: textValue !== null && textValue !== void 0 ? textValue : textContent,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Item, {\n            asChild: true,\n            ...rovingFocusGroupScope,\n            focusable: !disabled,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n                role: \"menuitem\",\n                \"data-highlighted\": isFocused ? \"\" : void 0,\n                \"aria-disabled\": disabled || void 0,\n                \"data-disabled\": disabled ? \"\" : void 0,\n                ...itemProps,\n                ref: composedRefs,\n                onPointerMove: composeEventHandlers(props2.onPointerMove, whenMouse((event)=>{\n                    if (disabled) {\n                        contentContext.onItemLeave(event);\n                    } else {\n                        contentContext.onItemEnter(event);\n                        if (!event.defaultPrevented) {\n                            const item = event.currentTarget;\n                            item.focus({\n                                preventScroll: true\n                            });\n                        }\n                    }\n                })),\n                onPointerLeave: composeEventHandlers(props2.onPointerLeave, whenMouse((event)=>contentContext.onItemLeave(event))),\n                onFocus: composeEventHandlers(props2.onFocus, ()=>setIsFocused(true)),\n                onBlur: composeEventHandlers(props2.onBlur, ()=>setIsFocused(false))\n            })\n        })\n    });\n}, \"7xsx4CcLeUxRSOqA4hIVakWk3ks=\", false, function() {\n    return [\n        useMenuContentContext,\n        useRovingFocusGroupScope$1,\n        useComposedRefs\n    ];\n}));\n_c101 = MenuItemImpl;\nvar CHECKBOX_ITEM_NAME$1 = \"MenuCheckboxItem\";\nvar MenuCheckboxItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c102 = (props2, forwardedRef)=>{\n    const { checked = false, onCheckedChange, ...checkboxItemProps } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ItemIndicatorProvider, {\n        scope: props2.__scopeMenu,\n        checked,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuItem, {\n            role: \"menuitemcheckbox\",\n            \"aria-checked\": isIndeterminate(checked) ? \"mixed\" : checked,\n            ...checkboxItemProps,\n            ref: forwardedRef,\n            \"data-state\": getCheckedState(checked),\n            onSelect: composeEventHandlers(checkboxItemProps.onSelect, ()=>onCheckedChange == null ? void 0 : onCheckedChange(isIndeterminate(checked) ? true : !checked), {\n                checkForDefaultPrevented: false\n            })\n        })\n    });\n});\n_c103 = MenuCheckboxItem;\nMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME$1;\nvar RADIO_GROUP_NAME$1 = \"MenuRadioGroup\";\nvar [RadioGroupProvider, useRadioGroupContext] = createMenuContext(RADIO_GROUP_NAME$1, {\n    value: void 0,\n    onValueChange: ()=>{}\n});\nvar MenuRadioGroup = /*#__PURE__*/ _s66(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c104 = _s66((props2, forwardedRef)=>{\n    _s66();\n    const { value: value1, onValueChange, ...groupProps } = props2;\n    const handleValueChange = useCallbackRef$1(onValueChange);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RadioGroupProvider, {\n        scope: props2.__scopeMenu,\n        value: value1,\n        onValueChange: handleValueChange,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuGroup, {\n            ...groupProps,\n            ref: forwardedRef\n        })\n    });\n}, \"4oPg8IVx1XampzjpJYCFYUsUaFc=\", false, function() {\n    return [\n        useCallbackRef$1\n    ];\n})), \"4oPg8IVx1XampzjpJYCFYUsUaFc=\", false, function() {\n    return [\n        useCallbackRef$1\n    ];\n});\n_c105 = MenuRadioGroup;\nMenuRadioGroup.displayName = RADIO_GROUP_NAME$1;\nvar RADIO_ITEM_NAME$1 = \"MenuRadioItem\";\nvar MenuRadioItem = /*#__PURE__*/ _s67(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c106 = _s67((props2, forwardedRef)=>{\n    _s67();\n    const { value: value1, ...radioItemProps } = props2;\n    const context = useRadioGroupContext(RADIO_ITEM_NAME$1, props2.__scopeMenu);\n    const checked = value1 === context.value;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ItemIndicatorProvider, {\n        scope: props2.__scopeMenu,\n        checked,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuItem, {\n            role: \"menuitemradio\",\n            \"aria-checked\": checked,\n            ...radioItemProps,\n            ref: forwardedRef,\n            \"data-state\": getCheckedState(checked),\n            onSelect: composeEventHandlers(radioItemProps.onSelect, ()=>{\n                var _a;\n                return (_a = context.onValueChange) == null ? void 0 : _a.call(context, value1);\n            }, {\n                checkForDefaultPrevented: false\n            })\n        })\n    });\n}, \"pu7nAGGQbggF4/7/93WWC5/VrL0=\", false, function() {\n    return [\n        useRadioGroupContext\n    ];\n})), \"pu7nAGGQbggF4/7/93WWC5/VrL0=\", false, function() {\n    return [\n        useRadioGroupContext\n    ];\n});\n_c107 = MenuRadioItem;\nMenuRadioItem.displayName = RADIO_ITEM_NAME$1;\nvar ITEM_INDICATOR_NAME = \"MenuItemIndicator\";\nvar [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext(ITEM_INDICATOR_NAME, {\n    checked: false\n});\nvar MenuItemIndicator = /*#__PURE__*/ _s68(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c108 = _s68((props2, forwardedRef)=>{\n    _s68();\n    const { __scopeMenu, forceMount, ...itemIndicatorProps } = props2;\n    const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n        present: forceMount || isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.span, {\n            ...itemIndicatorProps,\n            ref: forwardedRef,\n            \"data-state\": getCheckedState(indicatorContext.checked)\n        })\n    });\n}, \"W2/Y2Td7XZBLzAFnNcANg/AGfF8=\", false, function() {\n    return [\n        useItemIndicatorContext\n    ];\n})), \"W2/Y2Td7XZBLzAFnNcANg/AGfF8=\", false, function() {\n    return [\n        useItemIndicatorContext\n    ];\n});\n_c109 = MenuItemIndicator;\nMenuItemIndicator.displayName = ITEM_INDICATOR_NAME;\nvar SEPARATOR_NAME$1 = \"MenuSeparator\";\nvar MenuSeparator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c110 = (props2, forwardedRef)=>{\n    const { __scopeMenu, ...separatorProps } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n        role: \"separator\",\n        \"aria-orientation\": \"horizontal\",\n        ...separatorProps,\n        ref: forwardedRef\n    });\n});\n_c111 = MenuSeparator;\nMenuSeparator.displayName = SEPARATOR_NAME$1;\nvar ARROW_NAME$3 = \"MenuArrow\";\nvar MenuArrow = /*#__PURE__*/ _s69(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c112 = _s69((props2, forwardedRef)=>{\n    _s69();\n    const { __scopeMenu, ...arrowProps } = props2;\n    const popperScope = usePopperScope$2(__scopeMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Arrow, {\n        ...popperScope,\n        ...arrowProps,\n        ref: forwardedRef\n    });\n}, \"Vy3AiDaNvmOIbcKaNJp23kq72Dw=\", false, function() {\n    return [\n        usePopperScope$2\n    ];\n})), \"Vy3AiDaNvmOIbcKaNJp23kq72Dw=\", false, function() {\n    return [\n        usePopperScope$2\n    ];\n});\n_c113 = MenuArrow;\nMenuArrow.displayName = ARROW_NAME$3;\nvar SUB_NAME = \"MenuSub\";\nvar [MenuSubProvider, useMenuSubContext] = createMenuContext(SUB_NAME);\nvar MenuSub = (props2)=>{\n    _s70();\n    const { __scopeMenu, children, open = false, onOpenChange } = props2;\n    const parentMenuContext = useMenuContext(SUB_NAME, __scopeMenu);\n    const popperScope = usePopperScope$2(__scopeMenu);\n    const [trigger, setTrigger] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [content, setContent] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const handleOpenChange = useCallbackRef$1(onOpenChange);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MenuSub.useEffect\": ()=>{\n            if (parentMenuContext.open === false) handleOpenChange(false);\n            return ({\n                \"MenuSub.useEffect\": ()=>handleOpenChange(false)\n            })[\"MenuSub.useEffect\"];\n        }\n    }[\"MenuSub.useEffect\"], [\n        parentMenuContext.open,\n        handleOpenChange\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$4, {\n        ...popperScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuProvider, {\n            scope: __scopeMenu,\n            open,\n            onOpenChange: handleOpenChange,\n            content,\n            onContentChange: setContent,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuSubProvider, {\n                scope: __scopeMenu,\n                contentId: useId$1(),\n                triggerId: useId$1(),\n                trigger,\n                onTriggerChange: setTrigger,\n                children\n            })\n        })\n    });\n};\n_s70(MenuSub, \"mmSSMVoVkM0M33Hp4+pxahMFUcI=\", false, function() {\n    return [\n        useMenuContext,\n        usePopperScope$2,\n        useCallbackRef$1,\n        useId$1,\n        useId$1\n    ];\n});\n_c114 = MenuSub;\nMenuSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME$1 = \"MenuSubTrigger\";\nvar MenuSubTrigger = /*#__PURE__*/ _s71(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c115 = _s71((props2, forwardedRef)=>{\n    _s71();\n    const context = useMenuContext(SUB_TRIGGER_NAME$1, props2.__scopeMenu);\n    const rootContext = useMenuRootContext(SUB_TRIGGER_NAME$1, props2.__scopeMenu);\n    const subContext = useMenuSubContext(SUB_TRIGGER_NAME$1, props2.__scopeMenu);\n    const contentContext = useMenuContentContext(SUB_TRIGGER_NAME$1, props2.__scopeMenu);\n    const openTimerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;\n    const scope = {\n        __scopeMenu: props2.__scopeMenu\n    };\n    const clearOpenTimer = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"MenuSubTrigger.useCallback[clearOpenTimer]\": ()=>{\n            if (openTimerRef.current) window.clearTimeout(openTimerRef.current);\n            openTimerRef.current = null;\n        }\n    }[\"MenuSubTrigger.useCallback[clearOpenTimer]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MenuSubTrigger.useEffect\": ()=>clearOpenTimer\n    }[\"MenuSubTrigger.useEffect\"], [\n        clearOpenTimer\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MenuSubTrigger.useEffect\": ()=>{\n            const pointerGraceTimer = pointerGraceTimerRef.current;\n            return ({\n                \"MenuSubTrigger.useEffect\": ()=>{\n                    window.clearTimeout(pointerGraceTimer);\n                    onPointerGraceIntentChange(null);\n                }\n            })[\"MenuSubTrigger.useEffect\"];\n        }\n    }[\"MenuSubTrigger.useEffect\"], [\n        pointerGraceTimerRef,\n        onPointerGraceIntentChange\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuAnchor, {\n        asChild: true,\n        ...scope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuItemImpl, {\n            id: subContext.triggerId,\n            \"aria-haspopup\": \"menu\",\n            \"aria-expanded\": context.open,\n            \"aria-controls\": subContext.contentId,\n            \"data-state\": getOpenState(context.open),\n            ...props2,\n            ref: composeRefs(forwardedRef, subContext.onTriggerChange),\n            onClick: (event)=>{\n                var _a;\n                (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n                if (props2.disabled || event.defaultPrevented) return;\n                event.currentTarget.focus();\n                if (!context.open) context.onOpenChange(true);\n            },\n            onPointerMove: composeEventHandlers(props2.onPointerMove, whenMouse((event)=>{\n                contentContext.onItemEnter(event);\n                if (event.defaultPrevented) return;\n                if (!props2.disabled && !context.open && !openTimerRef.current) {\n                    contentContext.onPointerGraceIntentChange(null);\n                    openTimerRef.current = window.setTimeout(()=>{\n                        context.onOpenChange(true);\n                        clearOpenTimer();\n                    }, 100);\n                }\n            })),\n            onPointerLeave: composeEventHandlers(props2.onPointerLeave, whenMouse((event)=>{\n                var _a, _b;\n                clearOpenTimer();\n                const contentRect = (_a = context.content) == null ? void 0 : _a.getBoundingClientRect();\n                if (contentRect) {\n                    const side = (_b = context.content) == null ? void 0 : _b.dataset.side;\n                    const rightSide = side === \"right\";\n                    const bleed = rightSide ? -5 : 5;\n                    const contentNearEdge = contentRect[rightSide ? \"left\" : \"right\"];\n                    const contentFarEdge = contentRect[rightSide ? \"right\" : \"left\"];\n                    contentContext.onPointerGraceIntentChange({\n                        area: [\n                            // Apply a bleed on clientX to ensure that our exit point is\n                            // consistently within polygon bounds\n                            {\n                                x: event.clientX + bleed,\n                                y: event.clientY\n                            },\n                            {\n                                x: contentNearEdge,\n                                y: contentRect.top\n                            },\n                            {\n                                x: contentFarEdge,\n                                y: contentRect.top\n                            },\n                            {\n                                x: contentFarEdge,\n                                y: contentRect.bottom\n                            },\n                            {\n                                x: contentNearEdge,\n                                y: contentRect.bottom\n                            }\n                        ],\n                        side\n                    });\n                    window.clearTimeout(pointerGraceTimerRef.current);\n                    pointerGraceTimerRef.current = window.setTimeout(()=>contentContext.onPointerGraceIntentChange(null), 300);\n                } else {\n                    contentContext.onTriggerLeave(event);\n                    if (event.defaultPrevented) return;\n                    contentContext.onPointerGraceIntentChange(null);\n                }\n            })),\n            onKeyDown: composeEventHandlers(props2.onKeyDown, (event)=>{\n                var _a;\n                const isTypingAhead = contentContext.searchRef.current !== \"\";\n                if (props2.disabled || isTypingAhead && event.key === \" \") return;\n                if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {\n                    context.onOpenChange(true);\n                    (_a = context.content) == null ? void 0 : _a.focus();\n                    event.preventDefault();\n                }\n            })\n        })\n    });\n}, \"/ehIxLkqpn6AwUD2r8VUL6WM7sc=\", false, function() {\n    return [\n        useMenuContext,\n        useMenuRootContext,\n        useMenuSubContext,\n        useMenuContentContext\n    ];\n})), \"/ehIxLkqpn6AwUD2r8VUL6WM7sc=\", false, function() {\n    return [\n        useMenuContext,\n        useMenuRootContext,\n        useMenuSubContext,\n        useMenuContentContext\n    ];\n});\n_c116 = MenuSubTrigger;\nMenuSubTrigger.displayName = SUB_TRIGGER_NAME$1;\nvar SUB_CONTENT_NAME$1 = \"MenuSubContent\";\nvar MenuSubContent = /*#__PURE__*/ _s72(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c117 = _s72((props2, forwardedRef)=>{\n    _s72();\n    const portalContext = usePortalContext$2(CONTENT_NAME$4, props2.__scopeMenu);\n    const { forceMount = portalContext.forceMount, ...subContentProps } = props2;\n    const context = useMenuContext(CONTENT_NAME$4, props2.__scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME$4, props2.__scopeMenu);\n    const subContext = useMenuSubContext(SUB_CONTENT_NAME$1, props2.__scopeMenu);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection.Provider, {\n        scope: props2.__scopeMenu,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n            present: forceMount || context.open,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Collection.Slot, {\n                scope: props2.__scopeMenu,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MenuContentImpl, {\n                    id: subContext.contentId,\n                    \"aria-labelledby\": subContext.triggerId,\n                    ...subContentProps,\n                    ref: composedRefs,\n                    align: \"start\",\n                    side: rootContext.dir === \"rtl\" ? \"left\" : \"right\",\n                    disableOutsidePointerEvents: false,\n                    disableOutsideScroll: false,\n                    trapFocus: false,\n                    onOpenAutoFocus: (event)=>{\n                        var _a;\n                        if (rootContext.isUsingKeyboardRef.current) (_a = ref.current) == null ? void 0 : _a.focus();\n                        event.preventDefault();\n                    },\n                    onCloseAutoFocus: (event)=>event.preventDefault(),\n                    onFocusOutside: composeEventHandlers(props2.onFocusOutside, (event)=>{\n                        if (event.target !== subContext.trigger) context.onOpenChange(false);\n                    }),\n                    onEscapeKeyDown: composeEventHandlers(props2.onEscapeKeyDown, (event)=>{\n                        rootContext.onClose();\n                        event.preventDefault();\n                    }),\n                    onKeyDown: composeEventHandlers(props2.onKeyDown, (event)=>{\n                        var _a;\n                        const isKeyDownInside = event.currentTarget.contains(event.target);\n                        const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);\n                        if (isKeyDownInside && isCloseKey) {\n                            context.onOpenChange(false);\n                            (_a = subContext.trigger) == null ? void 0 : _a.focus();\n                            event.preventDefault();\n                        }\n                    })\n                })\n            })\n        })\n    });\n}, \"RnbMCG59r+CFhyqGMcTlJEhO7so=\", false, function() {\n    return [\n        usePortalContext$2,\n        useMenuContext,\n        useMenuRootContext,\n        useMenuSubContext,\n        useComposedRefs\n    ];\n})), \"RnbMCG59r+CFhyqGMcTlJEhO7so=\", false, function() {\n    return [\n        usePortalContext$2,\n        useMenuContext,\n        useMenuRootContext,\n        useMenuSubContext,\n        useComposedRefs\n    ];\n});\n_c118 = MenuSubContent;\nMenuSubContent.displayName = SUB_CONTENT_NAME$1;\nfunction getOpenState(open) {\n    return open ? \"open\" : \"closed\";\n}\nfunction isIndeterminate(checked) {\n    return checked === \"indeterminate\";\n}\nfunction getCheckedState(checked) {\n    return isIndeterminate(checked) ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\";\n}\nfunction focusFirst(candidates) {\n    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n    for (const candidate of candidates){\n        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n        candidate.focus();\n        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n    }\n}\nfunction wrapArray(array, startIndex) {\n    return array.map((_, index2)=>array[(startIndex + index2) % array.length]);\n}\nfunction getNextMatch(values, search, currentMatch) {\n    const isRepeated = search.length > 1 && Array.from(search).every((char)=>char === search[0]);\n    const normalizedSearch = isRepeated ? search[0] : search;\n    const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;\n    let wrappedValues = wrapArray(values, Math.max(currentMatchIndex, 0));\n    const excludeCurrentMatch = normalizedSearch.length === 1;\n    if (excludeCurrentMatch) wrappedValues = wrappedValues.filter((v)=>v !== currentMatch);\n    const nextMatch = wrappedValues.find((value1)=>value1.toLowerCase().startsWith(normalizedSearch.toLowerCase()));\n    return nextMatch !== currentMatch ? nextMatch : void 0;\n}\nfunction isPointInPolygon$1(point, polygon) {\n    const { x, y } = point;\n    let inside = false;\n    for(let i = 0, j = polygon.length - 1; i < polygon.length; j = i++){\n        const ii = polygon[i];\n        const jj = polygon[j];\n        const xi = ii.x;\n        const yi = ii.y;\n        const xj = jj.x;\n        const yj = jj.y;\n        const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n        if (intersect) inside = !inside;\n    }\n    return inside;\n}\nfunction isPointerInGraceArea(event, area) {\n    if (!area) return false;\n    const cursorPos = {\n        x: event.clientX,\n        y: event.clientY\n    };\n    return isPointInPolygon$1(cursorPos, area);\n}\nfunction whenMouse(handler) {\n    return (event)=>event.pointerType === \"mouse\" ? handler(event) : void 0;\n}\nvar Root3$1 = Menu;\nvar Anchor2$1 = MenuAnchor;\nvar Portal$2 = MenuPortal;\nvar Content2$3 = MenuContent;\nvar Group = MenuGroup;\nvar Label = MenuLabel;\nvar Item2$1 = MenuItem;\nvar CheckboxItem = MenuCheckboxItem;\nvar RadioGroup = MenuRadioGroup;\nvar RadioItem = MenuRadioItem;\nvar ItemIndicator = MenuItemIndicator;\nvar Separator = MenuSeparator;\nvar Arrow2$1 = MenuArrow;\nvar Sub = MenuSub;\nvar SubTrigger = MenuSubTrigger;\nvar SubContent = MenuSubContent;\nvar DROPDOWN_MENU_NAME = \"DropdownMenu\";\nvar [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(DROPDOWN_MENU_NAME, [\n    createMenuScope\n]);\nvar useMenuScope = createMenuScope();\nvar [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext(DROPDOWN_MENU_NAME);\nvar DropdownMenu$1 = (props2)=>{\n    _s73();\n    const { __scopeDropdownMenu, children, dir, open: openProp, defaultOpen, onOpenChange, modal = true } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const triggerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const [open, setOpen] = useControllableState({\n        prop: openProp,\n        defaultProp: defaultOpen !== null && defaultOpen !== void 0 ? defaultOpen : false,\n        onChange: onOpenChange,\n        caller: DROPDOWN_MENU_NAME\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuProvider, {\n        scope: __scopeDropdownMenu,\n        triggerId: useId$1(),\n        triggerRef,\n        contentId: useId$1(),\n        open,\n        onOpenChange: setOpen,\n        onOpenToggle: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"DropdownMenu$1.useCallback\": ()=>setOpen({\n                    \"DropdownMenu$1.useCallback\": (prevOpen)=>!prevOpen\n                }[\"DropdownMenu$1.useCallback\"])\n        }[\"DropdownMenu$1.useCallback\"], [\n            setOpen\n        ]),\n        modal,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root3$1, {\n            ...menuScope,\n            open,\n            onOpenChange: setOpen,\n            dir,\n            modal,\n            children\n        })\n    });\n};\n_s73(DropdownMenu$1, \"rL/0wxs8q7ZZDJNAG/ZlpICsPBE=\", false, function() {\n    return [\n        useMenuScope,\n        useControllableState,\n        useId$1,\n        useId$1\n    ];\n});\n_c119 = DropdownMenu$1;\nDropdownMenu$1.displayName = DROPDOWN_MENU_NAME;\nvar TRIGGER_NAME$3 = \"DropdownMenuTrigger\";\nvar DropdownMenuTrigger$1 = /*#__PURE__*/ _s74(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c120 = _s74((props2, forwardedRef)=>{\n    _s74();\n    const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props2;\n    const context = useDropdownMenuContext(TRIGGER_NAME$3, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Anchor2$1, {\n        asChild: true,\n        ...menuScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.button, {\n            type: \"button\",\n            id: context.triggerId,\n            \"aria-haspopup\": \"menu\",\n            \"aria-expanded\": context.open,\n            \"aria-controls\": context.open ? context.contentId : void 0,\n            \"data-state\": context.open ? \"open\" : \"closed\",\n            \"data-disabled\": disabled ? \"\" : void 0,\n            disabled,\n            ...triggerProps,\n            ref: composeRefs(forwardedRef, context.triggerRef),\n            onPointerDown: composeEventHandlers(props2.onPointerDown, (event)=>{\n                if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                    context.onOpenToggle();\n                    if (!context.open) event.preventDefault();\n                }\n            }),\n            onKeyDown: composeEventHandlers(props2.onKeyDown, (event)=>{\n                if (disabled) return;\n                if ([\n                    \"Enter\",\n                    \" \"\n                ].includes(event.key)) context.onOpenToggle();\n                if (event.key === \"ArrowDown\") context.onOpenChange(true);\n                if ([\n                    \"Enter\",\n                    \" \",\n                    \"ArrowDown\"\n                ].includes(event.key)) event.preventDefault();\n            })\n        })\n    });\n}, \"VF6M01Vk8Lj/m3Pf4rnYmk8awgw=\", false, function() {\n    return [\n        useDropdownMenuContext,\n        useMenuScope\n    ];\n})), \"VF6M01Vk8Lj/m3Pf4rnYmk8awgw=\", false, function() {\n    return [\n        useDropdownMenuContext,\n        useMenuScope\n    ];\n});\n_c121 = DropdownMenuTrigger$1;\nDropdownMenuTrigger$1.displayName = TRIGGER_NAME$3;\nvar PORTAL_NAME$2 = \"DropdownMenuPortal\";\nvar DropdownMenuPortal$1 = (props2)=>{\n    _s75();\n    const { __scopeDropdownMenu, ...portalProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal$2, {\n        ...menuScope,\n        ...portalProps\n    });\n};\n_s75(DropdownMenuPortal$1, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c122 = DropdownMenuPortal$1;\nDropdownMenuPortal$1.displayName = PORTAL_NAME$2;\nvar CONTENT_NAME$3 = \"DropdownMenuContent\";\nvar DropdownMenuContent$1 = /*#__PURE__*/ _s76(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c123 = _s76((props2, forwardedRef)=>{\n    _s76();\n    const { __scopeDropdownMenu, ...contentProps } = props2;\n    const context = useDropdownMenuContext(CONTENT_NAME$3, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const hasInteractedOutsideRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Content2$3, {\n        id: context.contentId,\n        \"aria-labelledby\": context.triggerId,\n        ...menuScope,\n        ...contentProps,\n        ref: forwardedRef,\n        onCloseAutoFocus: composeEventHandlers(props2.onCloseAutoFocus, (event)=>{\n            var _a;\n            if (!hasInteractedOutsideRef.current) (_a = context.triggerRef.current) == null ? void 0 : _a.focus();\n            hasInteractedOutsideRef.current = false;\n            event.preventDefault();\n        }),\n        onInteractOutside: composeEventHandlers(props2.onInteractOutside, (event)=>{\n            const originalEvent = event.detail.originalEvent;\n            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n            if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;\n        }),\n        style: {\n            ...props2.style,\n            // re-namespace exposed content custom properties\n            ...{\n                \"--radix-dropdown-menu-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n                \"--radix-dropdown-menu-content-available-width\": \"var(--radix-popper-available-width)\",\n                \"--radix-dropdown-menu-content-available-height\": \"var(--radix-popper-available-height)\",\n                \"--radix-dropdown-menu-trigger-width\": \"var(--radix-popper-anchor-width)\",\n                \"--radix-dropdown-menu-trigger-height\": \"var(--radix-popper-anchor-height)\"\n            }\n        }\n    });\n}, \"IxfmRH92Vi06xpdwf/XFbSU51nY=\", false, function() {\n    return [\n        useDropdownMenuContext,\n        useMenuScope\n    ];\n})), \"IxfmRH92Vi06xpdwf/XFbSU51nY=\", false, function() {\n    return [\n        useDropdownMenuContext,\n        useMenuScope\n    ];\n});\n_c124 = DropdownMenuContent$1;\nDropdownMenuContent$1.displayName = CONTENT_NAME$3;\nvar GROUP_NAME = \"DropdownMenuGroup\";\nvar DropdownMenuGroup$1 = /*#__PURE__*/ _s77(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c125 = _s77((props2, forwardedRef)=>{\n    _s77();\n    const { __scopeDropdownMenu, ...groupProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Group, {\n        ...menuScope,\n        ...groupProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c126 = DropdownMenuGroup$1;\nDropdownMenuGroup$1.displayName = GROUP_NAME;\nvar LABEL_NAME = \"DropdownMenuLabel\";\nvar DropdownMenuLabel$1 = /*#__PURE__*/ _s78(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c127 = _s78((props2, forwardedRef)=>{\n    _s78();\n    const { __scopeDropdownMenu, ...labelProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Label, {\n        ...menuScope,\n        ...labelProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c128 = DropdownMenuLabel$1;\nDropdownMenuLabel$1.displayName = LABEL_NAME;\nvar ITEM_NAME = \"DropdownMenuItem\";\nvar DropdownMenuItem$1 = /*#__PURE__*/ _s79(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c129 = _s79((props2, forwardedRef)=>{\n    _s79();\n    const { __scopeDropdownMenu, ...itemProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Item2$1, {\n        ...menuScope,\n        ...itemProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c130 = DropdownMenuItem$1;\nDropdownMenuItem$1.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"DropdownMenuCheckboxItem\";\nvar DropdownMenuCheckboxItem$1 = /*#__PURE__*/ _s80(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c131 = _s80((props2, forwardedRef)=>{\n    _s80();\n    const { __scopeDropdownMenu, ...checkboxItemProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CheckboxItem, {\n        ...menuScope,\n        ...checkboxItemProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c132 = DropdownMenuCheckboxItem$1;\nDropdownMenuCheckboxItem$1.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"DropdownMenuRadioGroup\";\nvar DropdownMenuRadioGroup$1 = /*#__PURE__*/ _s81(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c133 = _s81((props2, forwardedRef)=>{\n    _s81();\n    const { __scopeDropdownMenu, ...radioGroupProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RadioGroup, {\n        ...menuScope,\n        ...radioGroupProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c134 = DropdownMenuRadioGroup$1;\nDropdownMenuRadioGroup$1.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"DropdownMenuRadioItem\";\nvar DropdownMenuRadioItem$1 = /*#__PURE__*/ _s82(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c135 = _s82((props2, forwardedRef)=>{\n    _s82();\n    const { __scopeDropdownMenu, ...radioItemProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RadioItem, {\n        ...menuScope,\n        ...radioItemProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c136 = DropdownMenuRadioItem$1;\nDropdownMenuRadioItem$1.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"DropdownMenuItemIndicator\";\nvar DropdownMenuItemIndicator = /*#__PURE__*/ _s83(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c137 = _s83((props2, forwardedRef)=>{\n    _s83();\n    const { __scopeDropdownMenu, ...itemIndicatorProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ItemIndicator, {\n        ...menuScope,\n        ...itemIndicatorProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c138 = DropdownMenuItemIndicator;\nDropdownMenuItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"DropdownMenuSeparator\";\nvar DropdownMenuSeparator$1 = /*#__PURE__*/ _s84(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c139 = _s84((props2, forwardedRef)=>{\n    _s84();\n    const { __scopeDropdownMenu, ...separatorProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Separator, {\n        ...menuScope,\n        ...separatorProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c140 = DropdownMenuSeparator$1;\nDropdownMenuSeparator$1.displayName = SEPARATOR_NAME;\nvar ARROW_NAME$2 = \"DropdownMenuArrow\";\nvar DropdownMenuArrow = /*#__PURE__*/ _s85(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c141 = _s85((props2, forwardedRef)=>{\n    _s85();\n    const { __scopeDropdownMenu, ...arrowProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Arrow2$1, {\n        ...menuScope,\n        ...arrowProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c142 = DropdownMenuArrow;\nDropdownMenuArrow.displayName = ARROW_NAME$2;\nvar DropdownMenuSub$1 = (props2)=>{\n    _s86();\n    const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const [open, setOpen] = useControllableState({\n        prop: openProp,\n        defaultProp: defaultOpen !== null && defaultOpen !== void 0 ? defaultOpen : false,\n        onChange: onOpenChange,\n        caller: \"DropdownMenuSub\"\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Sub, {\n        ...menuScope,\n        open,\n        onOpenChange: setOpen,\n        children\n    });\n};\n_s86(DropdownMenuSub$1, \"tsAfb9HgeeojKJpaoQXIhZ1uQsI=\", false, function() {\n    return [\n        useMenuScope,\n        useControllableState\n    ];\n});\n_c143 = DropdownMenuSub$1;\nvar SUB_TRIGGER_NAME = \"DropdownMenuSubTrigger\";\nvar DropdownMenuSubTrigger$1 = /*#__PURE__*/ _s87(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c144 = _s87((props2, forwardedRef)=>{\n    _s87();\n    const { __scopeDropdownMenu, ...subTriggerProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SubTrigger, {\n        ...menuScope,\n        ...subTriggerProps,\n        ref: forwardedRef\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c145 = DropdownMenuSubTrigger$1;\nDropdownMenuSubTrigger$1.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"DropdownMenuSubContent\";\nvar DropdownMenuSubContent$1 = /*#__PURE__*/ _s88(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c146 = _s88((props2, forwardedRef)=>{\n    _s88();\n    const { __scopeDropdownMenu, ...subContentProps } = props2;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SubContent, {\n        ...menuScope,\n        ...subContentProps,\n        ref: forwardedRef,\n        style: {\n            ...props2.style,\n            // re-namespace exposed content custom properties\n            ...{\n                \"--radix-dropdown-menu-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n                \"--radix-dropdown-menu-content-available-width\": \"var(--radix-popper-available-width)\",\n                \"--radix-dropdown-menu-content-available-height\": \"var(--radix-popper-available-height)\",\n                \"--radix-dropdown-menu-trigger-width\": \"var(--radix-popper-anchor-width)\",\n                \"--radix-dropdown-menu-trigger-height\": \"var(--radix-popper-anchor-height)\"\n            }\n        }\n    });\n}, \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n})), \"tiYL9inPD2cEO2HZIBsVh57evhg=\", false, function() {\n    return [\n        useMenuScope\n    ];\n});\n_c147 = DropdownMenuSubContent$1;\nDropdownMenuSubContent$1.displayName = SUB_CONTENT_NAME;\nvar Root2$2 = DropdownMenu$1;\nvar Trigger$3 = DropdownMenuTrigger$1;\nvar Portal2 = DropdownMenuPortal$1;\nvar Content2$2 = DropdownMenuContent$1;\nvar Group2 = DropdownMenuGroup$1;\nvar Label2 = DropdownMenuLabel$1;\nvar Item2 = DropdownMenuItem$1;\nvar CheckboxItem2 = DropdownMenuCheckboxItem$1;\nvar RadioGroup2 = DropdownMenuRadioGroup$1;\nvar RadioItem2 = DropdownMenuRadioItem$1;\nvar ItemIndicator2 = DropdownMenuItemIndicator;\nvar Separator2 = DropdownMenuSeparator$1;\nvar Sub2 = DropdownMenuSub$1;\nvar SubTrigger2 = DropdownMenuSubTrigger$1;\nvar SubContent2 = DropdownMenuSubContent$1;\nfunction DropdownMenu(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$2, {\n        \"data-slot\": \"dropdown-menu\",\n        ...props2\n    });\n}\n_c148 = DropdownMenu;\nfunction DropdownMenuPortal(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal2, {\n        container: getPipecatUIContainer(),\n        \"data-slot\": \"dropdown-menu-portal\",\n        ...props2\n    });\n}\n_c149 = DropdownMenuPortal;\nfunction DropdownMenuTrigger(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Trigger$3, {\n        \"data-slot\": \"dropdown-menu-trigger\",\n        ...props2\n    });\n}\n_c150 = DropdownMenuTrigger;\nfunction DropdownMenuContent(param) {\n    let { className, sideOffset = 4, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuPortal, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Content2$2, {\n            \"data-slot\": \"dropdown-menu-content\",\n            sideOffset,\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-popover vkui:text-popover-foreground vkui:data-[state=open]:animate-in vkui:data-[state=closed]:animate-out vkui:data-[state=closed]:fade-out-0 vkui:data-[state=open]:fade-in-0 vkui:data-[state=closed]:zoom-out-95 vkui:data-[state=open]:zoom-in-95 vkui:data-[side=bottom]:slide-in-from-top-2 vkui:data-[side=left]:slide-in-from-right-2 vkui:data-[side=right]:slide-in-from-left-2 vkui:data-[side=top]:slide-in-from-bottom-2 vkui:z-50 vkui:max-h-(--radix-dropdown-menu-content-available-height) vkui:min-w-[8rem] vkui:origin-(--radix-dropdown-menu-content-transform-origin) vkui:overflow-x-hidden vkui:overflow-y-auto vkui:rounded-element vkui:border vkui:p-1 vkui:shadow-short\", className),\n            ...props2\n        })\n    });\n}\n_c151 = DropdownMenuContent;\nfunction DropdownMenuGroup(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Group2, {\n        \"data-slot\": \"dropdown-menu-group\",\n        ...props2\n    });\n}\n_c152 = DropdownMenuGroup;\nfunction DropdownMenuItem(param) {\n    let { className, inset, variant = \"default\", ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Item2, {\n        \"data-slot\": \"dropdown-menu-item\",\n        \"data-inset\": inset,\n        \"data-variant\": variant,\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:focus:bg-accent vkui:focus:text-accent-foreground vkui:data-[variant=destructive]:text-destructive vkui:data-[variant=destructive]:focus:bg-destructive/10 vkui:dark:data-[variant=destructive]:focus:bg-destructive/20 vkui:data-[variant=destructive]:focus:text-destructive vkui:data-[variant=destructive]:*:[svg]:!text-destructive vkui:[&_svg:not([class*='text-'])]:text-muted-foreground vkui:relative vkui:flex vkui:cursor-default vkui:items-center vkui:gap-2 vkui:rounded-sm vkui:px-2 vkui:py-1.5 vkui:text-sm vkui:outline-hidden vkui:select-none vkui:data-[disabled]:pointer-events-none vkui:data-[disabled]:opacity-50 vkui:data-[inset]:pl-8 vkui:[&_svg]:pointer-events-none vkui:[&_svg]:shrink-0 vkui:[&_svg:not([class*='size-'])]:size-4\", className),\n        ...props2\n    });\n}\n_c153 = DropdownMenuItem;\nfunction DropdownMenuCheckboxItem(param) {\n    let { className, children, checked, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(CheckboxItem2, {\n        \"data-slot\": \"dropdown-menu-checkbox-item\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:focus:bg-accent vkui:focus:text-accent-foreground vkui:relative vkui:flex vkui:cursor-default vkui:items-center vkui:gap-2 vkui:rounded-sm vkui:py-1.5 vkui:pr-2 vkui:pl-8 vkui:text-sm vkui:outline-hidden vkui:select-none vkui:data-[disabled]:pointer-events-none vkui:data-[disabled]:opacity-50 vkui:[&_svg]:pointer-events-none vkui:[&_svg]:shrink-0 vkui:[&_svg:not([class*='size-'])]:size-4\", checked && \"vkui:font-medium vkui:bg-accent\", className),\n        checked,\n        ...props2,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"vkui:pointer-events-none vkui:absolute vkui:left-2 vkui:flex size-3.5 vkui:items-center vkui:justify-center\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ItemIndicator2, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CheckIcon, {})\n                })\n            }),\n            children\n        ]\n    });\n}\n_c154 = DropdownMenuCheckboxItem;\nfunction DropdownMenuRadioGroup(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RadioGroup2, {\n        \"data-slot\": \"dropdown-menu-radio-group\",\n        ...props2\n    });\n}\n_c155 = DropdownMenuRadioGroup;\nfunction DropdownMenuRadioItem(param) {\n    let { className, children, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RadioItem2, {\n        \"data-slot\": \"dropdown-menu-radio-item\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:focus:bg-accent vkui:focus:text-accent-foreground vkui:relative vkui:flex vkui:cursor-default vkui:items-center vkui:gap-2 vkui:rounded-panel vkui:py-1.5 vkui:pr-2 vkui:pl-8 vkui:text-sm vkui:outline-hidden vkui:select-none vkui:data-[disabled]:pointer-events-none vkui:data-[disabled]:opacity-50 vkui:[&_svg]:pointer-events-none vkui:[&_svg]:shrink-0 vkui:[&_svg:not([class*='size-'])]:size-4\", className),\n        ...props2,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"vkui:pointer-events-none vkui:absolute vkui:left-2 vkui:flex vkui:size-3.5 vkui:items-center vkui:justify-center\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ItemIndicator2, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CircleIcon, {\n                        className: \"size-2 vkui:fill-current\"\n                    })\n                })\n            }),\n            children\n        ]\n    });\n}\n_c156 = DropdownMenuRadioItem;\nfunction DropdownMenuLabel(param) {\n    let { className, inset, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Label2, {\n        \"data-slot\": \"dropdown-menu-label\",\n        \"data-inset\": inset,\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:px-2 vkui:py-1.5 vkui:text-sm vkui:font-medium vkui:data-[inset]:pl-8\", className),\n        ...props2\n    });\n}\n_c157 = DropdownMenuLabel;\nfunction DropdownMenuSeparator(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Separator2, {\n        \"data-slot\": \"dropdown-menu-separator\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-border vkui:-mx-1 vkui:my-1 vkui:h-px\", className),\n        ...props2\n    });\n}\n_c158 = DropdownMenuSeparator;\nfunction DropdownMenuShortcut(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        \"data-slot\": \"dropdown-menu-shortcut\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-muted-foreground vkui:ml-auto vkui:text-xs vkui:tracking-widest\", className),\n        ...props2\n    });\n}\n_c159 = DropdownMenuShortcut;\nfunction DropdownMenuSub(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Sub2, {\n        \"data-slot\": \"dropdown-menu-sub\",\n        ...props2\n    });\n}\n_c160 = DropdownMenuSub;\nfunction DropdownMenuSubTrigger(param) {\n    let { className, inset, children, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SubTrigger2, {\n        \"data-slot\": \"dropdown-menu-sub-trigger\",\n        \"data-inset\": inset,\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:focus:bg-accent vkui:focus:text-accent-foreground vkui:data-[state=open]:bg-accent vkui:data-[state=open]:text-accent-foreground vkui:flex vkui:cursor-default vkui:items-center vkui:rounded-sm vkui:px-2 vkui:py-1.5 vkui:text-sm vkui:outline-hidden vkui:select-none vkui:data-[inset]:pl-8\", className),\n        ...props2,\n        children: [\n            children,\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronRightIcon, {\n                className: \"vkui:ml-auto vkui:size-4\"\n            })\n        ]\n    });\n}\n_c161 = DropdownMenuSubTrigger;\nfunction DropdownMenuSubContent(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SubContent2, {\n        \"data-slot\": \"dropdown-menu-sub-content\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-popover vkui:text-popover-foreground vkui:data-[state=open]:animate-in vkui:data-[state=closed]:animate-out vkui:data-[state=closed]:fade-out-0 vkui:data-[state=open]:fade-in-0 vkui:data-[state=closed]:zoom-out-95 vkui:data-[state=open]:zoom-in-95 vkui:data-[side=bottom]:slide-in-from-top-2 vkui:data-[side=left]:slide-in-from-right-2 vkui:data-[side=right]:slide-in-from-left-2 vkui:data-[side=top]:slide-in-from-bottom-2 vkui:z-50 vkui:min-w-[8rem] vkui:origin-(--radix-dropdown-menu-content-transform-origin) vkui:overflow-hidden vkui:rounded-md vkui:border vkui:p-1 vkui:shadow-lg\", className),\n        ...props2\n    });\n}\n_c162 = DropdownMenuSubContent;\nconst DeviceDropDown = (param)=>{\n    let { children, noMenuLabel = false, noMenuSeparator = false, menuLabel = \"Device select\", availableDevices, selectedDevice, updateDevice, classNames } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DropdownMenu, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuTrigger, {\n                asChild: true,\n                children\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DropdownMenuContent, {\n                align: \"end\",\n                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(classNames == null ? void 0 : classNames.dropdownMenuContent),\n                children: [\n                    !noMenuLabel && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuLabel, {\n                        children: menuLabel\n                    }),\n                    !noMenuSeparator && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuSeparator, {}),\n                    availableDevices == null ? void 0 : availableDevices.map((device)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuCheckboxItem, {\n                            checked: (selectedDevice == null ? void 0 : selectedDevice.deviceId) === device.deviceId,\n                            onCheckedChange: ()=>updateDevice == null ? void 0 : updateDevice(device.deviceId),\n                            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(classNames == null ? void 0 : classNames.dropdownMenuCheckboxItem),\n                            children: device.label || \"Device \".concat(device.deviceId.slice(0, 5))\n                        }, device.deviceId))\n                ]\n            })\n        ]\n    });\n};\n_c163 = DeviceDropDown;\nconst btnClasses = \"vkui:flex-1 vkui:w-full vkui:z-10 vkui:justify-start\";\nconst UserAudioComponent = (param)=>{\n    let { variant = \"secondary\", size: size2 = \"default\", classNames = {}, buttonProps = {}, dropdownButtonProps = {}, noDevicePicker = false, noVisualizer = false, visualizerProps = {}, isMicEnabled = false, state, availableMics, selectedMic, updateMic, noAudio, noAudioText = \"Audio disabled\", onClick } = param;\n    var _a;\n    if (noAudio || (buttonProps == null ? void 0 : buttonProps.isLoading)) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n            variant,\n            size: size2,\n            ...buttonProps,\n            disabled: true,\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(btnClasses, (buttonProps == null ? void 0 : buttonProps.isLoading) && \"vkui:justify-center\", classNames.button),\n            children: !(buttonProps == null ? void 0 : buttonProps.isLoading) && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MicOffIcon, {}),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: \"vkui:flex-1\",\n                        children: noAudioText\n                    })\n                ]\n            })\n        });\n    }\n    const buttonState = state || (isMicEnabled ? \"default\" : \"inactive\");\n    const accentColor = ((_a = buttonAccentColorMap[variant || \"default\"]) == null ? void 0 : _a[buttonState]) || \"black\";\n    const button = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, {\n                onClick,\n                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(btnClasses, classNames.button),\n                variant,\n                state: buttonState,\n                size: size2,\n                ...buttonProps,\n                children: [\n                    isMicEnabled ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MicIcon, {}) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MicOffIcon, {}),\n                    !noVisualizer && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VoiceVisualizer, {\n                        participantType: \"local\",\n                        backgroundColor: \"transparent\",\n                        barCount: 10,\n                        barGap: 2,\n                        barMaxHeight: size2 === \"lg\" ? 24 : size2 === \"xl\" ? 36 : 20,\n                        barOrigin: \"center\",\n                        barWidth: 3,\n                        barColor: accentColor,\n                        className: \"vkui:mx-auto\",\n                        ...visualizerProps\n                    })\n                ]\n            }),\n            !noDevicePicker && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DeviceDropDown, {\n                menuLabel: \"Microphone device\",\n                availableDevices: availableMics,\n                selectedDevice: selectedMic,\n                updateDevice: updateMic,\n                classNames: {\n                    dropdownMenuContent: classNames.dropdownMenuContent,\n                    dropdownMenuCheckboxItem: classNames.dropdownMenuCheckboxItem\n                },\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n                    className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:p-2! vkui:flex-none vkui:z-0\", classNames.dropdownMenuTrigger),\n                    variant,\n                    size: size2,\n                    isIcon: true,\n                    ...dropdownButtonProps,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronDownIcon, {\n                        size: 16\n                    })\n                })\n            })\n        ]\n    });\n    if (noDevicePicker) {\n        return button;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ButtonGroup, {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:w-full\", variant !== \"outline\" && \"vkui:gap-[2px]\", classNames.buttongroup),\n        children: button\n    });\n};\n_c164 = UserAudioComponent;\nconst UserAudioControl = (props2)=>{\n    _s89();\n    const client = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClient)();\n    const { availableMics, selectedMic, updateMic } = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaDevices)();\n    const hasAudio = client == null ? void 0 : client.isMicEnabled;\n    const loading = hasAudio === null;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"UserAudioControl.useEffect\": ()=>{\n            if (!client) return;\n            if ([\n                \"idle\",\n                \"disconnected\"\n            ].includes(client.state)) {\n                client.initDevices();\n            }\n        }\n    }[\"UserAudioControl.useEffect\"], [\n        client\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientMicToggle, {\n        children: (param)=>{\n            let { isMicEnabled, onClick } = param;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UserAudioComponent, {\n                noAudio: !hasAudio,\n                onClick,\n                isMicEnabled,\n                availableMics,\n                selectedMic,\n                updateMic,\n                state: isMicEnabled ? \"default\" : \"inactive\",\n                buttonProps: {\n                    isLoading: loading\n                },\n                ...props2\n            });\n        }\n    });\n};\n_s89(UserAudioControl, \"A+9jZyMKpywn4QGIvmGtcZVtApc=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClient,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaDevices\n    ];\n});\n_c165 = UserAudioControl;\nfunction Card(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"card\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-card vkui:text-card-foreground vkui:flex vkui:flex-col vkui:gap-2 vkui:md:gap-3 vkui:rounded-2xl vkui:border vkui:border-border vkui:p-2 vkui:md:p-3\", props2.destructive && \"vkui:text-destructive vkui:border-destructive\", className),\n        ...props2\n    });\n}\n_c166 = Card;\nfunction CardHeader(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"card-header\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:gap-2 vkui:md:gap-3 vkui:p-2 vkui:md:p-3\", className),\n        ...props2\n    });\n}\n_c167 = CardHeader;\nfunction CardTitle(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"card-title\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:leading-none vkui:font-semibold\", className),\n        ...props2\n    });\n}\n_c168 = CardTitle;\nfunction CardDescription(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"card-description\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-muted-foreground vkui:text-sm\", className),\n        ...props2\n    });\n}\n_c169 = CardDescription;\nfunction CardAction(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"card-action\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:col-start-2 vkui:row-span-2 vkui:row-start-1 vkui:self-start vkui:justify-self-end\", className),\n        ...props2\n    });\n}\n_c170 = CardAction;\nfunction CardContent(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"card-content\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:gap-2 vkui:md:gap-3 vkui:p-2 vkui:md:p-3\", className),\n        ...props2\n    });\n}\n_c171 = CardContent;\nfunction CardFooter(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"card-footer\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:gap-2 vkui:md:gap-3 vkui:p-2 vkui:md:p-3\", className),\n        ...props2\n    });\n}\n_c172 = CardFooter;\nfunction FullScreenContainer(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:w-full vkui:h-dvh vkui:bg-background\", className),\n        ...props2\n    });\n}\n_c173 = FullScreenContainer;\nconst ErrorCard = (param)=>{\n    let { title = \"An Error Occurred\", error, className } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Card, {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:shadow-long vkui:min-w-md vkui:gap-0\", className),\n        destructive: true,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(CardHeader, {\n                className: \"vkui:font-semibold vkui:flex vkui:flex-row vkui:items-center\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoIcon, {\n                        size: 24\n                    }),\n                    title\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CardContent, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                    className: \"vkui:text-sm vkui:text-balanced\",\n                    children: error\n                })\n            })\n        ]\n    });\n};\n_c174 = ErrorCard;\nconst inputVariants = cva(\"vkui:file:text-foreground vkui:placeholder:text-muted-foreground vkui:selection:bg-primary vkui:selection:text-primary-foreground vkui:dark:bg-input/30 vkui:border-input vkui:flex vkui:w-full vkui:min-w-0 vkui:rounded-md vkui:border vkui:bg-transparent vkui:px-3 vkui:text-foreground vkui:transition-[color,box-shadow] vkui:outline-none vkui:file:inline-flex vkui:file:border-0 vkui:file:bg-transparent vkui:file:text-sm vkui:file:font-medium vkui:disabled:pointer-events-none vkui:disabled:cursor-not-allowed vkui:disabled:opacity-50 vkui:md:text-sm vkui:focus-visible:border-ring vkui:focus-visible:ring-ring/50 vkui:focus-visible:ring-[3px] vkui:aria-invalid:ring-destructive/20 vkui:dark:aria-invalid:ring-destructive/40 vkui:aria-invalid:border-destructive\", {\n    variants: {\n        size: {\n            sm: \"vkui:h-7 vkui:px-2.5 vkui:py-1 vkui:text-sm\",\n            default: \"vkui:h-8 vkui:px-3 vkui:py-1\",\n            lg: \"vkui:h-10 vkui:px-3 vkui:py-2 vkui:rounded-lg\"\n        }\n    },\n    defaultVariants: {\n        size: \"default\"\n    }\n});\nfunction Input(param) {\n    let { className, type, size: size2, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n        type,\n        \"data-slot\": \"input\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(inputVariants({\n            size: size2,\n            className\n        })),\n        ...props2\n    });\n}\n_c175 = Input;\nfunction LayoutSection(param) {\n    let { className, sectionKey, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"section\", {\n        \"data-section\": sectionKey,\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(className),\n        ...props2\n    });\n}\n_c176 = LayoutSection;\nconst LoaderSpinner = (param)=>{\n    let { size: size2 = 32 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoaderIcon, {\n        className: \"vkui:animate-spin vkui:opacity-50\",\n        size: size2\n    });\n};\n_c177 = LoaderSpinner;\nfunction Panel$1(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"panel\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:@container/panel vkui:bg-card vkui:text-card-foreground vkui:flex vkui:flex-col vkui:rounded-panel vkui:border\", className),\n        ...props2\n    });\n}\n_c178 = Panel$1;\nconst PanelHeaderVariants = cva(\"vkui:@container/panel-header\", {\n    variants: {\n        variant: {\n            default: \"vkui:border-b vkui:flex vkui:items-center vkui:justify-center vkui:text-card-foreground vkui:p-2 vkui:@xs/panel:p-3 vkui:@md/panel:p-4\",\n            inline: \"vkui:items-start vkui:text-foreground vkui:p-2 vkui:@xs/panel:p-3 vkui:@md/panel:p-4\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\"\n    }\n});\nfunction PanelHeader(param) {\n    let { variant, className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"panel-header\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(PanelHeaderVariants({\n            variant,\n            className\n        }), className),\n        ...props2\n    });\n}\n_c179 = PanelHeader;\nfunction PanelTitle(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"panel-title\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-mono-upper\", className),\n        ...props2\n    });\n}\n_c180 = PanelTitle;\nfunction PanelContent(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"panel-content\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-foreground vkui:flex vkui:flex-col vkui:p-2 vkui:gap-2 vkui:@xs/panel:p-3 vkui:@xs/panel:gap-3 vkui:@md/panel:p-4 vkui:@md/panel:gap-4\", className),\n        ...props2\n    });\n}\n_c181 = PanelContent;\nfunction PanelFooter(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"panel-footer\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:items-center vkui:p-2 vkui:@xs/panel:p-3 vkui:@md/panel:p-4\", className),\n        ...props2\n    });\n}\n_c182 = PanelFooter;\nfunction PanelActions(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"data-slot\": \"panel-actions\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:items-center vkui:gap-1 vkui:@xs/panel:gap-2\", className),\n        ...props2\n    });\n}\n_c183 = PanelActions;\nvar POPOVER_NAME = \"Popover\";\nvar [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [\n    createPopperScope\n]);\nvar usePopperScope$1 = createPopperScope();\nvar [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);\nvar Popover$1 = (props2)=>{\n    _s90();\n    const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props2;\n    const popperScope = usePopperScope$1(__scopePopover);\n    const triggerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const [hasCustomAnchor, setHasCustomAnchor] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const [open, setOpen] = useControllableState({\n        prop: openProp,\n        defaultProp: defaultOpen !== null && defaultOpen !== void 0 ? defaultOpen : false,\n        onChange: onOpenChange,\n        caller: POPOVER_NAME\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$4, {\n        ...popperScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverProvider, {\n            scope: __scopePopover,\n            contentId: useId$1(),\n            triggerRef,\n            open,\n            onOpenChange: setOpen,\n            onOpenToggle: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                \"Popover$1.useCallback\": ()=>setOpen({\n                        \"Popover$1.useCallback\": (prevOpen)=>!prevOpen\n                    }[\"Popover$1.useCallback\"])\n            }[\"Popover$1.useCallback\"], [\n                setOpen\n            ]),\n            hasCustomAnchor,\n            onCustomAnchorAdd: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                \"Popover$1.useCallback\": ()=>setHasCustomAnchor(true)\n            }[\"Popover$1.useCallback\"], []),\n            onCustomAnchorRemove: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                \"Popover$1.useCallback\": ()=>setHasCustomAnchor(false)\n            }[\"Popover$1.useCallback\"], []),\n            modal,\n            children\n        })\n    });\n};\n_s90(Popover$1, \"moKtS7XFFdIGt7Tl/bav2+g5Qak=\", false, function() {\n    return [\n        usePopperScope$1,\n        useControllableState,\n        useId$1\n    ];\n});\n_c184 = Popover$1;\nPopover$1.displayName = POPOVER_NAME;\nvar ANCHOR_NAME = \"PopoverAnchor\";\nvar PopoverAnchor$1 = /*#__PURE__*/ _s91(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c185 = _s91((props2, forwardedRef)=>{\n    _s91();\n    const { __scopePopover, ...anchorProps } = props2;\n    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);\n    const popperScope = usePopperScope$1(__scopePopover);\n    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"PopoverAnchor$1.useEffect\": ()=>{\n            onCustomAnchorAdd();\n            return ({\n                \"PopoverAnchor$1.useEffect\": ()=>onCustomAnchorRemove()\n            })[\"PopoverAnchor$1.useEffect\"];\n        }\n    }[\"PopoverAnchor$1.useEffect\"], [\n        onCustomAnchorAdd,\n        onCustomAnchorRemove\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Anchor, {\n        ...popperScope,\n        ...anchorProps,\n        ref: forwardedRef\n    });\n}, \"ZOucjTMnhDOz84RaFVb9QIzikZc=\", false, function() {\n    return [\n        usePopoverContext,\n        usePopperScope$1\n    ];\n})), \"ZOucjTMnhDOz84RaFVb9QIzikZc=\", false, function() {\n    return [\n        usePopoverContext,\n        usePopperScope$1\n    ];\n});\n_c186 = PopoverAnchor$1;\nPopoverAnchor$1.displayName = ANCHOR_NAME;\nvar TRIGGER_NAME$2 = \"PopoverTrigger\";\nvar PopoverTrigger$1 = /*#__PURE__*/ _s92(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c187 = _s92((props2, forwardedRef)=>{\n    _s92();\n    const { __scopePopover, ...triggerProps } = props2;\n    const context = usePopoverContext(TRIGGER_NAME$2, __scopePopover);\n    const popperScope = usePopperScope$1(__scopePopover);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    const trigger = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.button, {\n        type: \"button\",\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": context.open,\n        \"aria-controls\": context.contentId,\n        \"data-state\": getState(context.open),\n        ...triggerProps,\n        ref: composedTriggerRef,\n        onClick: composeEventHandlers(props2.onClick, context.onOpenToggle)\n    });\n    return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Anchor, {\n        asChild: true,\n        ...popperScope,\n        children: trigger\n    });\n}, \"p2m0Qu1/1DhXqUzbHFlhSeijZTk=\", false, function() {\n    return [\n        usePopoverContext,\n        usePopperScope$1,\n        useComposedRefs\n    ];\n})), \"p2m0Qu1/1DhXqUzbHFlhSeijZTk=\", false, function() {\n    return [\n        usePopoverContext,\n        usePopperScope$1,\n        useComposedRefs\n    ];\n});\n_c188 = PopoverTrigger$1;\nPopoverTrigger$1.displayName = TRIGGER_NAME$2;\nvar PORTAL_NAME$1 = \"PopoverPortal\";\nvar [PortalProvider$1, usePortalContext$1] = createPopoverContext(PORTAL_NAME$1, {\n    forceMount: void 0\n});\nvar PopoverPortal = (props2)=>{\n    _s93();\n    const { __scopePopover, forceMount, children, container } = props2;\n    const context = usePopoverContext(PORTAL_NAME$1, __scopePopover);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortalProvider$1, {\n        scope: __scopePopover,\n        forceMount,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n            present: forceMount || context.open,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal$4, {\n                asChild: true,\n                container,\n                children\n            })\n        })\n    });\n};\n_s93(PopoverPortal, \"9et25l8VaLcpuQmtUVmALeCWc4M=\", false, function() {\n    return [\n        usePopoverContext\n    ];\n});\n_c189 = PopoverPortal;\nPopoverPortal.displayName = PORTAL_NAME$1;\nvar CONTENT_NAME$2 = \"PopoverContent\";\nvar PopoverContent$1 = /*#__PURE__*/ _s94(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c190 = _s94((props2, forwardedRef)=>{\n    _s94();\n    const portalContext = usePortalContext$1(CONTENT_NAME$2, props2.__scopePopover);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props2;\n    const context = usePopoverContext(CONTENT_NAME$2, props2.__scopePopover);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n        present: forceMount || context.open,\n        children: context.modal ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverContentModal, {\n            ...contentProps,\n            ref: forwardedRef\n        }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverContentNonModal, {\n            ...contentProps,\n            ref: forwardedRef\n        })\n    });\n}, \"imxxDbChpFY8c2dDlDMvDPvdH74=\", false, function() {\n    return [\n        usePortalContext$1,\n        usePopoverContext\n    ];\n})), \"imxxDbChpFY8c2dDlDMvDPvdH74=\", false, function() {\n    return [\n        usePortalContext$1,\n        usePopoverContext\n    ];\n});\n_c191 = PopoverContent$1;\nPopoverContent$1.displayName = CONTENT_NAME$2;\nvar Slot = /* @__PURE__ */ createSlot(\"PopoverContent.RemoveScroll\");\nvar PopoverContentModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s95((props2, forwardedRef)=>{\n    _s95();\n    const context = usePopoverContext(CONTENT_NAME$2, props2.__scopePopover);\n    const contentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const isRightClickOutsideRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"PopoverContentModal.useEffect\": ()=>{\n            const content = contentRef.current;\n            if (content) return hideOthers(content);\n        }\n    }[\"PopoverContentModal.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ReactRemoveScroll, {\n        as: Slot,\n        allowPinchZoom: true,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverContentImpl, {\n            ...props2,\n            ref: composedRefs,\n            trapFocus: context.open,\n            disableOutsidePointerEvents: true,\n            onCloseAutoFocus: composeEventHandlers(props2.onCloseAutoFocus, (event)=>{\n                var _a;\n                event.preventDefault();\n                if (!isRightClickOutsideRef.current) (_a = context.triggerRef.current) == null ? void 0 : _a.focus();\n            }),\n            onPointerDownOutside: composeEventHandlers(props2.onPointerDownOutside, (event)=>{\n                const originalEvent = event.detail.originalEvent;\n                const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n                const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n                isRightClickOutsideRef.current = isRightClick;\n            }, {\n                checkForDefaultPrevented: false\n            }),\n            onFocusOutside: composeEventHandlers(props2.onFocusOutside, (event)=>event.preventDefault(), {\n                checkForDefaultPrevented: false\n            })\n        })\n    });\n}, \"FECBP+0gqHSMxi3FmVm3wtSLePU=\", false, function() {\n    return [\n        usePopoverContext,\n        useComposedRefs\n    ];\n}));\n_c192 = PopoverContentModal;\nvar PopoverContentNonModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s96((props2, forwardedRef)=>{\n    _s96();\n    const context = usePopoverContext(CONTENT_NAME$2, props2.__scopePopover);\n    const hasInteractedOutsideRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const hasPointerDownOutsideRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverContentImpl, {\n        ...props2,\n        ref: forwardedRef,\n        trapFocus: false,\n        disableOutsidePointerEvents: false,\n        onCloseAutoFocus: (event)=>{\n            var _a, _b;\n            (_a = props2.onCloseAutoFocus) == null ? void 0 : _a.call(props2, event);\n            if (!event.defaultPrevented) {\n                if (!hasInteractedOutsideRef.current) (_b = context.triggerRef.current) == null ? void 0 : _b.focus();\n                event.preventDefault();\n            }\n            hasInteractedOutsideRef.current = false;\n            hasPointerDownOutsideRef.current = false;\n        },\n        onInteractOutside: (event)=>{\n            var _a, _b;\n            (_a = props2.onInteractOutside) == null ? void 0 : _a.call(props2, event);\n            if (!event.defaultPrevented) {\n                hasInteractedOutsideRef.current = true;\n                if (event.detail.originalEvent.type === \"pointerdown\") {\n                    hasPointerDownOutsideRef.current = true;\n                }\n            }\n            const target = event.target;\n            const targetIsTrigger = (_b = context.triggerRef.current) == null ? void 0 : _b.contains(target);\n            if (targetIsTrigger) event.preventDefault();\n            if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n                event.preventDefault();\n            }\n        }\n    });\n}, \"FrFbVQaru0Wx8/HAeaTJNSNETpc=\", false, function() {\n    return [\n        usePopoverContext\n    ];\n}));\n_c193 = PopoverContentNonModal;\nvar PopoverContentImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s97((props2, forwardedRef)=>{\n    _s97();\n    const { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, ...contentProps } = props2;\n    const context = usePopoverContext(CONTENT_NAME$2, __scopePopover);\n    const popperScope = usePopperScope$1(__scopePopover);\n    useFocusGuards();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FocusScope, {\n        asChild: true,\n        loop: true,\n        trapped: trapFocus,\n        onMountAutoFocus: onOpenAutoFocus,\n        onUnmountAutoFocus: onCloseAutoFocus,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DismissableLayer, {\n            asChild: true,\n            disableOutsidePointerEvents,\n            onInteractOutside,\n            onEscapeKeyDown,\n            onPointerDownOutside,\n            onFocusOutside,\n            onDismiss: ()=>context.onOpenChange(false),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Content$1, {\n                \"data-state\": getState(context.open),\n                role: \"dialog\",\n                id: context.contentId,\n                ...popperScope,\n                ...contentProps,\n                ref: forwardedRef,\n                style: {\n                    ...contentProps.style,\n                    // re-namespace exposed content custom properties\n                    ...{\n                        \"--radix-popover-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n                        \"--radix-popover-content-available-width\": \"var(--radix-popper-available-width)\",\n                        \"--radix-popover-content-available-height\": \"var(--radix-popper-available-height)\",\n                        \"--radix-popover-trigger-width\": \"var(--radix-popper-anchor-width)\",\n                        \"--radix-popover-trigger-height\": \"var(--radix-popper-anchor-height)\"\n                    }\n                }\n            })\n        })\n    });\n}, \"f0clBE4tqZLxXgtV+IKMfcNA2Ds=\", false, function() {\n    return [\n        usePopoverContext,\n        usePopperScope$1,\n        useFocusGuards\n    ];\n}));\n_c194 = PopoverContentImpl;\nvar CLOSE_NAME = \"PopoverClose\";\nvar PopoverClose = /*#__PURE__*/ _s98(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c195 = _s98((props2, forwardedRef)=>{\n    _s98();\n    const { __scopePopover, ...closeProps } = props2;\n    const context = usePopoverContext(CLOSE_NAME, __scopePopover);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.button, {\n        type: \"button\",\n        ...closeProps,\n        ref: forwardedRef,\n        onClick: composeEventHandlers(props2.onClick, ()=>context.onOpenChange(false))\n    });\n}, \"9et25l8VaLcpuQmtUVmALeCWc4M=\", false, function() {\n    return [\n        usePopoverContext\n    ];\n})), \"9et25l8VaLcpuQmtUVmALeCWc4M=\", false, function() {\n    return [\n        usePopoverContext\n    ];\n});\n_c196 = PopoverClose;\nPopoverClose.displayName = CLOSE_NAME;\nvar ARROW_NAME$1 = \"PopoverArrow\";\nvar PopoverArrow = /*#__PURE__*/ _s99(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c197 = _s99((props2, forwardedRef)=>{\n    _s99();\n    const { __scopePopover, ...arrowProps } = props2;\n    const popperScope = usePopperScope$1(__scopePopover);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Arrow, {\n        ...popperScope,\n        ...arrowProps,\n        ref: forwardedRef\n    });\n}, \"61R2rP/8uQ4ISv4XsSVsxzRogBA=\", false, function() {\n    return [\n        usePopperScope$1\n    ];\n})), \"61R2rP/8uQ4ISv4XsSVsxzRogBA=\", false, function() {\n    return [\n        usePopperScope$1\n    ];\n});\n_c198 = PopoverArrow;\nPopoverArrow.displayName = ARROW_NAME$1;\nfunction getState(open) {\n    return open ? \"open\" : \"closed\";\n}\nvar Root2$1 = Popover$1;\nvar Anchor2 = PopoverAnchor$1;\nvar Trigger$2 = PopoverTrigger$1;\nvar Portal$1 = PopoverPortal;\nvar Content2$1 = PopoverContent$1;\nfunction Popover(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$1, {\n        \"data-slot\": \"popover\",\n        ...props2\n    });\n}\n_c199 = Popover;\nfunction PopoverTrigger(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Trigger$2, {\n        \"data-slot\": \"popover-trigger\",\n        ...props2\n    });\n}\n_c200 = PopoverTrigger;\nfunction PopoverContent(param) {\n    let { className, align = \"center\", sideOffset = 4, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal$1, {\n        container: getPipecatUIContainer(),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Content2$1, {\n            \"data-slot\": \"popover-content\",\n            align,\n            sideOffset,\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-popover vkui:text-popover-foreground vkui:data-[state=open]:animate-in vkui:data-[state=closed]:animate-out vkui:data-[state=closed]:fade-out-0 vkui:data-[state=open]:fade-in-0 vkui:data-[state=closed]:zoom-out-95 vkui:data-[state=open]:zoom-in-95 vkui:data-[side=bottom]:slide-in-from-top-2 vkui:data-[side=left]:slide-in-from-right-2 vkui:data-[side=right]:slide-in-from-left-2 vkui:data-[side=top]:slide-in-from-bottom-2 vkui:z-50 vkui:w-72 origin-(--radix-popover-content-transform-origin) vkui:rounded-md vkui:border vkui:p-4 vkui:shadow-md vkui:outline-hidden\", className),\n            ...props2\n        })\n    });\n}\n_c201 = PopoverContent;\nfunction PopoverAnchor(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Anchor2, {\n        \"data-slot\": \"popover-anchor\",\n        ...props2\n    });\n}\n_c202 = PopoverAnchor;\nconst PanelGroupContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nPanelGroupContext.displayName = \"PanelGroupContext\";\nconst DATA_ATTRIBUTES = {\n    group: \"data-panel-group\",\n    groupDirection: \"data-panel-group-direction\",\n    groupId: \"data-panel-group-id\",\n    panel: \"data-panel\",\n    panelCollapsible: \"data-panel-collapsible\",\n    panelId: \"data-panel-id\",\n    panelSize: \"data-panel-size\",\n    resizeHandle: \"data-resize-handle\",\n    resizeHandleActive: \"data-resize-handle-active\",\n    resizeHandleEnabled: \"data-panel-resize-handle-enabled\",\n    resizeHandleId: \"data-panel-resize-handle-id\",\n    resizeHandleState: \"data-resize-handle-state\"\n};\nconst PRECISION = 10;\nconst useIsomorphicLayoutEffect = react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect;\nconst useId = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_1__, 2)))[\"useId\".toString()];\nconst wrappedUseId = typeof useId === \"function\" ? useId : ()=>null;\nlet counter = 0;\nfunction useUniqueId() {\n    let idFromParams = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n    _s100();\n    const idFromUseId = wrappedUseId();\n    const idRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(idFromParams || idFromUseId || null);\n    if (idRef.current === null) {\n        idRef.current = \"\" + counter++;\n    }\n    return idFromParams !== null && idFromParams !== void 0 ? idFromParams : idRef.current;\n}\n_s100(useUniqueId, \"6rVtrzf3zL31kiuSxy/GY4EaNyE=\");\nfunction PanelWithForwardedRef(param) {\n    let { children, className: classNameFromProps = \"\", collapsedSize, collapsible, defaultSize, forwardedRef, id: idFromProps, maxSize, minSize, onCollapse, onExpand, onResize, order, style: styleFromProps, tagName: Type = \"div\", ...rest } = param;\n    _s101();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PanelGroupContext);\n    if (context === null) {\n        throw Error(\"Panel components must be rendered within a PanelGroup container\");\n    }\n    const { collapsePanel, expandPanel, getPanelSize, getPanelStyle, groupId, isPanelCollapsed, reevaluatePanelConstraints, registerPanel, resizePanel: resizePanel2, unregisterPanel } = context;\n    const panelId = useUniqueId(idFromProps);\n    const panelDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        callbacks: {\n            onCollapse,\n            onExpand,\n            onResize\n        },\n        constraints: {\n            collapsedSize,\n            collapsible,\n            defaultSize,\n            maxSize,\n            minSize\n        },\n        id: panelId,\n        idIsFromProps: idFromProps !== void 0,\n        order\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        didLogMissingDefaultSizeWarning: false\n    });\n    useIsomorphicLayoutEffect({\n        \"PanelWithForwardedRef.useIsomorphicLayoutEffect\": ()=>{\n            const { callbacks, constraints } = panelDataRef.current;\n            const prevConstraints = {\n                ...constraints\n            };\n            panelDataRef.current.id = panelId;\n            panelDataRef.current.idIsFromProps = idFromProps !== void 0;\n            panelDataRef.current.order = order;\n            callbacks.onCollapse = onCollapse;\n            callbacks.onExpand = onExpand;\n            callbacks.onResize = onResize;\n            constraints.collapsedSize = collapsedSize;\n            constraints.collapsible = collapsible;\n            constraints.defaultSize = defaultSize;\n            constraints.maxSize = maxSize;\n            constraints.minSize = minSize;\n            if (prevConstraints.collapsedSize !== constraints.collapsedSize || prevConstraints.collapsible !== constraints.collapsible || prevConstraints.maxSize !== constraints.maxSize || prevConstraints.minSize !== constraints.minSize) {\n                reevaluatePanelConstraints(panelDataRef.current, prevConstraints);\n            }\n        }\n    }[\"PanelWithForwardedRef.useIsomorphicLayoutEffect\"]);\n    useIsomorphicLayoutEffect({\n        \"PanelWithForwardedRef.useIsomorphicLayoutEffect\": ()=>{\n            const panelData = panelDataRef.current;\n            registerPanel(panelData);\n            return ({\n                \"PanelWithForwardedRef.useIsomorphicLayoutEffect\": ()=>{\n                    unregisterPanel(panelData);\n                }\n            })[\"PanelWithForwardedRef.useIsomorphicLayoutEffect\"];\n        }\n    }[\"PanelWithForwardedRef.useIsomorphicLayoutEffect\"], [\n        order,\n        panelId,\n        registerPanel,\n        unregisterPanel\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle)(forwardedRef, {\n        \"PanelWithForwardedRef.useImperativeHandle\": ()=>({\n                collapse: ({\n                    \"PanelWithForwardedRef.useImperativeHandle\": ()=>{\n                        collapsePanel(panelDataRef.current);\n                    }\n                })[\"PanelWithForwardedRef.useImperativeHandle\"],\n                expand: ({\n                    \"PanelWithForwardedRef.useImperativeHandle\": (minSize2)=>{\n                        expandPanel(panelDataRef.current, minSize2);\n                    }\n                })[\"PanelWithForwardedRef.useImperativeHandle\"],\n                getId () {\n                    return panelId;\n                },\n                getSize () {\n                    return getPanelSize(panelDataRef.current);\n                },\n                isCollapsed () {\n                    return isPanelCollapsed(panelDataRef.current);\n                },\n                isExpanded () {\n                    return !isPanelCollapsed(panelDataRef.current);\n                },\n                resize: ({\n                    \"PanelWithForwardedRef.useImperativeHandle\": (size2)=>{\n                        resizePanel2(panelDataRef.current, size2);\n                    }\n                })[\"PanelWithForwardedRef.useImperativeHandle\"]\n            })\n    }[\"PanelWithForwardedRef.useImperativeHandle\"], [\n        collapsePanel,\n        expandPanel,\n        getPanelSize,\n        isPanelCollapsed,\n        panelId,\n        resizePanel2\n    ]);\n    const style = getPanelStyle(panelDataRef.current, defaultSize);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(Type, {\n        ...rest,\n        children,\n        className: classNameFromProps,\n        id: panelId,\n        style: {\n            ...style,\n            ...styleFromProps\n        },\n        // CSS selectors\n        [DATA_ATTRIBUTES.groupId]: groupId,\n        [DATA_ATTRIBUTES.panel]: \"\",\n        [DATA_ATTRIBUTES.panelCollapsible]: collapsible || void 0,\n        [DATA_ATTRIBUTES.panelId]: panelId,\n        [DATA_ATTRIBUTES.panelSize]: parseFloat(\"\" + style.flexGrow).toFixed(1)\n    });\n}\n_s101(PanelWithForwardedRef, \"m8Gok3bxLMInVOYuxmFV0AnpB9M=\", false, function() {\n    return [\n        useUniqueId,\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect\n    ];\n});\n_c203 = PanelWithForwardedRef;\nconst Panel = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props2, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(PanelWithForwardedRef, {\n        ...props2,\n        forwardedRef: ref\n    }));\n_c204 = Panel;\nPanelWithForwardedRef.displayName = \"Panel\";\nPanel.displayName = \"forwardRef(Panel)\";\nlet currentCursorStyle = null;\nlet prevRuleIndex = -1;\nlet styleElement = null;\nfunction getCursorStyle(state, constraintFlags) {\n    if (constraintFlags) {\n        const horizontalMin = (constraintFlags & EXCEEDED_HORIZONTAL_MIN) !== 0;\n        const horizontalMax = (constraintFlags & EXCEEDED_HORIZONTAL_MAX) !== 0;\n        const verticalMin = (constraintFlags & EXCEEDED_VERTICAL_MIN) !== 0;\n        const verticalMax = (constraintFlags & EXCEEDED_VERTICAL_MAX) !== 0;\n        if (horizontalMin) {\n            if (verticalMin) {\n                return \"se-resize\";\n            } else if (verticalMax) {\n                return \"ne-resize\";\n            } else {\n                return \"e-resize\";\n            }\n        } else if (horizontalMax) {\n            if (verticalMin) {\n                return \"sw-resize\";\n            } else if (verticalMax) {\n                return \"nw-resize\";\n            } else {\n                return \"w-resize\";\n            }\n        } else if (verticalMin) {\n            return \"s-resize\";\n        } else if (verticalMax) {\n            return \"n-resize\";\n        }\n    }\n    switch(state){\n        case \"horizontal\":\n            return \"ew-resize\";\n        case \"intersection\":\n            return \"move\";\n        case \"vertical\":\n            return \"ns-resize\";\n    }\n}\nfunction resetGlobalCursorStyle() {\n    if (styleElement !== null) {\n        document.head.removeChild(styleElement);\n        currentCursorStyle = null;\n        styleElement = null;\n        prevRuleIndex = -1;\n    }\n}\nfunction setGlobalCursorStyle(state, constraintFlags) {\n    var _styleElement$sheet$i, _styleElement$sheet2;\n    const style = getCursorStyle(state, constraintFlags);\n    if (currentCursorStyle === style) {\n        return;\n    }\n    currentCursorStyle = style;\n    if (styleElement === null) {\n        styleElement = document.createElement(\"style\");\n        document.head.appendChild(styleElement);\n    }\n    if (prevRuleIndex >= 0) {\n        var _styleElement$sheet;\n        (_styleElement$sheet = styleElement.sheet) === null || _styleElement$sheet === void 0 ? void 0 : _styleElement$sheet.removeRule(prevRuleIndex);\n    }\n    prevRuleIndex = (_styleElement$sheet$i = (_styleElement$sheet2 = styleElement.sheet) === null || _styleElement$sheet2 === void 0 ? void 0 : _styleElement$sheet2.insertRule(\"*{cursor: \".concat(style, \" !important;}\"))) !== null && _styleElement$sheet$i !== void 0 ? _styleElement$sheet$i : -1;\n}\nfunction isKeyDown(event) {\n    return event.type === \"keydown\";\n}\nfunction isPointerEvent(event) {\n    return event.type.startsWith(\"pointer\");\n}\nfunction isMouseEvent(event) {\n    return event.type.startsWith(\"mouse\");\n}\nfunction getResizeEventCoordinates(event) {\n    if (isPointerEvent(event)) {\n        if (event.isPrimary) {\n            return {\n                x: event.clientX,\n                y: event.clientY\n            };\n        }\n    } else if (isMouseEvent(event)) {\n        return {\n            x: event.clientX,\n            y: event.clientY\n        };\n    }\n    return {\n        x: Infinity,\n        y: Infinity\n    };\n}\nfunction getInputType() {\n    if (typeof matchMedia === \"function\") {\n        return matchMedia(\"(pointer:coarse)\").matches ? \"coarse\" : \"fine\";\n    }\n}\nfunction intersects(rectOne, rectTwo, strict) {\n    {\n        return rectOne.x < rectTwo.x + rectTwo.width && rectOne.x + rectOne.width > rectTwo.x && rectOne.y < rectTwo.y + rectTwo.height && rectOne.y + rectOne.height > rectTwo.y;\n    }\n}\nfunction compare(a, b) {\n    if (a === b) throw new Error(\"Cannot compare node with itself\");\n    const ancestors = {\n        a: get_ancestors(a),\n        b: get_ancestors(b)\n    };\n    let common_ancestor;\n    while(ancestors.a.at(-1) === ancestors.b.at(-1)){\n        a = ancestors.a.pop();\n        b = ancestors.b.pop();\n        common_ancestor = a;\n    }\n    assert(common_ancestor, \"Stacking order can only be calculated for elements with a common ancestor\");\n    const z_indexes = {\n        a: get_z_index(find_stacking_context(ancestors.a)),\n        b: get_z_index(find_stacking_context(ancestors.b))\n    };\n    if (z_indexes.a === z_indexes.b) {\n        const children = common_ancestor.childNodes;\n        const furthest_ancestors = {\n            a: ancestors.a.at(-1),\n            b: ancestors.b.at(-1)\n        };\n        let i = children.length;\n        while(i--){\n            const child = children[i];\n            if (child === furthest_ancestors.a) return 1;\n            if (child === furthest_ancestors.b) return -1;\n        }\n    }\n    return Math.sign(z_indexes.a - z_indexes.b);\n}\nconst props = /\\b(?:position|zIndex|opacity|transform|webkitTransform|mixBlendMode|filter|webkitFilter|isolation)\\b/;\nfunction is_flex_item(node) {\n    var _get_parent;\n    const display = getComputedStyle((_get_parent = get_parent(node)) !== null && _get_parent !== void 0 ? _get_parent : node).display;\n    return display === \"flex\" || display === \"inline-flex\";\n}\nfunction creates_stacking_context(node) {\n    const style = getComputedStyle(node);\n    if (style.position === \"fixed\") return true;\n    if (style.zIndex !== \"auto\" && (style.position !== \"static\" || is_flex_item(node))) return true;\n    if (+style.opacity < 1) return true;\n    if (\"transform\" in style && style.transform !== \"none\") return true;\n    if (\"webkitTransform\" in style && style.webkitTransform !== \"none\") return true;\n    if (\"mixBlendMode\" in style && style.mixBlendMode !== \"normal\") return true;\n    if (\"filter\" in style && style.filter !== \"none\") return true;\n    if (\"webkitFilter\" in style && style.webkitFilter !== \"none\") return true;\n    if (\"isolation\" in style && style.isolation === \"isolate\") return true;\n    if (props.test(style.willChange)) return true;\n    if (style.webkitOverflowScrolling === \"touch\") return true;\n    return false;\n}\nfunction find_stacking_context(nodes) {\n    let i = nodes.length;\n    while(i--){\n        const node = nodes[i];\n        assert(node, \"Missing node\");\n        if (creates_stacking_context(node)) return node;\n    }\n    return null;\n}\nfunction get_z_index(node) {\n    return node && Number(getComputedStyle(node).zIndex) || 0;\n}\nfunction get_ancestors(node) {\n    const ancestors = [];\n    while(node){\n        ancestors.push(node);\n        node = get_parent(node);\n    }\n    return ancestors;\n}\nfunction get_parent(node) {\n    const { parentNode } = node;\n    if (parentNode && parentNode instanceof ShadowRoot) {\n        return parentNode.host;\n    }\n    return parentNode;\n}\nconst EXCEEDED_HORIZONTAL_MIN = 1;\nconst EXCEEDED_HORIZONTAL_MAX = 2;\nconst EXCEEDED_VERTICAL_MIN = 4;\nconst EXCEEDED_VERTICAL_MAX = 8;\nconst isCoarsePointer = getInputType() === \"coarse\";\nlet intersectingHandles = [];\nlet isPointerDown = false;\nlet ownerDocumentCounts = /* @__PURE__ */ new Map();\nlet panelConstraintFlags = /* @__PURE__ */ new Map();\nconst registeredResizeHandlers = /* @__PURE__ */ new Set();\nfunction registerResizeHandle(resizeHandleId, element, direction, hitAreaMargins, setResizeHandlerState) {\n    var _ownerDocumentCounts$;\n    const { ownerDocument } = element;\n    const data = {\n        direction,\n        element,\n        hitAreaMargins,\n        setResizeHandlerState\n    };\n    const count2 = (_ownerDocumentCounts$ = ownerDocumentCounts.get(ownerDocument)) !== null && _ownerDocumentCounts$ !== void 0 ? _ownerDocumentCounts$ : 0;\n    ownerDocumentCounts.set(ownerDocument, count2 + 1);\n    registeredResizeHandlers.add(data);\n    updateListeners();\n    return function unregisterResizeHandle() {\n        var _ownerDocumentCounts$2;\n        panelConstraintFlags.delete(resizeHandleId);\n        registeredResizeHandlers.delete(data);\n        const count3 = (_ownerDocumentCounts$2 = ownerDocumentCounts.get(ownerDocument)) !== null && _ownerDocumentCounts$2 !== void 0 ? _ownerDocumentCounts$2 : 1;\n        ownerDocumentCounts.set(ownerDocument, count3 - 1);\n        updateListeners();\n        if (count3 === 1) {\n            ownerDocumentCounts.delete(ownerDocument);\n        }\n        if (intersectingHandles.includes(data)) {\n            const index2 = intersectingHandles.indexOf(data);\n            if (index2 >= 0) {\n                intersectingHandles.splice(index2, 1);\n            }\n            updateCursor();\n            setResizeHandlerState(\"up\", true, null);\n        }\n    };\n}\nfunction handlePointerDown(event) {\n    const { target } = event;\n    const { x, y } = getResizeEventCoordinates(event);\n    isPointerDown = true;\n    recalculateIntersectingHandles({\n        target,\n        x,\n        y\n    });\n    updateListeners();\n    if (intersectingHandles.length > 0) {\n        updateResizeHandlerStates(\"down\", event);\n        event.preventDefault();\n        if (!isWithinResizeHandle(target)) {\n            event.stopImmediatePropagation();\n        }\n    }\n}\nfunction handlePointerMove(event) {\n    const { x, y } = getResizeEventCoordinates(event);\n    if (isPointerDown && event.buttons === 0) {\n        isPointerDown = false;\n        updateResizeHandlerStates(\"up\", event);\n    }\n    if (!isPointerDown) {\n        const { target } = event;\n        recalculateIntersectingHandles({\n            target,\n            x,\n            y\n        });\n    }\n    updateResizeHandlerStates(\"move\", event);\n    updateCursor();\n    if (intersectingHandles.length > 0) {\n        event.preventDefault();\n    }\n}\nfunction handlePointerUp(event) {\n    const { target } = event;\n    const { x, y } = getResizeEventCoordinates(event);\n    panelConstraintFlags.clear();\n    isPointerDown = false;\n    if (intersectingHandles.length > 0) {\n        event.preventDefault();\n        if (!isWithinResizeHandle(target)) {\n            event.stopImmediatePropagation();\n        }\n    }\n    updateResizeHandlerStates(\"up\", event);\n    recalculateIntersectingHandles({\n        target,\n        x,\n        y\n    });\n    updateCursor();\n    updateListeners();\n}\nfunction isWithinResizeHandle(element) {\n    let currentElement = element;\n    while(currentElement){\n        if (currentElement.hasAttribute(DATA_ATTRIBUTES.resizeHandle)) {\n            return true;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return false;\n}\nfunction recalculateIntersectingHandles(param) {\n    let { target, x, y } = param;\n    intersectingHandles.splice(0);\n    let targetElement = null;\n    if (target instanceof HTMLElement || target instanceof SVGElement) {\n        targetElement = target;\n    }\n    registeredResizeHandlers.forEach((data)=>{\n        const { element: dragHandleElement, hitAreaMargins } = data;\n        const dragHandleRect = dragHandleElement.getBoundingClientRect();\n        const { bottom, left, right, top } = dragHandleRect;\n        const margin = isCoarsePointer ? hitAreaMargins.coarse : hitAreaMargins.fine;\n        const eventIntersects = x >= left - margin && x <= right + margin && y >= top - margin && y <= bottom + margin;\n        if (eventIntersects) {\n            if (targetElement !== null && document.contains(targetElement) && dragHandleElement !== targetElement && !dragHandleElement.contains(targetElement) && !targetElement.contains(dragHandleElement) && // Calculating stacking order has a cost, so we should avoid it if possible\n            // That is why we only check potentially intersecting handles,\n            // and why we skip if the event target is within the handle's DOM\n            compare(targetElement, dragHandleElement) > 0) {\n                let currentElement = targetElement;\n                let didIntersect = false;\n                while(currentElement){\n                    if (currentElement.contains(dragHandleElement)) {\n                        break;\n                    } else if (intersects(currentElement.getBoundingClientRect(), dragHandleRect)) {\n                        didIntersect = true;\n                        break;\n                    }\n                    currentElement = currentElement.parentElement;\n                }\n                if (didIntersect) {\n                    return;\n                }\n            }\n            intersectingHandles.push(data);\n        }\n    });\n}\nfunction reportConstraintsViolation(resizeHandleId, flag) {\n    panelConstraintFlags.set(resizeHandleId, flag);\n}\nfunction updateCursor() {\n    let intersectsHorizontal = false;\n    let intersectsVertical = false;\n    intersectingHandles.forEach((data)=>{\n        const { direction } = data;\n        if (direction === \"horizontal\") {\n            intersectsHorizontal = true;\n        } else {\n            intersectsVertical = true;\n        }\n    });\n    let constraintFlags = 0;\n    panelConstraintFlags.forEach((flag)=>{\n        constraintFlags |= flag;\n    });\n    if (intersectsHorizontal && intersectsVertical) {\n        setGlobalCursorStyle(\"intersection\", constraintFlags);\n    } else if (intersectsHorizontal) {\n        setGlobalCursorStyle(\"horizontal\", constraintFlags);\n    } else if (intersectsVertical) {\n        setGlobalCursorStyle(\"vertical\", constraintFlags);\n    } else {\n        resetGlobalCursorStyle();\n    }\n}\nlet listenersAbortController;\nfunction updateListeners() {\n    var _listenersAbortContro;\n    (_listenersAbortContro = listenersAbortController) === null || _listenersAbortContro === void 0 ? void 0 : _listenersAbortContro.abort();\n    listenersAbortController = new AbortController();\n    const options = {\n        capture: true,\n        signal: listenersAbortController.signal\n    };\n    if (!registeredResizeHandlers.size) {\n        return;\n    }\n    if (isPointerDown) {\n        if (intersectingHandles.length > 0) {\n            ownerDocumentCounts.forEach((count2, ownerDocument)=>{\n                const { body } = ownerDocument;\n                if (count2 > 0) {\n                    body.addEventListener(\"contextmenu\", handlePointerUp, options);\n                    body.addEventListener(\"pointerleave\", handlePointerMove, options);\n                    body.addEventListener(\"pointermove\", handlePointerMove, options);\n                }\n            });\n        }\n        ownerDocumentCounts.forEach((_, ownerDocument)=>{\n            const { body } = ownerDocument;\n            body.addEventListener(\"pointerup\", handlePointerUp, options);\n            body.addEventListener(\"pointercancel\", handlePointerUp, options);\n        });\n    } else {\n        ownerDocumentCounts.forEach((count2, ownerDocument)=>{\n            const { body } = ownerDocument;\n            if (count2 > 0) {\n                body.addEventListener(\"pointerdown\", handlePointerDown, options);\n                body.addEventListener(\"pointermove\", handlePointerMove, options);\n            }\n        });\n    }\n}\nfunction updateResizeHandlerStates(action, event) {\n    registeredResizeHandlers.forEach((data)=>{\n        const { setResizeHandlerState } = data;\n        const isActive = intersectingHandles.includes(data);\n        setResizeHandlerState(action, isActive, event);\n    });\n}\nfunction useForceUpdate() {\n    _s102();\n    const [_, setCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"useForceUpdate.useCallback\": ()=>setCount({\n                \"useForceUpdate.useCallback\": (prevCount)=>prevCount + 1\n            }[\"useForceUpdate.useCallback\"])\n    }[\"useForceUpdate.useCallback\"], []);\n}\n_s102(useForceUpdate, \"hK0aq9UN0HzpEoHK7IWVvEbt2Ko=\");\nfunction assert(expectedCondition, message) {\n    if (!expectedCondition) {\n        console.error(message);\n        throw Error(message);\n    }\n}\nfunction fuzzyCompareNumbers(actual, expected) {\n    let fractionDigits = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : PRECISION;\n    if (actual.toFixed(fractionDigits) === expected.toFixed(fractionDigits)) {\n        return 0;\n    } else {\n        return actual > expected ? 1 : -1;\n    }\n}\nfunction fuzzyNumbersEqual$1(actual, expected) {\n    let fractionDigits = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : PRECISION;\n    return fuzzyCompareNumbers(actual, expected, fractionDigits) === 0;\n}\nfunction fuzzyNumbersEqual(actual, expected, fractionDigits) {\n    return fuzzyCompareNumbers(actual, expected, fractionDigits) === 0;\n}\nfunction fuzzyLayoutsEqual(actual, expected, fractionDigits) {\n    if (actual.length !== expected.length) {\n        return false;\n    }\n    for(let index2 = 0; index2 < actual.length; index2++){\n        const actualSize = actual[index2];\n        const expectedSize = expected[index2];\n        if (!fuzzyNumbersEqual(actualSize, expectedSize, fractionDigits)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction resizePanel(param) {\n    let { panelConstraints: panelConstraintsArray, panelIndex, size: size2 } = param;\n    const panelConstraints = panelConstraintsArray[panelIndex];\n    assert(panelConstraints != null, \"Panel constraints not found for index \".concat(panelIndex));\n    let { collapsedSize = 0, collapsible, maxSize = 100, minSize = 0 } = panelConstraints;\n    if (fuzzyCompareNumbers(size2, minSize) < 0) {\n        if (collapsible) {\n            const halfwayPoint = (collapsedSize + minSize) / 2;\n            if (fuzzyCompareNumbers(size2, halfwayPoint) < 0) {\n                size2 = collapsedSize;\n            } else {\n                size2 = minSize;\n            }\n        } else {\n            size2 = minSize;\n        }\n    }\n    size2 = Math.min(maxSize, size2);\n    size2 = parseFloat(size2.toFixed(PRECISION));\n    return size2;\n}\nfunction adjustLayoutByDelta(param) {\n    let { delta, initialLayout, panelConstraints: panelConstraintsArray, pivotIndices, prevLayout, trigger } = param;\n    if (fuzzyNumbersEqual(delta, 0)) {\n        return initialLayout;\n    }\n    const nextLayout = [\n        ...initialLayout\n    ];\n    const [firstPivotIndex, secondPivotIndex] = pivotIndices;\n    assert(firstPivotIndex != null, \"Invalid first pivot index\");\n    assert(secondPivotIndex != null, \"Invalid second pivot index\");\n    let deltaApplied = 0;\n    {\n        if (trigger === \"keyboard\") {\n            {\n                const index2 = delta < 0 ? secondPivotIndex : firstPivotIndex;\n                const panelConstraints = panelConstraintsArray[index2];\n                assert(panelConstraints, \"Panel constraints not found for index \".concat(index2));\n                const { collapsedSize = 0, collapsible, minSize = 0 } = panelConstraints;\n                if (collapsible) {\n                    const prevSize = initialLayout[index2];\n                    assert(prevSize != null, \"Previous layout not found for panel index \".concat(index2));\n                    if (fuzzyNumbersEqual(prevSize, collapsedSize)) {\n                        const localDelta = minSize - prevSize;\n                        if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n                            delta = delta < 0 ? 0 - localDelta : localDelta;\n                        }\n                    }\n                }\n            }\n            {\n                const index2 = delta < 0 ? firstPivotIndex : secondPivotIndex;\n                const panelConstraints = panelConstraintsArray[index2];\n                assert(panelConstraints, \"No panel constraints found for index \".concat(index2));\n                const { collapsedSize = 0, collapsible, minSize = 0 } = panelConstraints;\n                if (collapsible) {\n                    const prevSize = initialLayout[index2];\n                    assert(prevSize != null, \"Previous layout not found for panel index \".concat(index2));\n                    if (fuzzyNumbersEqual(prevSize, minSize)) {\n                        const localDelta = prevSize - collapsedSize;\n                        if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n                            delta = delta < 0 ? 0 - localDelta : localDelta;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    {\n        const increment = delta < 0 ? 1 : -1;\n        let index2 = delta < 0 ? secondPivotIndex : firstPivotIndex;\n        let maxAvailableDelta = 0;\n        while(true){\n            const prevSize = initialLayout[index2];\n            assert(prevSize != null, \"Previous layout not found for panel index \".concat(index2));\n            const maxSafeSize = resizePanel({\n                panelConstraints: panelConstraintsArray,\n                panelIndex: index2,\n                size: 100\n            });\n            const delta2 = maxSafeSize - prevSize;\n            maxAvailableDelta += delta2;\n            index2 += increment;\n            if (index2 < 0 || index2 >= panelConstraintsArray.length) {\n                break;\n            }\n        }\n        const minAbsDelta = Math.min(Math.abs(delta), Math.abs(maxAvailableDelta));\n        delta = delta < 0 ? 0 - minAbsDelta : minAbsDelta;\n    }\n    {\n        const pivotIndex = delta < 0 ? firstPivotIndex : secondPivotIndex;\n        let index2 = pivotIndex;\n        while(index2 >= 0 && index2 < panelConstraintsArray.length){\n            const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied);\n            const prevSize = initialLayout[index2];\n            assert(prevSize != null, \"Previous layout not found for panel index \".concat(index2));\n            const unsafeSize = prevSize - deltaRemaining;\n            const safeSize = resizePanel({\n                panelConstraints: panelConstraintsArray,\n                panelIndex: index2,\n                size: unsafeSize\n            });\n            if (!fuzzyNumbersEqual(prevSize, safeSize)) {\n                deltaApplied += prevSize - safeSize;\n                nextLayout[index2] = safeSize;\n                if (deltaApplied.toPrecision(3).localeCompare(Math.abs(delta).toPrecision(3), void 0, {\n                    numeric: true\n                }) >= 0) {\n                    break;\n                }\n            }\n            if (delta < 0) {\n                index2--;\n            } else {\n                index2++;\n            }\n        }\n    }\n    if (fuzzyLayoutsEqual(prevLayout, nextLayout)) {\n        return prevLayout;\n    }\n    {\n        const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n        const prevSize = initialLayout[pivotIndex];\n        assert(prevSize != null, \"Previous layout not found for panel index \".concat(pivotIndex));\n        const unsafeSize = prevSize + deltaApplied;\n        const safeSize = resizePanel({\n            panelConstraints: panelConstraintsArray,\n            panelIndex: pivotIndex,\n            size: unsafeSize\n        });\n        nextLayout[pivotIndex] = safeSize;\n        if (!fuzzyNumbersEqual(safeSize, unsafeSize)) {\n            let deltaRemaining = unsafeSize - safeSize;\n            const pivotIndex2 = delta < 0 ? secondPivotIndex : firstPivotIndex;\n            let index2 = pivotIndex2;\n            while(index2 >= 0 && index2 < panelConstraintsArray.length){\n                const prevSize2 = nextLayout[index2];\n                assert(prevSize2 != null, \"Previous layout not found for panel index \".concat(index2));\n                const unsafeSize2 = prevSize2 + deltaRemaining;\n                const safeSize2 = resizePanel({\n                    panelConstraints: panelConstraintsArray,\n                    panelIndex: index2,\n                    size: unsafeSize2\n                });\n                if (!fuzzyNumbersEqual(prevSize2, safeSize2)) {\n                    deltaRemaining -= safeSize2 - prevSize2;\n                    nextLayout[index2] = safeSize2;\n                }\n                if (fuzzyNumbersEqual(deltaRemaining, 0)) {\n                    break;\n                }\n                if (delta > 0) {\n                    index2--;\n                } else {\n                    index2++;\n                }\n            }\n        }\n    }\n    const totalSize = nextLayout.reduce((total, size2)=>size2 + total, 0);\n    if (!fuzzyNumbersEqual(totalSize, 100)) {\n        return prevLayout;\n    }\n    return nextLayout;\n}\nfunction calculateAriaValues(param) {\n    let { layout, panelsArray, pivotIndices } = param;\n    let currentMinSize = 0;\n    let currentMaxSize = 100;\n    let totalMinSize = 0;\n    let totalMaxSize = 0;\n    const firstIndex = pivotIndices[0];\n    assert(firstIndex != null, \"No pivot index found\");\n    panelsArray.forEach((panelData, index2)=>{\n        const { constraints } = panelData;\n        const { maxSize = 100, minSize = 0 } = constraints;\n        if (index2 === firstIndex) {\n            currentMinSize = minSize;\n            currentMaxSize = maxSize;\n        } else {\n            totalMinSize += minSize;\n            totalMaxSize += maxSize;\n        }\n    });\n    const valueMax = Math.min(currentMaxSize, 100 - totalMinSize);\n    const valueMin = Math.max(currentMinSize, 100 - totalMaxSize);\n    const valueNow = layout[firstIndex];\n    return {\n        valueMax,\n        valueMin,\n        valueNow\n    };\n}\nfunction getResizeHandleElementsForGroup(groupId) {\n    let scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;\n    return Array.from(scope.querySelectorAll(\"[\".concat(DATA_ATTRIBUTES.resizeHandleId, '][data-panel-group-id=\"').concat(groupId, '\"]')));\n}\nfunction getResizeHandleElementIndex(groupId, id) {\n    let scope = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : document;\n    const handles = getResizeHandleElementsForGroup(groupId, scope);\n    const index2 = handles.findIndex((handle)=>handle.getAttribute(DATA_ATTRIBUTES.resizeHandleId) === id);\n    return index2 !== null && index2 !== void 0 ? index2 : null;\n}\nfunction determinePivotIndices(groupId, dragHandleId, panelGroupElement) {\n    const index2 = getResizeHandleElementIndex(groupId, dragHandleId, panelGroupElement);\n    return index2 != null ? [\n        index2,\n        index2 + 1\n    ] : [\n        -1,\n        -1\n    ];\n}\nfunction isHTMLElement(target) {\n    if (target instanceof HTMLElement) {\n        return true;\n    }\n    return typeof target === \"object\" && target !== null && \"tagName\" in target && \"getAttribute\" in target;\n}\nfunction getPanelGroupElement(id) {\n    let rootElement = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;\n    if (isHTMLElement(rootElement) && rootElement.dataset.panelGroupId == id) {\n        return rootElement;\n    }\n    const element = rootElement.querySelector('[data-panel-group][data-panel-group-id=\"'.concat(id, '\"]'));\n    if (element) {\n        return element;\n    }\n    return null;\n}\nfunction getResizeHandleElement(id) {\n    let scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;\n    const element = scope.querySelector(\"[\".concat(DATA_ATTRIBUTES.resizeHandleId, '=\"').concat(id, '\"]'));\n    if (element) {\n        return element;\n    }\n    return null;\n}\nfunction getResizeHandlePanelIds(groupId, handleId, panelsArray) {\n    let scope = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : document;\n    var _panelsArray$index$id, _panelsArray$index, _panelsArray$id, _panelsArray;\n    const handle = getResizeHandleElement(handleId, scope);\n    const handles = getResizeHandleElementsForGroup(groupId, scope);\n    const index2 = handle ? handles.indexOf(handle) : -1;\n    const idBefore = (_panelsArray$index$id = (_panelsArray$index = panelsArray[index2]) === null || _panelsArray$index === void 0 ? void 0 : _panelsArray$index.id) !== null && _panelsArray$index$id !== void 0 ? _panelsArray$index$id : null;\n    const idAfter = (_panelsArray$id = (_panelsArray = panelsArray[index2 + 1]) === null || _panelsArray === void 0 ? void 0 : _panelsArray.id) !== null && _panelsArray$id !== void 0 ? _panelsArray$id : null;\n    return [\n        idBefore,\n        idAfter\n    ];\n}\nfunction useWindowSplitterPanelGroupBehavior(param) {\n    let { committedValuesRef, eagerValuesRef, groupId, layout, panelDataArray, panelGroupElement, setLayout } = param;\n    _s103();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        didWarnAboutMissingResizeHandle: false\n    });\n    useIsomorphicLayoutEffect({\n        \"useWindowSplitterPanelGroupBehavior.useIsomorphicLayoutEffect\": ()=>{\n            if (!panelGroupElement) {\n                return;\n            }\n            const resizeHandleElements = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n            for(let index2 = 0; index2 < panelDataArray.length - 1; index2++){\n                const { valueMax, valueMin, valueNow } = calculateAriaValues({\n                    layout,\n                    panelsArray: panelDataArray,\n                    pivotIndices: [\n                        index2,\n                        index2 + 1\n                    ]\n                });\n                const resizeHandleElement = resizeHandleElements[index2];\n                if (resizeHandleElement == null) ;\n                else {\n                    const panelData = panelDataArray[index2];\n                    assert(panelData, 'No panel data found for index \"'.concat(index2, '\"'));\n                    resizeHandleElement.setAttribute(\"aria-controls\", panelData.id);\n                    resizeHandleElement.setAttribute(\"aria-valuemax\", \"\" + Math.round(valueMax));\n                    resizeHandleElement.setAttribute(\"aria-valuemin\", \"\" + Math.round(valueMin));\n                    resizeHandleElement.setAttribute(\"aria-valuenow\", valueNow != null ? \"\" + Math.round(valueNow) : \"\");\n                }\n            }\n            return ({\n                \"useWindowSplitterPanelGroupBehavior.useIsomorphicLayoutEffect\": ()=>{\n                    resizeHandleElements.forEach({\n                        \"useWindowSplitterPanelGroupBehavior.useIsomorphicLayoutEffect\": (resizeHandleElement, index2)=>{\n                            resizeHandleElement.removeAttribute(\"aria-controls\");\n                            resizeHandleElement.removeAttribute(\"aria-valuemax\");\n                            resizeHandleElement.removeAttribute(\"aria-valuemin\");\n                            resizeHandleElement.removeAttribute(\"aria-valuenow\");\n                        }\n                    }[\"useWindowSplitterPanelGroupBehavior.useIsomorphicLayoutEffect\"]);\n                }\n            })[\"useWindowSplitterPanelGroupBehavior.useIsomorphicLayoutEffect\"];\n        }\n    }[\"useWindowSplitterPanelGroupBehavior.useIsomorphicLayoutEffect\"], [\n        groupId,\n        layout,\n        panelDataArray,\n        panelGroupElement\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"useWindowSplitterPanelGroupBehavior.useEffect\": ()=>{\n            if (!panelGroupElement) {\n                return;\n            }\n            const eagerValues = eagerValuesRef.current;\n            assert(eagerValues, \"Eager values not found\");\n            const { panelDataArray: panelDataArray2 } = eagerValues;\n            const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n            assert(groupElement != null, 'No group found for id \"'.concat(groupId, '\"'));\n            const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n            assert(handles, 'No resize handles found for group id \"'.concat(groupId, '\"'));\n            const cleanupFunctions = handles.map({\n                \"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions\": (handle)=>{\n                    const handleId = handle.getAttribute(DATA_ATTRIBUTES.resizeHandleId);\n                    assert(handleId, \"Resize handle element has no handle id attribute\");\n                    const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelDataArray2, panelGroupElement);\n                    if (idBefore == null || idAfter == null) {\n                        return ({\n                            \"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions\": ()=>{}\n                        })[\"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions\"];\n                    }\n                    const onKeyDown = {\n                        \"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions.onKeyDown\": (event)=>{\n                            if (event.defaultPrevented) {\n                                return;\n                            }\n                            switch(event.key){\n                                case \"Enter\":\n                                    {\n                                        event.preventDefault();\n                                        const index2 = panelDataArray2.findIndex({\n                                            \"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions.onKeyDown.index2\": (panelData)=>panelData.id === idBefore\n                                        }[\"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions.onKeyDown.index2\"]);\n                                        if (index2 >= 0) {\n                                            const panelData = panelDataArray2[index2];\n                                            assert(panelData, \"No panel data found for index \".concat(index2));\n                                            const size2 = layout[index2];\n                                            const { collapsedSize = 0, collapsible, minSize = 0 } = panelData.constraints;\n                                            if (size2 != null && collapsible) {\n                                                const nextLayout = adjustLayoutByDelta({\n                                                    delta: fuzzyNumbersEqual(size2, collapsedSize) ? minSize - collapsedSize : collapsedSize - size2,\n                                                    initialLayout: layout,\n                                                    panelConstraints: panelDataArray2.map({\n                                                        \"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions.onKeyDown.nextLayout\": (panelData2)=>panelData2.constraints\n                                                    }[\"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions.onKeyDown.nextLayout\"]),\n                                                    pivotIndices: determinePivotIndices(groupId, handleId, panelGroupElement),\n                                                    prevLayout: layout,\n                                                    trigger: \"keyboard\"\n                                                });\n                                                if (layout !== nextLayout) {\n                                                    setLayout(nextLayout);\n                                                }\n                                            }\n                                        }\n                                        break;\n                                    }\n                            }\n                        }\n                    }[\"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions.onKeyDown\"];\n                    handle.addEventListener(\"keydown\", onKeyDown);\n                    return ({\n                        \"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions\": ()=>{\n                            handle.removeEventListener(\"keydown\", onKeyDown);\n                        }\n                    })[\"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions\"];\n                }\n            }[\"useWindowSplitterPanelGroupBehavior.useEffect.cleanupFunctions\"]);\n            return ({\n                \"useWindowSplitterPanelGroupBehavior.useEffect\": ()=>{\n                    cleanupFunctions.forEach({\n                        \"useWindowSplitterPanelGroupBehavior.useEffect\": (cleanupFunction)=>cleanupFunction()\n                    }[\"useWindowSplitterPanelGroupBehavior.useEffect\"]);\n                }\n            })[\"useWindowSplitterPanelGroupBehavior.useEffect\"];\n        }\n    }[\"useWindowSplitterPanelGroupBehavior.useEffect\"], [\n        panelGroupElement,\n        committedValuesRef,\n        eagerValuesRef,\n        groupId,\n        layout,\n        panelDataArray,\n        setLayout\n    ]);\n}\n_s103(useWindowSplitterPanelGroupBehavior, \"HCcuh0eQxyZNi4Ij/0bVplqnOLc=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect\n    ];\n});\nfunction areEqual(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n    for(let index2 = 0; index2 < arrayA.length; index2++){\n        if (arrayA[index2] !== arrayB[index2]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getResizeEventCursorPosition(direction, event) {\n    const isHorizontal = direction === \"horizontal\";\n    const { x, y } = getResizeEventCoordinates(event);\n    return isHorizontal ? x : y;\n}\nfunction calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement) {\n    const isHorizontal = direction === \"horizontal\";\n    const handleElement = getResizeHandleElement(dragHandleId, panelGroupElement);\n    assert(handleElement, 'No resize handle element found for id \"'.concat(dragHandleId, '\"'));\n    const groupId = handleElement.getAttribute(DATA_ATTRIBUTES.groupId);\n    assert(groupId, \"Resize handle element has no group id attribute\");\n    let { initialCursorPosition } = initialDragState;\n    const cursorPosition = getResizeEventCursorPosition(direction, event);\n    const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n    assert(groupElement, 'No group element found for id \"'.concat(groupId, '\"'));\n    const groupRect = groupElement.getBoundingClientRect();\n    const groupSizeInPixels = isHorizontal ? groupRect.width : groupRect.height;\n    const offsetPixels = cursorPosition - initialCursorPosition;\n    const offsetPercentage = offsetPixels / groupSizeInPixels * 100;\n    return offsetPercentage;\n}\nfunction calculateDeltaPercentage(event, dragHandleId, direction, initialDragState, keyboardResizeBy, panelGroupElement) {\n    if (isKeyDown(event)) {\n        const isHorizontal = direction === \"horizontal\";\n        let delta = 0;\n        if (event.shiftKey) {\n            delta = 100;\n        } else if (keyboardResizeBy != null) {\n            delta = keyboardResizeBy;\n        } else {\n            delta = 10;\n        }\n        let movement = 0;\n        switch(event.key){\n            case \"ArrowDown\":\n                movement = isHorizontal ? 0 : delta;\n                break;\n            case \"ArrowLeft\":\n                movement = isHorizontal ? -delta : 0;\n                break;\n            case \"ArrowRight\":\n                movement = isHorizontal ? delta : 0;\n                break;\n            case \"ArrowUp\":\n                movement = isHorizontal ? 0 : -delta;\n                break;\n            case \"End\":\n                movement = 100;\n                break;\n            case \"Home\":\n                movement = -100;\n                break;\n        }\n        return movement;\n    } else {\n        if (initialDragState == null) {\n            return 0;\n        }\n        return calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement);\n    }\n}\nfunction calculateUnsafeDefaultLayout(param) {\n    let { panelDataArray } = param;\n    const layout = Array(panelDataArray.length);\n    const panelConstraintsArray = panelDataArray.map((panelData)=>panelData.constraints);\n    let numPanelsWithSizes = 0;\n    let remainingSize = 100;\n    for(let index2 = 0; index2 < panelDataArray.length; index2++){\n        const panelConstraints = panelConstraintsArray[index2];\n        assert(panelConstraints, \"Panel constraints not found for index \".concat(index2));\n        const { defaultSize } = panelConstraints;\n        if (defaultSize != null) {\n            numPanelsWithSizes++;\n            layout[index2] = defaultSize;\n            remainingSize -= defaultSize;\n        }\n    }\n    for(let index2 = 0; index2 < panelDataArray.length; index2++){\n        const panelConstraints = panelConstraintsArray[index2];\n        assert(panelConstraints, \"Panel constraints not found for index \".concat(index2));\n        const { defaultSize } = panelConstraints;\n        if (defaultSize != null) {\n            continue;\n        }\n        const numRemainingPanels = panelDataArray.length - numPanelsWithSizes;\n        const size2 = remainingSize / numRemainingPanels;\n        numPanelsWithSizes++;\n        layout[index2] = size2;\n        remainingSize -= size2;\n    }\n    return layout;\n}\nfunction callPanelCallbacks(panelsArray, layout, panelIdToLastNotifiedSizeMap) {\n    layout.forEach((size2, index2)=>{\n        const panelData = panelsArray[index2];\n        assert(panelData, \"Panel data not found for index \".concat(index2));\n        const { callbacks, constraints, id: panelId } = panelData;\n        const { collapsedSize = 0, collapsible } = constraints;\n        const lastNotifiedSize = panelIdToLastNotifiedSizeMap[panelId];\n        if (lastNotifiedSize == null || size2 !== lastNotifiedSize) {\n            panelIdToLastNotifiedSizeMap[panelId] = size2;\n            const { onCollapse, onExpand, onResize } = callbacks;\n            if (onResize) {\n                onResize(size2, lastNotifiedSize);\n            }\n            if (collapsible && (onCollapse || onExpand)) {\n                if (onExpand && (lastNotifiedSize == null || fuzzyNumbersEqual$1(lastNotifiedSize, collapsedSize)) && !fuzzyNumbersEqual$1(size2, collapsedSize)) {\n                    onExpand();\n                }\n                if (onCollapse && (lastNotifiedSize == null || !fuzzyNumbersEqual$1(lastNotifiedSize, collapsedSize)) && fuzzyNumbersEqual$1(size2, collapsedSize)) {\n                    onCollapse();\n                }\n            }\n        }\n    });\n}\nfunction compareLayouts(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    } else {\n        for(let index2 = 0; index2 < a.length; index2++){\n            if (a[index2] != b[index2]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction computePanelFlexBoxStyle(param) {\n    let { defaultSize, dragState, layout, panelData, panelIndex, precision = 3 } = param;\n    const size2 = layout[panelIndex];\n    let flexGrow;\n    if (size2 == null) {\n        flexGrow = defaultSize != void 0 ? defaultSize.toPrecision(precision) : \"1\";\n    } else if (panelData.length === 1) {\n        flexGrow = \"1\";\n    } else {\n        flexGrow = size2.toPrecision(precision);\n    }\n    return {\n        flexBasis: 0,\n        flexGrow,\n        flexShrink: 1,\n        // Without this, Panel sizes may be unintentionally overridden by their content\n        overflow: \"hidden\",\n        // Disable pointer events inside of a panel during resize\n        // This avoid edge cases like nested iframes\n        pointerEvents: dragState !== null ? \"none\" : void 0\n    };\n}\nfunction debounce(callback) {\n    let durationMs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    let timeoutId = null;\n    let callable = function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (timeoutId !== null) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(()=>{\n            callback(...args);\n        }, durationMs);\n    };\n    return callable;\n}\nfunction initializeDefaultStorage(storageObject) {\n    try {\n        if (typeof localStorage !== \"undefined\") {\n            storageObject.getItem = (name)=>{\n                return localStorage.getItem(name);\n            };\n            storageObject.setItem = (name, value1)=>{\n                localStorage.setItem(name, value1);\n            };\n        } else {\n            throw new Error(\"localStorage not supported in this environment\");\n        }\n    } catch (error) {\n        console.error(error);\n        storageObject.getItem = ()=>null;\n        storageObject.setItem = ()=>{};\n    }\n}\nfunction getPanelGroupKey(autoSaveId) {\n    return \"react-resizable-panels:\".concat(autoSaveId);\n}\nfunction getPanelKey(panels) {\n    return panels.map((panel)=>{\n        const { constraints, id, idIsFromProps, order } = panel;\n        if (idIsFromProps) {\n            return id;\n        } else {\n            return order ? \"\".concat(order, \":\").concat(JSON.stringify(constraints)) : JSON.stringify(constraints);\n        }\n    }).sort((a, b)=>a.localeCompare(b)).join(\",\");\n}\nfunction loadSerializedPanelGroupState(autoSaveId, storage) {\n    try {\n        const panelGroupKey = getPanelGroupKey(autoSaveId);\n        const serialized = storage.getItem(panelGroupKey);\n        if (serialized) {\n            const parsed = JSON.parse(serialized);\n            if (typeof parsed === \"object\" && parsed != null) {\n                return parsed;\n            }\n        }\n    } catch (error) {}\n    return null;\n}\nfunction loadPanelGroupState(autoSaveId, panels, storage) {\n    var _loadSerializedPanelG, _state$panelKey;\n    const state = (_loadSerializedPanelG = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG !== void 0 ? _loadSerializedPanelG : {};\n    const panelKey = getPanelKey(panels);\n    return (_state$panelKey = state[panelKey]) !== null && _state$panelKey !== void 0 ? _state$panelKey : null;\n}\nfunction savePanelGroupState(autoSaveId, panels, panelSizesBeforeCollapse, sizes, storage) {\n    var _loadSerializedPanelG2;\n    const panelGroupKey = getPanelGroupKey(autoSaveId);\n    const panelKey = getPanelKey(panels);\n    const state = (_loadSerializedPanelG2 = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG2 !== void 0 ? _loadSerializedPanelG2 : {};\n    state[panelKey] = {\n        expandToSizes: Object.fromEntries(panelSizesBeforeCollapse.entries()),\n        layout: sizes\n    };\n    try {\n        storage.setItem(panelGroupKey, JSON.stringify(state));\n    } catch (error) {\n        console.error(error);\n    }\n}\nfunction validatePanelGroupLayout(param) {\n    let { layout: prevLayout, panelConstraints } = param;\n    const nextLayout = [\n        ...prevLayout\n    ];\n    const nextLayoutTotalSize = nextLayout.reduce((accumulated, current)=>accumulated + current, 0);\n    if (nextLayout.length !== panelConstraints.length) {\n        throw Error(\"Invalid \".concat(panelConstraints.length, \" panel layout: \").concat(nextLayout.map((size2)=>\"\".concat(size2, \"%\")).join(\", \")));\n    } else if (!fuzzyNumbersEqual(nextLayoutTotalSize, 100) && nextLayout.length > 0) {\n        for(let index2 = 0; index2 < panelConstraints.length; index2++){\n            const unsafeSize = nextLayout[index2];\n            assert(unsafeSize != null, \"No layout data found for index \".concat(index2));\n            const safeSize = 100 / nextLayoutTotalSize * unsafeSize;\n            nextLayout[index2] = safeSize;\n        }\n    }\n    let remainingSize = 0;\n    for(let index2 = 0; index2 < panelConstraints.length; index2++){\n        const unsafeSize = nextLayout[index2];\n        assert(unsafeSize != null, \"No layout data found for index \".concat(index2));\n        const safeSize = resizePanel({\n            panelConstraints,\n            panelIndex: index2,\n            size: unsafeSize\n        });\n        if (unsafeSize != safeSize) {\n            remainingSize += unsafeSize - safeSize;\n            nextLayout[index2] = safeSize;\n        }\n    }\n    if (!fuzzyNumbersEqual(remainingSize, 0)) {\n        for(let index2 = 0; index2 < panelConstraints.length; index2++){\n            const prevSize = nextLayout[index2];\n            assert(prevSize != null, \"No layout data found for index \".concat(index2));\n            const unsafeSize = prevSize + remainingSize;\n            const safeSize = resizePanel({\n                panelConstraints,\n                panelIndex: index2,\n                size: unsafeSize\n            });\n            if (prevSize !== safeSize) {\n                remainingSize -= safeSize - prevSize;\n                nextLayout[index2] = safeSize;\n                if (fuzzyNumbersEqual(remainingSize, 0)) {\n                    break;\n                }\n            }\n        }\n    }\n    return nextLayout;\n}\nconst LOCAL_STORAGE_DEBOUNCE_INTERVAL = 100;\nconst defaultStorage = {\n    getItem: (name)=>{\n        initializeDefaultStorage(defaultStorage);\n        return defaultStorage.getItem(name);\n    },\n    setItem: (name, value1)=>{\n        initializeDefaultStorage(defaultStorage);\n        defaultStorage.setItem(name, value1);\n    }\n};\nconst debounceMap = {};\nfunction PanelGroupWithForwardedRef(param) {\n    let { autoSaveId = null, children, className: classNameFromProps = \"\", direction, forwardedRef, id: idFromProps = null, onLayout = null, keyboardResizeBy = null, storage = defaultStorage, style: styleFromProps, tagName: Type = \"div\", ...rest } = param;\n    _s104();\n    const groupId = useUniqueId(idFromProps);\n    const panelGroupElementRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [dragState, setDragState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [layout, setLayout] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const forceUpdate = useForceUpdate();\n    const panelIdToLastNotifiedSizeMapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const panelSizeBeforeCollapseRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(/* @__PURE__ */ new Map());\n    const prevDeltaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const committedValuesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        autoSaveId,\n        direction,\n        dragState,\n        id: groupId,\n        keyboardResizeBy,\n        onLayout,\n        storage\n    });\n    const eagerValuesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        layout,\n        panelDataArray: [],\n        panelDataArrayChanged: false\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        didLogIdAndOrderWarning: false,\n        didLogPanelConstraintsWarning: false,\n        prevPanelIds: []\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle)(forwardedRef, {\n        \"PanelGroupWithForwardedRef.useImperativeHandle\": ()=>({\n                getId: ({\n                    \"PanelGroupWithForwardedRef.useImperativeHandle\": ()=>committedValuesRef.current.id\n                })[\"PanelGroupWithForwardedRef.useImperativeHandle\"],\n                getLayout: ({\n                    \"PanelGroupWithForwardedRef.useImperativeHandle\": ()=>{\n                        const { layout: layout2 } = eagerValuesRef.current;\n                        return layout2;\n                    }\n                })[\"PanelGroupWithForwardedRef.useImperativeHandle\"],\n                setLayout: ({\n                    \"PanelGroupWithForwardedRef.useImperativeHandle\": (unsafeLayout)=>{\n                        const { onLayout: onLayout2 } = committedValuesRef.current;\n                        const { layout: prevLayout, panelDataArray } = eagerValuesRef.current;\n                        const safeLayout = validatePanelGroupLayout({\n                            layout: unsafeLayout,\n                            panelConstraints: panelDataArray.map({\n                                \"PanelGroupWithForwardedRef.useImperativeHandle.safeLayout\": (panelData)=>panelData.constraints\n                            }[\"PanelGroupWithForwardedRef.useImperativeHandle.safeLayout\"])\n                        });\n                        if (!areEqual(prevLayout, safeLayout)) {\n                            setLayout(safeLayout);\n                            eagerValuesRef.current.layout = safeLayout;\n                            if (onLayout2) {\n                                onLayout2(safeLayout);\n                            }\n                            callPanelCallbacks(panelDataArray, safeLayout, panelIdToLastNotifiedSizeMapRef.current);\n                        }\n                    }\n                })[\"PanelGroupWithForwardedRef.useImperativeHandle\"]\n            })\n    }[\"PanelGroupWithForwardedRef.useImperativeHandle\"], []);\n    useIsomorphicLayoutEffect({\n        \"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\": ()=>{\n            committedValuesRef.current.autoSaveId = autoSaveId;\n            committedValuesRef.current.direction = direction;\n            committedValuesRef.current.dragState = dragState;\n            committedValuesRef.current.id = groupId;\n            committedValuesRef.current.onLayout = onLayout;\n            committedValuesRef.current.storage = storage;\n        }\n    }[\"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\"]);\n    useWindowSplitterPanelGroupBehavior({\n        committedValuesRef,\n        eagerValuesRef,\n        groupId,\n        layout,\n        panelDataArray: eagerValuesRef.current.panelDataArray,\n        setLayout,\n        panelGroupElement: panelGroupElementRef.current\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PanelGroupWithForwardedRef.useEffect\": ()=>{\n            const { panelDataArray } = eagerValuesRef.current;\n            if (autoSaveId) {\n                if (layout.length === 0 || layout.length !== panelDataArray.length) {\n                    return;\n                }\n                let debouncedSave = debounceMap[autoSaveId];\n                if (debouncedSave == null) {\n                    debouncedSave = debounce(savePanelGroupState, LOCAL_STORAGE_DEBOUNCE_INTERVAL);\n                    debounceMap[autoSaveId] = debouncedSave;\n                }\n                const clonedPanelDataArray = [\n                    ...panelDataArray\n                ];\n                const clonedPanelSizesBeforeCollapse = new Map(panelSizeBeforeCollapseRef.current);\n                debouncedSave(autoSaveId, clonedPanelDataArray, clonedPanelSizesBeforeCollapse, layout, storage);\n            }\n        }\n    }[\"PanelGroupWithForwardedRef.useEffect\"], [\n        autoSaveId,\n        layout,\n        storage\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PanelGroupWithForwardedRef.useEffect\": ()=>{}\n    }[\"PanelGroupWithForwardedRef.useEffect\"]);\n    const collapsePanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[collapsePanel]\": (panelData)=>{\n            const { onLayout: onLayout2 } = committedValuesRef.current;\n            const { layout: prevLayout, panelDataArray } = eagerValuesRef.current;\n            if (panelData.constraints.collapsible) {\n                const panelConstraintsArray = panelDataArray.map({\n                    \"PanelGroupWithForwardedRef.useCallback[collapsePanel].panelConstraintsArray\": (panelData2)=>panelData2.constraints\n                }[\"PanelGroupWithForwardedRef.useCallback[collapsePanel].panelConstraintsArray\"]);\n                const { collapsedSize = 0, panelSize, pivotIndices } = panelDataHelper(panelDataArray, panelData, prevLayout);\n                assert(panelSize != null, 'Panel size not found for panel \"'.concat(panelData.id, '\"'));\n                if (!fuzzyNumbersEqual$1(panelSize, collapsedSize)) {\n                    panelSizeBeforeCollapseRef.current.set(panelData.id, panelSize);\n                    const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n                    const delta = isLastPanel ? panelSize - collapsedSize : collapsedSize - panelSize;\n                    const nextLayout = adjustLayoutByDelta({\n                        delta,\n                        initialLayout: prevLayout,\n                        panelConstraints: panelConstraintsArray,\n                        pivotIndices,\n                        prevLayout,\n                        trigger: \"imperative-api\"\n                    });\n                    if (!compareLayouts(prevLayout, nextLayout)) {\n                        setLayout(nextLayout);\n                        eagerValuesRef.current.layout = nextLayout;\n                        if (onLayout2) {\n                            onLayout2(nextLayout);\n                        }\n                        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n                    }\n                }\n            }\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[collapsePanel]\"], []);\n    const expandPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[expandPanel]\": (panelData, minSizeOverride)=>{\n            const { onLayout: onLayout2 } = committedValuesRef.current;\n            const { layout: prevLayout, panelDataArray } = eagerValuesRef.current;\n            if (panelData.constraints.collapsible) {\n                const panelConstraintsArray = panelDataArray.map({\n                    \"PanelGroupWithForwardedRef.useCallback[expandPanel].panelConstraintsArray\": (panelData2)=>panelData2.constraints\n                }[\"PanelGroupWithForwardedRef.useCallback[expandPanel].panelConstraintsArray\"]);\n                const { collapsedSize = 0, panelSize = 0, minSize: minSizeFromProps = 0, pivotIndices } = panelDataHelper(panelDataArray, panelData, prevLayout);\n                const minSize = minSizeOverride !== null && minSizeOverride !== void 0 ? minSizeOverride : minSizeFromProps;\n                if (fuzzyNumbersEqual$1(panelSize, collapsedSize)) {\n                    const prevPanelSize = panelSizeBeforeCollapseRef.current.get(panelData.id);\n                    const baseSize = prevPanelSize != null && prevPanelSize >= minSize ? prevPanelSize : minSize;\n                    const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n                    const delta = isLastPanel ? panelSize - baseSize : baseSize - panelSize;\n                    const nextLayout = adjustLayoutByDelta({\n                        delta,\n                        initialLayout: prevLayout,\n                        panelConstraints: panelConstraintsArray,\n                        pivotIndices,\n                        prevLayout,\n                        trigger: \"imperative-api\"\n                    });\n                    if (!compareLayouts(prevLayout, nextLayout)) {\n                        setLayout(nextLayout);\n                        eagerValuesRef.current.layout = nextLayout;\n                        if (onLayout2) {\n                            onLayout2(nextLayout);\n                        }\n                        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n                    }\n                }\n            }\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[expandPanel]\"], []);\n    const getPanelSize = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[getPanelSize]\": (panelData)=>{\n            const { layout: layout2, panelDataArray } = eagerValuesRef.current;\n            const { panelSize } = panelDataHelper(panelDataArray, panelData, layout2);\n            assert(panelSize != null, 'Panel size not found for panel \"'.concat(panelData.id, '\"'));\n            return panelSize;\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[getPanelSize]\"], []);\n    const getPanelStyle = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[getPanelStyle]\": (panelData, defaultSize)=>{\n            const { panelDataArray } = eagerValuesRef.current;\n            const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n            return computePanelFlexBoxStyle({\n                defaultSize,\n                dragState,\n                layout,\n                panelData: panelDataArray,\n                panelIndex\n            });\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[getPanelStyle]\"], [\n        dragState,\n        layout\n    ]);\n    const isPanelCollapsed = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[isPanelCollapsed]\": (panelData)=>{\n            const { layout: layout2, panelDataArray } = eagerValuesRef.current;\n            const { collapsedSize = 0, collapsible, panelSize } = panelDataHelper(panelDataArray, panelData, layout2);\n            assert(panelSize != null, 'Panel size not found for panel \"'.concat(panelData.id, '\"'));\n            return collapsible === true && fuzzyNumbersEqual$1(panelSize, collapsedSize);\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[isPanelCollapsed]\"], []);\n    const isPanelExpanded = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[isPanelExpanded]\": (panelData)=>{\n            const { layout: layout2, panelDataArray } = eagerValuesRef.current;\n            const { collapsedSize = 0, collapsible, panelSize } = panelDataHelper(panelDataArray, panelData, layout2);\n            assert(panelSize != null, 'Panel size not found for panel \"'.concat(panelData.id, '\"'));\n            return !collapsible || fuzzyCompareNumbers(panelSize, collapsedSize) > 0;\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[isPanelExpanded]\"], []);\n    const registerPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[registerPanel]\": (panelData)=>{\n            const { panelDataArray } = eagerValuesRef.current;\n            panelDataArray.push(panelData);\n            panelDataArray.sort({\n                \"PanelGroupWithForwardedRef.useCallback[registerPanel]\": (panelA, panelB)=>{\n                    const orderA = panelA.order;\n                    const orderB = panelB.order;\n                    if (orderA == null && orderB == null) {\n                        return 0;\n                    } else if (orderA == null) {\n                        return -1;\n                    } else if (orderB == null) {\n                        return 1;\n                    } else {\n                        return orderA - orderB;\n                    }\n                }\n            }[\"PanelGroupWithForwardedRef.useCallback[registerPanel]\"]);\n            eagerValuesRef.current.panelDataArrayChanged = true;\n            forceUpdate();\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[registerPanel]\"], [\n        forceUpdate\n    ]);\n    useIsomorphicLayoutEffect({\n        \"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\": ()=>{\n            if (eagerValuesRef.current.panelDataArrayChanged) {\n                eagerValuesRef.current.panelDataArrayChanged = false;\n                const { autoSaveId: autoSaveId2, onLayout: onLayout2, storage: storage2 } = committedValuesRef.current;\n                const { layout: prevLayout, panelDataArray } = eagerValuesRef.current;\n                let unsafeLayout = null;\n                if (autoSaveId2) {\n                    const state = loadPanelGroupState(autoSaveId2, panelDataArray, storage2);\n                    if (state) {\n                        panelSizeBeforeCollapseRef.current = new Map(Object.entries(state.expandToSizes));\n                        unsafeLayout = state.layout;\n                    }\n                }\n                if (unsafeLayout == null) {\n                    unsafeLayout = calculateUnsafeDefaultLayout({\n                        panelDataArray\n                    });\n                }\n                const nextLayout = validatePanelGroupLayout({\n                    layout: unsafeLayout,\n                    panelConstraints: panelDataArray.map({\n                        \"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect.nextLayout\": (panelData)=>panelData.constraints\n                    }[\"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect.nextLayout\"])\n                });\n                if (!areEqual(prevLayout, nextLayout)) {\n                    setLayout(nextLayout);\n                    eagerValuesRef.current.layout = nextLayout;\n                    if (onLayout2) {\n                        onLayout2(nextLayout);\n                    }\n                    callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n                }\n            }\n        }\n    }[\"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\"]);\n    useIsomorphicLayoutEffect({\n        \"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\": ()=>{\n            const eagerValues = eagerValuesRef.current;\n            return ({\n                \"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\": ()=>{\n                    eagerValues.layout = [];\n                }\n            })[\"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\"];\n        }\n    }[\"PanelGroupWithForwardedRef.useIsomorphicLayoutEffect\"], []);\n    const registerResizeHandle2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[registerResizeHandle2]\": (dragHandleId)=>{\n            let isRTL2 = false;\n            const panelGroupElement = panelGroupElementRef.current;\n            if (panelGroupElement) {\n                const style2 = window.getComputedStyle(panelGroupElement, null);\n                if (style2.getPropertyValue(\"direction\") === \"rtl\") {\n                    isRTL2 = true;\n                }\n            }\n            return function resizeHandler(event) {\n                event.preventDefault();\n                const panelGroupElement2 = panelGroupElementRef.current;\n                if (!panelGroupElement2) {\n                    return ({\n                        \"PanelGroupWithForwardedRef.useCallback[registerResizeHandle2].resizeHandler\": ()=>null\n                    })[\"PanelGroupWithForwardedRef.useCallback[registerResizeHandle2].resizeHandler\"];\n                }\n                const { direction: direction2, dragState: dragState2, id: groupId2, keyboardResizeBy: keyboardResizeBy2, onLayout: onLayout2 } = committedValuesRef.current;\n                const { layout: prevLayout, panelDataArray } = eagerValuesRef.current;\n                const { initialLayout } = dragState2 !== null && dragState2 !== void 0 ? dragState2 : {};\n                const pivotIndices = determinePivotIndices(groupId2, dragHandleId, panelGroupElement2);\n                let delta = calculateDeltaPercentage(event, dragHandleId, direction2, dragState2, keyboardResizeBy2, panelGroupElement2);\n                const isHorizontal = direction2 === \"horizontal\";\n                if (isHorizontal && isRTL2) {\n                    delta = -delta;\n                }\n                const panelConstraints = panelDataArray.map({\n                    \"PanelGroupWithForwardedRef.useCallback[registerResizeHandle2].resizeHandler.panelConstraints\": (panelData)=>panelData.constraints\n                }[\"PanelGroupWithForwardedRef.useCallback[registerResizeHandle2].resizeHandler.panelConstraints\"]);\n                const nextLayout = adjustLayoutByDelta({\n                    delta,\n                    initialLayout: initialLayout !== null && initialLayout !== void 0 ? initialLayout : prevLayout,\n                    panelConstraints,\n                    pivotIndices,\n                    prevLayout,\n                    trigger: isKeyDown(event) ? \"keyboard\" : \"mouse-or-touch\"\n                });\n                const layoutChanged = !compareLayouts(prevLayout, nextLayout);\n                if (isPointerEvent(event) || isMouseEvent(event)) {\n                    if (prevDeltaRef.current != delta) {\n                        prevDeltaRef.current = delta;\n                        if (!layoutChanged && delta !== 0) {\n                            if (isHorizontal) {\n                                reportConstraintsViolation(dragHandleId, delta < 0 ? EXCEEDED_HORIZONTAL_MIN : EXCEEDED_HORIZONTAL_MAX);\n                            } else {\n                                reportConstraintsViolation(dragHandleId, delta < 0 ? EXCEEDED_VERTICAL_MIN : EXCEEDED_VERTICAL_MAX);\n                            }\n                        } else {\n                            reportConstraintsViolation(dragHandleId, 0);\n                        }\n                    }\n                }\n                if (layoutChanged) {\n                    setLayout(nextLayout);\n                    eagerValuesRef.current.layout = nextLayout;\n                    if (onLayout2) {\n                        onLayout2(nextLayout);\n                    }\n                    callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n                }\n            };\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[registerResizeHandle2]\"], []);\n    const resizePanel2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[resizePanel2]\": (panelData, unsafePanelSize)=>{\n            const { onLayout: onLayout2 } = committedValuesRef.current;\n            const { layout: prevLayout, panelDataArray } = eagerValuesRef.current;\n            const panelConstraintsArray = panelDataArray.map({\n                \"PanelGroupWithForwardedRef.useCallback[resizePanel2].panelConstraintsArray\": (panelData2)=>panelData2.constraints\n            }[\"PanelGroupWithForwardedRef.useCallback[resizePanel2].panelConstraintsArray\"]);\n            const { panelSize, pivotIndices } = panelDataHelper(panelDataArray, panelData, prevLayout);\n            assert(panelSize != null, 'Panel size not found for panel \"'.concat(panelData.id, '\"'));\n            const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n            const delta = isLastPanel ? panelSize - unsafePanelSize : unsafePanelSize - panelSize;\n            const nextLayout = adjustLayoutByDelta({\n                delta,\n                initialLayout: prevLayout,\n                panelConstraints: panelConstraintsArray,\n                pivotIndices,\n                prevLayout,\n                trigger: \"imperative-api\"\n            });\n            if (!compareLayouts(prevLayout, nextLayout)) {\n                setLayout(nextLayout);\n                eagerValuesRef.current.layout = nextLayout;\n                if (onLayout2) {\n                    onLayout2(nextLayout);\n                }\n                callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n            }\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[resizePanel2]\"], []);\n    const reevaluatePanelConstraints = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[reevaluatePanelConstraints]\": (panelData, prevConstraints)=>{\n            const { layout: layout2, panelDataArray } = eagerValuesRef.current;\n            const { collapsedSize: prevCollapsedSize = 0, collapsible: prevCollapsible } = prevConstraints;\n            const { collapsedSize: nextCollapsedSize = 0, collapsible: nextCollapsible, maxSize: nextMaxSize = 100, minSize: nextMinSize = 0 } = panelData.constraints;\n            const { panelSize: prevPanelSize } = panelDataHelper(panelDataArray, panelData, layout2);\n            if (prevPanelSize == null) {\n                return;\n            }\n            if (prevCollapsible && nextCollapsible && fuzzyNumbersEqual$1(prevPanelSize, prevCollapsedSize)) {\n                if (!fuzzyNumbersEqual$1(prevCollapsedSize, nextCollapsedSize)) {\n                    resizePanel2(panelData, nextCollapsedSize);\n                }\n            } else if (prevPanelSize < nextMinSize) {\n                resizePanel2(panelData, nextMinSize);\n            } else if (prevPanelSize > nextMaxSize) {\n                resizePanel2(panelData, nextMaxSize);\n            }\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[reevaluatePanelConstraints]\"], [\n        resizePanel2\n    ]);\n    const startDragging = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[startDragging]\": (dragHandleId, event)=>{\n            const { direction: direction2 } = committedValuesRef.current;\n            const { layout: layout2 } = eagerValuesRef.current;\n            if (!panelGroupElementRef.current) {\n                return;\n            }\n            const handleElement = getResizeHandleElement(dragHandleId, panelGroupElementRef.current);\n            assert(handleElement, 'Drag handle element not found for id \"'.concat(dragHandleId, '\"'));\n            const initialCursorPosition = getResizeEventCursorPosition(direction2, event);\n            setDragState({\n                dragHandleId,\n                dragHandleRect: handleElement.getBoundingClientRect(),\n                initialCursorPosition,\n                initialLayout: layout2\n            });\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[startDragging]\"], []);\n    const stopDragging = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[stopDragging]\": ()=>{\n            setDragState(null);\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[stopDragging]\"], []);\n    const unregisterPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"PanelGroupWithForwardedRef.useCallback[unregisterPanel]\": (panelData)=>{\n            const { panelDataArray } = eagerValuesRef.current;\n            const index2 = findPanelDataIndex(panelDataArray, panelData);\n            if (index2 >= 0) {\n                panelDataArray.splice(index2, 1);\n                delete panelIdToLastNotifiedSizeMapRef.current[panelData.id];\n                eagerValuesRef.current.panelDataArrayChanged = true;\n                forceUpdate();\n            }\n        }\n    }[\"PanelGroupWithForwardedRef.useCallback[unregisterPanel]\"], [\n        forceUpdate\n    ]);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"PanelGroupWithForwardedRef.useMemo[context]\": ()=>({\n                collapsePanel,\n                direction,\n                dragState,\n                expandPanel,\n                getPanelSize,\n                getPanelStyle,\n                groupId,\n                isPanelCollapsed,\n                isPanelExpanded,\n                reevaluatePanelConstraints,\n                registerPanel,\n                registerResizeHandle: registerResizeHandle2,\n                resizePanel: resizePanel2,\n                startDragging,\n                stopDragging,\n                unregisterPanel,\n                panelGroupElement: panelGroupElementRef.current\n            })\n    }[\"PanelGroupWithForwardedRef.useMemo[context]\"], [\n        collapsePanel,\n        dragState,\n        direction,\n        expandPanel,\n        getPanelSize,\n        getPanelStyle,\n        groupId,\n        isPanelCollapsed,\n        isPanelExpanded,\n        reevaluatePanelConstraints,\n        registerPanel,\n        registerResizeHandle2,\n        resizePanel2,\n        startDragging,\n        stopDragging,\n        unregisterPanel\n    ]);\n    const style = {\n        display: \"flex\",\n        flexDirection: direction === \"horizontal\" ? \"row\" : \"column\",\n        height: \"100%\",\n        overflow: \"hidden\",\n        width: \"100%\"\n    };\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(PanelGroupContext.Provider, {\n        value: context\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(Type, {\n        ...rest,\n        children,\n        className: classNameFromProps,\n        id: idFromProps,\n        ref: panelGroupElementRef,\n        style: {\n            ...style,\n            ...styleFromProps\n        },\n        // CSS selectors\n        [DATA_ATTRIBUTES.group]: \"\",\n        [DATA_ATTRIBUTES.groupDirection]: direction,\n        [DATA_ATTRIBUTES.groupId]: groupId\n    }));\n}\n_s104(PanelGroupWithForwardedRef, \"IHEXX3QNG3GFFPG285CsORYJAus=\", false, function() {\n    return [\n        useUniqueId,\n        useForceUpdate,\n        useIsomorphicLayoutEffect,\n        useWindowSplitterPanelGroupBehavior,\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect\n    ];\n});\n_c205 = PanelGroupWithForwardedRef;\nconst PanelGroup = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props2, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(PanelGroupWithForwardedRef, {\n        ...props2,\n        forwardedRef: ref\n    }));\n_c206 = PanelGroup;\nPanelGroupWithForwardedRef.displayName = \"PanelGroup\";\nPanelGroup.displayName = \"forwardRef(PanelGroup)\";\nfunction findPanelDataIndex(panelDataArray, panelData) {\n    return panelDataArray.findIndex((prevPanelData)=>prevPanelData === panelData || prevPanelData.id === panelData.id);\n}\nfunction panelDataHelper(panelDataArray, panelData, layout) {\n    const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n    const isLastPanel = panelIndex === panelDataArray.length - 1;\n    const pivotIndices = isLastPanel ? [\n        panelIndex - 1,\n        panelIndex\n    ] : [\n        panelIndex,\n        panelIndex + 1\n    ];\n    const panelSize = layout[panelIndex];\n    return {\n        ...panelData.constraints,\n        panelSize,\n        pivotIndices\n    };\n}\nfunction useWindowSplitterResizeHandlerBehavior(param) {\n    let { disabled, handleId, resizeHandler, panelGroupElement } = param;\n    _s105();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"useWindowSplitterResizeHandlerBehavior.useEffect\": ()=>{\n            if (disabled || resizeHandler == null || panelGroupElement == null) {\n                return;\n            }\n            const handleElement = getResizeHandleElement(handleId, panelGroupElement);\n            if (handleElement == null) {\n                return;\n            }\n            const onKeyDown = {\n                \"useWindowSplitterResizeHandlerBehavior.useEffect.onKeyDown\": (event)=>{\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n                    switch(event.key){\n                        case \"ArrowDown\":\n                        case \"ArrowLeft\":\n                        case \"ArrowRight\":\n                        case \"ArrowUp\":\n                        case \"End\":\n                        case \"Home\":\n                            {\n                                event.preventDefault();\n                                resizeHandler(event);\n                                break;\n                            }\n                        case \"F6\":\n                            {\n                                event.preventDefault();\n                                const groupId = handleElement.getAttribute(DATA_ATTRIBUTES.groupId);\n                                assert(groupId, 'No group element found for id \"'.concat(groupId, '\"'));\n                                const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n                                const index2 = getResizeHandleElementIndex(groupId, handleId, panelGroupElement);\n                                assert(index2 !== null, 'No resize element found for id \"'.concat(handleId, '\"'));\n                                const nextIndex = event.shiftKey ? index2 > 0 ? index2 - 1 : handles.length - 1 : index2 + 1 < handles.length ? index2 + 1 : 0;\n                                const nextHandle = handles[nextIndex];\n                                nextHandle.focus();\n                                break;\n                            }\n                    }\n                }\n            }[\"useWindowSplitterResizeHandlerBehavior.useEffect.onKeyDown\"];\n            handleElement.addEventListener(\"keydown\", onKeyDown);\n            return ({\n                \"useWindowSplitterResizeHandlerBehavior.useEffect\": ()=>{\n                    handleElement.removeEventListener(\"keydown\", onKeyDown);\n                }\n            })[\"useWindowSplitterResizeHandlerBehavior.useEffect\"];\n        }\n    }[\"useWindowSplitterResizeHandlerBehavior.useEffect\"], [\n        panelGroupElement,\n        disabled,\n        handleId,\n        resizeHandler\n    ]);\n}\n_s105(useWindowSplitterResizeHandlerBehavior, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nfunction PanelResizeHandle(param) {\n    let { children = null, className: classNameFromProps = \"\", disabled = false, hitAreaMargins, id: idFromProps, onBlur, onClick, onDragging, onFocus, onPointerDown, onPointerUp, style: styleFromProps = {}, tabIndex = 0, tagName: Type = \"div\", ...rest } = param;\n    _s106();\n    var _hitAreaMargins$coars, _hitAreaMargins$fine;\n    const elementRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const callbacksRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        onClick,\n        onDragging,\n        onPointerDown,\n        onPointerUp\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PanelResizeHandle.useEffect\": ()=>{\n            callbacksRef.current.onClick = onClick;\n            callbacksRef.current.onDragging = onDragging;\n            callbacksRef.current.onPointerDown = onPointerDown;\n            callbacksRef.current.onPointerUp = onPointerUp;\n        }\n    }[\"PanelResizeHandle.useEffect\"]);\n    const panelGroupContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PanelGroupContext);\n    if (panelGroupContext === null) {\n        throw Error(\"PanelResizeHandle components must be rendered within a PanelGroup container\");\n    }\n    const { direction, groupId, registerResizeHandle: registerResizeHandleWithParentGroup, startDragging, stopDragging, panelGroupElement } = panelGroupContext;\n    const resizeHandleId = useUniqueId(idFromProps);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"inactive\");\n    const [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [resizeHandler, setResizeHandler] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const committedValuesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        state\n    });\n    useIsomorphicLayoutEffect({\n        \"PanelResizeHandle.useIsomorphicLayoutEffect\": ()=>{\n            committedValuesRef.current.state = state;\n        }\n    }[\"PanelResizeHandle.useIsomorphicLayoutEffect\"]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PanelResizeHandle.useEffect\": ()=>{\n            if (disabled) {\n                setResizeHandler(null);\n            } else {\n                const resizeHandler2 = registerResizeHandleWithParentGroup(resizeHandleId);\n                setResizeHandler({\n                    \"PanelResizeHandle.useEffect\": ()=>resizeHandler2\n                }[\"PanelResizeHandle.useEffect\"]);\n            }\n        }\n    }[\"PanelResizeHandle.useEffect\"], [\n        disabled,\n        resizeHandleId,\n        registerResizeHandleWithParentGroup\n    ]);\n    const coarseHitAreaMargins = (_hitAreaMargins$coars = hitAreaMargins === null || hitAreaMargins === void 0 ? void 0 : hitAreaMargins.coarse) !== null && _hitAreaMargins$coars !== void 0 ? _hitAreaMargins$coars : 15;\n    const fineHitAreaMargins = (_hitAreaMargins$fine = hitAreaMargins === null || hitAreaMargins === void 0 ? void 0 : hitAreaMargins.fine) !== null && _hitAreaMargins$fine !== void 0 ? _hitAreaMargins$fine : 5;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PanelResizeHandle.useEffect\": ()=>{\n            if (disabled || resizeHandler == null) {\n                return;\n            }\n            const element = elementRef.current;\n            assert(element, \"Element ref not attached\");\n            let didMove = false;\n            const setResizeHandlerState = {\n                \"PanelResizeHandle.useEffect.setResizeHandlerState\": (action, isActive, event)=>{\n                    if (!isActive) {\n                        setState(\"inactive\");\n                        return;\n                    }\n                    switch(action){\n                        case \"down\":\n                            {\n                                setState(\"drag\");\n                                didMove = false;\n                                assert(event, 'Expected event to be defined for \"down\" action');\n                                startDragging(resizeHandleId, event);\n                                const { onDragging: onDragging2, onPointerDown: onPointerDown2 } = callbacksRef.current;\n                                onDragging2 === null || onDragging2 === void 0 ? void 0 : onDragging2(true);\n                                onPointerDown2 === null || onPointerDown2 === void 0 ? void 0 : onPointerDown2();\n                                break;\n                            }\n                        case \"move\":\n                            {\n                                const { state: state2 } = committedValuesRef.current;\n                                didMove = true;\n                                if (state2 !== \"drag\") {\n                                    setState(\"hover\");\n                                }\n                                assert(event, 'Expected event to be defined for \"move\" action');\n                                resizeHandler(event);\n                                break;\n                            }\n                        case \"up\":\n                            {\n                                setState(\"hover\");\n                                stopDragging();\n                                const { onClick: onClick2, onDragging: onDragging2, onPointerUp: onPointerUp2 } = callbacksRef.current;\n                                onDragging2 === null || onDragging2 === void 0 ? void 0 : onDragging2(false);\n                                onPointerUp2 === null || onPointerUp2 === void 0 ? void 0 : onPointerUp2();\n                                if (!didMove) {\n                                    onClick2 === null || onClick2 === void 0 ? void 0 : onClick2();\n                                }\n                                break;\n                            }\n                    }\n                }\n            }[\"PanelResizeHandle.useEffect.setResizeHandlerState\"];\n            return registerResizeHandle(resizeHandleId, element, direction, {\n                coarse: coarseHitAreaMargins,\n                fine: fineHitAreaMargins\n            }, setResizeHandlerState);\n        }\n    }[\"PanelResizeHandle.useEffect\"], [\n        coarseHitAreaMargins,\n        direction,\n        disabled,\n        fineHitAreaMargins,\n        registerResizeHandleWithParentGroup,\n        resizeHandleId,\n        resizeHandler,\n        startDragging,\n        stopDragging\n    ]);\n    useWindowSplitterResizeHandlerBehavior({\n        disabled,\n        handleId: resizeHandleId,\n        resizeHandler,\n        panelGroupElement\n    });\n    const style = {\n        touchAction: \"none\",\n        userSelect: \"none\"\n    };\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(Type, {\n        ...rest,\n        children,\n        className: classNameFromProps,\n        id: idFromProps,\n        onBlur: ()=>{\n            setIsFocused(false);\n            onBlur === null || onBlur === void 0 ? void 0 : onBlur();\n        },\n        onFocus: ()=>{\n            setIsFocused(true);\n            onFocus === null || onFocus === void 0 ? void 0 : onFocus();\n        },\n        ref: elementRef,\n        role: \"separator\",\n        style: {\n            ...style,\n            ...styleFromProps\n        },\n        tabIndex,\n        // CSS selectors\n        [DATA_ATTRIBUTES.groupDirection]: direction,\n        [DATA_ATTRIBUTES.groupId]: groupId,\n        [DATA_ATTRIBUTES.resizeHandle]: \"\",\n        [DATA_ATTRIBUTES.resizeHandleActive]: state === \"drag\" ? \"pointer\" : isFocused ? \"keyboard\" : void 0,\n        [DATA_ATTRIBUTES.resizeHandleEnabled]: !disabled,\n        [DATA_ATTRIBUTES.resizeHandleId]: resizeHandleId,\n        [DATA_ATTRIBUTES.resizeHandleState]: state\n    });\n}\n_s106(PanelResizeHandle, \"+Q3pQUuvJSQiAYVKl8s01O1u3SA=\", false, function() {\n    return [\n        useUniqueId,\n        useIsomorphicLayoutEffect,\n        useWindowSplitterResizeHandlerBehavior\n    ];\n});\n_c207 = PanelResizeHandle;\nPanelResizeHandle.displayName = \"PanelResizeHandle\";\nfunction ResizablePanelGroup(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelGroup, {\n        \"data-slot\": \"resizable-panel-group\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:h-full vkui:w-full vkui:data-[panel-group-direction=vertical]:flex-col\", className),\n        ...props2\n    });\n}\n_c208 = ResizablePanelGroup;\nfunction ResizablePanel(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Panel, {\n        \"data-slot\": \"resizable-panel\",\n        ...props2\n    });\n}\n_c209 = ResizablePanel;\nfunction ResizableHandle(param) {\n    let { withHandle, className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelResizeHandle, {\n        \"data-slot\": \"resizable-handle\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:focus-visible:ring-ring vkui:relative vkui:flex vkui:w-px vkui:items-center vkui:justify-center vkui:after:absolute vkui:after:inset-y-0 vkui:after:left-1/2 vkui:after:w-1 vkui:after:-translate-x-1/2 vkui:focus-visible:ring-1 vkui:focus-visible:ring-offset-1 focus-visible:outline-hidden vkui:data-[panel-group-direction=vertical]:h-px vkui:data-[panel-group-direction=vertical]:w-full vkui:data-[panel-group-direction=vertical]:after:left-0 vkui:data-[panel-group-direction=vertical]:after:h-1 vkui:data-[panel-group-direction=vertical]:after:w-full vkui:data-[panel-group-direction=vertical]:after:-translate-y-1/2 vkui:data-[panel-group-direction=vertical]:after:translate-x-0 vkui:[&[data-panel-group-direction=vertical]>div]:rotate-90\", className),\n        ...props2,\n        children: withHandle && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:border-transparent vkui:z-10 vkui:flex vkui:h-8 vkui:w-4 vkui:items-center vkui:justify-center vkui:rounded-xs vkui:border\", {\n                \"vkui:h-4 vkui:w-8\": props2[\"aria-orientation\"] === \"horizontal\"\n            }),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EllipsisVerticalIcon, {\n                size: 16\n            })\n        })\n    });\n}\n_c210 = ResizableHandle;\nvar TABS_NAME = \"Tabs\";\nvar [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [\n    createRovingFocusGroupScope\n]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);\nvar Tabs$1 = /*#__PURE__*/ _s107(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c211 = _s107((props2, forwardedRef)=>{\n    _s107();\n    const { __scopeTabs, value: valueProp, onValueChange, defaultValue, orientation = \"horizontal\", dir, activationMode = \"automatic\", ...tabsProps } = props2;\n    const direction = useDirection(dir);\n    const [value1, setValue] = useControllableState({\n        prop: valueProp,\n        onChange: onValueChange,\n        defaultProp: defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"\",\n        caller: TABS_NAME\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsProvider, {\n        scope: __scopeTabs,\n        baseId: useId$1(),\n        value: value1,\n        onValueChange: setValue,\n        orientation,\n        dir: direction,\n        activationMode,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n            dir: direction,\n            \"data-orientation\": orientation,\n            ...tabsProps,\n            ref: forwardedRef\n        })\n    });\n}, \"WEKWvXRa0JWW3igCjl7c3QN0aKE=\", false, function() {\n    return [\n        useDirection,\n        useControllableState,\n        useId$1\n    ];\n})), \"WEKWvXRa0JWW3igCjl7c3QN0aKE=\", false, function() {\n    return [\n        useDirection,\n        useControllableState,\n        useId$1\n    ];\n});\n_c212 = Tabs$1;\nTabs$1.displayName = TABS_NAME;\nvar TAB_LIST_NAME = \"TabsList\";\nvar TabsList$1 = /*#__PURE__*/ _s108(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c213 = _s108((props2, forwardedRef)=>{\n    _s108();\n    const { __scopeTabs, loop = true, ...listProps } = props2;\n    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root, {\n        asChild: true,\n        ...rovingFocusGroupScope,\n        orientation: context.orientation,\n        dir: context.dir,\n        loop,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n            role: \"tablist\",\n            \"aria-orientation\": context.orientation,\n            ...listProps,\n            ref: forwardedRef\n        })\n    });\n}, \"cfHyu4or5otFl074mR2f59Tyt4o=\", false, function() {\n    return [\n        useTabsContext,\n        useRovingFocusGroupScope\n    ];\n})), \"cfHyu4or5otFl074mR2f59Tyt4o=\", false, function() {\n    return [\n        useTabsContext,\n        useRovingFocusGroupScope\n    ];\n});\n_c214 = TabsList$1;\nTabsList$1.displayName = TAB_LIST_NAME;\nvar TRIGGER_NAME$1 = \"TabsTrigger\";\nvar TabsTrigger$1 = /*#__PURE__*/ _s109(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c215 = _s109((props2, forwardedRef)=>{\n    _s109();\n    const { __scopeTabs, value: value1, disabled = false, ...triggerProps } = props2;\n    const context = useTabsContext(TRIGGER_NAME$1, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value1);\n    const contentId = makeContentId(context.baseId, value1);\n    const isSelected = value1 === context.value;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Item, {\n        asChild: true,\n        ...rovingFocusGroupScope,\n        focusable: !disabled,\n        active: isSelected,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.button, {\n            type: \"button\",\n            role: \"tab\",\n            \"aria-selected\": isSelected,\n            \"aria-controls\": contentId,\n            \"data-state\": isSelected ? \"active\" : \"inactive\",\n            \"data-disabled\": disabled ? \"\" : void 0,\n            disabled,\n            id: triggerId,\n            ...triggerProps,\n            ref: forwardedRef,\n            onMouseDown: composeEventHandlers(props2.onMouseDown, (event)=>{\n                if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                    context.onValueChange(value1);\n                } else {\n                    event.preventDefault();\n                }\n            }),\n            onKeyDown: composeEventHandlers(props2.onKeyDown, (event)=>{\n                if ([\n                    \" \",\n                    \"Enter\"\n                ].includes(event.key)) context.onValueChange(value1);\n            }),\n            onFocus: composeEventHandlers(props2.onFocus, ()=>{\n                const isAutomaticActivation = context.activationMode !== \"manual\";\n                if (!isSelected && !disabled && isAutomaticActivation) {\n                    context.onValueChange(value1);\n                }\n            })\n        })\n    });\n}, \"cfHyu4or5otFl074mR2f59Tyt4o=\", false, function() {\n    return [\n        useTabsContext,\n        useRovingFocusGroupScope\n    ];\n})), \"cfHyu4or5otFl074mR2f59Tyt4o=\", false, function() {\n    return [\n        useTabsContext,\n        useRovingFocusGroupScope\n    ];\n});\n_c216 = TabsTrigger$1;\nTabsTrigger$1.displayName = TRIGGER_NAME$1;\nvar CONTENT_NAME$1 = \"TabsContent\";\nvar TabsContent$1 = /*#__PURE__*/ _s110(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c217 = _s110((props2, forwardedRef)=>{\n    _s110();\n    const { __scopeTabs, value: value1, forceMount, children, ...contentProps } = props2;\n    const context = useTabsContext(CONTENT_NAME$1, __scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value1);\n    const contentId = makeContentId(context.baseId, value1);\n    const isSelected = value1 === context.value;\n    const isMountAnimationPreventedRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(isSelected);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TabsContent$1.useEffect\": ()=>{\n            const rAF = requestAnimationFrame({\n                \"TabsContent$1.useEffect.rAF\": ()=>isMountAnimationPreventedRef.current = false\n            }[\"TabsContent$1.useEffect.rAF\"]);\n            return ({\n                \"TabsContent$1.useEffect\": ()=>cancelAnimationFrame(rAF)\n            })[\"TabsContent$1.useEffect\"];\n        }\n    }[\"TabsContent$1.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n        present: forceMount || isSelected,\n        children: (param)=>{\n            let { present } = param;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.div, {\n                \"data-state\": isSelected ? \"active\" : \"inactive\",\n                \"data-orientation\": context.orientation,\n                role: \"tabpanel\",\n                \"aria-labelledby\": triggerId,\n                hidden: !present,\n                id: contentId,\n                tabIndex: 0,\n                ...contentProps,\n                ref: forwardedRef,\n                style: {\n                    ...props2.style,\n                    animationDuration: isMountAnimationPreventedRef.current ? \"0s\" : void 0\n                },\n                children: present && children\n            });\n        }\n    });\n}, \"5pMsgA+tqKL6NmsG701SW7bTmuc=\", false, function() {\n    return [\n        useTabsContext\n    ];\n})), \"5pMsgA+tqKL6NmsG701SW7bTmuc=\", false, function() {\n    return [\n        useTabsContext\n    ];\n});\n_c218 = TabsContent$1;\nTabsContent$1.displayName = CONTENT_NAME$1;\nfunction makeTriggerId(baseId, value1) {\n    return \"\".concat(baseId, \"-trigger-\").concat(value1);\n}\nfunction makeContentId(baseId, value1) {\n    return \"\".concat(baseId, \"-content-\").concat(value1);\n}\nvar Root2 = Tabs$1;\nvar List = TabsList$1;\nvar Trigger$1 = TabsTrigger$1;\nvar Content = TabsContent$1;\nfunction Tabs(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2, {\n        \"data-slot\": \"tabs\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:flex-col vkui:gap-2\", className),\n        ...props2\n    });\n}\n_c219 = Tabs;\nfunction TabsList(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, {\n        \"data-slot\": \"tabs-list\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-muted vkui:text-muted-foreground vkui:inline-flex vkui:h-9 vkui:w-fit vkui:items-center vkui:justify-center vkui:rounded-lg p-[3px]\", className),\n        ...props2\n    });\n}\n_c220 = TabsList;\nfunction TabsTrigger(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Trigger$1, {\n        \"data-slot\": \"tabs-trigger\",\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:data-[state=active]:bg-background vkui:data-[state=active]:text-foreground vkui:focus-visible:border-ring vkui:focus-visible:ring-ring/50 vkui:focus-visible:outline-ring vkui:hover:bg-muted-foreground/10 vkui:dark:data-[state=active]:border-input vkui:dark:data-[state=active]:bg-input/30 vkui:text-foreground vkui:inline-flex vkui:h-[calc(100%-1px)] vkui:flex-1 vkui:items-center vkui:justify-center vkui:gap-1.5 vkui:rounded-md vkui:border vkui:border-transparent vkui:px-2 vkui:py-1 vkui:text-sm vkui:font-medium vkui:whitespace-nowrap vkui:transition-[color,box-shadow] vkui:focus-visible:ring-[3px] vkui:focus-visible:outline-1 vkui:disabled:pointer-events-none vkui:disabled:opacity-50 vkui:data-[state=active]:shadow-sm vkui:[&_svg]:pointer-events-none vkui:[&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\", className),\n        ...props2\n    });\n}\n_c221 = TabsTrigger;\nfunction TabsContent(param) {\n    let { className, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Content, {\n        \"data-slot\": \"tabs-content\",\n        forceMount: true,\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex-1 vkui:outline-none vkui:data-[state=inactive]:hidden\", className),\n        ...props2\n    });\n}\n_c222 = TabsContent;\nvar [createTooltipContext, createTooltipScope] = createContextScope(\"Tooltip\", [\n    createPopperScope\n]);\nvar usePopperScope = createPopperScope();\nvar PROVIDER_NAME = \"TooltipProvider\";\nvar DEFAULT_DELAY_DURATION = 700;\nvar TOOLTIP_OPEN = \"tooltip.open\";\nvar [TooltipProviderContextProvider, useTooltipProviderContext] = createTooltipContext(PROVIDER_NAME);\nvar TooltipProvider$1 = (props2)=>{\n    _s111();\n    const { __scopeTooltip, delayDuration = DEFAULT_DELAY_DURATION, skipDelayDuration = 300, disableHoverableContent = false, children } = props2;\n    const isOpenDelayedRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(true);\n    const isPointerInTransitRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const skipDelayTimerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TooltipProvider$1.useEffect\": ()=>{\n            const skipDelayTimer = skipDelayTimerRef.current;\n            return ({\n                \"TooltipProvider$1.useEffect\": ()=>window.clearTimeout(skipDelayTimer)\n            })[\"TooltipProvider$1.useEffect\"];\n        }\n    }[\"TooltipProvider$1.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipProviderContextProvider, {\n        scope: __scopeTooltip,\n        isOpenDelayedRef,\n        delayDuration,\n        onOpen: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"TooltipProvider$1.useCallback\": ()=>{\n                window.clearTimeout(skipDelayTimerRef.current);\n                isOpenDelayedRef.current = false;\n            }\n        }[\"TooltipProvider$1.useCallback\"], []),\n        onClose: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"TooltipProvider$1.useCallback\": ()=>{\n                window.clearTimeout(skipDelayTimerRef.current);\n                skipDelayTimerRef.current = window.setTimeout({\n                    \"TooltipProvider$1.useCallback\": ()=>isOpenDelayedRef.current = true\n                }[\"TooltipProvider$1.useCallback\"], skipDelayDuration);\n            }\n        }[\"TooltipProvider$1.useCallback\"], [\n            skipDelayDuration\n        ]),\n        isPointerInTransitRef,\n        onPointerInTransitChange: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"TooltipProvider$1.useCallback\": (inTransit)=>{\n                isPointerInTransitRef.current = inTransit;\n            }\n        }[\"TooltipProvider$1.useCallback\"], []),\n        disableHoverableContent,\n        children\n    });\n};\n_s111(TooltipProvider$1, \"4fuC++z6HSmOj4k9l57mS/HTAD8=\");\n_c223 = TooltipProvider$1;\nTooltipProvider$1.displayName = PROVIDER_NAME;\nvar TOOLTIP_NAME = \"Tooltip\";\nvar [TooltipContextProvider, useTooltipContext] = createTooltipContext(TOOLTIP_NAME);\nvar Tooltip$1 = (props2)=>{\n    _s112();\n    const { __scopeTooltip, children, open: openProp, defaultOpen, onOpenChange, disableHoverableContent: disableHoverableContentProp, delayDuration: delayDurationProp } = props2;\n    const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props2.__scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const [trigger, setTrigger] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const contentId = useId$1();\n    const openTimerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    const disableHoverableContent = disableHoverableContentProp !== null && disableHoverableContentProp !== void 0 ? disableHoverableContentProp : providerContext.disableHoverableContent;\n    const delayDuration = delayDurationProp !== null && delayDurationProp !== void 0 ? delayDurationProp : providerContext.delayDuration;\n    const wasOpenDelayedRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const [open, setOpen] = useControllableState({\n        prop: openProp,\n        defaultProp: defaultOpen !== null && defaultOpen !== void 0 ? defaultOpen : false,\n        onChange: {\n            \"Tooltip$1.useControllableState\": (open2)=>{\n                if (open2) {\n                    providerContext.onOpen();\n                    document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n                } else {\n                    providerContext.onClose();\n                }\n                onOpenChange == null ? void 0 : onOpenChange(open2);\n            }\n        }[\"Tooltip$1.useControllableState\"],\n        caller: TOOLTIP_NAME\n    });\n    const stateAttribute = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"Tooltip$1.useMemo[stateAttribute]\": ()=>{\n            return open ? wasOpenDelayedRef.current ? \"delayed-open\" : \"instant-open\" : \"closed\";\n        }\n    }[\"Tooltip$1.useMemo[stateAttribute]\"], [\n        open\n    ]);\n    const handleOpen = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"Tooltip$1.useCallback[handleOpen]\": ()=>{\n            window.clearTimeout(openTimerRef.current);\n            openTimerRef.current = 0;\n            wasOpenDelayedRef.current = false;\n            setOpen(true);\n        }\n    }[\"Tooltip$1.useCallback[handleOpen]\"], [\n        setOpen\n    ]);\n    const handleClose = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"Tooltip$1.useCallback[handleClose]\": ()=>{\n            window.clearTimeout(openTimerRef.current);\n            openTimerRef.current = 0;\n            setOpen(false);\n        }\n    }[\"Tooltip$1.useCallback[handleClose]\"], [\n        setOpen\n    ]);\n    const handleDelayedOpen = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"Tooltip$1.useCallback[handleDelayedOpen]\": ()=>{\n            window.clearTimeout(openTimerRef.current);\n            openTimerRef.current = window.setTimeout({\n                \"Tooltip$1.useCallback[handleDelayedOpen]\": ()=>{\n                    wasOpenDelayedRef.current = true;\n                    setOpen(true);\n                    openTimerRef.current = 0;\n                }\n            }[\"Tooltip$1.useCallback[handleDelayedOpen]\"], delayDuration);\n        }\n    }[\"Tooltip$1.useCallback[handleDelayedOpen]\"], [\n        delayDuration,\n        setOpen\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"Tooltip$1.useEffect\": ()=>{\n            return ({\n                \"Tooltip$1.useEffect\": ()=>{\n                    if (openTimerRef.current) {\n                        window.clearTimeout(openTimerRef.current);\n                        openTimerRef.current = 0;\n                    }\n                }\n            })[\"Tooltip$1.useEffect\"];\n        }\n    }[\"Tooltip$1.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root2$4, {\n        ...popperScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipContextProvider, {\n            scope: __scopeTooltip,\n            contentId,\n            open,\n            stateAttribute,\n            trigger,\n            onTriggerChange: setTrigger,\n            onTriggerEnter: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                \"Tooltip$1.useCallback\": ()=>{\n                    if (providerContext.isOpenDelayedRef.current) handleDelayedOpen();\n                    else handleOpen();\n                }\n            }[\"Tooltip$1.useCallback\"], [\n                providerContext.isOpenDelayedRef,\n                handleDelayedOpen,\n                handleOpen\n            ]),\n            onTriggerLeave: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n                \"Tooltip$1.useCallback\": ()=>{\n                    if (disableHoverableContent) {\n                        handleClose();\n                    } else {\n                        window.clearTimeout(openTimerRef.current);\n                        openTimerRef.current = 0;\n                    }\n                }\n            }[\"Tooltip$1.useCallback\"], [\n                handleClose,\n                disableHoverableContent\n            ]),\n            onOpen: handleOpen,\n            onClose: handleClose,\n            disableHoverableContent,\n            children\n        })\n    });\n};\n_s112(Tooltip$1, \"Kwye9dxuEFVc1MdY9SdwWvCxRlg=\", false, function() {\n    return [\n        useTooltipProviderContext,\n        usePopperScope,\n        useId$1,\n        useControllableState\n    ];\n});\n_c224 = Tooltip$1;\nTooltip$1.displayName = TOOLTIP_NAME;\nvar TRIGGER_NAME = \"TooltipTrigger\";\nvar TooltipTrigger$1 = /*#__PURE__*/ _s113(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c225 = _s113((props2, forwardedRef)=>{\n    _s113();\n    const { __scopeTooltip, ...triggerProps } = props2;\n    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n    const providerContext = useTooltipProviderContext(TRIGGER_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onTriggerChange);\n    const isPointerDownRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const hasPointerMoveOpenedRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const handlePointerUp2 = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"TooltipTrigger$1.useCallback[handlePointerUp2]\": ()=>isPointerDownRef.current = false\n    }[\"TooltipTrigger$1.useCallback[handlePointerUp2]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TooltipTrigger$1.useEffect\": ()=>{\n            return ({\n                \"TooltipTrigger$1.useEffect\": ()=>document.removeEventListener(\"pointerup\", handlePointerUp2)\n            })[\"TooltipTrigger$1.useEffect\"];\n        }\n    }[\"TooltipTrigger$1.useEffect\"], [\n        handlePointerUp2\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Anchor, {\n        asChild: true,\n        ...popperScope,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Primitive.button, {\n            \"aria-describedby\": context.open ? context.contentId : void 0,\n            \"data-state\": context.stateAttribute,\n            ...triggerProps,\n            ref: composedRefs,\n            onPointerMove: composeEventHandlers(props2.onPointerMove, (event)=>{\n                if (event.pointerType === \"touch\") return;\n                if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {\n                    context.onTriggerEnter();\n                    hasPointerMoveOpenedRef.current = true;\n                }\n            }),\n            onPointerLeave: composeEventHandlers(props2.onPointerLeave, ()=>{\n                context.onTriggerLeave();\n                hasPointerMoveOpenedRef.current = false;\n            }),\n            onPointerDown: composeEventHandlers(props2.onPointerDown, ()=>{\n                if (context.open) {\n                    context.onClose();\n                }\n                isPointerDownRef.current = true;\n                document.addEventListener(\"pointerup\", handlePointerUp2, {\n                    once: true\n                });\n            }),\n            onFocus: composeEventHandlers(props2.onFocus, ()=>{\n                if (!isPointerDownRef.current) context.onOpen();\n            }),\n            onBlur: composeEventHandlers(props2.onBlur, context.onClose),\n            onClick: composeEventHandlers(props2.onClick, context.onClose)\n        })\n    });\n}, \"FVIQnwxHh6HBMSclXLQDPiwPDDc=\", false, function() {\n    return [\n        useTooltipContext,\n        useTooltipProviderContext,\n        usePopperScope,\n        useComposedRefs\n    ];\n})), \"FVIQnwxHh6HBMSclXLQDPiwPDDc=\", false, function() {\n    return [\n        useTooltipContext,\n        useTooltipProviderContext,\n        usePopperScope,\n        useComposedRefs\n    ];\n});\n_c226 = TooltipTrigger$1;\nTooltipTrigger$1.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"TooltipPortal\";\nvar [PortalProvider, usePortalContext] = createTooltipContext(PORTAL_NAME, {\n    forceMount: void 0\n});\nvar TooltipPortal = (props2)=>{\n    _s114();\n    const { __scopeTooltip, forceMount, children, container } = props2;\n    const context = useTooltipContext(PORTAL_NAME, __scopeTooltip);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortalProvider, {\n        scope: __scopeTooltip,\n        forceMount,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n            present: forceMount || context.open,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal$4, {\n                asChild: true,\n                container,\n                children\n            })\n        })\n    });\n};\n_s114(TooltipPortal, \"xB1jeapIst5f8c7+wNiLkfdUmBA=\", false, function() {\n    return [\n        useTooltipContext\n    ];\n});\n_c227 = TooltipPortal;\nTooltipPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"TooltipContent\";\nvar TooltipContent$1 = /*#__PURE__*/ _s115(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c228 = _s115((props2, forwardedRef)=>{\n    _s115();\n    const portalContext = usePortalContext(CONTENT_NAME, props2.__scopeTooltip);\n    const { forceMount = portalContext.forceMount, side = \"top\", ...contentProps } = props2;\n    const context = useTooltipContext(CONTENT_NAME, props2.__scopeTooltip);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Presence, {\n        present: forceMount || context.open,\n        children: context.disableHoverableContent ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipContentImpl, {\n            side,\n            ...contentProps,\n            ref: forwardedRef\n        }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipContentHoverable, {\n            side,\n            ...contentProps,\n            ref: forwardedRef\n        })\n    });\n}, \"Z69swUFObjAgmys2CDvyqDb1Nbw=\", false, function() {\n    return [\n        usePortalContext,\n        useTooltipContext\n    ];\n})), \"Z69swUFObjAgmys2CDvyqDb1Nbw=\", false, function() {\n    return [\n        usePortalContext,\n        useTooltipContext\n    ];\n});\n_c229 = TooltipContent$1;\nvar TooltipContentHoverable = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s116((props2, forwardedRef)=>{\n    _s116();\n    const context = useTooltipContext(CONTENT_NAME, props2.__scopeTooltip);\n    const providerContext = useTooltipProviderContext(CONTENT_NAME, props2.__scopeTooltip);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const [pointerGraceArea, setPointerGraceArea] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const { trigger, onClose } = context;\n    const content = ref.current;\n    const { onPointerInTransitChange } = providerContext;\n    const handleRemoveGraceArea = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"TooltipContentHoverable.useCallback[handleRemoveGraceArea]\": ()=>{\n            setPointerGraceArea(null);\n            onPointerInTransitChange(false);\n        }\n    }[\"TooltipContentHoverable.useCallback[handleRemoveGraceArea]\"], [\n        onPointerInTransitChange\n    ]);\n    const handleCreateGraceArea = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"TooltipContentHoverable.useCallback[handleCreateGraceArea]\": (event, hoverTarget)=>{\n            const currentTarget = event.currentTarget;\n            const exitPoint = {\n                x: event.clientX,\n                y: event.clientY\n            };\n            const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());\n            const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);\n            const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());\n            const graceArea = getHull([\n                ...paddedExitPoints,\n                ...hoverTargetPoints\n            ]);\n            setPointerGraceArea(graceArea);\n            onPointerInTransitChange(true);\n        }\n    }[\"TooltipContentHoverable.useCallback[handleCreateGraceArea]\"], [\n        onPointerInTransitChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TooltipContentHoverable.useEffect\": ()=>{\n            return ({\n                \"TooltipContentHoverable.useEffect\": ()=>handleRemoveGraceArea()\n            })[\"TooltipContentHoverable.useEffect\"];\n        }\n    }[\"TooltipContentHoverable.useEffect\"], [\n        handleRemoveGraceArea\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TooltipContentHoverable.useEffect\": ()=>{\n            if (trigger && content) {\n                const handleTriggerLeave = {\n                    \"TooltipContentHoverable.useEffect.handleTriggerLeave\": (event)=>handleCreateGraceArea(event, content)\n                }[\"TooltipContentHoverable.useEffect.handleTriggerLeave\"];\n                const handleContentLeave = {\n                    \"TooltipContentHoverable.useEffect.handleContentLeave\": (event)=>handleCreateGraceArea(event, trigger)\n                }[\"TooltipContentHoverable.useEffect.handleContentLeave\"];\n                trigger.addEventListener(\"pointerleave\", handleTriggerLeave);\n                content.addEventListener(\"pointerleave\", handleContentLeave);\n                return ({\n                    \"TooltipContentHoverable.useEffect\": ()=>{\n                        trigger.removeEventListener(\"pointerleave\", handleTriggerLeave);\n                        content.removeEventListener(\"pointerleave\", handleContentLeave);\n                    }\n                })[\"TooltipContentHoverable.useEffect\"];\n            }\n        }\n    }[\"TooltipContentHoverable.useEffect\"], [\n        trigger,\n        content,\n        handleCreateGraceArea,\n        handleRemoveGraceArea\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TooltipContentHoverable.useEffect\": ()=>{\n            if (pointerGraceArea) {\n                const handleTrackPointerGrace = {\n                    \"TooltipContentHoverable.useEffect.handleTrackPointerGrace\": (event)=>{\n                        const target = event.target;\n                        const pointerPosition = {\n                            x: event.clientX,\n                            y: event.clientY\n                        };\n                        const hasEnteredTarget = (trigger == null ? void 0 : trigger.contains(target)) || (content == null ? void 0 : content.contains(target));\n                        const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);\n                        if (hasEnteredTarget) {\n                            handleRemoveGraceArea();\n                        } else if (isPointerOutsideGraceArea) {\n                            handleRemoveGraceArea();\n                            onClose();\n                        }\n                    }\n                }[\"TooltipContentHoverable.useEffect.handleTrackPointerGrace\"];\n                document.addEventListener(\"pointermove\", handleTrackPointerGrace);\n                return ({\n                    \"TooltipContentHoverable.useEffect\": ()=>document.removeEventListener(\"pointermove\", handleTrackPointerGrace)\n                })[\"TooltipContentHoverable.useEffect\"];\n            }\n        }\n    }[\"TooltipContentHoverable.useEffect\"], [\n        trigger,\n        content,\n        pointerGraceArea,\n        onClose,\n        handleRemoveGraceArea\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipContentImpl, {\n        ...props2,\n        ref: composedRefs\n    });\n}, \"gHff4ZZbXA0WT6udB7OmagibGvA=\", false, function() {\n    return [\n        useTooltipContext,\n        useTooltipProviderContext,\n        useComposedRefs\n    ];\n}));\n_c230 = TooltipContentHoverable;\nvar [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, {\n    isInside: false\n});\nvar Slottable = /* @__PURE__ */ createSlottable(\"TooltipContent\");\n_c231 = Slottable;\nvar TooltipContentImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_s117((props2, forwardedRef)=>{\n    _s117();\n    const { __scopeTooltip, children, \"aria-label\": ariaLabel, onEscapeKeyDown, onPointerDownOutside, ...contentProps } = props2;\n    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const { onClose } = context;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TooltipContentImpl.useEffect\": ()=>{\n            document.addEventListener(TOOLTIP_OPEN, onClose);\n            return ({\n                \"TooltipContentImpl.useEffect\": ()=>document.removeEventListener(TOOLTIP_OPEN, onClose)\n            })[\"TooltipContentImpl.useEffect\"];\n        }\n    }[\"TooltipContentImpl.useEffect\"], [\n        onClose\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TooltipContentImpl.useEffect\": ()=>{\n            if (context.trigger) {\n                const handleScroll2 = {\n                    \"TooltipContentImpl.useEffect.handleScroll2\": (event)=>{\n                        const target = event.target;\n                        if (target == null ? void 0 : target.contains(context.trigger)) onClose();\n                    }\n                }[\"TooltipContentImpl.useEffect.handleScroll2\"];\n                window.addEventListener(\"scroll\", handleScroll2, {\n                    capture: true\n                });\n                return ({\n                    \"TooltipContentImpl.useEffect\": ()=>window.removeEventListener(\"scroll\", handleScroll2, {\n                            capture: true\n                        })\n                })[\"TooltipContentImpl.useEffect\"];\n            }\n        }\n    }[\"TooltipContentImpl.useEffect\"], [\n        context.trigger,\n        onClose\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DismissableLayer, {\n        asChild: true,\n        disableOutsidePointerEvents: false,\n        onEscapeKeyDown,\n        onPointerDownOutside,\n        onFocusOutside: (event)=>event.preventDefault(),\n        onDismiss: onClose,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Content$1, {\n            \"data-state\": context.stateAttribute,\n            ...popperScope,\n            ...contentProps,\n            ref: forwardedRef,\n            style: {\n                ...contentProps.style,\n                // re-namespace exposed content custom properties\n                ...{\n                    \"--radix-tooltip-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n                    \"--radix-tooltip-content-available-width\": \"var(--radix-popper-available-width)\",\n                    \"--radix-tooltip-content-available-height\": \"var(--radix-popper-available-height)\",\n                    \"--radix-tooltip-trigger-width\": \"var(--radix-popper-anchor-width)\",\n                    \"--radix-tooltip-trigger-height\": \"var(--radix-popper-anchor-height)\"\n                }\n            },\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Slottable, {\n                    children\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VisuallyHiddenContentContextProvider, {\n                    scope: __scopeTooltip,\n                    isInside: true,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root$1, {\n                        id: context.contentId,\n                        role: \"tooltip\",\n                        children: ariaLabel || children\n                    })\n                })\n            ]\n        })\n    });\n}, \"i9WYRDazLRQfWd3Hvi+XZwDDx40=\", false, function() {\n    return [\n        useTooltipContext,\n        usePopperScope\n    ];\n}));\n_c232 = TooltipContentImpl;\nTooltipContent$1.displayName = CONTENT_NAME;\nvar ARROW_NAME = \"TooltipArrow\";\nvar TooltipArrow = /*#__PURE__*/ _s118(react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c233 = _s118((props2, forwardedRef)=>{\n    _s118();\n    const { __scopeTooltip, ...arrowProps } = props2;\n    const popperScope = usePopperScope(__scopeTooltip);\n    const visuallyHiddenContentContext = useVisuallyHiddenContentContext(ARROW_NAME, __scopeTooltip);\n    return visuallyHiddenContentContext.isInside ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Arrow, {\n        ...popperScope,\n        ...arrowProps,\n        ref: forwardedRef\n    });\n}, \"PhtHwCUYJI5ZCq3IiyAmXd8x79Y=\", false, function() {\n    return [\n        usePopperScope,\n        useVisuallyHiddenContentContext\n    ];\n})), \"PhtHwCUYJI5ZCq3IiyAmXd8x79Y=\", false, function() {\n    return [\n        usePopperScope,\n        useVisuallyHiddenContentContext\n    ];\n});\n_c234 = TooltipArrow;\nTooltipArrow.displayName = ARROW_NAME;\nfunction getExitSideFromRect(point, rect) {\n    const top = Math.abs(rect.top - point.y);\n    const bottom = Math.abs(rect.bottom - point.y);\n    const right = Math.abs(rect.right - point.x);\n    const left = Math.abs(rect.left - point.x);\n    switch(Math.min(top, bottom, right, left)){\n        case left:\n            return \"left\";\n        case right:\n            return \"right\";\n        case top:\n            return \"top\";\n        case bottom:\n            return \"bottom\";\n        default:\n            throw new Error(\"unreachable\");\n    }\n}\nfunction getPaddedExitPoints(exitPoint, exitSide) {\n    let padding = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n    const paddedExitPoints = [];\n    switch(exitSide){\n        case \"top\":\n            paddedExitPoints.push({\n                x: exitPoint.x - padding,\n                y: exitPoint.y + padding\n            }, {\n                x: exitPoint.x + padding,\n                y: exitPoint.y + padding\n            });\n            break;\n        case \"bottom\":\n            paddedExitPoints.push({\n                x: exitPoint.x - padding,\n                y: exitPoint.y - padding\n            }, {\n                x: exitPoint.x + padding,\n                y: exitPoint.y - padding\n            });\n            break;\n        case \"left\":\n            paddedExitPoints.push({\n                x: exitPoint.x + padding,\n                y: exitPoint.y - padding\n            }, {\n                x: exitPoint.x + padding,\n                y: exitPoint.y + padding\n            });\n            break;\n        case \"right\":\n            paddedExitPoints.push({\n                x: exitPoint.x - padding,\n                y: exitPoint.y - padding\n            }, {\n                x: exitPoint.x - padding,\n                y: exitPoint.y + padding\n            });\n            break;\n    }\n    return paddedExitPoints;\n}\nfunction getPointsFromRect(rect) {\n    const { top, right, bottom, left } = rect;\n    return [\n        {\n            x: left,\n            y: top\n        },\n        {\n            x: right,\n            y: top\n        },\n        {\n            x: right,\n            y: bottom\n        },\n        {\n            x: left,\n            y: bottom\n        }\n    ];\n}\nfunction isPointInPolygon(point, polygon) {\n    const { x, y } = point;\n    let inside = false;\n    for(let i = 0, j = polygon.length - 1; i < polygon.length; j = i++){\n        const ii = polygon[i];\n        const jj = polygon[j];\n        const xi = ii.x;\n        const yi = ii.y;\n        const xj = jj.x;\n        const yj = jj.y;\n        const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n        if (intersect) inside = !inside;\n    }\n    return inside;\n}\nfunction getHull(points) {\n    const newPoints = points.slice();\n    newPoints.sort((a, b)=>{\n        if (a.x < b.x) return -1;\n        else if (a.x > b.x) return 1;\n        else if (a.y < b.y) return -1;\n        else if (a.y > b.y) return 1;\n        else return 0;\n    });\n    return getHullPresorted(newPoints);\n}\nfunction getHullPresorted(points) {\n    if (points.length <= 1) return points.slice();\n    const upperHull = [];\n    for(let i = 0; i < points.length; i++){\n        const p = points[i];\n        while(upperHull.length >= 2){\n            const q = upperHull[upperHull.length - 1];\n            const r = upperHull[upperHull.length - 2];\n            if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) upperHull.pop();\n            else break;\n        }\n        upperHull.push(p);\n    }\n    upperHull.pop();\n    const lowerHull = [];\n    for(let i = points.length - 1; i >= 0; i--){\n        const p = points[i];\n        while(lowerHull.length >= 2){\n            const q = lowerHull[lowerHull.length - 1];\n            const r = lowerHull[lowerHull.length - 2];\n            if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) lowerHull.pop();\n            else break;\n        }\n        lowerHull.push(p);\n    }\n    lowerHull.pop();\n    if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y) {\n        return upperHull;\n    } else {\n        return upperHull.concat(lowerHull);\n    }\n}\nvar Provider = TooltipProvider$1;\nvar Root3 = Tooltip$1;\nvar Trigger = TooltipTrigger$1;\nvar Portal = TooltipPortal;\nvar Content2 = TooltipContent$1;\nvar Arrow2 = TooltipArrow;\nfunction TooltipProvider(param) {\n    let { delayDuration = 0, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Provider, {\n        \"data-slot\": \"tooltip-provider\",\n        delayDuration,\n        ...props2\n    });\n}\n_c235 = TooltipProvider;\nfunction Tooltip(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipProvider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Root3, {\n            \"data-slot\": \"tooltip\",\n            ...props2\n        })\n    });\n}\n_c236 = Tooltip;\nfunction TooltipTrigger(param) {\n    let { ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Trigger, {\n        \"data-slot\": \"tooltip-trigger\",\n        ...props2\n    });\n}\n_c237 = TooltipTrigger;\nfunction TooltipContent(param) {\n    let { className, sideOffset = 0, children, ...props2 } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Portal, {\n        container: getPipecatUIContainer(),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Content2, {\n            \"data-slot\": \"tooltip-content\",\n            sideOffset,\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-primary vkui:text-primary-foreground vkui:animate-in vkui:fade-in-0 vkui:zoom-in-95 vkui:data-[state=closed]:animate-out vkui:data-[state=closed]:fade-out-0 vkui:data-[state=closed]:zoom-out-95 vkui:data-[side=bottom]:slide-in-from-top-2 vkui:data-[side=left]:slide-in-from-right-2 vkui:data-[side=right]:slide-in-from-left-2 vkui:data-[side=top]:slide-in-from-bottom-2 vkui:z-50 vkui:w-fit vkui:origin-(--radix-tooltip-content-transform-origin) vkui:rounded-md vkui:px-3 vkui:py-1.5 vkui:text-xs vkui:text-balance\", className),\n            ...props2,\n            children: [\n                children,\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Arrow2, {\n                    className: \"vkui:bg-primary vkui:fill-primary vkui:z-50 vkui:size-2.5 vkui:translate-y-[calc(-50%_-_2px)] vkui:rotate-45 vkui:rounded-[2px]\"\n                })\n            ]\n        })\n    });\n}\n_c238 = TooltipContent;\nconst ControlBar = (param)=>{\n    let { onConnect, onDisconnect, size: size2 = \"xl\", className } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Card, {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:shadow-long vkui:bg-background\", className),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(CardContent, {\n            className: \"vkui:flex vkui:flex-row vkui:gap-4 vkui:p-4\",\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UserAudioControl, {\n                    size: size2,\n                    variant: \"outline\"\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: \"vkui:w-px vkui:bg-border vkui:self-stretch vkui:mx-2\"\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConnectButton, {\n                    onConnect: ()=>{\n                        onConnect == null ? void 0 : onConnect();\n                    },\n                    onDisconnect: ()=>{\n                        onDisconnect == null ? void 0 : onDisconnect();\n                    },\n                    defaultVariant: \"outline\",\n                    size: size2\n                })\n            ]\n        })\n    });\n};\n_c239 = ControlBar;\nconst sortByCreatedAt = (a, b)=>{\n    return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n};\nconst filterEmptyMessages = (message, index2, array)=>{\n    if (message.content) return true;\n    const nextMessageWithSameRole = array.slice(index2 + 1).find((m)=>m.role === message.role && m.content);\n    return !nextMessageWithSameRole;\n};\nconst useConversation = function() {\n    let { onMessageAdded } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s119();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Connected, {\n        \"useConversation.useRTVIClientEvent\": ()=>{\n            setMessages([]);\n        }\n    }[\"useConversation.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotLlmStarted, {\n        \"useConversation.useRTVIClientEvent\": ()=>{\n            const now = /* @__PURE__ */ new Date();\n            setMessages({\n                \"useConversation.useRTVIClientEvent\": (prev)=>{\n                    const lastBotMessageIndex = prev.findLastIndex({\n                        \"useConversation.useRTVIClientEvent.lastBotMessageIndex\": (msg)=>msg.role === \"assistant\"\n                    }[\"useConversation.useRTVIClientEvent.lastBotMessageIndex\"]);\n                    const lastBotMessage = prev[lastBotMessageIndex];\n                    if (lastBotMessage && lastBotMessage.role === \"assistant\" && !lastBotMessage.content) {\n                        return prev.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                    }\n                    const newMessage = {\n                        role: \"assistant\",\n                        content: \"\",\n                        final: false,\n                        createdAt: now.toISOString(),\n                        updatedAt: now.toISOString()\n                    };\n                    onMessageAdded == null ? void 0 : onMessageAdded(newMessage);\n                    return [\n                        ...prev,\n                        newMessage\n                    ].sort(sortByCreatedAt).filter(filterEmptyMessages);\n                }\n            }[\"useConversation.useRTVIClientEvent\"]);\n        }\n    }[\"useConversation.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotLlmText, {\n        \"useConversation.useRTVIClientEvent\": (data)=>{\n            const now = /* @__PURE__ */ new Date();\n            setMessages({\n                \"useConversation.useRTVIClientEvent\": (prev)=>{\n                    const lastBotMessageIndex = prev.findLastIndex({\n                        \"useConversation.useRTVIClientEvent.lastBotMessageIndex\": (msg)=>msg.role === \"assistant\"\n                    }[\"useConversation.useRTVIClientEvent.lastBotMessageIndex\"]);\n                    const lastBotMessage = prev[lastBotMessageIndex];\n                    if (!lastBotMessage) {\n                        const newMessage2 = {\n                            role: \"assistant\",\n                            content: data.text,\n                            createdAt: now.toISOString(),\n                            updatedAt: now.toISOString()\n                        };\n                        onMessageAdded == null ? void 0 : onMessageAdded(newMessage2);\n                        return [\n                            ...prev,\n                            newMessage2\n                        ].sort(sortByCreatedAt).filter(filterEmptyMessages);\n                    }\n                    if (!lastBotMessage.content) {\n                        const newMessages = prev.slice();\n                        newMessages.splice(lastBotMessageIndex, 1, {\n                            ...lastBotMessage,\n                            content: data.text,\n                            createdAt: now.toISOString(),\n                            updatedAt: now.toISOString()\n                        });\n                        return newMessages.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                    }\n                    const isRecent = lastBotMessage && lastBotMessage.role === \"assistant\" && now.getTime() - new Date(lastBotMessage.createdAt).getTime() < 1e4;\n                    if (isRecent) {\n                        const newMessages = prev.slice();\n                        newMessages.splice(lastBotMessageIndex, 1, {\n                            ...lastBotMessage,\n                            content: lastBotMessage.content + data.text,\n                            createdAt: lastBotMessage.content ? lastBotMessage.createdAt : now.toISOString(),\n                            updatedAt: now.toISOString()\n                        });\n                        return newMessages.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                    }\n                    const newMessage = {\n                        role: \"assistant\",\n                        content: data.text,\n                        createdAt: now.toISOString(),\n                        updatedAt: now.toISOString()\n                    };\n                    onMessageAdded == null ? void 0 : onMessageAdded(newMessage);\n                    return [\n                        ...prev,\n                        newMessage\n                    ].sort(sortByCreatedAt).filter(filterEmptyMessages);\n                }\n            }[\"useConversation.useRTVIClientEvent\"]);\n        }\n    }[\"useConversation.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotLlmStopped, {\n        \"useConversation.useRTVIClientEvent\": ()=>{\n            setMessages({\n                \"useConversation.useRTVIClientEvent\": (prev)=>{\n                    const lastBotMessageIndex = prev.findLastIndex({\n                        \"useConversation.useRTVIClientEvent.lastBotMessageIndex\": (msg)=>msg.role === \"assistant\"\n                    }[\"useConversation.useRTVIClientEvent.lastBotMessageIndex\"]);\n                    const lastBotMessage = prev[lastBotMessageIndex];\n                    if (!lastBotMessage) return prev;\n                    if (lastBotMessage && lastBotMessage.role === \"assistant\" && !lastBotMessage.content) {\n                        return prev.slice(0, -1).sort(sortByCreatedAt).filter(filterEmptyMessages);\n                    }\n                    lastBotMessage.final = true;\n                    const newMessages = prev.slice();\n                    newMessages.splice(lastBotMessageIndex, 1, {\n                        ...lastBotMessage,\n                        updatedAt: /* @__PURE__ */ new Date().toISOString()\n                    });\n                    onMessageAdded == null ? void 0 : onMessageAdded(lastBotMessage);\n                    return newMessages.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                }\n            }[\"useConversation.useRTVIClientEvent\"]);\n        }\n    }[\"useConversation.useRTVIClientEvent\"]);\n    const userStoppedTimeout = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(void 0);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.UserStartedSpeaking, {\n        \"useConversation.useRTVIClientEvent\": ()=>{\n            clearTimeout(userStoppedTimeout.current);\n            const now = /* @__PURE__ */ new Date();\n            setMessages({\n                \"useConversation.useRTVIClientEvent\": (prev)=>{\n                    const lastUserMessageIndex = prev.findLastIndex({\n                        \"useConversation.useRTVIClientEvent.lastUserMessageIndex\": (msg)=>msg.role === \"user\"\n                    }[\"useConversation.useRTVIClientEvent.lastUserMessageIndex\"]);\n                    const lastUserMessage = prev[lastUserMessageIndex];\n                    if (lastUserMessage && lastUserMessage.role === \"user\" && !lastUserMessage.content) {\n                        const newMessages = prev.slice();\n                        newMessages.splice(lastUserMessageIndex, 1, {\n                            ...lastUserMessage,\n                            createdAt: now.toISOString(),\n                            updatedAt: now.toISOString()\n                        });\n                        return newMessages.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                    }\n                    const newMessage = {\n                        role: \"user\",\n                        content: \"\",\n                        final: false,\n                        createdAt: now.toISOString(),\n                        updatedAt: now.toISOString()\n                    };\n                    onMessageAdded == null ? void 0 : onMessageAdded(newMessage);\n                    return [\n                        ...prev,\n                        newMessage\n                    ].sort(sortByCreatedAt).filter(filterEmptyMessages);\n                }\n            }[\"useConversation.useRTVIClientEvent\"]);\n        }\n    }[\"useConversation.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.UserTranscript, {\n        \"useConversation.useRTVIClientEvent\": (data)=>{\n            const now = /* @__PURE__ */ new Date();\n            setMessages({\n                \"useConversation.useRTVIClientEvent\": (prev)=>{\n                    const lastUserMessageIndex = prev.findLastIndex({\n                        \"useConversation.useRTVIClientEvent.lastUserMessageIndex\": (msg)=>msg.role === \"user\"\n                    }[\"useConversation.useRTVIClientEvent.lastUserMessageIndex\"]);\n                    const lastUserMessage = prev[lastUserMessageIndex];\n                    if (lastUserMessage && !lastUserMessage.final) {\n                        const updatedMessage = {\n                            ...lastUserMessage,\n                            final: data.final,\n                            content: data.text,\n                            updatedAt: now.toISOString()\n                        };\n                        onMessageAdded == null ? void 0 : onMessageAdded(updatedMessage);\n                        const newMessages = prev.slice();\n                        newMessages.splice(lastUserMessageIndex, 1, updatedMessage);\n                        return newMessages.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                    }\n                    const newMessage = {\n                        role: \"user\",\n                        content: data.text,\n                        final: data.final,\n                        createdAt: now.toISOString()\n                    };\n                    onMessageAdded == null ? void 0 : onMessageAdded(newMessage);\n                    return [\n                        ...prev,\n                        newMessage\n                    ].sort(sortByCreatedAt).filter(filterEmptyMessages);\n                }\n            }[\"useConversation.useRTVIClientEvent\"]);\n        }\n    }[\"useConversation.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.UserStoppedSpeaking, {\n        \"useConversation.useRTVIClientEvent\": ()=>{\n            clearTimeout(userStoppedTimeout.current);\n            userStoppedTimeout.current = setTimeout({\n                \"useConversation.useRTVIClientEvent\": ()=>{\n                    setMessages({\n                        \"useConversation.useRTVIClientEvent\": (prev)=>{\n                            const lastUserMessageIndex = prev.findLastIndex({\n                                \"useConversation.useRTVIClientEvent.lastUserMessageIndex\": (msg)=>msg.role === \"user\"\n                            }[\"useConversation.useRTVIClientEvent.lastUserMessageIndex\"]);\n                            const lastUserMessage = prev[lastUserMessageIndex];\n                            if (!lastUserMessage || lastUserMessage.content) return prev.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                            const newMessages = prev.slice();\n                            newMessages.splice(lastUserMessageIndex, 1);\n                            return newMessages.sort(sortByCreatedAt).filter(filterEmptyMessages);\n                        }\n                    }[\"useConversation.useRTVIClientEvent\"]);\n                }\n            }[\"useConversation.useRTVIClientEvent\"], 5e3);\n        }\n    }[\"useConversation.useRTVIClientEvent\"]);\n    const getMergedMessages = ()=>{\n        const mergedMessages = [];\n        for(let i = 0; i < messages.length; i++){\n            const currentMessage = messages[i];\n            const lastMerged = mergedMessages[mergedMessages.length - 1];\n            const timeDiff = lastMerged ? Math.abs(new Date(currentMessage.createdAt).getTime() - new Date(lastMerged.createdAt).getTime()) : Infinity;\n            const shouldMerge = lastMerged && lastMerged.role === currentMessage.role && timeDiff < 3e4;\n            if (shouldMerge) {\n                mergedMessages[mergedMessages.length - 1] = {\n                    ...lastMerged,\n                    content: \"\".concat(lastMerged.content, \" \").concat(currentMessage.content),\n                    updatedAt: currentMessage.updatedAt || currentMessage.createdAt,\n                    final: currentMessage.final !== false\n                };\n            } else {\n                mergedMessages.push({\n                    ...currentMessage\n                });\n            }\n        }\n        return mergedMessages;\n    };\n    return {\n        messages: getMergedMessages()\n    };\n};\n_s119(useConversation, \"XMmDpnjU00w+f9sg0tMPxBuMT4s=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent\n    ];\n});\nconst Thinking = (param)=>{\n    let { \"aria-label\": ariaLabel = \"Loading\", className = \"\", initialDots = 1, interval = 500, maxDots = 3 } = param;\n    _s120();\n    const [dots, setDots] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialDots);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Thinking.useEffect\": ()=>{\n            const i = setInterval({\n                \"Thinking.useEffect.i\": ()=>{\n                    setDots({\n                        \"Thinking.useEffect.i\": (prevDots)=>prevDots % maxDots + 1\n                    }[\"Thinking.useEffect.i\"]);\n                }\n            }[\"Thinking.useEffect.i\"], interval);\n            return ({\n                \"Thinking.useEffect\": ()=>clearInterval(i)\n            })[\"Thinking.useEffect\"];\n        }\n    }[\"Thinking.useEffect\"], [\n        interval,\n        maxDots\n    ]);\n    const renderDots = ()=>{\n        return \".\".repeat(dots);\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        className,\n        \"aria-label\": ariaLabel,\n        children: renderDots()\n    });\n};\n_s120(Thinking, \"AnyJy/Z98eGPGmCDoV4IXBUo7Pw=\");\n_c240 = Thinking;\nconst Conversation = (param)=>{\n    let { classNames = {}, noAutoscroll = false } = param;\n    _s121();\n    const scrollRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isScrolledToBottom = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(true);\n    const transportState = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState)();\n    const maybeScrollToBottom = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Conversation.useCallback[maybeScrollToBottom]\": ()=>{\n            if (!scrollRef.current) return;\n            if (isScrolledToBottom.current) {\n                scrollRef.current.scrollTo({\n                    top: scrollRef.current.scrollHeight,\n                    behavior: \"smooth\"\n                });\n            }\n        }\n    }[\"Conversation.useCallback[maybeScrollToBottom]\"], []);\n    const updateScrollState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Conversation.useCallback[updateScrollState]\": ()=>{\n            if (!scrollRef.current || noAutoscroll) return;\n            isScrolledToBottom.current = Math.ceil(scrollRef.current.scrollHeight - scrollRef.current.scrollTop) <= Math.ceil(scrollRef.current.clientHeight);\n        }\n    }[\"Conversation.useCallback[updateScrollState]\"], [\n        noAutoscroll\n    ]);\n    const { messages } = useConversation({\n        onMessageAdded: {\n            \"Conversation.useConversation\": ()=>{\n                if (noAutoscroll) return;\n                maybeScrollToBottom();\n            }\n        }[\"Conversation.useConversation\"]\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Conversation.useEffect\": ()=>{\n            if (noAutoscroll) return;\n            maybeScrollToBottom();\n        }\n    }[\"Conversation.useEffect\"], [\n        messages,\n        maybeScrollToBottom,\n        noAutoscroll\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Conversation.useEffect\": ()=>{\n            const scrollElement = scrollRef.current;\n            if (!scrollElement) return;\n            const handleScroll2 = {\n                \"Conversation.useEffect.handleScroll2\": ()=>updateScrollState()\n            }[\"Conversation.useEffect.handleScroll2\"];\n            scrollElement.addEventListener(\"scroll\", handleScroll2);\n            updateScrollState();\n            return ({\n                \"Conversation.useEffect\": ()=>scrollElement.removeEventListener(\"scroll\", handleScroll2)\n            })[\"Conversation.useEffect\"];\n        }\n    }[\"Conversation.useEffect\"], [\n        updateScrollState\n    ]);\n    const isConnecting = transportState === \"authenticating\" || transportState === \"connecting\";\n    const isConnected = transportState === \"connected\" || transportState === \"ready\";\n    if (messages.length > 0) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            ref: scrollRef,\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:h-full vkui:overflow-y-auto vkui:p-4\", classNames.container),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:grid vkui:grid-cols-[min-content_1fr] vkui:gap-x-4 vkui:gap-y-2\", classNames.message),\n                children: messages.map((message, index2)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:font-semibold vkui:font-mono vkui:text-xs vkui:leading-6\", {\n                                    \"vkui:text-blue-500\": message.role === \"user\",\n                                    \"vkui:text-purple-500\": message.role === \"assistant\"\n                                }, classNames.role),\n                                children: message.role\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:flex-col vkui:gap-2\", classNames.messageContent),\n                                children: [\n                                    message.content || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Thinking, {\n                                        className: classNames.thinking\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:self-end vkui:text-xs vkui:text-gray-500 vkui:mb-1\", classNames.time),\n                                        children: new Date(message.createdAt).toLocaleTimeString()\n                                    })\n                                ]\n                            })\n                        ]\n                    }, index2))\n            })\n        });\n    }\n    if (isConnecting) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:items-center vkui:justify-center vkui:h-full\", classNames.container),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"vkui:text-muted-foreground vkui:text-sm\",\n                children: \"Connecting to agent...\"\n            })\n        });\n    }\n    if (!isConnected) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:items-center vkui:justify-center vkui:h-full\", classNames.container),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"vkui:text-center vkui:p-4\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: \"vkui:text-muted-foreground vkui:mb-2\",\n                        children: \"Not connected to agent\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                        className: \"vkui:text-sm vkui:text-muted-foreground vkui:max-w-md\",\n                        children: \"Connect to an agent to see conversation messages in real-time.\"\n                    })\n                ]\n            })\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:items-center vkui:justify-center vkui:h-full\", classNames.container),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: \"vkui:text-muted-foreground vkui:text-sm\",\n            children: \"Waiting for messages...\"\n        })\n    });\n};\n_s121(Conversation, \"Q62Wj5+bTtm6BR9ho3R4p5oBBmw=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState,\n        useConversation\n    ];\n});\n_c241 = Conversation;\nconst CopyText = (param)=>{\n    let { text, iconSize = 16, className = \"\" } = param;\n    _s122();\n    const [copied, setCopied] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const copyToClipboard = async ()=>{\n        try {\n            await navigator.clipboard.writeText(text);\n            setCopied(true);\n            setTimeout(()=>setCopied(false), 2e3);\n        } catch (err) {\n            console.error(\"Failed to copy text: \", err);\n        }\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:flex vkui:items-center vkui:overflow-hidden vkui:w-full\", className),\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"vkui:truncate vkui:min-w-0\",\n                children: text\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipProvider, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Tooltip, {\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipTrigger, {\n                            asChild: true,\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n                                variant: \"ghost\",\n                                size: \"icon-sm\",\n                                className: \"vkui:flex-none\",\n                                onClick: copyToClipboard,\n                                \"aria-label\": \"Copy to clipboard\",\n                                children: copied ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CopyCheck, {\n                                    size: iconSize\n                                }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Copy, {\n                                    size: iconSize\n                                })\n                            })\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TooltipContent, {\n                            children: copied ? \"Copied!\" : \"Copy to clipboard\"\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\n_s122(CopyText, \"NE86rL3vg4NVcTTWDavsT0hUBJs=\");\n_c242 = CopyText;\nconst aspectRatio = 45 / 26;\nconst PipecatLogo = (param)=>{\n    let { className = \"\", alt = \"Pipecat Logo\", color = \"#171717\", height, width } = param;\n    const resolvedHeight = height ? height : width ? Math.round(width / aspectRatio) : 100;\n    const resolvedWidth = width ? width : height ? Math.round(height * aspectRatio) : 200;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n        width: resolvedWidth,\n        height: resolvedHeight,\n        viewBox: \"0 0 45 26\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className,\n        \"aria-label\": alt,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M6.19825 0.104287C6.83144 -0.13411 7.5461 0.044779 7.99232 0.553371L13.8037 7.17714H31.1545L36.9659 0.553371C37.4121 0.044779 38.1268 -0.13411 38.76 0.104287C39.3932 0.342685 39.8124 0.948477 39.8124 1.62507V16.25H44.9582V19.5H36.5624V5.94116L33.112 9.87383C32.8035 10.2255 32.3584 10.4271 31.8905 10.4271H13.0677C12.5998 10.4271 12.1547 10.2255 11.8462 9.87383L8.39581 5.94116V19.5H0V16.25H5.14582V1.62507C5.14582 0.948477 5.56505 0.342685 6.19825 0.104287Z\",\n                fill: color\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M36.5624 22.75H44.9582V26H36.5624V22.75Z\",\n                fill: color\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M0 22.75H8.39581V26H0V22.75Z\",\n                fill: color\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M17.3333 17.3334C17.3333 18.53 16.3632 19.5 15.1666 19.5C13.97 19.5 13 18.53 13 17.3334C13 16.1367 13.97 15.1667 15.1666 15.1667C16.3632 15.1667 17.3333 16.1367 17.3333 17.3334Z\",\n                fill: color\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M31.9582 17.3334C31.9582 18.53 30.9882 19.5 29.7916 19.5C28.595 19.5 27.6249 18.53 27.6249 17.3334C27.6249 16.1367 28.595 15.1667 29.7916 15.1667C30.9882 15.1667 31.9582 16.1367 31.9582 17.3334Z\",\n                fill: color\n            })\n        ]\n    });\n};\n_c243 = PipecatLogo;\nconst SessionInfo = (param)=>{\n    let { noTransportType = false, noSessionId = false, noParticipantId = false, noRTVIVersion = false, sessionId, participantId } = param;\n    _s123();\n    const client = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClient)();\n    let transportTypeName = \"Unknown\";\n    if (client && \"dailyCallClient\" in client.transport) {\n        transportTypeName = \"Daily (v\".concat(_daily_co_daily_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].version(), \")\");\n    } else if (// @ts-expect-error - __proto__ not typed\n    (client == null ? void 0 : client.transport.__proto__.constructor.SERVICE_NAME) === \"small-webrtc-transport\") {\n        transportTypeName = \"Small WebRTC\";\n    }\n    const data = {};\n    if (!noTransportType) {\n        data[\"Transport\"] = transportTypeName;\n    }\n    if (!noSessionId) {\n        data[\"Session ID\"] = sessionId ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CopyText, {\n            className: \"vkui:justify-end\",\n            iconSize: 12,\n            text: sessionId\n        }) : \"---\";\n    }\n    if (!noParticipantId) {\n        data[\"Participant ID\"] = participantId ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CopyText, {\n            className: \"vkui:justify-end\",\n            iconSize: 12,\n            text: participantId\n        }) : \"---\";\n    }\n    if (!noRTVIVersion) {\n        data[\"RTVI\"] = (client == null ? void 0 : client.version) || \"---\";\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DataList, {\n        classNames: {\n            container: \"vkui:w-full vkui:overflow-hidden\"\n        },\n        data\n    });\n};\n_s123(SessionInfo, \"hgaSZ0ngj2OAqyLfgjWMCtFSOrU=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClient\n    ];\n});\n_c244 = SessionInfo;\nconst transcriptOverlayVariants = cva(\"vkui:mx-auto vkui:items-center vkui:justify-end vkui:text-center \\n  vkui:*:box-decoration-clone vkui:*:text-balance vkui:*:animate-in vkui:*:fade-in vkui:*:duration-300 vkui:*:mx-auto\\n  vkui:*:**:bg-foreground vkui:*:**:text-background vkui:*:**:box-decoration-clone vkui:*:**:text-balance\\n  \", {\n    variants: {\n        size: {\n            default: \"vkui:*:leading-6 vkui:*:**:px-3 vkui:*:**:py-1.5 vkui:*:**:text-sm vkui:*:**:font-medium vkui:*:**:rounded-lg\",\n            sm: \"vkui:*:leading-4 vkui:*:**:px-2 vkui:*:**:py-1 vkui:*:**:text-xs vkui:*:**:font-medium vkui:*:**:rounded-md\",\n            lg: \"vkui:*:leading-7 vkui:*:**:px-4 vkui:*:**:py-2 vkui:*:**:text-base vkui:*:**:font-medium vkui:*:**:rounded-xl\"\n        }\n    }\n});\nconst TranscriptOverlayPartComponent = (param)=>{\n    let { text } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        children: text\n    });\n};\n_c245 = TranscriptOverlayPartComponent;\nconst TranscriptOverlayComponent = (param)=>{\n    let { children, className, size: size2 = \"default\", turnEnd } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(transcriptOverlayVariants({\n            size: size2\n        }), turnEnd ? \"vkui:animate-out vkui:fade-out vkui:duration-1000 vkui:fill-mode-forwards\" : \"\", className),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n            children\n        })\n    });\n};\n_c246 = TranscriptOverlayComponent;\nconst TranscriptOverlay = (param)=>{\n    let { participant = \"remote\", className, size: size2 = \"default\" } = param;\n    _s124();\n    const [transcript, setTranscript] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [turnEnd, setIsTurnEnd] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotTtsText, (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"TranscriptOverlay.useRTVIClientEvent.useCallback\": (event)=>{\n            if (participant === \"local\") {\n                return;\n            }\n            if (turnEnd) {\n                setTranscript([]);\n                setIsTurnEnd(false);\n            }\n            setTranscript({\n                \"TranscriptOverlay.useRTVIClientEvent.useCallback\": (prev)=>[\n                        ...prev,\n                        event.text\n                    ]\n            }[\"TranscriptOverlay.useRTVIClientEvent.useCallback\"]);\n        }\n    }[\"TranscriptOverlay.useRTVIClientEvent.useCallback\"], [\n        turnEnd,\n        participant\n    ]));\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotStoppedSpeaking, (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"TranscriptOverlay.useRTVIClientEvent.useCallback\": ()=>{\n            if (participant === \"local\") {\n                return;\n            }\n            setIsTurnEnd(true);\n        }\n    }[\"TranscriptOverlay.useRTVIClientEvent.useCallback\"], [\n        participant\n    ]));\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotTtsStopped, (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"TranscriptOverlay.useRTVIClientEvent.useCallback\": ()=>{\n            if (participant === \"local\") {\n                return;\n            }\n            setIsTurnEnd(true);\n        }\n    }[\"TranscriptOverlay.useRTVIClientEvent.useCallback\"], [\n        participant\n    ]));\n    if (transcript.length === 0) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TranscriptOverlayComponent, {\n        size: size2,\n        turnEnd,\n        className,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TranscriptOverlayPartComponent, {\n            text: transcript.join(\" \")\n        })\n    });\n};\n_s124(TranscriptOverlay, \"oMVj9plSsbEHLF6JdfX1B9o0w0I=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent\n    ];\n});\n_c247 = TranscriptOverlay;\nconst UserVideoComponent = (param)=>{\n    let { buttonProps = {}, classNames = {}, dropdownButtonProps = {}, noDevicePicker = false, noVideo = false, videoProps = {}, onClick, isCamEnabled, availableCams = [], selectedCam, updateCam } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-muted vkui:rounded-xl vkui:relative\", {\n            \"vkui:aspect-video\": isCamEnabled && !noVideo,\n            \"vkui:h-12\": !isCamEnabled || noVideo\n        }, classNames.container),\n        children: [\n            !noVideo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientVideo, {\n                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:rounded-xl\", {\n                    \"vkui:hidden\": !isCamEnabled\n                }, classNames.video),\n                participant: \"local\",\n                ...videoProps\n            }),\n            (!isCamEnabled || noVideo) && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:absolute vkui:h-full vkui:left-28 vkui:flex vkui:items-center vkui:justify-start vkui:rounded-xl\", {\n                    \"vkui:left-16\": noDevicePicker\n                }, classNames.videoOffContainer),\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:text-muted-foreground vkui:font-mono vkui:text-sm\", classNames.videoOffText),\n                    children: isCamEnabled ? \"Camera is on\" : \"Camera is off\"\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"vkui:absolute vkui:bottom-2 vkui:left-2\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(ButtonGroup, {\n                    className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(classNames.buttongroup),\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n                            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(classNames.button),\n                            variant: \"outline\",\n                            onClick,\n                            ...buttonProps,\n                            children: isCamEnabled ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VideoIcon, {}) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VideoOffIcon, {})\n                        }),\n                        !noDevicePicker && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DeviceDropDown, {\n                            availableDevices: availableCams,\n                            selectedDevice: selectedCam,\n                            updateDevice: updateCam,\n                            classNames: {\n                                dropdownMenuCheckboxItem: classNames.dropdownMenuCheckboxItem,\n                                dropdownMenuContent: classNames.dropdownMenuContent,\n                                dropdownMenuTrigger: classNames.dropdownMenuTrigger\n                            },\n                            menuLabel: \"Camera device\",\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n                                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(classNames.dropdownMenuTrigger),\n                                variant: \"outline\",\n                                ...dropdownButtonProps,\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronDownIcon, {})\n                            })\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\n_c248 = UserVideoComponent;\nconst UserVideoControl = (props2)=>{\n    _s125();\n    const { availableCams, selectedCam, updateCam } = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaDevices)();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientCamToggle, {\n        children: (param)=>{\n            let { isCamEnabled, onClick } = param;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UserVideoComponent, {\n                ...props2,\n                isCamEnabled,\n                onClick,\n                availableCams,\n                selectedCam,\n                updateCam\n            });\n        }\n    });\n};\n_s125(UserVideoControl, \"7+MNo9GOiptOh4tS/LD3WLvbg78=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaDevices\n    ];\n});\n_c249 = UserVideoControl;\nconst initialState = {\n    resolvedTheme: \"light\",\n    theme: \"system\",\n    setTheme: ()=>null\n};\nconst ThemeProviderContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(initialState);\nfunction ThemeProvider(param) {\n    let { children, defaultTheme = \"system\", storageKey = \"voice-ui-kit-theme\", ...props2 } = param;\n    _s126();\n    const [theme, setTheme] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        \"ThemeProvider.useState\": ()=>{\n            if (true) {\n                const storedTheme = localStorage.getItem(storageKey);\n                return storedTheme || defaultTheme;\n            }\n            return defaultTheme;\n        }\n    }[\"ThemeProvider.useState\"]);\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ThemeProvider.useEffect\": ()=>{\n            setMounted(true);\n        }\n    }[\"ThemeProvider.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ThemeProvider.useEffect\": ()=>{\n            if (!mounted) return;\n            if (theme !== \"system\") {\n                localStorage.setItem(storageKey, theme);\n            } else {\n                localStorage.removeItem(storageKey);\n            }\n        }\n    }[\"ThemeProvider.useEffect\"], [\n        mounted,\n        storageKey,\n        theme\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ThemeProvider.useEffect\": ()=>{\n            if (!mounted) return;\n            const root = window.document.documentElement;\n            root.classList.remove(\"vkui:light\", \"vkui:dark\");\n            if (theme === \"system\") {\n                const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"vkui:dark\" : \"vkui:light\";\n                root.classList.add(systemTheme);\n                return;\n            }\n            root.classList.add(\"vkui:\".concat(theme));\n        }\n    }[\"ThemeProvider.useEffect\"], [\n        theme,\n        mounted\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ThemeProvider.useEffect\": ()=>{\n            if (!mounted) return;\n            const storedTheme = localStorage.getItem(storageKey);\n            if (!storedTheme) {\n                setTheme(defaultTheme);\n            }\n        }\n    }[\"ThemeProvider.useEffect\"], [\n        defaultTheme,\n        mounted,\n        storageKey\n    ]);\n    const value1 = {\n        theme,\n        setTheme: (newTheme)=>{\n            setTheme(newTheme);\n        },\n        resolvedTheme: theme === \"system\" ?  true && window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\" : theme\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThemeProviderContext.Provider, {\n        ...props2,\n        value: value1,\n        children\n    });\n}\n_s126(ThemeProvider, \"+7qyOnvYiT+kpWbTduSiBdSVRa8=\");\n_c250 = ThemeProvider;\nconst AudioClientHelper = (param)=>{\n    let { connectParams, transportType, clientOptions, children } = param;\n    _s127();\n    const [client, setClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AudioClientHelper.useEffect\": ()=>{\n            let transport;\n            switch(transportType){\n                case \"smallwebrtc\":\n                    transport = new _pipecat_ai_small_webrtc_transport__WEBPACK_IMPORTED_MODULE_8__.SmallWebRTCTransport();\n                    break;\n                case \"daily\":\n                default:\n                    transport = new _pipecat_ai_daily_transport__WEBPACK_IMPORTED_MODULE_7__.DailyTransport();\n                    break;\n            }\n            const pcClient = new _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.PipecatClient({\n                enableCam: false,\n                enableMic: true,\n                transport,\n                ...clientOptions\n            });\n            setClient(pcClient);\n            return ({\n                \"AudioClientHelper.useEffect\": ()=>{\n                    pcClient.disconnect();\n                }\n            })[\"AudioClientHelper.useEffect\"];\n        }\n    }[\"AudioClientHelper.useEffect\"], [\n        connectParams,\n        transportType,\n        clientOptions\n    ]);\n    const handleConnect = async ()=>{\n        if (!client || ![\n            \"initialized\",\n            \"disconnected\",\n            \"error\"\n        ].includes(client.state)) {\n            return;\n        }\n        setError(null);\n        try {\n            await client.connect(connectParams);\n        } catch (err) {\n            console.error(\"Connection error:\", err);\n            setError(\"Failed to start session: \".concat(err instanceof Error ? err.message : String(err)));\n        }\n    };\n    const handleDisconnect = async ()=>{\n        if (!client) return;\n        await client.disconnect();\n    };\n    if (!client) {\n        return children({\n            loading: true,\n            error: null\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThemeProvider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientProvider, {\n            client,\n            children: [\n                children({\n                    handleConnect,\n                    handleDisconnect,\n                    loading: false,\n                    error\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientAudio, {})\n            ]\n        })\n    });\n};\n_s127(AudioClientHelper, \"CCzUbJVzLIkI4l4ymhfkyLj/WEI=\");\n_c251 = AudioClientHelper;\nconst useTheme = ()=>{\n    _s128();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemeProviderContext);\n    if (context === void 0) throw new Error(\"useTheme must be used within a ThemeProvider\");\n    return context;\n};\n_s128(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction ThemeModeToggle() {\n    _s129();\n    const { setTheme } = useTheme();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DropdownMenu, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuTrigger, {\n                asChild: true,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Button, {\n                    variant: \"ghost\",\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SunIcon, {\n                            className: \"vkui:h-[1.2rem] vkui:w-[1.2rem] vkui:scale-100 vkui:rotate-0 vkui:transition-all vkui:dark:scale-0 vkui:dark:-rotate-90\"\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MoonIcon, {\n                            className: \"vkui:absolute vkui:h-[1.2rem] vkui:w-[1.2rem] vkui:scale-0 vkui:rotate-90 vkui:transition-all vkui:dark:scale-100 vkui:dark:rotate-0\"\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                            className: \"vkui:sr-only\",\n                            children: \"Toggle theme\"\n                        })\n                    ]\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(DropdownMenuContent, {\n                align: \"end\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuItem, {\n                        onClick: ()=>setTheme(\"light\"),\n                        children: \"Light\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuItem, {\n                        onClick: ()=>setTheme(\"dark\"),\n                        children: \"Dark\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DropdownMenuItem, {\n                        onClick: ()=>setTheme(\"system\"),\n                        children: \"System\"\n                    })\n                ]\n            })\n        ]\n    });\n}\n_s129(ThemeModeToggle, \"a3u8LKbpX4CXbd+e8SJ1SuQ9KPw=\", false, function() {\n    return [\n        useTheme\n    ];\n});\n_c252 = ThemeModeToggle;\nconst barCount = 10;\nconst BotAudioPanel = (param)=>{\n    let { className, collapsed = false } = param;\n    _s130();\n    const track = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaTrack)(\"audio\", \"bot\");\n    const [maxHeight, setMaxHeight] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(48);\n    const [width, setWidth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(4);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BotAudioPanel.useEffect\": ()=>{\n            if (!containerRef.current) return;\n            const observer = new ResizeObserver({\n                \"BotAudioPanel.useEffect\": (entries)=>{\n                    for (const entry of entries){\n                        const { width: width2, height } = entry.contentRect;\n                        const maxWidth = 240;\n                        const maxBarWidth = maxWidth / (2 * barCount - 1);\n                        const maxMaxHeight = 240 / (16 / 9);\n                        const barWidth = Math.max(Math.min(width2 / (barCount * 2), maxBarWidth), 2);\n                        const maxHeight2 = Math.max(Math.min(height, maxMaxHeight), 20);\n                        setMaxHeight(maxHeight2);\n                        setWidth(barWidth);\n                    }\n                }\n            }[\"BotAudioPanel.useEffect\"]);\n            observer.observe(containerRef.current);\n            return ({\n                \"BotAudioPanel.useEffect\": ()=>{\n                    observer.disconnect();\n                }\n            })[\"BotAudioPanel.useEffect\"];\n        }\n    }[\"BotAudioPanel.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Panel$1, {\n        className,\n        children: [\n            !collapsed && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelHeader, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelTitle, {\n                    children: \"Bot Audio\"\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelContent, {\n                className: \"vkui:overflow-hidden\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    ref: containerRef,\n                    className: \"vkui:relative vkui:aspect-video vkui:flex vkui:max-h-full vkui:overflow-hidden\",\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"vkui:m-auto\",\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.VoiceVisualizer, {\n                                participantType: \"bot\",\n                                backgroundColor: \"transparent\",\n                                barColor: \"#ad46ff\",\n                                barCount,\n                                barGap: width,\n                                barLineCap: \"square\",\n                                barMaxHeight: maxHeight,\n                                barOrigin: \"bottom\",\n                                barWidth: width\n                            })\n                        }),\n                        !track && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                            className: \"vkui:absolute vkui:inset-0 vkui:flex vkui:gap-1 vkui:items-center vkui:justify-center\",\n                            children: [\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MicOffIcon, {\n                                    size: 16\n                                }),\n                                !collapsed && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    className: \"vkui:font-mono vkui:text-xs\",\n                                    children: \"No audio\"\n                                })\n                            ]\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\n_s130(BotAudioPanel, \"g4+IFcm5nejNqmNjxUCdPuHcy9M=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaTrack\n    ];\n});\n_c253 = BotAudioPanel;\nconst BotVideoPanel = (param)=>{\n    let { className, collapsed = false } = param;\n    _s131();\n    const track = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaTrack)(\"video\", \"bot\");\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Panel$1, {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(className, {\n            \"vkui:border-none\": collapsed\n        }),\n        children: [\n            !collapsed && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelHeader, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelTitle, {\n                    children: \"Bot Video\"\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(PanelContent, {\n                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:relative vkui:overflow-hidden\", {\n                    \"vkui:p-0!\": collapsed\n                }),\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientVideo, {\n                        participant: \"bot\",\n                        className: \"vkui:aspect-video vkui:bg-muted vkui:rounded-sm vkui:max-h-full\",\n                        fit: \"contain\"\n                    }),\n                    !track && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"vkui:absolute vkui:inset-0 vkui:flex vkui:gap-1 vkui:items-center vkui:justify-center\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VideoOffIcon, {\n                                size: 16\n                            }),\n                            !collapsed && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                className: \"vkui:font-mono vkui:text-xs\",\n                                children: \"No video\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\n_s131(BotVideoPanel, \"J4OuSnk3GQGv62/08KKcIsmxSCc=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientMediaTrack\n    ];\n});\n_c254 = BotVideoPanel;\nconst ConversationPanel = (param)=>{\n    let { noConversation = false, noMetrics = false } = param;\n    const defaultValue = noConversation ? \"metrics\" : \"conversation\";\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Tabs, {\n        className: \"vkui:h-full\",\n        defaultValue,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Panel$1, {\n            className: \"vkui:h-full vkui:max-sm:border-none\",\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelHeader, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(TabsList, {\n                        children: [\n                            !noConversation && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(TabsTrigger, {\n                                className: \"vkui:text-mono-upper\",\n                                value: \"conversation\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MessagesSquareIcon, {\n                                        size: 16\n                                    }),\n                                    \"Conversation\"\n                                ]\n                            }),\n                            !noMetrics && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(TabsTrigger, {\n                                className: \"vkui:text-mono-upper\",\n                                value: \"metrics\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LineChartIcon, {\n                                        size: 16\n                                    }),\n                                    \"Metrics\"\n                                ]\n                            })\n                        ]\n                    })\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(PanelContent, {\n                    className: \"vkui:p-0! vkui:overflow-hidden vkui:h-full\",\n                    children: [\n                        !noConversation && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsContent, {\n                            value: \"conversation\",\n                            className: \"vkui:overflow-hidden vkui:h-full\",\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Conversation, {})\n                        }),\n                        !noMetrics && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsContent, {\n                            value: \"metrics\",\n                            className: \"vkui:h-full\",\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.M, {})\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\n_c255 = ConversationPanel;\nconst EventsPanel = (param)=>{\n    let { collapsed = false } = param;\n    _s132();\n    const client = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClient)();\n    const [events, setEvents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const scrollRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isScrolledToBottom = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(true);\n    const addEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EventsPanel.useCallback[addEvent]\": (data)=>{\n            if (scrollRef.current) {\n                isScrolledToBottom.current = Math.ceil(scrollRef.current.scrollHeight - scrollRef.current.scrollTop) <= Math.ceil(scrollRef.current.clientHeight);\n            }\n            setEvents({\n                \"EventsPanel.useCallback[addEvent]\": (prev)=>{\n                    return [\n                        ...prev,\n                        data\n                    ];\n                }\n            }[\"EventsPanel.useCallback[addEvent]\"]);\n        }\n    }[\"EventsPanel.useCallback[addEvent]\"], []);\n    const transportState = (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState)();\n    const lastTransportState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EventsPanel.useEffect\": ()=>{\n            if (transportState === lastTransportState.current) return;\n            addEvent({\n                event: \"transportState\",\n                message: \"Transport state changed: \".concat(transportState),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n            lastTransportState.current = transportState;\n        }\n    }[\"EventsPanel.useEffect\"], [\n        addEvent,\n        transportState\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EventsPanel.useEffect\": ()=>{\n            if (!client) return;\n            addEvent({\n                event: \"initialized\",\n                message: \"RTVI Client initialized (version \".concat(client.version, \")\"),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useEffect\"], [\n        addEvent,\n        client\n    ]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotConnected, {\n        \"EventsPanel.useRTVIClientEvent\": (participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotConnected,\n                message: \"Bot connected: \".concat(participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotDisconnected, {\n        \"EventsPanel.useRTVIClientEvent\": (participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotDisconnected,\n                message: \"Bot disconnected: \".concat(participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotReady, {\n        \"EventsPanel.useRTVIClientEvent\": (botData)=>{\n            var _botData_about;\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotReady,\n                message: \"Bot ready (v\".concat(botData.version, \"): \").concat(JSON.stringify((_botData_about = botData.about) !== null && _botData_about !== void 0 ? _botData_about : {})),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotStartedSpeaking, {\n        \"EventsPanel.useRTVIClientEvent\": ()=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotStartedSpeaking,\n                message: \"Bot started speaking\",\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotStoppedSpeaking, {\n        \"EventsPanel.useRTVIClientEvent\": ()=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.BotStoppedSpeaking,\n                message: \"Bot stopped speaking\",\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Connected, {\n        \"EventsPanel.useRTVIClientEvent\": ()=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Connected,\n                message: \"Client connected\",\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Disconnected, {\n        \"EventsPanel.useRTVIClientEvent\": ()=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Disconnected,\n                message: \"Client disconnected\",\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Error, {\n        \"EventsPanel.useRTVIClientEvent\": (message)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.Error,\n                message: \"Error: \".concat(JSON.stringify(message)),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ParticipantConnected, {\n        \"EventsPanel.useRTVIClientEvent\": (participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ParticipantConnected,\n                message: \"Participant connected: \".concat(participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ParticipantLeft, {\n        \"EventsPanel.useRTVIClientEvent\": (participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ParticipantLeft,\n                message: \"Participant left: \".concat(participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ServerMessage, {\n        \"EventsPanel.useRTVIClientEvent\": (data)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ServerMessage,\n                message: \"Server message: \".concat(JSON.stringify(data)),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.TrackStarted, {\n        \"EventsPanel.useRTVIClientEvent\": (track, participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.TrackStarted,\n                message: \"Track started: \".concat(track.kind, \" for participant \").concat(participant == null ? void 0 : participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.TrackStopped, {\n        \"EventsPanel.useRTVIClientEvent\": (track, participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.TrackStopped,\n                message: \"Track stopped: \".concat(track.kind, \" for participant \").concat(participant == null ? void 0 : participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ScreenTrackStarted, {\n        \"EventsPanel.useRTVIClientEvent\": (track, participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ScreenTrackStarted,\n                message: \"Screen track started: \".concat(track.kind, \" for participant \").concat(participant == null ? void 0 : participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ScreenTrackStopped, {\n        \"EventsPanel.useRTVIClientEvent\": (track, participant)=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.ScreenTrackStopped,\n                message: \"Screen track stopped: \".concat(track.kind, \" for participant \").concat(participant == null ? void 0 : participant.id),\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.UserStartedSpeaking, {\n        \"EventsPanel.useRTVIClientEvent\": ()=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.UserStartedSpeaking,\n                message: \"User started speaking\",\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent)(_pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.UserStoppedSpeaking, {\n        \"EventsPanel.useRTVIClientEvent\": ()=>{\n            addEvent({\n                event: _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.RTVIEvent.UserStoppedSpeaking,\n                message: \"User stopped speaking\",\n                time: /* @__PURE__ */ new Date().toLocaleTimeString()\n            });\n        }\n    }[\"EventsPanel.useRTVIClientEvent\"]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EventsPanel.useEffect\": ()=>{\n            if (!scrollRef.current) return;\n            if (!isScrolledToBottom.current) return;\n            scrollRef.current.scrollTo({\n                top: scrollRef.current.scrollHeight,\n                behavior: \"instant\"\n            });\n        }\n    }[\"EventsPanel.useEffect\"], [\n        events\n    ]);\n    const [filter, setFilter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const filteredEvents = events.filter((eventData)=>eventData.event.toString().toLowerCase().includes(filter) || eventData.message.toLowerCase().includes(filter));\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Panel$1, {\n        className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:bg-secondary/20 vkui:h-full vkui:rounded-none! vkui:max-sm:border-none vkui:sm:border-x-0 vkui:sm:mt-2\", {\n            \"vkui:bg-secondary vkui:opacity-50\": collapsed\n        }),\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(PanelHeader, {\n                className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)(\"vkui:gap-4 vkui:justify-start vkui:items-center\", {\n                    \"vkui:py-2!\": collapsed\n                }),\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelTitle, {\n                        children: \"Events\"\n                    }),\n                    !collapsed && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"vkui:relative\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: \"vkui:absolute vkui:inset-y-0 vkui:left-0 vkui:flex vkui:items-center vkui:pl-2 vkui:pointer-events-none\",\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FunnelIcon, {\n                                    size: 16\n                                })\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Input, {\n                                type: \"text\",\n                                placeholder: \"Filter\",\n                                className: \"vkui:bg-secondary vkui:max-w-48 vkui:ps-8\",\n                                onChange: (e)=>{\n                                    setFilter(e.target.value.toLowerCase());\n                                }\n                            })\n                        ]\n                    })\n                ]\n            }),\n            !collapsed && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelContent, {\n                ref: scrollRef,\n                className: \"vkui:overflow-y-auto\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: \"vkui:grid vkui:grid-cols-[min-content_min-content_1fr] vkui:gap-x-4 vkui:gap-y-2 vkui:items-center vkui:font-mono vkui:text-xs\",\n                    children: filteredEvents.map((eventData, index2)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                            children: [\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: \"vkui:text-xs vkui:text-muted-foreground vkui:text-nowrap\",\n                                    children: eventData.time\n                                }),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: \"vkui:font-semibold\",\n                                    children: eventData.event\n                                }),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    children: eventData.message\n                                })\n                            ]\n                        }, index2))\n                })\n            })\n        ]\n    });\n};\n_s132(EventsPanel, \"MOo9n40g+fny5zMxQxpn2x7RYZQ=\", false, function() {\n    return [\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClient,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.usePipecatClientTransportState,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent,\n        _pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.useRTVIClientEvent\n    ];\n});\n_c256 = EventsPanel;\nconst InfoPanel = (param)=>{\n    let { noAudioOutput = false, noSessionInfo = false, noStatusInfo = false, noUserAudio = false, noUserVideo = false, participantId, sessionId } = param;\n    const noDevices = noAudioOutput && noUserAudio && noUserVideo;\n    const noInfoPanel = noStatusInfo && noDevices && noSessionInfo;\n    if (noInfoPanel) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Panel$1, {\n        className: \"vkui:h-full vkui:overflow-y-auto vkui:overflow-x-hidden\",\n        children: [\n            !noStatusInfo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelHeader, {\n                        variant: \"inline\",\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelTitle, {\n                            children: \"Status\"\n                        })\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelContent, {\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClientStatus, {})\n                    })\n                ]\n            }),\n            !noDevices && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelHeader, {\n                        className: \"vkui:border-t vkui:border-t-border\",\n                        variant: \"inline\",\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelTitle, {\n                            children: \"Devices\"\n                        })\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(PanelContent, {\n                        children: [\n                            !noUserAudio && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UserAudioControl, {}),\n                            !noUserVideo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UserVideoControl, {}),\n                            !noAudioOutput && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AudioOutput, {})\n                        ]\n                    })\n                ]\n            }),\n            !noSessionInfo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelHeader, {\n                        className: \"vkui:border-t vkui:border-t-border\",\n                        variant: \"inline\",\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelTitle, {\n                            children: \"Session\"\n                        })\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PanelContent, {\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SessionInfo, {\n                            sessionId,\n                            participantId\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\n_c257 = InfoPanel;\nconst defaultClientOptions = {};\nconst ConsoleTemplate = (param)=>{\n    let { audioCodec = \"default\", clientOptions = defaultClientOptions, connectParams, noAudioOutput = false, noBotAudio = false, noBotVideo = false, noConversation = false, noLogo = false, noMetrics = false, noSessionInfo = false, noStatusInfo = false, noThemeSwitch = false, noUserAudio = false, noUserVideo = false, title = \"Pipecat Playground\", transportType = \"daily\", videoCodec = \"default\" } = param;\n    _s133();\n    const [isBotAreaCollapsed, setIsBotAreaCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isInfoPanelCollapsed, setIsInfoPanelCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isEventsPanelCollapsed, setIsEventsPanelCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [sessionId, setSessionId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [participantId, setParticipantId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [client, setClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isClientReady, setIsClientReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { resolvedTheme } = useTheme();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function initClient() {\n        if (false) {}\n        let transport;\n        switch(transportType){\n            case \"smallwebrtc\":\n                transport = new _pipecat_ai_small_webrtc_transport__WEBPACK_IMPORTED_MODULE_8__.SmallWebRTCTransport();\n                break;\n            case \"daily\":\n            default:\n                transport = new _pipecat_ai_daily_transport__WEBPACK_IMPORTED_MODULE_7__.DailyTransport();\n                transport.dailyCallClient.on(\"meeting-session-updated\", {\n                    \"ConsoleTemplate.useEffect.initClient\": (event)=>{\n                        setSessionId(event.meetingSession.id);\n                    }\n                }[\"ConsoleTemplate.useEffect.initClient\"]);\n                break;\n        }\n        var _ref;\n        const pcClient = new _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_5__.PipecatClient({\n            enableCam: !noUserVideo,\n            enableMic: !noUserAudio,\n            ...clientOptions,\n            transport: (_ref = clientOptions == null ? void 0 : clientOptions.transport) !== null && _ref !== void 0 ? _ref : transport,\n            callbacks: {\n                onParticipantJoined: {\n                    \"ConsoleTemplate.useEffect.initClient\": (participant)=>{\n                        var _a, _b;\n                        setParticipantId(participant.id || \"\");\n                        (_b = (_a = clientOptions == null ? void 0 : clientOptions.callbacks) == null ? void 0 : _a.onParticipantJoined) == null ? void 0 : _b.call(_a, participant);\n                    }\n                }[\"ConsoleTemplate.useEffect.initClient\"],\n                onTrackStarted (track, participant) {\n                    var _a, _b;\n                    if ((participant == null ? void 0 : participant.id) && participant.local) setParticipantId(participant.id);\n                    (_b = (_a = clientOptions == null ? void 0 : clientOptions.callbacks) == null ? void 0 : _a.onTrackStarted) == null ? void 0 : _b.call(_a, track, participant);\n                }\n            }\n        });\n        pcClient.initDevices();\n        setClient(pcClient);\n        setIsClientReady(true);\n        return ({\n            \"ConsoleTemplate.useEffect.initClient\": ()=>{\n                pcClient.disconnect();\n            }\n        })[\"ConsoleTemplate.useEffect.initClient\"];\n    }, [\n        clientOptions,\n        noUserAudio,\n        noUserVideo,\n        transportType\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function updateSmallWebRTCCodecs() {\n        if (!client || transportType !== \"smallwebrtc\") return;\n        const transport = client.transport;\n        if (audioCodec) {\n            transport.setAudioCodec(audioCodec);\n        }\n        if (videoCodec) {\n            transport.setVideoCodec(videoCodec);\n        }\n    }, [\n        audioCodec,\n        client,\n        videoCodec,\n        transportType\n    ]);\n    const handleConnect = async ()=>{\n        if (!client) return;\n        try {\n            await client.connect(connectParams);\n        } catch (e) {\n            await client.disconnect();\n        }\n    };\n    const handleDisconnect = async ()=>{\n        if (!client) return;\n        await client.disconnect();\n    };\n    if (!isClientReady || !client) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: \"flex items-center justify-center h-full w-full\",\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                children: \"Loading...\"\n            })\n        });\n    }\n    const noBotArea = noBotAudio && noBotVideo;\n    const noConversationPanel = noConversation && noMetrics;\n    const noDevices = noAudioOutput && noUserAudio && noUserVideo;\n    const noInfoPanel = noStatusInfo && noDevices && noSessionInfo;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientProvider, {\n        client,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n            className: \"vkui:grid vkui:grid-cols-1 vkui:grid-rows-[min-content_1fr] vkui:sm:grid-rows-[min-content_1fr_auto] vkui:h-full vkui:w-full vkui:overflow-auto\",\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: \"vkui:grid vkui:grid-cols-2 vkui:sm:grid-cols-[150px_1fr_150px] vkui:gap-2 vkui:items-center vkui:justify-center vkui:p-2 vkui:bg-background vkui:sm:relative vkui:top-0 vkui:w-full vkui:z-10\",\n                    children: [\n                        noLogo ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                            className: \"vkui:h-6\"\n                        }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PipecatLogo, {\n                            className: \"vkui:h-6 vkui:w-auto\",\n                            color: resolvedTheme === \"dark\" ? \"#ffffff\" : \"#171717\"\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n                            className: \"vkui:hidden vkui:sm:block vkui:text-center\",\n                            children: title\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                            className: \"vkui:flex vkui:items-center vkui:justify-end vkui:gap-4\",\n                            children: [\n                                !noThemeSwitch && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThemeModeToggle, {}),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConnectButton, {\n                                    onConnect: handleConnect,\n                                    onDisconnect: handleDisconnect\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: \"vkui:hidden vkui:sm:block\",\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(ResizablePanelGroup, {\n                        direction: \"vertical\",\n                        className: \"vkui:h-full\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ResizablePanel, {\n                                defaultSize: 70,\n                                minSize: 50,\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(ResizablePanelGroup, {\n                                    direction: \"horizontal\",\n                                    children: [\n                                        !noBotArea && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(ResizablePanel, {\n                                                    className: \"vkui:flex vkui:flex-col vkui:gap-2 vkui:p-2\",\n                                                    defaultSize: 15,\n                                                    maxSize: 30,\n                                                    minSize: 9,\n                                                    collapsible: true,\n                                                    collapsedSize: 8,\n                                                    onCollapse: ()=>setIsBotAreaCollapsed(true),\n                                                    onExpand: ()=>setIsBotAreaCollapsed(false),\n                                                    children: [\n                                                        !noBotAudio && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BotAudioPanel, {\n                                                            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)({\n                                                                \"vkui:max-h-[calc(50%-4px)] vkui:mt-auto\": !noBotVideo\n                                                            }),\n                                                            collapsed: isBotAreaCollapsed\n                                                        }),\n                                                        !noBotVideo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BotVideoPanel, {\n                                                            className: (0,_Metrics_B9xaddk1_js__WEBPACK_IMPORTED_MODULE_4__.a)({\n                                                                \"vkui:max-h-[calc(50%-4px)] vkui:mb-auto\": !noBotAudio\n                                                            }),\n                                                            collapsed: isBotAreaCollapsed\n                                                        })\n                                                    ]\n                                                }),\n                                                (!noConversationPanel || !noInfoPanel) && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ResizableHandle, {\n                                                    withHandle: true\n                                                })\n                                            ]\n                                        }),\n                                        !noConversationPanel && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ResizablePanel, {\n                                                    className: \"vkui:h-full vkui:p-2\",\n                                                    defaultSize: 60,\n                                                    minSize: 40,\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConversationPanel, {\n                                                        noConversation,\n                                                        noMetrics\n                                                    })\n                                                }),\n                                                !noInfoPanel && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ResizableHandle, {\n                                                    withHandle: true\n                                                })\n                                            ]\n                                        }),\n                                        !noInfoPanel && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ResizablePanel, {\n                                            id: \"info-panel\",\n                                            collapsible: true,\n                                            collapsedSize: 4,\n                                            minSize: 15,\n                                            defaultSize: 20,\n                                            onCollapse: ()=>setIsInfoPanelCollapsed(true),\n                                            onExpand: ()=>setIsInfoPanelCollapsed(false),\n                                            className: \"vkui:p-2\",\n                                            children: isInfoPanelCollapsed ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                                                className: \"vkui:flex vkui:flex-col vkui:items-center vkui:justify-center vkui:gap-4 vkui:h-full\",\n                                                children: [\n                                                    !noStatusInfo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Popover, {\n                                                        children: [\n                                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverTrigger, {\n                                                                asChild: true,\n                                                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n                                                                    variant: \"ghost\",\n                                                                    size: \"icon\",\n                                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronsLeftRightEllipsisIcon, {\n                                                                        size: 16\n                                                                    })\n                                                                })\n                                                            }),\n                                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverContent, {\n                                                                side: \"left\",\n                                                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClientStatus, {})\n                                                            })\n                                                        ]\n                                                    }),\n                                                    !noDevices && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Popover, {\n                                                        children: [\n                                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverTrigger, {\n                                                                asChild: true,\n                                                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n                                                                    variant: \"ghost\",\n                                                                    size: \"icon\",\n                                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MicIcon, {\n                                                                        size: 16\n                                                                    })\n                                                                })\n                                                            }),\n                                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(PopoverContent, {\n                                                                className: \"vkui:flex vkui:flex-col vkui:gap-2\",\n                                                                side: \"left\",\n                                                                children: [\n                                                                    !noUserAudio && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UserAudioControl, {}),\n                                                                    !noUserVideo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UserVideoControl, {}),\n                                                                    !noAudioOutput && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(AudioOutput, {})\n                                                                ]\n                                                            })\n                                                        ]\n                                                    }),\n                                                    !noSessionInfo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Popover, {\n                                                        children: [\n                                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverTrigger, {\n                                                                asChild: true,\n                                                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Button, {\n                                                                    variant: \"ghost\",\n                                                                    size: \"icon\",\n                                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoIcon, {\n                                                                        size: 16\n                                                                    })\n                                                                })\n                                                            }),\n                                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PopoverContent, {\n                                                                side: \"left\",\n                                                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SessionInfo, {\n                                                                    sessionId,\n                                                                    participantId\n                                                                })\n                                                            })\n                                                        ]\n                                                    })\n                                                ]\n                                            }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoPanel, {\n                                                noAudioOutput,\n                                                noSessionInfo,\n                                                noStatusInfo,\n                                                noUserAudio,\n                                                noUserVideo,\n                                                participantId,\n                                                sessionId\n                                            })\n                                        })\n                                    ]\n                                })\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ResizableHandle, {\n                                withHandle: true\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ResizablePanel, {\n                                collapsible: true,\n                                collapsedSize: 4,\n                                minSize: 7,\n                                onCollapse: ()=>setIsEventsPanelCollapsed(true),\n                                onExpand: ()=>setIsEventsPanelCollapsed(false),\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EventsPanel, {\n                                    collapsed: isEventsPanelCollapsed\n                                })\n                            })\n                        ]\n                    })\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Tabs, {\n                    defaultValue: noBotArea ? noConversationPanel ? \"info\" : \"conversation\" : \"bot\",\n                    className: \"vkui:flex vkui:flex-col vkui:gap-0 vkui:sm:hidden vkui:overflow-hidden\",\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                            className: \"vkui:flex vkui:flex-col vkui:overflow-hidden\",\n                            children: [\n                                !noBotArea && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(TabsContent, {\n                                    value: \"bot\",\n                                    className: \"vkui:flex-1 vkui:overflow-auto vkui:flex vkui:flex-col vkui:gap-4 vkui:p-2\",\n                                    children: [\n                                        !noBotAudio && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BotAudioPanel, {}),\n                                        !noBotVideo && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BotVideoPanel, {})\n                                    ]\n                                }),\n                                !noConversationPanel && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsContent, {\n                                    value: \"conversation\",\n                                    className: \"vkui:flex-1 vkui:overflow-auto\",\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConversationPanel, {\n                                        noConversation,\n                                        noMetrics\n                                    })\n                                }),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsContent, {\n                                    value: \"info\",\n                                    className: \"vkui:flex-1 vkui:overflow-auto vkui:p-2\",\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoPanel, {\n                                        noAudioOutput,\n                                        noUserAudio,\n                                        noUserVideo,\n                                        participantId,\n                                        sessionId\n                                    })\n                                }),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsContent, {\n                                    value: \"events\",\n                                    className: \"vkui:flex-1 vkui:overflow-auto\",\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EventsPanel, {})\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(TabsList, {\n                            className: \"vkui:w-full vkui:h-12 vkui:rounded-none vkui:z-10 vkui:mt-auto vkui:shrink-0\",\n                            children: [\n                                !noBotArea && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsTrigger, {\n                                    value: \"bot\",\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BotIcon, {})\n                                }),\n                                !noConversationPanel && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsTrigger, {\n                                    value: \"conversation\",\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MessagesSquareIcon, {})\n                                }),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsTrigger, {\n                                    value: \"info\",\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(InfoIcon, {})\n                                }),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(TabsTrigger, {\n                                    value: \"events\",\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronsLeftRightEllipsisIcon, {})\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                !noAudioOutput && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_pipecat_ai_client_react__WEBPACK_IMPORTED_MODULE_2__.PipecatClientAudio, {})\n            ]\n        })\n    });\n};\n_s133(ConsoleTemplate, \"oK+hp0mRU7+jICeknzmulVpyNDM=\", false, function() {\n    return [\n        useTheme\n    ];\n});\n_c258 = ConsoleTemplate;\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94, _c95, _c96, _c97, _c98, _c99, _c100, _c101, _c102, _c103, _c104, _c105, _c106, _c107, _c108, _c109, _c110, _c111, _c112, _c113, _c114, _c115, _c116, _c117, _c118, _c119, _c120, _c121, _c122, _c123, _c124, _c125, _c126, _c127, _c128, _c129, _c130, _c131, _c132, _c133, _c134, _c135, _c136, _c137, _c138, _c139, _c140, _c141, _c142, _c143, _c144, _c145, _c146, _c147, _c148, _c149, _c150, _c151, _c152, _c153, _c154, _c155, _c156, _c157, _c158, _c159, _c160, _c161, _c162, _c163, _c164, _c165, _c166, _c167, _c168, _c169, _c170, _c171, _c172, _c173, _c174, _c175, _c176, _c177, _c178, _c179, _c180, _c181, _c182, _c183, _c184, _c185, _c186, _c187, _c188, _c189, _c190, _c191, _c192, _c193, _c194, _c195, _c196, _c197, _c198, _c199, _c200, _c201, _c202, _c203, _c204, _c205, _c206, _c207, _c208, _c209, _c210, _c211, _c212, _c213, _c214, _c215, _c216, _c217, _c218, _c219, _c220, _c221, _c222, _c223, _c224, _c225, _c226, _c227, _c228, _c229, _c230, _c231, _c232, _c233, _c234, _c235, _c236, _c237, _c238, _c239, _c240, _c241, _c242, _c243, _c244, _c245, _c246, _c247, _c248, _c249, _c250, _c251, _c252, _c253, _c254, _c255, _c256, _c257, _c258;\n$RefreshReg$(_c, \"Primitive$NODES.reduce\");\n$RefreshReg$(_c1, \"Primitive\");\n$RefreshReg$(_c2, \"DismissableLayer\");\n$RefreshReg$(_c3, \"DismissableLayerBranch$React.forwardRef\");\n$RefreshReg$(_c4, \"DismissableLayerBranch\");\n$RefreshReg$(_c5, \"FocusScope\");\n$RefreshReg$(_c6, \"Arrow$1$React.forwardRef\");\n$RefreshReg$(_c7, \"Arrow$1\");\n$RefreshReg$(_c8, \"Popper\");\n$RefreshReg$(_c9, \"PopperAnchor$React.forwardRef\");\n$RefreshReg$(_c10, \"PopperAnchor\");\n$RefreshReg$(_c11, \"PopperContent$React.forwardRef\");\n$RefreshReg$(_c12, \"PopperContent\");\n$RefreshReg$(_c13, \"PopperArrow$React.forwardRef\");\n$RefreshReg$(_c14, \"PopperArrow\");\n$RefreshReg$(_c15, \"Portal$4\");\n$RefreshReg$(_c16, \"VisuallyHidden$React.forwardRef\");\n$RefreshReg$(_c17, \"VisuallyHidden\");\n$RefreshReg$(_c18, \"ItoI\");\n$RefreshReg$(_c19, \"SideCar$1\");\n$RefreshReg$(_c20, \"RemoveScroll\");\n$RefreshReg$(_c21, \"Style\");\n$RefreshReg$(_c22, \"RemoveScrollBar\");\n$RefreshReg$(_c23, \"RemoveScrollSideCar\");\n$RefreshReg$(_c24, \"ReactRemoveScroll\");\n$RefreshReg$(_c25, \"Select$1\");\n$RefreshReg$(_c26, \"SelectTrigger$1$React.forwardRef\");\n$RefreshReg$(_c27, \"SelectTrigger$1\");\n$RefreshReg$(_c28, \"SelectValue$1$React.forwardRef\");\n$RefreshReg$(_c29, \"SelectValue$1\");\n$RefreshReg$(_c30, \"SelectIcon$React.forwardRef\");\n$RefreshReg$(_c31, \"SelectIcon\");\n$RefreshReg$(_c32, \"SelectPortal\");\n$RefreshReg$(_c33, \"SelectContent$1$React.forwardRef\");\n$RefreshReg$(_c34, \"SelectContent$1\");\n$RefreshReg$(_c35, \"SelectContentImpl\");\n$RefreshReg$(_c36, \"SelectItemAlignedPosition$React.forwardRef\");\n$RefreshReg$(_c37, \"SelectItemAlignedPosition\");\n$RefreshReg$(_c38, \"SelectPopperPosition$React.forwardRef\");\n$RefreshReg$(_c39, \"SelectPopperPosition\");\n$RefreshReg$(_c40, \"SelectViewport$React.forwardRef\");\n$RefreshReg$(_c41, \"SelectViewport\");\n$RefreshReg$(_c42, \"SelectGroup$1$React.forwardRef\");\n$RefreshReg$(_c43, \"SelectGroup$1\");\n$RefreshReg$(_c44, \"SelectLabel$React.forwardRef\");\n$RefreshReg$(_c45, \"SelectLabel\");\n$RefreshReg$(_c46, \"SelectItem$1$React.forwardRef\");\n$RefreshReg$(_c47, \"SelectItem$1\");\n$RefreshReg$(_c48, \"SelectItemText$React.forwardRef\");\n$RefreshReg$(_c49, \"SelectItemText\");\n$RefreshReg$(_c50, \"SelectItemIndicator$React.forwardRef\");\n$RefreshReg$(_c51, \"SelectItemIndicator\");\n$RefreshReg$(_c52, \"SelectScrollUpButton$1$React.forwardRef\");\n$RefreshReg$(_c53, \"SelectScrollUpButton$1\");\n$RefreshReg$(_c54, \"SelectScrollDownButton$1$React.forwardRef\");\n$RefreshReg$(_c55, \"SelectScrollDownButton$1\");\n$RefreshReg$(_c56, \"SelectScrollButtonImpl\");\n$RefreshReg$(_c57, \"SelectSeparator$1$React.forwardRef\");\n$RefreshReg$(_c58, \"SelectSeparator$1\");\n$RefreshReg$(_c59, \"SelectArrow$React.forwardRef\");\n$RefreshReg$(_c60, \"SelectArrow\");\n$RefreshReg$(_c61, \"SelectBubbleInput\");\n$RefreshReg$(_c62, \"Icon\");\n$RefreshReg$(_c63, \"CopyCheck\");\n$RefreshReg$(_c64, \"Copy\");\n$RefreshReg$(_c65, \"Select\");\n$RefreshReg$(_c66, \"SelectGroup\");\n$RefreshReg$(_c67, \"SelectValue\");\n$RefreshReg$(_c68, \"SelectTrigger\");\n$RefreshReg$(_c69, \"SelectGuide\");\n$RefreshReg$(_c70, \"SelectContent\");\n$RefreshReg$(_c71, \"SelectItem\");\n$RefreshReg$(_c72, \"SelectSeparator\");\n$RefreshReg$(_c73, \"SelectScrollUpButton\");\n$RefreshReg$(_c74, \"SelectScrollDownButton\");\n$RefreshReg$(_c75, \"AudioOutput\");\n$RefreshReg$(_c76, \"DataList\");\n$RefreshReg$(_c77, \"ClientStatus\");\n$RefreshReg$(_c78, \"Button\");\n$RefreshReg$(_c79, \"ConnectButtonComponent\");\n$RefreshReg$(_c80, \"ConnectButton\");\n$RefreshReg$(_c81, \"ButtonGroup\");\n$RefreshReg$(_c82, \"VoiceVisualizer\");\n$RefreshReg$(_c83, \"Presence\");\n$RefreshReg$(_c84, \"RovingFocusGroup$React.forwardRef\");\n$RefreshReg$(_c85, \"RovingFocusGroup\");\n$RefreshReg$(_c86, \"RovingFocusGroupImpl\");\n$RefreshReg$(_c87, \"RovingFocusGroupItem$React.forwardRef\");\n$RefreshReg$(_c88, \"RovingFocusGroupItem\");\n$RefreshReg$(_c89, \"Menu\");\n$RefreshReg$(_c90, \"MenuAnchor\");\n$RefreshReg$(_c91, \"MenuPortal\");\n$RefreshReg$(_c92, \"MenuContent$React.forwardRef\");\n$RefreshReg$(_c93, \"MenuContent\");\n$RefreshReg$(_c94, \"MenuRootContentModal\");\n$RefreshReg$(_c95, \"MenuRootContentNonModal\");\n$RefreshReg$(_c96, \"MenuContentImpl\");\n$RefreshReg$(_c97, \"MenuGroup\");\n$RefreshReg$(_c98, \"MenuLabel$React.forwardRef\");\n$RefreshReg$(_c99, \"MenuLabel\");\n$RefreshReg$(_c100, \"MenuItem\");\n$RefreshReg$(_c101, \"MenuItemImpl\");\n$RefreshReg$(_c102, \"MenuCheckboxItem$React.forwardRef\");\n$RefreshReg$(_c103, \"MenuCheckboxItem\");\n$RefreshReg$(_c104, \"MenuRadioGroup$React.forwardRef\");\n$RefreshReg$(_c105, \"MenuRadioGroup\");\n$RefreshReg$(_c106, \"MenuRadioItem$React.forwardRef\");\n$RefreshReg$(_c107, \"MenuRadioItem\");\n$RefreshReg$(_c108, \"MenuItemIndicator$React.forwardRef\");\n$RefreshReg$(_c109, \"MenuItemIndicator\");\n$RefreshReg$(_c110, \"MenuSeparator$React.forwardRef\");\n$RefreshReg$(_c111, \"MenuSeparator\");\n$RefreshReg$(_c112, \"MenuArrow$React.forwardRef\");\n$RefreshReg$(_c113, \"MenuArrow\");\n$RefreshReg$(_c114, \"MenuSub\");\n$RefreshReg$(_c115, \"MenuSubTrigger$React.forwardRef\");\n$RefreshReg$(_c116, \"MenuSubTrigger\");\n$RefreshReg$(_c117, \"MenuSubContent$React.forwardRef\");\n$RefreshReg$(_c118, \"MenuSubContent\");\n$RefreshReg$(_c119, \"DropdownMenu$1\");\n$RefreshReg$(_c120, \"DropdownMenuTrigger$1$React.forwardRef\");\n$RefreshReg$(_c121, \"DropdownMenuTrigger$1\");\n$RefreshReg$(_c122, \"DropdownMenuPortal$1\");\n$RefreshReg$(_c123, \"DropdownMenuContent$1$React.forwardRef\");\n$RefreshReg$(_c124, \"DropdownMenuContent$1\");\n$RefreshReg$(_c125, \"DropdownMenuGroup$1$React.forwardRef\");\n$RefreshReg$(_c126, \"DropdownMenuGroup$1\");\n$RefreshReg$(_c127, \"DropdownMenuLabel$1$React.forwardRef\");\n$RefreshReg$(_c128, \"DropdownMenuLabel$1\");\n$RefreshReg$(_c129, \"DropdownMenuItem$1$React.forwardRef\");\n$RefreshReg$(_c130, \"DropdownMenuItem$1\");\n$RefreshReg$(_c131, \"DropdownMenuCheckboxItem$1$React.forwardRef\");\n$RefreshReg$(_c132, \"DropdownMenuCheckboxItem$1\");\n$RefreshReg$(_c133, \"DropdownMenuRadioGroup$1$React.forwardRef\");\n$RefreshReg$(_c134, \"DropdownMenuRadioGroup$1\");\n$RefreshReg$(_c135, \"DropdownMenuRadioItem$1$React.forwardRef\");\n$RefreshReg$(_c136, \"DropdownMenuRadioItem$1\");\n$RefreshReg$(_c137, \"DropdownMenuItemIndicator$React.forwardRef\");\n$RefreshReg$(_c138, \"DropdownMenuItemIndicator\");\n$RefreshReg$(_c139, \"DropdownMenuSeparator$1$React.forwardRef\");\n$RefreshReg$(_c140, \"DropdownMenuSeparator$1\");\n$RefreshReg$(_c141, \"DropdownMenuArrow$React.forwardRef\");\n$RefreshReg$(_c142, \"DropdownMenuArrow\");\n$RefreshReg$(_c143, \"DropdownMenuSub$1\");\n$RefreshReg$(_c144, \"DropdownMenuSubTrigger$1$React.forwardRef\");\n$RefreshReg$(_c145, \"DropdownMenuSubTrigger$1\");\n$RefreshReg$(_c146, \"DropdownMenuSubContent$1$React.forwardRef\");\n$RefreshReg$(_c147, \"DropdownMenuSubContent$1\");\n$RefreshReg$(_c148, \"DropdownMenu\");\n$RefreshReg$(_c149, \"DropdownMenuPortal\");\n$RefreshReg$(_c150, \"DropdownMenuTrigger\");\n$RefreshReg$(_c151, \"DropdownMenuContent\");\n$RefreshReg$(_c152, \"DropdownMenuGroup\");\n$RefreshReg$(_c153, \"DropdownMenuItem\");\n$RefreshReg$(_c154, \"DropdownMenuCheckboxItem\");\n$RefreshReg$(_c155, \"DropdownMenuRadioGroup\");\n$RefreshReg$(_c156, \"DropdownMenuRadioItem\");\n$RefreshReg$(_c157, \"DropdownMenuLabel\");\n$RefreshReg$(_c158, \"DropdownMenuSeparator\");\n$RefreshReg$(_c159, \"DropdownMenuShortcut\");\n$RefreshReg$(_c160, \"DropdownMenuSub\");\n$RefreshReg$(_c161, \"DropdownMenuSubTrigger\");\n$RefreshReg$(_c162, \"DropdownMenuSubContent\");\n$RefreshReg$(_c163, \"DeviceDropDown\");\n$RefreshReg$(_c164, \"UserAudioComponent\");\n$RefreshReg$(_c165, \"UserAudioControl\");\n$RefreshReg$(_c166, \"Card\");\n$RefreshReg$(_c167, \"CardHeader\");\n$RefreshReg$(_c168, \"CardTitle\");\n$RefreshReg$(_c169, \"CardDescription\");\n$RefreshReg$(_c170, \"CardAction\");\n$RefreshReg$(_c171, \"CardContent\");\n$RefreshReg$(_c172, \"CardFooter\");\n$RefreshReg$(_c173, \"FullScreenContainer\");\n$RefreshReg$(_c174, \"ErrorCard\");\n$RefreshReg$(_c175, \"Input\");\n$RefreshReg$(_c176, \"LayoutSection\");\n$RefreshReg$(_c177, \"LoaderSpinner\");\n$RefreshReg$(_c178, \"Panel$1\");\n$RefreshReg$(_c179, \"PanelHeader\");\n$RefreshReg$(_c180, \"PanelTitle\");\n$RefreshReg$(_c181, \"PanelContent\");\n$RefreshReg$(_c182, \"PanelFooter\");\n$RefreshReg$(_c183, \"PanelActions\");\n$RefreshReg$(_c184, \"Popover$1\");\n$RefreshReg$(_c185, \"PopoverAnchor$1$React.forwardRef\");\n$RefreshReg$(_c186, \"PopoverAnchor$1\");\n$RefreshReg$(_c187, \"PopoverTrigger$1$React.forwardRef\");\n$RefreshReg$(_c188, \"PopoverTrigger$1\");\n$RefreshReg$(_c189, \"PopoverPortal\");\n$RefreshReg$(_c190, \"PopoverContent$1$React.forwardRef\");\n$RefreshReg$(_c191, \"PopoverContent$1\");\n$RefreshReg$(_c192, \"PopoverContentModal\");\n$RefreshReg$(_c193, \"PopoverContentNonModal\");\n$RefreshReg$(_c194, \"PopoverContentImpl\");\n$RefreshReg$(_c195, \"PopoverClose$React.forwardRef\");\n$RefreshReg$(_c196, \"PopoverClose\");\n$RefreshReg$(_c197, \"PopoverArrow$React.forwardRef\");\n$RefreshReg$(_c198, \"PopoverArrow\");\n$RefreshReg$(_c199, \"Popover\");\n$RefreshReg$(_c200, \"PopoverTrigger\");\n$RefreshReg$(_c201, \"PopoverContent\");\n$RefreshReg$(_c202, \"PopoverAnchor\");\n$RefreshReg$(_c203, \"PanelWithForwardedRef\");\n$RefreshReg$(_c204, \"Panel\");\n$RefreshReg$(_c205, \"PanelGroupWithForwardedRef\");\n$RefreshReg$(_c206, \"PanelGroup\");\n$RefreshReg$(_c207, \"PanelResizeHandle\");\n$RefreshReg$(_c208, \"ResizablePanelGroup\");\n$RefreshReg$(_c209, \"ResizablePanel\");\n$RefreshReg$(_c210, \"ResizableHandle\");\n$RefreshReg$(_c211, \"Tabs$1$React.forwardRef\");\n$RefreshReg$(_c212, \"Tabs$1\");\n$RefreshReg$(_c213, \"TabsList$1$React.forwardRef\");\n$RefreshReg$(_c214, \"TabsList$1\");\n$RefreshReg$(_c215, \"TabsTrigger$1$React.forwardRef\");\n$RefreshReg$(_c216, \"TabsTrigger$1\");\n$RefreshReg$(_c217, \"TabsContent$1$React.forwardRef\");\n$RefreshReg$(_c218, \"TabsContent$1\");\n$RefreshReg$(_c219, \"Tabs\");\n$RefreshReg$(_c220, \"TabsList\");\n$RefreshReg$(_c221, \"TabsTrigger\");\n$RefreshReg$(_c222, \"TabsContent\");\n$RefreshReg$(_c223, \"TooltipProvider$1\");\n$RefreshReg$(_c224, \"Tooltip$1\");\n$RefreshReg$(_c225, \"TooltipTrigger$1$React.forwardRef\");\n$RefreshReg$(_c226, \"TooltipTrigger$1\");\n$RefreshReg$(_c227, \"TooltipPortal\");\n$RefreshReg$(_c228, \"TooltipContent$1$React.forwardRef\");\n$RefreshReg$(_c229, \"TooltipContent$1\");\n$RefreshReg$(_c230, \"TooltipContentHoverable\");\n$RefreshReg$(_c231, \"Slottable\");\n$RefreshReg$(_c232, \"TooltipContentImpl\");\n$RefreshReg$(_c233, \"TooltipArrow$React.forwardRef\");\n$RefreshReg$(_c234, \"TooltipArrow\");\n$RefreshReg$(_c235, \"TooltipProvider\");\n$RefreshReg$(_c236, \"Tooltip\");\n$RefreshReg$(_c237, \"TooltipTrigger\");\n$RefreshReg$(_c238, \"TooltipContent\");\n$RefreshReg$(_c239, \"ControlBar\");\n$RefreshReg$(_c240, \"Thinking\");\n$RefreshReg$(_c241, \"Conversation\");\n$RefreshReg$(_c242, \"CopyText\");\n$RefreshReg$(_c243, \"PipecatLogo\");\n$RefreshReg$(_c244, \"SessionInfo\");\n$RefreshReg$(_c245, \"TranscriptOverlayPartComponent\");\n$RefreshReg$(_c246, \"TranscriptOverlayComponent\");\n$RefreshReg$(_c247, \"TranscriptOverlay\");\n$RefreshReg$(_c248, \"UserVideoComponent\");\n$RefreshReg$(_c249, \"UserVideoControl\");\n$RefreshReg$(_c250, \"ThemeProvider\");\n$RefreshReg$(_c251, \"AudioClientHelper\");\n$RefreshReg$(_c252, \"ThemeModeToggle\");\n$RefreshReg$(_c253, \"BotAudioPanel\");\n$RefreshReg$(_c254, \"BotVideoPanel\");\n$RefreshReg$(_c255, \"ConversationPanel\");\n$RefreshReg$(_c256, \"EventsPanel\");\n$RefreshReg$(_c257, \"InfoPanel\");\n$RefreshReg$(_c258, \"ConsoleTemplate\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../dist/index.mjs\n"));

/***/ })

});
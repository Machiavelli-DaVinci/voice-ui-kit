"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pipecat-ai";
exports.ids = ["vendor-chunks/@pipecat-ai"];
exports.modules = {

/***/ "(ssr)/../../node_modules/@pipecat-ai/client-js/dist/index.module.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@pipecat-ai/client-js/dist/index.module.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BotNotReadyError: () => (/* binding */ $db6391dc7d757577$export$885fb96b850e8fbb),\n/* harmony export */   ConnectionTimeoutError: () => (/* binding */ $db6391dc7d757577$export$c67992fa684a81a6),\n/* harmony export */   LogLevel: () => (/* binding */ $e0900798b6cc045b$export$243e62d78d3b544d),\n/* harmony export */   MessageDispatcher: () => (/* binding */ $769bb602511974a1$export$e9a960646cc432aa),\n/* harmony export */   PipecatClient: () => (/* binding */ $364c127d152b1085$export$8f7f86a77535f7a3),\n/* harmony export */   RTVIError: () => (/* binding */ $db6391dc7d757577$export$59b4786f333aac02),\n/* harmony export */   RTVIEvent: () => (/* binding */ $c1b4da4af54f4fa1$export$6b4624d233c61fcb),\n/* harmony export */   RTVIMessage: () => (/* binding */ $c0d10c4690969999$export$69aa9ab0334b212),\n/* harmony export */   RTVIMessageType: () => (/* binding */ $c0d10c4690969999$export$38b3db05cbf0e240),\n/* harmony export */   RTVI_MESSAGE_LABEL: () => (/* binding */ $c0d10c4690969999$export$882b13c7fda338f5),\n/* harmony export */   RTVI_PROTOCOL_VERSION: () => (/* binding */ $c0d10c4690969999$export$7bdaf0e0d661a8f5),\n/* harmony export */   StartBotError: () => (/* binding */ $db6391dc7d757577$export$e7544ab812238a61),\n/* harmony export */   Transport: () => (/* binding */ $7ef5cee66c377f4d$export$86495b081fef8e52),\n/* harmony export */   TransportStartError: () => (/* binding */ $db6391dc7d757577$export$e0624a511a2c4e9),\n/* harmony export */   TransportWrapper: () => (/* binding */ $7ef5cee66c377f4d$export$82b6ede160a64a3c),\n/* harmony export */   UnsupportedFeatureError: () => (/* binding */ $db6391dc7d757577$export$bd0820eb8444fcd9),\n/* harmony export */   logger: () => (/* binding */ $e0900798b6cc045b$export$af88d00dbe7f521),\n/* harmony export */   setAboutClient: () => (/* binding */ $c0d10c4690969999$export$e4036f9b8ddb7379)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(ssr)/../../node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bowser */ \"(ssr)/../../node_modules/bowser/src/bowser.js\");\n\n\n\n\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $05fa7b586184a19c$exports = {};\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $364c127d152b1085$exports = {};\n\n$parcel$export($364c127d152b1085$exports, \"PipecatClient\", () => $364c127d152b1085$export$8f7f86a77535f7a3);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nvar $e3bad9cc25e327f7$exports = {};\n$e3bad9cc25e327f7$exports = JSON.parse(\"{\\\"name\\\":\\\"@pipecat-ai/client-js\\\",\\\"version\\\":\\\"1.0.0\\\",\\\"license\\\":\\\"BSD-2-Clause\\\",\\\"main\\\":\\\"dist/index.js\\\",\\\"module\\\":\\\"dist/index.module.js\\\",\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"source\\\":\\\"index.ts\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/pipecat-ai/pipecat-client-web.git\\\"},\\\"files\\\":[\\\"dist\\\",\\\"package.json\\\",\\\"README.md\\\"],\\\"scripts\\\":{\\\"build\\\":\\\"jest --silent --passWithNoTests && parcel build --no-cache\\\",\\\"dev\\\":\\\"parcel watch\\\",\\\"lint\\\":\\\"eslint . --report-unused-disable-directives --max-warnings 0\\\",\\\"test\\\":\\\"jest\\\"},\\\"jest\\\":{\\\"preset\\\":\\\"ts-jest\\\",\\\"testEnvironment\\\":\\\"jsdom\\\"},\\\"devDependencies\\\":{\\\"@jest/globals\\\":\\\"^29.7.0\\\",\\\"@types/clone-deep\\\":\\\"^4.0.4\\\",\\\"@types/jest\\\":\\\"^29.5.12\\\",\\\"@types/uuid\\\":\\\"^10.0.0\\\",\\\"eslint\\\":\\\"^9.11.1\\\",\\\"eslint-config-prettier\\\":\\\"^9.1.0\\\",\\\"eslint-plugin-simple-import-sort\\\":\\\"^12.1.1\\\",\\\"jest\\\":\\\"^29.7.0\\\",\\\"jest-environment-jsdom\\\":\\\"^30.0.2\\\",\\\"ts-jest\\\":\\\"^29.2.5\\\"},\\\"dependencies\\\":{\\\"@types/events\\\":\\\"^3.0.3\\\",\\\"bowser\\\":\\\"^2.11.0\\\",\\\"clone-deep\\\":\\\"^4.0.1\\\",\\\"events\\\":\\\"^3.3.0\\\",\\\"typed-emitter\\\":\\\"^2.1.0\\\",\\\"uuid\\\":\\\"^10.0.0\\\"}}\");\n\n\nvar $fc3f408bb0b1f921$exports = {};\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $6396333126da0e76$exports = {};\n\n\nvar $db6391dc7d757577$exports = {};\n\n$parcel$export($db6391dc7d757577$exports, \"RTVIError\", () => $db6391dc7d757577$export$59b4786f333aac02);\n$parcel$export($db6391dc7d757577$exports, \"ConnectionTimeoutError\", () => $db6391dc7d757577$export$c67992fa684a81a6);\n$parcel$export($db6391dc7d757577$exports, \"StartBotError\", () => $db6391dc7d757577$export$e7544ab812238a61);\n$parcel$export($db6391dc7d757577$exports, \"TransportStartError\", () => $db6391dc7d757577$export$e0624a511a2c4e9);\n$parcel$export($db6391dc7d757577$exports, \"BotNotReadyError\", () => $db6391dc7d757577$export$885fb96b850e8fbb);\n$parcel$export($db6391dc7d757577$exports, \"UnsupportedFeatureError\", () => $db6391dc7d757577$export$bd0820eb8444fcd9);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ class $db6391dc7d757577$export$59b4786f333aac02 extends Error {\n    constructor(message, status){\n        super(message);\n        this.status = status;\n    }\n}\nclass $db6391dc7d757577$export$c67992fa684a81a6 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Bot did not enter ready state within the specified timeout period.\");\n    }\n}\nclass $db6391dc7d757577$export$e7544ab812238a61 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message, status){\n        super(message ?? `Failed to connect / invalid auth bundle from base url`, status ?? 500);\n        this.error = \"invalid-request-error\";\n    }\n}\nclass $db6391dc7d757577$export$e0624a511a2c4e9 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Unable to connect to transport\");\n    }\n}\nclass $db6391dc7d757577$export$885fb96b850e8fbb extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Attempt to call action on transport when not in 'ready' state.\");\n    }\n}\nclass $db6391dc7d757577$export$bd0820eb8444fcd9 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(feature, source, message){\n        let msg = `${feature} not supported${message ? `: ${message}` : \"\"}`;\n        if (source) msg = `${source} does not support ${feature}${message ? `: ${message}` : \"\"}`;\n        super(msg);\n        this.feature = feature;\n    }\n}\n\n\nvar $c1b4da4af54f4fa1$exports = {};\n\n$parcel$export($c1b4da4af54f4fa1$exports, \"RTVIEvent\", () => $c1b4da4af54f4fa1$export$6b4624d233c61fcb);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $c1b4da4af54f4fa1$export$6b4624d233c61fcb;\n(function(RTVIEvent) {\n    /** local connection state events */ RTVIEvent[\"Connected\"] = \"connected\";\n    RTVIEvent[\"Disconnected\"] = \"disconnected\";\n    RTVIEvent[\"TransportStateChanged\"] = \"transportStateChanged\";\n    /** remote connection state events */ RTVIEvent[\"BotConnected\"] = \"botConnected\";\n    RTVIEvent[\"BotReady\"] = \"botReady\";\n    RTVIEvent[\"BotDisconnected\"] = \"botDisconnected\";\n    RTVIEvent[\"Error\"] = \"error\";\n    /** server messaging */ RTVIEvent[\"ServerMessage\"] = \"serverMessage\";\n    RTVIEvent[\"ServerResponse\"] = \"serverResponse\";\n    RTVIEvent[\"MessageError\"] = \"messageError\";\n    /** service events */ RTVIEvent[\"Metrics\"] = \"metrics\";\n    // vad events\n    RTVIEvent[\"BotStartedSpeaking\"] = \"botStartedSpeaking\";\n    RTVIEvent[\"BotStoppedSpeaking\"] = \"botStoppedSpeaking\";\n    RTVIEvent[\"UserStartedSpeaking\"] = \"userStartedSpeaking\";\n    RTVIEvent[\"UserStoppedSpeaking\"] = \"userStoppedSpeaking\";\n    // stt events\n    RTVIEvent[\"UserTranscript\"] = \"userTranscript\";\n    RTVIEvent[\"BotTranscript\"] = \"botTranscript\";\n    // llm events\n    RTVIEvent[\"BotLlmText\"] = \"botLlmText\";\n    RTVIEvent[\"BotLlmStarted\"] = \"botLlmStarted\";\n    RTVIEvent[\"BotLlmStopped\"] = \"botLlmStopped\";\n    RTVIEvent[\"LLMFunctionCall\"] = \"llmFunctionCall\";\n    RTVIEvent[\"BotLlmSearchResponse\"] = \"botLlmSearchResponse\";\n    // tts events\n    RTVIEvent[\"BotTtsText\"] = \"botTtsText\";\n    RTVIEvent[\"BotTtsStarted\"] = \"botTtsStarted\";\n    RTVIEvent[\"BotTtsStopped\"] = \"botTtsStopped\";\n    /** participant events */ RTVIEvent[\"ParticipantConnected\"] = \"participantConnected\";\n    RTVIEvent[\"ParticipantLeft\"] = \"participantLeft\";\n    /** media events */ RTVIEvent[\"TrackStarted\"] = \"trackStarted\";\n    RTVIEvent[\"TrackStopped\"] = \"trackStopped\";\n    RTVIEvent[\"ScreenTrackStarted\"] = \"screenTrackStarted\";\n    RTVIEvent[\"ScreenTrackStopped\"] = \"screenTrackStopped\";\n    RTVIEvent[\"ScreenShareError\"] = \"screenShareError\";\n    RTVIEvent[\"LocalAudioLevel\"] = \"localAudioLevel\";\n    RTVIEvent[\"RemoteAudioLevel\"] = \"remoteAudioLevel\";\n    /** media device events */ RTVIEvent[\"AvailableCamsUpdated\"] = \"availableCamsUpdated\";\n    RTVIEvent[\"AvailableMicsUpdated\"] = \"availableMicsUpdated\";\n    RTVIEvent[\"AvailableSpeakersUpdated\"] = \"availableSpeakersUpdated\";\n    RTVIEvent[\"CamUpdated\"] = \"camUpdated\";\n    RTVIEvent[\"MicUpdated\"] = \"micUpdated\";\n    RTVIEvent[\"SpeakerUpdated\"] = \"speakerUpdated\";\n})($c1b4da4af54f4fa1$export$6b4624d233c61fcb || ($c1b4da4af54f4fa1$export$6b4624d233c61fcb = {}));\n\n\nvar $c0d10c4690969999$exports = {};\n\n$parcel$export($c0d10c4690969999$exports, \"RTVI_PROTOCOL_VERSION\", () => $c0d10c4690969999$export$7bdaf0e0d661a8f5);\n$parcel$export($c0d10c4690969999$exports, \"RTVI_MESSAGE_LABEL\", () => $c0d10c4690969999$export$882b13c7fda338f5);\n$parcel$export($c0d10c4690969999$exports, \"RTVIMessageType\", () => $c0d10c4690969999$export$38b3db05cbf0e240);\n$parcel$export($c0d10c4690969999$exports, \"setAboutClient\", () => $c0d10c4690969999$export$e4036f9b8ddb7379);\n$parcel$export($c0d10c4690969999$exports, \"RTVIMessage\", () => $c0d10c4690969999$export$69aa9ab0334b212);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\nconst $c0d10c4690969999$export$7bdaf0e0d661a8f5 = \"1.0.0\";\nconst $c0d10c4690969999$export$882b13c7fda338f5 = \"rtvi-ai\";\nvar $c0d10c4690969999$export$38b3db05cbf0e240;\n(function(RTVIMessageType) {\n    /** Outbound Messages */ RTVIMessageType[\"CLIENT_READY\"] = \"client-ready\";\n    RTVIMessageType[\"DISCONNECT_BOT\"] = \"disconnect-bot\";\n    // Client-to-server messages\n    RTVIMessageType[\"CLIENT_MESSAGE\"] = \"client-message\";\n    RTVIMessageType[\"APPEND_TO_CONTEXT\"] = \"append-to-context\";\n    /**\n     * Inbound Messages\n     * Messages the server-side client sends to our client-side client regarding\n     * its state or other non-service-specific messaging.\n     */ RTVIMessageType[\"BOT_READY\"] = \"bot-ready\";\n    RTVIMessageType[\"ERROR\"] = \"error\";\n    RTVIMessageType[\"METRICS\"] = \"metrics\";\n    RTVIMessageType[\"SERVER_MESSAGE\"] = \"server-message\";\n    RTVIMessageType[\"SERVER_RESPONSE\"] = \"server-response\";\n    RTVIMessageType[\"ERROR_RESPONSE\"] = \"error-response\";\n    RTVIMessageType[\"APPEND_TO_CONTEXT_RESULT\"] = \"append-to-context-result\";\n    /** Transcription Messages */ RTVIMessageType[\"USER_TRANSCRIPTION\"] = \"user-transcription\";\n    RTVIMessageType[\"BOT_TRANSCRIPTION\"] = \"bot-transcription\";\n    RTVIMessageType[\"USER_STARTED_SPEAKING\"] = \"user-started-speaking\";\n    RTVIMessageType[\"USER_STOPPED_SPEAKING\"] = \"user-stopped-speaking\";\n    RTVIMessageType[\"BOT_STARTED_SPEAKING\"] = \"bot-started-speaking\";\n    RTVIMessageType[\"BOT_STOPPED_SPEAKING\"] = \"bot-stopped-speaking\";\n    /** LLM Messages */ RTVIMessageType[\"USER_LLM_TEXT\"] = \"user-llm-text\";\n    RTVIMessageType[\"BOT_LLM_TEXT\"] = \"bot-llm-text\";\n    RTVIMessageType[\"BOT_LLM_STARTED\"] = \"bot-llm-started\";\n    RTVIMessageType[\"BOT_LLM_STOPPED\"] = \"bot-llm-stopped\";\n    // Function calling\n    RTVIMessageType[\"LLM_FUNCTION_CALL\"] = \"llm-function-call\";\n    RTVIMessageType[\"LLM_FUNCTION_CALL_RESULT\"] = \"llm-function-call-result\";\n    RTVIMessageType[\"BOT_LLM_SEARCH_RESPONSE\"] = \"bot-llm-search-response\";\n    /** TTS Messages */ RTVIMessageType[\"BOT_TTS_TEXT\"] = \"bot-tts-text\";\n    RTVIMessageType[\"BOT_TTS_STARTED\"] = \"bot-tts-started\";\n    RTVIMessageType[\"BOT_TTS_STOPPED\"] = \"bot-tts-stopped\";\n})($c0d10c4690969999$export$38b3db05cbf0e240 || ($c0d10c4690969999$export$38b3db05cbf0e240 = {}));\n// ----- Message Classes\nlet $c0d10c4690969999$var$_aboutClient;\nfunction $c0d10c4690969999$export$e4036f9b8ddb7379(about) {\n    // allow for partial updates to the about data\n    // this allows the client to set the about data at any time\n    // before sending the `client-ready` message and not worry about\n    // overwriting existing data\n    if ($c0d10c4690969999$var$_aboutClient) $c0d10c4690969999$var$_aboutClient = {\n        ...$c0d10c4690969999$var$_aboutClient,\n        ...about\n    };\n    else // if no about data is set, set it to the provided value\n    $c0d10c4690969999$var$_aboutClient = about;\n}\nclass $c0d10c4690969999$export$69aa9ab0334b212 {\n    constructor(type, data, id){\n        this.label = $c0d10c4690969999$export$882b13c7fda338f5;\n        this.type = type;\n        this.data = data;\n        this.id = id || (0, uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().slice(0, 8);\n    }\n    // Outbound message types\n    static clientReady() {\n        return new $c0d10c4690969999$export$69aa9ab0334b212($c0d10c4690969999$export$38b3db05cbf0e240.CLIENT_READY, {\n            version: $c0d10c4690969999$export$7bdaf0e0d661a8f5,\n            about: $c0d10c4690969999$var$_aboutClient || {\n                library: (0, $e3bad9cc25e327f7$exports.name),\n                library_version: (0, $e3bad9cc25e327f7$exports.version)\n            }\n        });\n    }\n    static disconnectBot() {\n        return new $c0d10c4690969999$export$69aa9ab0334b212($c0d10c4690969999$export$38b3db05cbf0e240.DISCONNECT_BOT, {});\n    }\n    static error(message, fatal = false) {\n        return new $c0d10c4690969999$export$69aa9ab0334b212($c0d10c4690969999$export$38b3db05cbf0e240.ERROR, {\n            message: message,\n            fatal: fatal\n        });\n    }\n}\n\n\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $6396333126da0e76$exports);\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $db6391dc7d757577$exports);\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $c1b4da4af54f4fa1$exports);\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $c0d10c4690969999$exports);\n\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nfunction $c68ef2498d1a7177$export$f1586721024c4dab(_target, propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n        if (this.state === \"ready\") return originalMethod.apply(this, args);\n        else throw new (0, $db6391dc7d757577$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ready state. Await connect() first.`);\n    };\n    return descriptor;\n}\nfunction $c68ef2498d1a7177$export$808994d0d8c9acb3(states) {\n    return function(_target, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.get = function(...args) {\n            if (states.includes(this.state)) return originalMethod.apply(this, args);\n            else throw new (0, $db6391dc7d757577$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ${states}.`);\n        };\n        return descriptor;\n    };\n}\nfunction $c68ef2498d1a7177$export$5c35b4fe6fa8c9a6(...states) {\n    states = [\n        \"ready\",\n        ...states\n    ];\n    return function(_target, propertyKey, descriptor) {\n        const originalGetter = descriptor.get;\n        descriptor.get = function() {\n            if (states.includes(this.state)) return originalGetter?.apply(this);\n            else throw new (0, $db6391dc7d757577$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ${states}. Await connect() first.`);\n        };\n        return descriptor;\n    };\n}\n\n\nvar $769bb602511974a1$exports = {};\n\n$parcel$export($769bb602511974a1$exports, \"MessageDispatcher\", () => $769bb602511974a1$export$e9a960646cc432aa);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nvar $e0900798b6cc045b$exports = {};\n\n$parcel$export($e0900798b6cc045b$exports, \"LogLevel\", () => $e0900798b6cc045b$export$243e62d78d3b544d);\n$parcel$export($e0900798b6cc045b$exports, \"logger\", () => $e0900798b6cc045b$export$af88d00dbe7f521);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $e0900798b6cc045b$export$243e62d78d3b544d;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"NONE\"] = 0] = \"NONE\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 3] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 4] = \"DEBUG\";\n})($e0900798b6cc045b$export$243e62d78d3b544d || ($e0900798b6cc045b$export$243e62d78d3b544d = {}));\nclass $e0900798b6cc045b$var$Logger {\n    constructor(){\n        this.level = $e0900798b6cc045b$export$243e62d78d3b544d.DEBUG;\n    }\n    static getInstance() {\n        if (!$e0900798b6cc045b$var$Logger.instance) $e0900798b6cc045b$var$Logger.instance = new $e0900798b6cc045b$var$Logger();\n        return $e0900798b6cc045b$var$Logger.instance;\n    }\n    setLevel(level) {\n        this.level = level;\n    }\n    debug(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.DEBUG) console.debug(...args);\n    }\n    info(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.INFO) console.info(...args);\n    }\n    warn(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.WARN) console.warn(...args);\n    }\n    error(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.ERROR) console.error(...args);\n    }\n}\nconst $e0900798b6cc045b$export$af88d00dbe7f521 = $e0900798b6cc045b$var$Logger.getInstance();\n\n\nclass $769bb602511974a1$export$e9a960646cc432aa {\n    constructor(sendMethod){\n        this._queue = new Array();\n        this._gcInterval = undefined;\n        this._queue = [];\n        this._sendMethod = sendMethod;\n    }\n    disconnect() {\n        this.clearQueue();\n        clearInterval(this._gcInterval);\n        this._gcInterval = undefined;\n    }\n    dispatch(message_data, type = (0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE, timeout = 10000) {\n        if (!this._gcInterval) // start garbage collection if not already running\n        this._gcInterval = setInterval(()=>{\n            this._gc();\n        }, 2000); // Run garbage collection every 2 seconds\n        const message = new (0, $c0d10c4690969999$export$69aa9ab0334b212)(type, message_data);\n        const promise = new Promise((resolve, reject)=>{\n            this._queue.push({\n                message: message,\n                timestamp: Date.now(),\n                timeout: timeout,\n                resolve: resolve,\n                reject: reject\n            });\n        });\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] dispatch\", message);\n        try {\n            this._sendMethod(message);\n        } catch (e) {\n            (0, $e0900798b6cc045b$export$af88d00dbe7f521).error(\"[MessageDispatcher] Error sending message\", e);\n            return Promise.reject(e);\n        }\n        this._gc();\n        return promise;\n    }\n    clearQueue() {\n        this._queue = [];\n    }\n    _resolveReject(message, resolve = true) {\n        const queuedMessage = this._queue.find((msg)=>msg.message.id === message.id);\n        if (queuedMessage) {\n            if (resolve) {\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Resolve\", message);\n                queuedMessage.resolve(message);\n            } else {\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Reject\", message);\n                queuedMessage.reject(message);\n            }\n            // Remove message from queue\n            this._queue = this._queue.filter((msg)=>msg.message.id !== message.id);\n            (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Queue\", this._queue);\n        }\n        return message;\n    }\n    resolve(message) {\n        return this._resolveReject(message, true);\n    }\n    reject(message) {\n        return this._resolveReject(message, false);\n    }\n    _gc() {\n        const expired = [];\n        this._queue = this._queue.filter((msg)=>{\n            const isValid = Date.now() - msg.timestamp < msg.timeout;\n            if (!isValid) expired.push(msg);\n            return isValid;\n        });\n        expired.forEach((msg)=>{\n            if (msg.message.type === (0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE) msg.reject(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).ERROR_RESPONSE, {\n                error: \"Timed out waiting for response\",\n                msgType: msg.message.data.t,\n                data: msg.message.data.d,\n                fatal: false\n            }));\n        });\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] GC\", this._queue);\n    }\n}\n\n\n\n\n\nfunction $d0e914667cc5346b$export$649b6456532c29e2(value) {\n    if (typeof value === \"object\" && value !== null && Object.keys(value).includes(\"endpoint\")) return typeof value[\"endpoint\"] === \"string\";\n    return false;\n}\nasync function $d0e914667cc5346b$export$cf4bd460ba47a2f2(cxnOpts, abortController) {\n    if (!abortController) abortController = new AbortController();\n    let handshakeTimeout;\n    return new Promise((resolve, reject)=>{\n        (async ()=>{\n            if (cxnOpts.timeout) handshakeTimeout = setTimeout(async ()=>{\n                abortController.abort();\n                reject(new Error(\"Timed out\"));\n            }, cxnOpts.timeout);\n            (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(`[Pipecat Client] Fetching connection params from ${cxnOpts.endpoint}`);\n            fetch(cxnOpts.endpoint, {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: new Headers({\n                    \"Content-Type\": \"application/json\",\n                    ...Object.fromEntries((cxnOpts.headers ?? new Headers()).entries())\n                }),\n                body: JSON.stringify(cxnOpts.requestData),\n                signal: abortController?.signal\n            }).then((res)=>{\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(`[Pipecat Client] Received response from ${cxnOpts.endpoint}`, res);\n                if (!res.ok) throw res;\n                res.json().then((data)=>resolve(data));\n            }).catch((err)=>{\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).error(`[Pipecat Client] Error fetching connection params: ${err}`);\n                if (err instanceof Response) err.json().then((errResp)=>{\n                    reject(new $db6391dc7d757577$export$e7544ab812238a61(errResp.info ?? errResp.detail ?? err.statusText, err.status));\n                });\n                else reject(new $db6391dc7d757577$export$e7544ab812238a61());\n            }).finally(()=>{\n                if (handshakeTimeout) clearTimeout(handshakeTimeout);\n            });\n        })();\n    });\n}\n\n\nvar $7ef5cee66c377f4d$exports = {};\n\n$parcel$export($7ef5cee66c377f4d$exports, \"Transport\", () => $7ef5cee66c377f4d$export$86495b081fef8e52);\n$parcel$export($7ef5cee66c377f4d$exports, \"TransportWrapper\", () => $7ef5cee66c377f4d$export$82b6ede160a64a3c);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nclass $7ef5cee66c377f4d$export$86495b081fef8e52 {\n    constructor(){\n        this._state = \"disconnected\";\n    }\n    /**\n     * Establishes a connection with the remote server. This is the main entry\n     * point for the transport to start sending and receiving media and messages.\n     * This is called from PipecatClient.connect() and should not be called directly.\n     * @param connectParams - This type will ultimately be defned by the transport\n     * implementation. It is used to pass connection parameters to the transport.\n     */ connect(connectParams) {\n        this._abortController = new AbortController();\n        let validatedParams = connectParams;\n        try {\n            validatedParams = this._validateConnectionParams(connectParams);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (e) {\n            throw new (0, $db6391dc7d757577$export$59b4786f333aac02)(`Invalid connection params: ${e.message}. Please check your connection params and try again.`);\n        }\n        return this._connect(validatedParams);\n    }\n    /**\n     * Disconnects the transport from the remote server. This is called from\n     * PipecatClient.disconnect() and should not be called directly.\n     */ disconnect() {\n        if (this._abortController) this._abortController.abort();\n        return this._disconnect();\n    }\n}\nclass $7ef5cee66c377f4d$export$82b6ede160a64a3c {\n    constructor(transport){\n        this._transport = transport;\n        this._proxy = new Proxy(this._transport, {\n            get: (target, prop, receiver)=>{\n                if (typeof target[prop] === \"function\") {\n                    let errMsg;\n                    switch(String(prop)){\n                        // Disable methods that modify the lifecycle of the call. These operations\n                        // should be performed via the Pipecat client in order to keep state in sync.\n                        case \"initialize\":\n                            errMsg = `Direct calls to initialize() are disabled and used internally by the PipecatClient.`;\n                            break;\n                        case \"initDevices\":\n                            errMsg = `Direct calls to initDevices() are disabled. Please use the PipecatClient.initDevices() wrapper or let PipecatClient.connect() call it for you.`;\n                            break;\n                        case \"sendReadyMessage\":\n                            errMsg = `Direct calls to sendReadyMessage() are disabled and used internally by the PipecatClient.`;\n                            break;\n                        case \"connect\":\n                            errMsg = `Direct calls to connect() are disabled. Please use the PipecatClient.connect() wrapper.`;\n                            break;\n                        case \"disconnect\":\n                            errMsg = `Direct calls to disconnect() are disabled. Please use the PipecatClient.disconnect() wrapper.`;\n                            break;\n                    }\n                    if (errMsg) return ()=>{\n                        throw new Error(errMsg);\n                    };\n                    // Forward other method calls\n                    return (...args)=>{\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n                        return target[prop](...args);\n                    };\n                }\n                // Forward property access\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n    get proxy() {\n        return this._proxy;\n    }\n}\n\n\n\n\nfunction $dfd757760e36925b$export$7eb7b0a641098f31() {\n    let about = {\n        library: (0, $e3bad9cc25e327f7$exports.name),\n        library_version: (0, $e3bad9cc25e327f7$exports.version),\n        platform_details: {}\n    };\n    // This uses legacy browser user agent parsing, which we still fall\n    // back to if the User Agent Hints API is not available\n    let navAgentInfo = null;\n    if (window?.navigator?.userAgent) try {\n        navAgentInfo = (0, bowser__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).parse(window.navigator.userAgent);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n    // void\n    }\n    if (navAgentInfo?.browser?.name) about.platform_details.browser = navAgentInfo.browser.name;\n    if (navAgentInfo?.browser?.name === \"Safari\" && !navAgentInfo.browser.version) about.platform_details.browser_version = \"Web View\";\n    else if (navAgentInfo?.browser?.version) about.platform_details.browser_version = navAgentInfo.browser.version;\n    if (navAgentInfo?.platform?.type) about.platform_details.platform_type = navAgentInfo.platform.type;\n    if (navAgentInfo?.engine?.name) about.platform_details.engine = navAgentInfo.engine.name;\n    if (navAgentInfo?.os) {\n        about.platform = navAgentInfo.os.name;\n        about.platform_version = navAgentInfo.os.version;\n    }\n    return about;\n}\n\n\nvar $364c127d152b1085$var$__decorate =  false || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass $364c127d152b1085$var$RTVIEventEmitter extends (0, (events__WEBPACK_IMPORTED_MODULE_0___default())) {\n}\nclass $364c127d152b1085$export$8f7f86a77535f7a3 extends $364c127d152b1085$var$RTVIEventEmitter {\n    constructor(options){\n        super();\n        this._functionCallCallbacks = {};\n        (0, $c0d10c4690969999$export$e4036f9b8ddb7379)((0, $dfd757760e36925b$export$7eb7b0a641098f31)());\n        this._transport = options.transport;\n        this._transportWrapper = new (0, $7ef5cee66c377f4d$export$82b6ede160a64a3c)(this._transport);\n        // Wrap transport callbacks with event triggers\n        // This allows for either functional callbacks or .on / .off event listeners\n        const wrappedCallbacks = {\n            ...options.callbacks,\n            onMessageError: (message)=>{\n                options?.callbacks?.onMessageError?.(message);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).MessageError, message);\n            },\n            onError: (message)=>{\n                options?.callbacks?.onError?.(message);\n                try {\n                    this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Error, message);\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                } catch (e) {\n                    (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"Could not emit error\", message);\n                }\n                const data = message.data;\n                if (data?.fatal) {\n                    (0, $e0900798b6cc045b$export$af88d00dbe7f521).error(\"Fatal error reported. Disconnecting...\");\n                    this.disconnect();\n                }\n            },\n            onConnected: ()=>{\n                options?.callbacks?.onConnected?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Connected);\n            },\n            onDisconnected: ()=>{\n                options?.callbacks?.onDisconnected?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Disconnected);\n            },\n            onTransportStateChanged: (state)=>{\n                options?.callbacks?.onTransportStateChanged?.(state);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).TransportStateChanged, state);\n            },\n            onParticipantJoined: (p)=>{\n                options?.callbacks?.onParticipantJoined?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ParticipantConnected, p);\n            },\n            onParticipantLeft: (p)=>{\n                options?.callbacks?.onParticipantLeft?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ParticipantLeft, p);\n            },\n            onTrackStarted: (track, p)=>{\n                options?.callbacks?.onTrackStarted?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).TrackStarted, track, p);\n            },\n            onTrackStopped: (track, p)=>{\n                options?.callbacks?.onTrackStopped?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).TrackStopped, track, p);\n            },\n            onScreenTrackStarted: (track, p)=>{\n                options?.callbacks?.onScreenTrackStarted?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ScreenTrackStarted, track, p);\n            },\n            onScreenTrackStopped: (track, p)=>{\n                options?.callbacks?.onScreenTrackStopped?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ScreenTrackStopped, track, p);\n            },\n            onScreenShareError: (errorMessage)=>{\n                options?.callbacks?.onScreenShareError?.(errorMessage);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ScreenShareError, errorMessage);\n            },\n            onAvailableCamsUpdated: (cams)=>{\n                options?.callbacks?.onAvailableCamsUpdated?.(cams);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).AvailableCamsUpdated, cams);\n            },\n            onAvailableMicsUpdated: (mics)=>{\n                options?.callbacks?.onAvailableMicsUpdated?.(mics);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).AvailableMicsUpdated, mics);\n            },\n            onAvailableSpeakersUpdated: (speakers)=>{\n                options?.callbacks?.onAvailableSpeakersUpdated?.(speakers);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).AvailableSpeakersUpdated, speakers);\n            },\n            onCamUpdated: (cam)=>{\n                options?.callbacks?.onCamUpdated?.(cam);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).CamUpdated, cam);\n            },\n            onMicUpdated: (mic)=>{\n                options?.callbacks?.onMicUpdated?.(mic);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).MicUpdated, mic);\n            },\n            onSpeakerUpdated: (speaker)=>{\n                options?.callbacks?.onSpeakerUpdated?.(speaker);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).SpeakerUpdated, speaker);\n            },\n            onBotConnected: (p)=>{\n                options?.callbacks?.onBotConnected?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotConnected, p);\n            },\n            onBotReady: (botReadyData)=>{\n                options?.callbacks?.onBotReady?.(botReadyData);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotReady, botReadyData);\n            },\n            onBotDisconnected: (p)=>{\n                options?.callbacks?.onBotDisconnected?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotDisconnected, p);\n            },\n            onBotStartedSpeaking: ()=>{\n                options?.callbacks?.onBotStartedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotStartedSpeaking);\n            },\n            onBotStoppedSpeaking: ()=>{\n                options?.callbacks?.onBotStoppedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotStoppedSpeaking);\n            },\n            onRemoteAudioLevel: (level, p)=>{\n                options?.callbacks?.onRemoteAudioLevel?.(level, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).RemoteAudioLevel, level, p);\n            },\n            onUserStartedSpeaking: ()=>{\n                options?.callbacks?.onUserStartedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).UserStartedSpeaking);\n            },\n            onUserStoppedSpeaking: ()=>{\n                options?.callbacks?.onUserStoppedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).UserStoppedSpeaking);\n            },\n            onLocalAudioLevel: (level)=>{\n                options?.callbacks?.onLocalAudioLevel?.(level);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).LocalAudioLevel, level);\n            },\n            onUserTranscript: (data)=>{\n                options?.callbacks?.onUserTranscript?.(data);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).UserTranscript, data);\n            },\n            onBotTranscript: (text)=>{\n                options?.callbacks?.onBotTranscript?.(text);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTranscript, text);\n            },\n            onBotLlmText: (text)=>{\n                options?.callbacks?.onBotLlmText?.(text);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmText, text);\n            },\n            onBotLlmStarted: ()=>{\n                options?.callbacks?.onBotLlmStarted?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmStarted);\n            },\n            onBotLlmStopped: ()=>{\n                options?.callbacks?.onBotLlmStopped?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmStopped);\n            },\n            onBotTtsText: (text)=>{\n                options?.callbacks?.onBotTtsText?.(text);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTtsText, text);\n            },\n            onBotTtsStarted: ()=>{\n                options?.callbacks?.onBotTtsStarted?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTtsStarted);\n            },\n            onBotTtsStopped: ()=>{\n                options?.callbacks?.onBotTtsStopped?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTtsStopped);\n            }\n        };\n        // Update options to reference wrapped callbacks and config defaults\n        this._options = {\n            ...options,\n            callbacks: wrappedCallbacks,\n            enableMic: options.enableMic ?? true,\n            enableCam: options.enableCam ?? false,\n            enableScreenShare: options.enableScreenShare ?? false\n        };\n        // Instantiate the transport class and bind message handler\n        this._initialize();\n        // Get package version number\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[Pipecat Client] Initialized\", this.version);\n    }\n    setLogLevel(level) {\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).setLevel(level);\n    }\n    // ------ Transport methods\n    /**\n     * Initialize local media devices\n     */ async initDevices() {\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[Pipecat Client] Initializing devices...\");\n        await this._transport.initDevices();\n    }\n    /**\n     * The `connect` function establishes a transport session and awaits a\n     * bot-ready signal, handling various connection states and errors.\n     * @param {TransportConnectionParams | ConnectionEndpoint} [connectParams] -\n     * The `connectParams` parameter in the `connect` method can be either of type\n     * `TransportConnectionParams` or `ConnectionEndpoint`. It is used to provide\n     * connection parameters for establishing a transport session. If\n     * `connectParams` is of type `ConnectionEndpoint`, the method will go through\n     * an authentication process\n     * @returns The `connect` method returns a Promise that resolves to an unknown value.\n     */ async connect(connectParams) {\n        if ([\n            \"authenticating\",\n            \"connecting\",\n            \"connected\",\n            \"ready\"\n        ].includes(this._transport.state)) throw new $db6391dc7d757577$export$59b4786f333aac02(\"Voice client has already been started. Please call disconnect() before starting again.\");\n        // Establish transport session and await bot ready signal\n        return new Promise((resolve, reject)=>{\n            (async ()=>{\n                this._startResolve = resolve;\n                if (this._transport.state === \"disconnected\") await this._transport.initDevices();\n                try {\n                    let cxnParams;\n                    if (connectParams) {\n                        if ((0, $d0e914667cc5346b$export$649b6456532c29e2)(connectParams)) {\n                            this._transport.state = \"authenticating\";\n                            this._abortController = new AbortController();\n                            cxnParams = await (0, $d0e914667cc5346b$export$cf4bd460ba47a2f2)(connectParams, this._abortController);\n                            if (this._abortController?.signal.aborted) return;\n                            this._transport.state = \"authenticated\";\n                        } else cxnParams = connectParams;\n                    }\n                    await this._transport.connect(cxnParams);\n                    await this._transport.sendReadyMessage();\n                } catch (e) {\n                    this.disconnect();\n                    reject(e);\n                    return;\n                }\n            })();\n        });\n    }\n    /**\n     * Disconnect the voice client from the transport\n     * Reset / reinitialize transport and abort any pending requests\n     */ async disconnect() {\n        await this._transport.disconnect();\n        this._messageDispatcher.disconnect();\n    }\n    /**\n     * The _initialize function performs internal set up of the transport and\n     * message dispatcher.\n     */ _initialize() {\n        this._transport.initialize(this._options, this.handleMessage.bind(this));\n        // Create a new message dispatch queue for async message handling\n        this._messageDispatcher = new (0, $769bb602511974a1$export$e9a960646cc432aa)(this._transport.sendMessage.bind(this._transport));\n    }\n    /**\n     * Get the current state of the transport\n     */ get connected() {\n        return [\n            \"connected\",\n            \"ready\"\n        ].includes(this._transport.state);\n    }\n    get transport() {\n        return this._transportWrapper.proxy;\n    }\n    get state() {\n        return this._transport.state;\n    }\n    get version() {\n        return (0, (/*@__PURE__*/$parcel$interopDefault($e3bad9cc25e327f7$exports))).version;\n    }\n    // ------ Device methods\n    async getAllMics() {\n        return await this._transport.getAllMics();\n    }\n    async getAllCams() {\n        return await this._transport.getAllCams();\n    }\n    async getAllSpeakers() {\n        return await this._transport.getAllSpeakers();\n    }\n    get selectedMic() {\n        return this._transport.selectedMic;\n    }\n    get selectedCam() {\n        return this._transport.selectedCam;\n    }\n    get selectedSpeaker() {\n        return this._transport.selectedSpeaker;\n    }\n    updateMic(micId) {\n        this._transport.updateMic(micId);\n    }\n    updateCam(camId) {\n        this._transport.updateCam(camId);\n    }\n    updateSpeaker(speakerId) {\n        this._transport.updateSpeaker(speakerId);\n    }\n    enableMic(enable) {\n        this._transport.enableMic(enable);\n    }\n    get isMicEnabled() {\n        return this._transport.isMicEnabled;\n    }\n    enableCam(enable) {\n        this._transport.enableCam(enable);\n    }\n    get isCamEnabled() {\n        return this._transport.isCamEnabled;\n    }\n    tracks() {\n        return this._transport.tracks();\n    }\n    enableScreenShare(enable) {\n        return this._transport.enableScreenShare(enable);\n    }\n    get isSharingScreen() {\n        return this._transport.isSharingScreen;\n    }\n    // ------ Messages\n    /**\n     * Directly send a message to the bot via the transport.\n     * Do not await a response.\n     * @param msgType - a string representing the message type\n     * @param data - a dictionary of data to send with the message\n     */ sendClientMessage(msgType, data) {\n        this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE, {\n            t: msgType,\n            d: data\n        }));\n    }\n    /**\n     * Directly send a message to the bot via the transport.\n     * Wait for and return the response.\n     * @param msgType - a string representing the message type\n     * @param data - a dictionary of data to send with the message\n     * @param timeout - optional timeout in milliseconds for the response\n     */ async sendClientRequest(msgType, data, timeout) {\n        const msgData = {\n            t: msgType,\n            d: data\n        };\n        const response = await this._messageDispatcher.dispatch(msgData, (0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE, timeout);\n        const ret_data = response.data;\n        return ret_data.d;\n    }\n    registerFunctionCallHandler(functionName, callback) {\n        this._functionCallCallbacks[functionName] = callback;\n    }\n    async appendToContext(context) {\n        const response = await this._messageDispatcher.dispatch({\n            role: context.role,\n            content: context.content,\n            run_immediately: context.run_immediately\n        }, (0, $c0d10c4690969999$export$38b3db05cbf0e240).APPEND_TO_CONTEXT);\n        const responseData = response.data;\n        return !!responseData.result;\n    }\n    /**\n     * Disconnects the bot, but keeps the session alive\n     */ disconnectBot() {\n        this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).DISCONNECT_BOT, {}));\n    }\n    handleMessage(ev) {\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[RTVI Message]\", ev);\n        switch(ev.type){\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_READY:\n                {\n                    const data = ev.data;\n                    const botVersion = data.version ? data.version.split(\".\").map(Number) : [\n                        0,\n                        0,\n                        0\n                    ];\n                    (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(`[Pipecat Client] Bot is ready. Version: ${data.version}`);\n                    if (botVersion[0] < 1) (0, $e0900798b6cc045b$export$af88d00dbe7f521).warn(\"[Pipecat Client] Bot version is less than 1.0.0, which may not be compatible with this client.\");\n                    this._startResolve?.(ev.data);\n                    this._options.callbacks?.onBotReady?.(ev.data);\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).ERROR:\n                this._options.callbacks?.onError?.(ev);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).SERVER_RESPONSE:\n                this._messageDispatcher.resolve(ev);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).ERROR_RESPONSE:\n                {\n                    const resp = this._messageDispatcher.reject(ev);\n                    this._options.callbacks?.onMessageError?.(resp);\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).USER_STARTED_SPEAKING:\n                this._options.callbacks?.onUserStartedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).USER_STOPPED_SPEAKING:\n                this._options.callbacks?.onUserStoppedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_STARTED_SPEAKING:\n                this._options.callbacks?.onBotStartedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_STOPPED_SPEAKING:\n                this._options.callbacks?.onBotStoppedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).USER_TRANSCRIPTION:\n                {\n                    const TranscriptData = ev.data;\n                    this._options.callbacks?.onUserTranscript?.(TranscriptData);\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TRANSCRIPTION:\n                this._options.callbacks?.onBotTranscript?.(ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_TEXT:\n                this._options.callbacks?.onBotLlmText?.(ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_STARTED:\n                this._options.callbacks?.onBotLlmStarted?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_STOPPED:\n                this._options.callbacks?.onBotLlmStopped?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TTS_TEXT:\n                this._options.callbacks?.onBotTtsText?.(ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TTS_STARTED:\n                this._options.callbacks?.onBotTtsStarted?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TTS_STOPPED:\n                this._options.callbacks?.onBotTtsStopped?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).METRICS:\n                this._options.callbacks?.onMetrics?.(ev.data);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Metrics, ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).APPEND_TO_CONTEXT_RESULT:\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).SERVER_MESSAGE:\n                this._options.callbacks?.onServerMessage?.(ev.data);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ServerMessage, ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).LLM_FUNCTION_CALL:\n                {\n                    const data = ev.data;\n                    const fc = this._functionCallCallbacks[data.function_name];\n                    if (fc) {\n                        const params = {\n                            functionName: data.function_name,\n                            arguments: data.args\n                        };\n                        fc(params).then((result)=>{\n                            this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).LLM_FUNCTION_CALL_RESULT, {\n                                function_name: data.function_name,\n                                tool_call_id: data.tool_call_id,\n                                arguments: data.args,\n                                result: result\n                            }));\n                        });\n                    }\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_SEARCH_RESPONSE:\n                {\n                    const data = ev.data;\n                    this._options.callbacks?.onBotLlmSearchResponse?.(data);\n                    this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmSearchResponse, data);\n                    break;\n                }\n            default:\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[Pipecat Client] Unrecognized message type\", ev.type);\n                break;\n        }\n    }\n}\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"sendClientMessage\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"sendClientRequest\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"appendToContext\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"disconnectBot\", null);\n\n\n\n\n\n$parcel$exportWildcard($05fa7b586184a19c$exports, $364c127d152b1085$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $769bb602511974a1$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $e0900798b6cc045b$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $7ef5cee66c377f4d$exports);\n\n\n\n\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@pipecat-ai/client-js/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@pipecat-ai/client-react/dist/index.module.js":
/*!************************************************************************!*\
  !*** ../../node_modules/@pipecat-ai/client-react/dist/index.module.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PipecatClientAudio: () => (/* binding */ $f209aa7ddb77dcb2$export$b52250cb73ff4de1),\n/* harmony export */   PipecatClientCamToggle: () => (/* binding */ $7cb2ce2c4cbfb401$export$dc9a029eeca8213f),\n/* harmony export */   PipecatClientMicToggle: () => (/* binding */ $2984fdfc31bad375$export$bc8133b69ff660a2),\n/* harmony export */   PipecatClientProvider: () => (/* binding */ $d2e362c5a07ee3c5$export$bb43666ced7a20d0),\n/* harmony export */   PipecatClientVideo: () => (/* binding */ $6a65deb8615a2ad7$export$85974db6d0cc43b3),\n/* harmony export */   VoiceVisualizer: () => (/* binding */ $993a744193844a95$export$59bf27bd43679db6),\n/* harmony export */   usePipecatClient: () => (/* binding */ $034a56e7ee1b7bed$export$777fa8498be78705),\n/* harmony export */   usePipecatClientCamControl: () => (/* binding */ $e76ee2f021b54325$export$3ea2601427f0430f),\n/* harmony export */   usePipecatClientMediaDevices: () => (/* binding */ $f934f1f8b10aaf19$export$642bc4d2d2a376f1),\n/* harmony export */   usePipecatClientMediaTrack: () => (/* binding */ $4b4b9099cdb5b776$export$9813dcd2d0c26814),\n/* harmony export */   usePipecatClientMicControl: () => (/* binding */ $5905c001b0dc8d25$export$388e706586309ef0),\n/* harmony export */   usePipecatClientTransportState: () => (/* binding */ $33f3729bbe9f09df$export$30aee278309a867b),\n/* harmony export */   useRTVIClientEvent: () => (/* binding */ $824ea64b5f757259$export$33a6ac53b8f02625)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pipecat-ai/client-js */ \"(ssr)/../../node_modules/@pipecat-ai/client-js/dist/index.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jotai */ \"(ssr)/../../node_modules/jotai/esm/vanilla.mjs\");\n/* harmony import */ var jotai_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jotai/react */ \"(ssr)/../../node_modules/jotai/esm/react.mjs\");\n/* harmony import */ var jotai_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jotai/utils */ \"(ssr)/../../node_modules/jotai/esm/vanilla/utils.mjs\");\n/* harmony import */ var jotai_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jotai/utils */ \"(ssr)/../../node_modules/jotai/esm/react/utils.mjs\");\n\n\n\n\n\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\n\n\n\n\nvar $ad20387e24e513d4$exports = {};\n$ad20387e24e513d4$exports = JSON.parse(\"{\\\"name\\\":\\\"@pipecat-ai/client-react\\\",\\\"version\\\":\\\"1.0.0\\\",\\\"license\\\":\\\"BSD-2-Clause\\\",\\\"main\\\":\\\"dist/index.js\\\",\\\"module\\\":\\\"dist/index.module.js\\\",\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"source\\\":\\\"src/index.ts\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/pipecat-ai/pipecat-client-web.git\\\"},\\\"files\\\":[\\\"dist\\\",\\\"package.json\\\",\\\"README.md\\\"],\\\"scripts\\\":{\\\"build\\\":\\\"parcel build --no-cache\\\",\\\"dev\\\":\\\"parcel watch\\\",\\\"lint\\\":\\\"eslint . --report-unused-disable-directives --max-warnings 0 --ignore-pattern 'dist/'\\\"},\\\"devDependencies\\\":{\\\"@pipecat-ai/client-js\\\":\\\"*\\\",\\\"@types/react\\\":\\\"^18.3.3\\\",\\\"@types/react-dom\\\":\\\"^18.3.0\\\",\\\"@typescript-eslint/eslint-plugin\\\":\\\"^8.32.0\\\",\\\"eslint\\\":\\\"^9.11.1\\\",\\\"eslint-config-prettier\\\":\\\"^9.1.0\\\",\\\"eslint-plugin-react-hooks\\\":\\\"^5.2.0\\\",\\\"eslint-plugin-simple-import-sort\\\":\\\"^12.1.1\\\",\\\"parcel\\\":\\\"^2.12.0\\\",\\\"react\\\":\\\"^18.3.1\\\",\\\"react-dom\\\":\\\"^18.3.1\\\",\\\"typescript\\\":\\\"^5.2.2\\\"},\\\"peerDependencies\\\":{\\\"@pipecat-ai/client-js\\\":\\\"*\\\",\\\"react\\\":\\\">=18\\\",\\\"react-dom\\\":\\\">=18\\\"},\\\"dependencies\\\":{\\\"jotai\\\":\\\"^2.9.0\\\"}}\");\n\n\n\nconst $33f16f27e37c90bc$export$fe23d0ef95286467 = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_2__.createContext)({\n    on: ()=>{},\n    off: ()=>{}\n});\n\n\nconst $d2e362c5a07ee3c5$var$defaultStore = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.createStore)();\nconst $d2e362c5a07ee3c5$export$67f6d73bc6cd7bb1 = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_2__.createContext)({});\nconst $d2e362c5a07ee3c5$export$bb43666ced7a20d0 = ({ children: children, client: client, jotaiStore: jotaiStore = $d2e362c5a07ee3c5$var$defaultStore })=>{\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.setAboutClient)({\n            library: (0, $ad20387e24e513d4$exports.name),\n            library_version: (0, $ad20387e24e513d4$exports.version)\n        });\n    }, []);\n    const eventHandlersMap = (0, react__WEBPACK_IMPORTED_MODULE_2__.useRef)({});\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!client) return;\n        const allEvents = Object.values((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent)).filter((value)=>isNaN(Number(value)));\n        const allHandlers = {};\n        allEvents.forEach((event)=>{\n            const handler = (...payload)=>{\n                const handlers = eventHandlersMap.current[event];\n                if (!handlers) return;\n                handlers.forEach((h)=>{\n                    h(...payload);\n                });\n            };\n            allHandlers[event] = handler;\n            client.on(event, handler);\n        });\n        return ()=>{\n            allEvents.forEach((event)=>{\n                client.off(event, allHandlers[event]);\n            });\n        };\n    }, [\n        client\n    ]);\n    const on = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((event, handler)=>{\n        if (!eventHandlersMap.current[event]) eventHandlersMap.current[event] = new Set();\n        eventHandlersMap.current[event].add(handler);\n    }, []);\n    const off = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((event, handler)=>{\n        eventHandlersMap.current[event]?.delete(handler);\n    }, []);\n    return (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)((0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.Provider), {\n        store: jotaiStore,\n        children: (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($d2e362c5a07ee3c5$export$67f6d73bc6cd7bb1.Provider, {\n            value: {\n                client: client\n            },\n            children: (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)((0, $33f16f27e37c90bc$export$fe23d0ef95286467).Provider, {\n                value: {\n                    on: on,\n                    off: off\n                },\n                children: children\n            })\n        })\n    });\n};\n$d2e362c5a07ee3c5$export$bb43666ced7a20d0.displayName = \"PipecatClientProvider\";\n\n\nconst $034a56e7ee1b7bed$export$777fa8498be78705 = ()=>{\n    const { client: client } = (0, react__WEBPACK_IMPORTED_MODULE_2__.useContext)((0, $d2e362c5a07ee3c5$export$67f6d73bc6cd7bb1));\n    return client;\n};\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\nconst $824ea64b5f757259$export$33a6ac53b8f02625 = (event, handler)=>{\n    const { on: on, off: off } = (0, react__WEBPACK_IMPORTED_MODULE_2__.useContext)((0, $33f16f27e37c90bc$export$fe23d0ef95286467));\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        on(event, handler);\n        return ()=>{\n            off(event, handler);\n        };\n    }, [\n        event,\n        handler,\n        on,\n        off\n    ]);\n};\n\n\nconst $4b4b9099cdb5b776$var$localAudioTrackAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)(null);\nconst $4b4b9099cdb5b776$var$localVideoTrackAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)(null);\nconst $4b4b9099cdb5b776$var$localScreenAudioTrackAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)(null);\nconst $4b4b9099cdb5b776$var$localScreenVideoTrackAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)(null);\nconst $4b4b9099cdb5b776$var$botAudioTrackAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)(null);\nconst $4b4b9099cdb5b776$var$botVideoTrackAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)(null);\nconst $4b4b9099cdb5b776$var$trackAtom = (0, jotai_utils__WEBPACK_IMPORTED_MODULE_5__.atomFamily)(({ local: local, trackType: trackType })=>{\n    if (local) switch(trackType){\n        case \"audio\":\n            return $4b4b9099cdb5b776$var$localAudioTrackAtom;\n        case \"screenAudio\":\n            return $4b4b9099cdb5b776$var$localScreenAudioTrackAtom;\n        case \"screenVideo\":\n            return $4b4b9099cdb5b776$var$localScreenVideoTrackAtom;\n        case \"video\":\n            return $4b4b9099cdb5b776$var$localVideoTrackAtom;\n    }\n    return trackType === \"audio\" ? $4b4b9099cdb5b776$var$botAudioTrackAtom : $4b4b9099cdb5b776$var$botVideoTrackAtom;\n});\nconst $4b4b9099cdb5b776$export$9813dcd2d0c26814 = (trackType, participantType)=>{\n    const client = (0, $034a56e7ee1b7bed$export$777fa8498be78705)();\n    const track = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)($4b4b9099cdb5b776$var$trackAtom({\n        local: participantType === \"local\",\n        trackType: trackType\n    }));\n    const updateTrack = (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((get, set, track, trackType, local)=>{\n        const atom = $4b4b9099cdb5b776$var$trackAtom({\n            local: local,\n            trackType: trackType\n        });\n        const oldTrack = get(atom);\n        if (oldTrack?.id === track.id) return;\n        set(atom, track);\n    }, []));\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).TrackStarted, (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((track, participant)=>{\n        updateTrack(track, track.kind, Boolean(participant?.local));\n    }, [\n        updateTrack\n    ]));\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).ScreenTrackStarted, (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((track, participant)=>{\n        const trackType = track.kind === \"audio\" ? \"screenAudio\" : \"screenVideo\";\n        updateTrack(track, trackType, Boolean(participant?.local));\n    }, [\n        updateTrack\n    ]));\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!client) return;\n        const tracks = client.tracks();\n        const track = tracks?.[participantType]?.[trackType];\n        if (!track) return;\n        updateTrack(track, trackType, participantType === \"local\");\n    }, [\n        participantType,\n        trackType,\n        updateTrack,\n        client\n    ]);\n    return track;\n};\n\n\n\nconst $f209aa7ddb77dcb2$export$b52250cb73ff4de1 = ()=>{\n    const botAudioRef = (0, react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const botAudioTrack = (0, $4b4b9099cdb5b776$export$9813dcd2d0c26814)(\"audio\", \"bot\");\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!botAudioRef.current || !botAudioTrack) return;\n        if (botAudioRef.current.srcObject) {\n            const oldTrack = botAudioRef.current.srcObject.getAudioTracks()[0];\n            if (oldTrack.id === botAudioTrack.id) return;\n        }\n        botAudioRef.current.srcObject = new MediaStream([\n            botAudioTrack\n        ]);\n    }, [\n        botAudioTrack\n    ]);\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).SpeakerUpdated, (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((speaker)=>{\n        if (!botAudioRef.current) return;\n        if (typeof botAudioRef.current.setSinkId !== \"function\") return;\n        botAudioRef.current.setSinkId(speaker.deviceId);\n    }, []));\n    return (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)((0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment), {\n        children: (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"audio\", {\n            ref: botAudioRef,\n            autoPlay: true\n        })\n    });\n};\n$f209aa7ddb77dcb2$export$b52250cb73ff4de1.displayName = \"PipecatClientAudio\";\n\n\n\n\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\n\nconst $33f3729bbe9f09df$var$transportStateAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)(\"disconnected\");\nconst $33f3729bbe9f09df$export$30aee278309a867b = ()=>{\n    const [transportState, setTransportState] = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtom)($33f3729bbe9f09df$var$transportStateAtom);\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).TransportStateChanged, setTransportState);\n    return transportState;\n};\n\n\nconst $e76ee2f021b54325$export$3ea2601427f0430f = ()=>{\n    const client = (0, $034a56e7ee1b7bed$export$777fa8498be78705)();\n    const [isCamEnabled, setIsCamEnabled] = (0, react__WEBPACK_IMPORTED_MODULE_2__.useState)(client?.isCamEnabled ?? false);\n    const transportState = (0, $33f3729bbe9f09df$export$30aee278309a867b)();\n    // Sync component state with client state initially\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!client || transportState !== \"initialized\" || typeof client.isCamEnabled !== \"boolean\") return;\n        setIsCamEnabled(client.isCamEnabled);\n    }, [\n        client,\n        transportState\n    ]);\n    const enableCam = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((enabled)=>{\n        setIsCamEnabled(enabled);\n        client?.enableCam?.(enabled);\n    }, [\n        client\n    ]);\n    return {\n        enableCam: enableCam,\n        isCamEnabled: isCamEnabled\n    };\n};\n\n\nconst $7cb2ce2c4cbfb401$export$dc9a029eeca8213f = ({ onCamEnabledChanged: onCamEnabledChanged, disabled: disabled = false, children: children })=>{\n    const { isCamEnabled: isCamEnabled, enableCam: enableCam } = (0, $e76ee2f021b54325$export$3ea2601427f0430f)();\n    const handleToggleCam = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (disabled) return;\n        const newEnabledState = !isCamEnabled;\n        enableCam(newEnabledState);\n        onCamEnabledChanged?.(newEnabledState);\n    }, [\n        disabled,\n        enableCam,\n        isCamEnabled,\n        onCamEnabledChanged\n    ]);\n    return (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)((0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment), {\n        children: children({\n            isCamEnabled: isCamEnabled,\n            onClick: handleToggleCam,\n            disabled: disabled\n        })\n    });\n};\nvar $7cb2ce2c4cbfb401$export$2e2bcd8739ae039 = $7cb2ce2c4cbfb401$export$dc9a029eeca8213f;\n\n\n\n\n\n\n\nconst $5905c001b0dc8d25$export$388e706586309ef0 = ()=>{\n    const client = (0, $034a56e7ee1b7bed$export$777fa8498be78705)();\n    const [isMicEnabled, setIsMicEnabled] = (0, react__WEBPACK_IMPORTED_MODULE_2__.useState)(client?.isMicEnabled ?? false);\n    const transportState = (0, $33f3729bbe9f09df$export$30aee278309a867b)();\n    // Sync component state with client state initially\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!client || transportState !== \"initialized\" || typeof client.isMicEnabled !== \"boolean\") return;\n        setIsMicEnabled(client.isMicEnabled);\n    }, [\n        client,\n        transportState\n    ]);\n    const enableMic = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((enabled)=>{\n        setIsMicEnabled(enabled);\n        client?.enableMic?.(enabled);\n    }, [\n        client\n    ]);\n    return {\n        enableMic: enableMic,\n        isMicEnabled: isMicEnabled\n    };\n};\n\n\nconst $2984fdfc31bad375$export$bc8133b69ff660a2 = ({ onMicEnabledChanged: onMicEnabledChanged, disabled: disabled = false, children: children })=>{\n    const { enableMic: enableMic, isMicEnabled: isMicEnabled } = (0, $5905c001b0dc8d25$export$388e706586309ef0)();\n    const handleToggleMic = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (disabled) return;\n        const newEnabledState = !isMicEnabled;\n        enableMic(newEnabledState);\n        onMicEnabledChanged?.(newEnabledState);\n    }, [\n        disabled,\n        enableMic,\n        isMicEnabled,\n        onMicEnabledChanged\n    ]);\n    return (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)((0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment), {\n        children: children({\n            isMicEnabled: isMicEnabled,\n            onClick: handleToggleMic,\n            disabled: disabled\n        })\n    });\n};\nvar $2984fdfc31bad375$export$2e2bcd8739ae039 = $2984fdfc31bad375$export$bc8133b69ff660a2;\n\n\n\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n *\n * This file contains code derived from:\n * https://github.com/jaredLunde/react-hook/blob/master/packages/merged-ref/src/index.tsx\n * Original author: Jared Lunde (https://github.com/jaredLunde)\n * Original license: MIT (https://github.com/jaredLunde/react-hook/blob/master/LICENSE)\n */ \nfunction $9098519210cf34e2$var$useMergedRef(...refs) {\n    return (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((element)=>{\n        for(let i = 0; i < refs.length; i++){\n            const ref = refs[i];\n            if (typeof ref === \"function\") ref(element);\n            else if (ref && typeof ref === \"object\") ref.current = element;\n        }\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs);\n}\nvar $9098519210cf34e2$export$2e2bcd8739ae039 = $9098519210cf34e2$var$useMergedRef;\n\n\n\nconst $6a65deb8615a2ad7$export$85974db6d0cc43b3 = /*#__PURE__*/ (0, react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(function VoiceClientVideo({ participant: participant = \"local\", fit: fit = \"contain\", mirror: mirror, onResize: onResize, style: style = {}, trackType: trackType = \"video\", ...props }, ref) {\n    const videoTrack = (0, $4b4b9099cdb5b776$export$9813dcd2d0c26814)(trackType, participant);\n    const videoEl = (0, react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const videoRef = (0, $9098519210cf34e2$export$2e2bcd8739ae039)(videoEl, ref);\n    /**\n     * Handle canplay & picture-in-picture events.\n     */ (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(function setupVideoEvents() {\n        const video = videoEl.current;\n        if (!video) return;\n        const playVideo = ()=>{\n            const promise = video.play();\n            if (promise !== undefined) promise.then(()=>{\n                // All good, playback started.\n                video.controls = false;\n            }).catch((error)=>{\n                // Auto-play was prevented. Show video controls, so user can play video manually.\n                video.controls = true;\n                console.warn(\"Failed to play video\", error);\n            });\n        };\n        const handleCanPlay = ()=>{\n            if (!video.paused) return;\n            playVideo();\n        };\n        const handleEnterPIP = ()=>{\n            video.style.transform = \"scale(1)\";\n        };\n        const handleLeavePIP = ()=>{\n            video.style.transform = \"\";\n            setTimeout(()=>{\n                if (video.paused) playVideo();\n            }, 100);\n        };\n        const handleVisibilityChange = ()=>{\n            if (document.visibilityState === \"hidden\") return;\n            if (!video.paused) return;\n            playVideo();\n        };\n        video.addEventListener(\"canplay\", handleCanPlay);\n        video.addEventListener(\"enterpictureinpicture\", handleEnterPIP);\n        video.addEventListener(\"leavepictureinpicture\", handleLeavePIP);\n        // Videos can be paused if media was played in another app on iOS.\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            video.removeEventListener(\"canplay\", handleCanPlay);\n            video.removeEventListener(\"enterpictureinpicture\", handleEnterPIP);\n            video.removeEventListener(\"leavepictureinpicture\", handleLeavePIP);\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        };\n    }, []);\n    /**\n     * Update srcObject.\n     */ (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(function updateSrcObject() {\n        const video = videoEl.current;\n        if (!video || !videoTrack) return;\n        video.srcObject = new MediaStream([\n            videoTrack\n        ]);\n        video.load();\n        return ()=>{\n            // clean up when unmounted\n            video.srcObject = null;\n            video.load();\n        };\n    }, [\n        videoTrack,\n        videoTrack?.id\n    ]);\n    /**\n     * Add optional event listener for resize event so the parent component\n     * can know the video's native aspect ratio.\n     */ (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(function reportVideoDimensions() {\n        const video = videoEl.current;\n        if (!onResize || !video) return;\n        let frame;\n        function handleResize() {\n            if (frame) cancelAnimationFrame(frame);\n            frame = requestAnimationFrame(()=>{\n                const video = videoEl.current;\n                if (!video || document.hidden) return;\n                const videoWidth = video.videoWidth;\n                const videoHeight = video.videoHeight;\n                if (videoWidth && videoHeight) onResize?.({\n                    aspectRatio: videoWidth / videoHeight,\n                    height: videoHeight,\n                    width: videoWidth\n                });\n            });\n        }\n        handleResize();\n        video.addEventListener(\"loadedmetadata\", handleResize);\n        video.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            if (frame) cancelAnimationFrame(frame);\n            video.removeEventListener(\"loadedmetadata\", handleResize);\n            video.removeEventListener(\"resize\", handleResize);\n        };\n    }, [\n        onResize\n    ]);\n    return (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"video\", {\n        autoPlay: true,\n        muted: true,\n        playsInline: true,\n        ref: videoRef,\n        style: {\n            objectFit: fit,\n            transform: mirror ? \"scale(-1, 1)\" : \"\",\n            ...style\n        },\n        ...props\n    });\n});\n$6a65deb8615a2ad7$export$85974db6d0cc43b3.displayName = \"PipecatClientVideo\";\n\n\n\n\n\n\n\n\n\n\nconst $f934f1f8b10aaf19$var$availableMicsAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)([]);\nconst $f934f1f8b10aaf19$var$availableCamsAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)([]);\nconst $f934f1f8b10aaf19$var$availableSpeakersAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)([]);\nconst $f934f1f8b10aaf19$var$selectedMicAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)({});\nconst $f934f1f8b10aaf19$var$selectedCamAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)({});\nconst $f934f1f8b10aaf19$var$selectedSpeakerAtom = (0, jotai__WEBPACK_IMPORTED_MODULE_3__.atom)({});\nconst $f934f1f8b10aaf19$export$642bc4d2d2a376f1 = ()=>{\n    const client = (0, $034a56e7ee1b7bed$export$777fa8498be78705)();\n    const availableCams = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)($f934f1f8b10aaf19$var$availableCamsAtom);\n    const availableMics = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)($f934f1f8b10aaf19$var$availableMicsAtom);\n    const availableSpeakers = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)($f934f1f8b10aaf19$var$availableSpeakersAtom);\n    const selectedCam = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)($f934f1f8b10aaf19$var$selectedCamAtom);\n    const selectedMic = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)($f934f1f8b10aaf19$var$selectedMicAtom);\n    const selectedSpeaker = (0, jotai_react__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)($f934f1f8b10aaf19$var$selectedSpeakerAtom);\n    const initDevices = (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (_get, set)=>{\n        if (!client) return;\n        const availableCams = await client.getAllCams();\n        const availableMics = await client.getAllMics();\n        const availableSpeakers = await client.getAllSpeakers();\n        set($f934f1f8b10aaf19$var$availableCamsAtom, availableCams);\n        set($f934f1f8b10aaf19$var$availableMicsAtom, availableMics);\n        set($f934f1f8b10aaf19$var$availableSpeakersAtom, availableSpeakers);\n        set($f934f1f8b10aaf19$var$selectedCamAtom, client.selectedCam);\n        set($f934f1f8b10aaf19$var$selectedMicAtom, client.selectedMic);\n        set($f934f1f8b10aaf19$var$selectedSpeakerAtom, client.selectedSpeaker);\n    }, [\n        client\n    ]));\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        initDevices();\n    }, [\n        initDevices\n    ]);\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).AvailableCamsUpdated, (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((_get, set, cams)=>{\n        set($f934f1f8b10aaf19$var$availableCamsAtom, cams);\n    }, [])));\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).AvailableMicsUpdated, (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((_get, set, mics)=>{\n        set($f934f1f8b10aaf19$var$availableMicsAtom, mics);\n    }, [])));\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).AvailableSpeakersUpdated, (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((_get, set, speakers)=>{\n        set($f934f1f8b10aaf19$var$availableSpeakersAtom, speakers);\n    }, [])));\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).CamUpdated, (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((_get, set, cam)=>{\n        set($f934f1f8b10aaf19$var$selectedCamAtom, cam);\n    }, [])));\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).MicUpdated, (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((_get, set, mic)=>{\n        set($f934f1f8b10aaf19$var$selectedMicAtom, mic);\n    }, [])));\n    (0, $824ea64b5f757259$export$33a6ac53b8f02625)((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIEvent).SpeakerUpdated, (0, jotai_utils__WEBPACK_IMPORTED_MODULE_6__.useAtomCallback)((0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((_get, set, speaker)=>{\n        set($f934f1f8b10aaf19$var$selectedSpeakerAtom, speaker);\n    }, [])));\n    const updateCam = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((id)=>{\n        client?.updateCam(id);\n    }, [\n        client\n    ]);\n    const updateMic = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((id)=>{\n        client?.updateMic(id);\n    }, [\n        client\n    ]);\n    const updateSpeaker = (0, react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((id)=>{\n        client?.updateSpeaker(id);\n    }, [\n        client\n    ]);\n    return {\n        availableCams: availableCams,\n        availableMics: availableMics,\n        availableSpeakers: availableSpeakers,\n        selectedCam: selectedCam,\n        selectedMic: selectedMic,\n        selectedSpeaker: selectedSpeaker,\n        updateCam: updateCam,\n        updateMic: updateMic,\n        updateSpeaker: updateSpeaker\n    };\n};\n\n\n\n\n\n\n\n\n\nconst $993a744193844a95$export$59bf27bd43679db6 = /*#__PURE__*/ (0, (react__WEBPACK_IMPORTED_MODULE_2___default())).memo(({ backgroundColor: backgroundColor = \"transparent\", barColor: barColor = \"black\", barCount: barCount = 5, barGap: barGap = 12, barLineCap: barLineCap = \"round\", barMaxHeight: barMaxHeight = 120, barOrigin: barOrigin = \"center\", barWidth: barWidth = 30, participantType: participantType })=>{\n    const canvasRef = (0, react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const track = (0, $4b4b9099cdb5b776$export$9813dcd2d0c26814)(\"audio\", participantType);\n    (0, react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!canvasRef.current) return;\n        const canvasWidth = barCount * barWidth + (barCount - 1) * barGap;\n        const canvasHeight = barMaxHeight;\n        const canvas = canvasRef.current;\n        const scaleFactor = 2;\n        // Make canvas fill the width and height of its container\n        const resizeCanvas = ()=>{\n            canvas.width = canvasWidth * scaleFactor;\n            canvas.height = canvasHeight * scaleFactor;\n            canvas.style.width = `${canvasWidth}px`;\n            canvas.style.height = `${canvasHeight}px`;\n            canvasCtx.lineCap = barLineCap;\n            canvasCtx.scale(scaleFactor, scaleFactor);\n        };\n        const canvasCtx = canvas.getContext(\"2d\");\n        resizeCanvas();\n        if (!track) return;\n        const audioContext = new AudioContext();\n        const source = audioContext.createMediaStreamSource(new MediaStream([\n            track\n        ]));\n        const analyser = audioContext.createAnalyser();\n        analyser.fftSize = 1024;\n        source.connect(analyser);\n        const frequencyData = new Uint8Array(analyser.frequencyBinCount);\n        canvasCtx.lineCap = barLineCap;\n        // Create frequency bands based on barCount\n        const bands = Array.from({\n            length: barCount\n        }, (_, i)=>{\n            // Use improved logarithmic scale for better frequency distribution\n            const minFreq = barCount > 20 ? 200 : 80; // Adjust min frequency based on bar count\n            const maxFreq = 10000; // Cover most important audio frequencies\n            // Use Mel scale inspired approach for more perceptually uniform distribution\n            // This helps with a large number of bars by placing fewer in the very low range\n            // https://en.wikipedia.org/wiki/Mel_scale\n            const melMin = 2595 * Math.log10(1 + minFreq / 700);\n            const melMax = 2595 * Math.log10(1 + maxFreq / 700);\n            const melStep = (melMax - melMin) / barCount;\n            const melValue = melMin + i * melStep;\n            const startFreq = 700 * (Math.pow(10, melValue / 2595) - 1);\n            const endFreq = 700 * (Math.pow(10, (melValue + melStep) / 2595) - 1);\n            return {\n                startFreq: startFreq,\n                endFreq: endFreq,\n                smoothValue: 0\n            };\n        });\n        const getFrequencyBinIndex = (frequency)=>{\n            const nyquist = audioContext.sampleRate / 2;\n            return Math.round(frequency / nyquist * (analyser.frequencyBinCount - 1));\n        };\n        function drawSpectrum() {\n            analyser.getByteFrequencyData(frequencyData);\n            canvasCtx.clearRect(0, 0, canvas.width / scaleFactor, canvas.height / scaleFactor);\n            canvasCtx.fillStyle = backgroundColor;\n            canvasCtx.fillRect(0, 0, canvas.width / scaleFactor, canvas.height / scaleFactor);\n            let isActive = false;\n            const totalBarsWidth = bands.length * barWidth + (bands.length - 1) * barGap;\n            const startX = (canvas.width / scaleFactor - totalBarsWidth) / 2; // Center bars\n            const adjustedCircleRadius = barWidth / 2; // Fixed radius for reset circles\n            bands.forEach((band, i)=>{\n                const startIndex = getFrequencyBinIndex(band.startFreq);\n                const endIndex = getFrequencyBinIndex(band.endFreq);\n                const bandData = frequencyData.slice(startIndex, endIndex);\n                const bandValue = bandData.reduce((acc, val)=>acc + val, 0) / bandData.length;\n                const smoothingFactor = 0.2;\n                if (bandValue < 1) band.smoothValue = Math.max(band.smoothValue - smoothingFactor * 5, 0);\n                else {\n                    band.smoothValue = band.smoothValue + (bandValue - band.smoothValue) * smoothingFactor;\n                    isActive = true;\n                }\n                const x = startX + i * (barWidth + barGap);\n                // Calculate bar height with a maximum cap\n                const minHeight = 0;\n                const barHeight = Math.max(minHeight, Math.min(band.smoothValue / 255 * barMaxHeight, barMaxHeight));\n                let yTop, yBottom;\n                const canvasHeight = canvas.height / scaleFactor;\n                switch(barOrigin){\n                    case \"top\":\n                        yTop = adjustedCircleRadius;\n                        yBottom = Math.min(adjustedCircleRadius + barHeight, canvasHeight - adjustedCircleRadius);\n                        break;\n                    case \"bottom\":\n                        yBottom = canvasHeight - adjustedCircleRadius;\n                        yTop = Math.max(yBottom - barHeight, adjustedCircleRadius);\n                        break;\n                    case \"center\":\n                    default:\n                        yTop = Math.max(canvasHeight / 2 - barHeight / 2, adjustedCircleRadius);\n                        yBottom = Math.min(canvasHeight / 2 + barHeight / 2, canvasHeight - adjustedCircleRadius);\n                        break;\n                }\n                if (band.smoothValue > 0) {\n                    canvasCtx.beginPath();\n                    canvasCtx.moveTo(x + barWidth / 2, yTop);\n                    canvasCtx.lineTo(x + barWidth / 2, yBottom);\n                    canvasCtx.lineWidth = barWidth;\n                    canvasCtx.strokeStyle = barColor;\n                    canvasCtx.stroke();\n                } else drawInactiveCircle(adjustedCircleRadius, barColor, x, yTop);\n            });\n            if (!isActive) drawInactiveCircles(adjustedCircleRadius, barColor);\n            requestAnimationFrame(drawSpectrum);\n        }\n        function drawInactiveCircle(circleRadius, color, x, y) {\n            switch(barLineCap){\n                case \"square\":\n                    canvasCtx.fillStyle = color;\n                    canvasCtx.fillRect(x + barWidth / 2 - circleRadius, y - circleRadius, circleRadius * 2, circleRadius * 2);\n                    break;\n                case \"round\":\n                default:\n                    canvasCtx.beginPath();\n                    canvasCtx.arc(x + barWidth / 2, y, circleRadius, 0, 2 * Math.PI);\n                    canvasCtx.fillStyle = color;\n                    canvasCtx.fill();\n                    canvasCtx.closePath();\n                    break;\n            }\n        }\n        function drawInactiveCircles(circleRadius, color) {\n            const totalBarsWidth = bands.length * barWidth + (bands.length - 1) * barGap;\n            const startX = (canvas.width / scaleFactor - totalBarsWidth) / 2;\n            const canvasHeight = canvas.height / scaleFactor;\n            let y;\n            switch(barOrigin){\n                case \"top\":\n                    y = circleRadius;\n                    break;\n                case \"bottom\":\n                    y = canvasHeight - circleRadius;\n                    break;\n                case \"center\":\n                default:\n                    y = canvasHeight / 2;\n                    break;\n            }\n            bands.forEach((_, i)=>{\n                const x = startX + i * (barWidth + barGap);\n                drawInactiveCircle(circleRadius, color, x, y);\n            });\n        }\n        drawSpectrum();\n        // Handle resizing\n        window.addEventListener(\"resize\", resizeCanvas);\n        return ()=>{\n            audioContext.close();\n            window.removeEventListener(\"resize\", resizeCanvas);\n        };\n    }, [\n        backgroundColor,\n        barColor,\n        barCount,\n        barGap,\n        barLineCap,\n        barMaxHeight,\n        barOrigin,\n        barWidth,\n        track\n    ]);\n    return (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"canvas\", {\n        ref: canvasRef,\n        style: {\n            display: \"block\",\n            width: \"100%\",\n            height: \"100%\"\n        }\n    });\n});\n$993a744193844a95$export$59bf27bd43679db6.displayName = \"VoiceVisualizer\";\n\n\n\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@pipecat-ai/client-react/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@pipecat-ai/daily-transport/dist/index.module.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/@pipecat-ai/daily-transport/dist/index.module.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DailyRTVIMessageType: () => (/* binding */ $683f111f61e07358$export$ef180de88fd317cc),\n/* harmony export */   DailyTransport: () => (/* binding */ $683f111f61e07358$export$b1ca982aa1e488c1)\n/* harmony export */ });\n/* harmony import */ var _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daily-co/daily-js */ \"(ssr)/../../node_modules/@pipecat-ai/daily-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js\");\n/* harmony import */ var _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pipecat-ai/client-js */ \"(ssr)/../../node_modules/@pipecat-ai/client-js/dist/index.module.js\");\n\n\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $683f111f61e07358$exports = {};\n\n$parcel$export($683f111f61e07358$exports, \"DailyRTVIMessageType\", () => $683f111f61e07358$export$ef180de88fd317cc);\n$parcel$export($683f111f61e07358$exports, \"DailyTransport\", () => $683f111f61e07358$export$b1ca982aa1e488c1);\n\n\n/**\n * Raw wav audio file contents\n * @typedef {Object} WavPackerAudioType\n * @property {Blob} blob\n * @property {string} url\n * @property {number} channelCount\n * @property {number} sampleRate\n * @property {number} duration\n */ /**\n * Utility class for assembling PCM16 \"audio/wav\" data\n * @class\n */ class $6d4b7449a1e1544a$export$13afda237b1c9846 {\n    /**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   * @param {Float32Array} float32Array\n   * @returns {ArrayBuffer}\n   */ static floatTo16BitPCM(float32Array) {\n        const buffer = new ArrayBuffer(float32Array.length * 2);\n        const view = new DataView(buffer);\n        let offset = 0;\n        for(let i = 0; i < float32Array.length; i++, offset += 2){\n            let s = Math.max(-1, Math.min(1, float32Array[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n        }\n        return buffer;\n    }\n    /**\n   * Concatenates two ArrayBuffers\n   * @param {ArrayBuffer} leftBuffer\n   * @param {ArrayBuffer} rightBuffer\n   * @returns {ArrayBuffer}\n   */ static mergeBuffers(leftBuffer, rightBuffer) {\n        const tmpArray = new Uint8Array(leftBuffer.byteLength + rightBuffer.byteLength);\n        tmpArray.set(new Uint8Array(leftBuffer), 0);\n        tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);\n        return tmpArray.buffer;\n    }\n    /**\n   * Packs data into an Int16 format\n   * @private\n   * @param {number} size 0 = 1x Int16, 1 = 2x Int16\n   * @param {number} arg value to pack\n   * @returns\n   */ _packData(size, arg) {\n        return [\n            new Uint8Array([\n                arg,\n                arg >> 8\n            ]),\n            new Uint8Array([\n                arg,\n                arg >> 8,\n                arg >> 16,\n                arg >> 24\n            ])\n        ][size];\n    }\n    /**\n   * Packs audio into \"audio/wav\" Blob\n   * @param {number} sampleRate\n   * @param {{bitsPerSample: number, channels: Array<Float32Array>, data: Int16Array}} audio\n   * @returns {WavPackerAudioType}\n   */ pack(sampleRate, audio) {\n        if (!audio?.bitsPerSample) throw new Error(`Missing \"bitsPerSample\"`);\n        else if (!audio?.channels) throw new Error(`Missing \"channels\"`);\n        else if (!audio?.data) throw new Error(`Missing \"data\"`);\n        const { bitsPerSample: bitsPerSample, channels: channels, data: data } = audio;\n        const output = [\n            // Header\n            'RIFF',\n            this._packData(1, 52),\n            'WAVE',\n            // chunk 1\n            'fmt ',\n            this._packData(1, 16),\n            this._packData(0, 1),\n            this._packData(0, channels.length),\n            this._packData(1, sampleRate),\n            this._packData(1, sampleRate * channels.length * bitsPerSample / 8),\n            this._packData(0, channels.length * bitsPerSample / 8),\n            this._packData(0, bitsPerSample),\n            // chunk 2\n            'data',\n            this._packData(1, channels[0].length * channels.length * bitsPerSample / 8),\n            data\n        ];\n        const blob = new Blob(output, {\n            type: 'audio/mpeg'\n        });\n        const url = URL.createObjectURL(blob);\n        return {\n            blob: blob,\n            url: url,\n            channelCount: channels.length,\n            sampleRate: sampleRate,\n            duration: data.byteLength / (channels.length * sampleRate * 2)\n        };\n    }\n}\nglobalThis.WavPacker = $6d4b7449a1e1544a$export$13afda237b1c9846;\n\n\n/**\n * Constants for help with visualization\n * Helps map frequency ranges from Fast Fourier Transform\n * to human-interpretable ranges, notably music ranges and\n * human vocal ranges.\n */ // Eighth octave frequencies\nconst $03f71ce85e00ada6$var$octave8Frequencies = [\n    4186.01,\n    4434.92,\n    4698.63,\n    4978.03,\n    5274.04,\n    5587.65,\n    5919.91,\n    6271.93,\n    6644.88,\n    7040.0,\n    7458.62,\n    7902.13\n];\n// Labels for each of the above frequencies\nconst $03f71ce85e00ada6$var$octave8FrequencyLabels = [\n    'C',\n    'C#',\n    'D',\n    'D#',\n    'E',\n    'F',\n    'F#',\n    'G',\n    'G#',\n    'A',\n    'A#',\n    'B'\n];\nconst $03f71ce85e00ada6$export$776c63898ae5b636 = [];\nconst $03f71ce85e00ada6$export$facd167cc27ea9b0 = [];\nfor(let i = 1; i <= 8; i++)for(let f = 0; f < $03f71ce85e00ada6$var$octave8Frequencies.length; f++){\n    const freq = $03f71ce85e00ada6$var$octave8Frequencies[f];\n    $03f71ce85e00ada6$export$776c63898ae5b636.push(freq / Math.pow(2, 8 - i));\n    $03f71ce85e00ada6$export$facd167cc27ea9b0.push($03f71ce85e00ada6$var$octave8FrequencyLabels[f] + i);\n}\n/**\n * Subset of the note frequencies between 32 and 2000 Hz\n * 6 octave range: C1 to B6\n */ const $03f71ce85e00ada6$var$voiceFrequencyRange = [\n    32.0,\n    2000.0\n];\nconst $03f71ce85e00ada6$export$dbc1581ed2cfa183 = $03f71ce85e00ada6$export$776c63898ae5b636.filter((_, i)=>{\n    return $03f71ce85e00ada6$export$776c63898ae5b636[i] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];\n});\nconst $03f71ce85e00ada6$export$30a6f2881311088f = $03f71ce85e00ada6$export$facd167cc27ea9b0.filter((_, i)=>{\n    return $03f71ce85e00ada6$export$776c63898ae5b636[i] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];\n});\n\n\nclass $f32f064564ee62f6$export$2c3136da0bf130f9 {\n    /**\n   * Retrieves frequency domain data from an AnalyserNode adjusted to a decibel range\n   * returns human-readable formatting and labels\n   * @param {AnalyserNode} analyser\n   * @param {number} sampleRate\n   * @param {Float32Array} [fftResult]\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {AudioAnalysisOutputType}\n   */ static getFrequencies(analyser, sampleRate, fftResult, analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        if (!fftResult) {\n            fftResult = new Float32Array(analyser.frequencyBinCount);\n            analyser.getFloatFrequencyData(fftResult);\n        }\n        const nyquistFrequency = sampleRate / 2;\n        const frequencyStep = 1 / fftResult.length * nyquistFrequency;\n        let outputValues;\n        let frequencies;\n        let labels;\n        if (analysisType === 'music' || analysisType === 'voice') {\n            const useFrequencies = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);\n            const aggregateOutput = Array(useFrequencies.length).fill(minDecibels);\n            for(let i = 0; i < fftResult.length; i++){\n                const frequency = i * frequencyStep;\n                const amplitude = fftResult[i];\n                for(let n = useFrequencies.length - 1; n >= 0; n--)if (frequency > useFrequencies[n]) {\n                    aggregateOutput[n] = Math.max(aggregateOutput[n], amplitude);\n                    break;\n                }\n            }\n            outputValues = aggregateOutput;\n            frequencies = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);\n            labels = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$30a6f2881311088f) : (0, $03f71ce85e00ada6$export$facd167cc27ea9b0);\n        } else {\n            outputValues = Array.from(fftResult);\n            frequencies = outputValues.map((_, i)=>frequencyStep * i);\n            labels = frequencies.map((f)=>`${f.toFixed(2)} Hz`);\n        }\n        // We normalize to {0, 1}\n        const normalizedOutput = outputValues.map((v)=>{\n            return Math.max(0, Math.min((v - minDecibels) / (maxDecibels - minDecibels), 1));\n        });\n        const values = new Float32Array(normalizedOutput);\n        return {\n            values: values,\n            frequencies: frequencies,\n            labels: labels\n        };\n    }\n    /**\n   * Creates a new AudioAnalysis instance for an HTMLAudioElement\n   * @param {HTMLAudioElement} audioElement\n   * @param {AudioBuffer|null} [audioBuffer] If provided, will cache all frequency domain data from the buffer\n   * @returns {AudioAnalysis}\n   */ constructor(audioElement, audioBuffer = null){\n        this.fftResults = [];\n        if (audioBuffer) {\n            /**\n       * Modified from\n       * https://stackoverflow.com/questions/75063715/using-the-web-audio-api-to-analyze-a-song-without-playing\n       *\n       * We do this to populate FFT values for the audio if provided an `audioBuffer`\n       * The reason to do this is that Safari fails when using `createMediaElementSource`\n       * This has a non-zero RAM cost so we only opt-in to run it on Safari, Chrome is better\n       */ const { length: length, sampleRate: sampleRate } = audioBuffer;\n            const offlineAudioContext = new OfflineAudioContext({\n                length: length,\n                sampleRate: sampleRate\n            });\n            const source = offlineAudioContext.createBufferSource();\n            source.buffer = audioBuffer;\n            const analyser = offlineAudioContext.createAnalyser();\n            analyser.fftSize = 8192;\n            analyser.smoothingTimeConstant = 0.1;\n            source.connect(analyser);\n            // limit is :: 128 / sampleRate;\n            // but we just want 60fps - cuts ~1s from 6MB to 1MB of RAM\n            const renderQuantumInSeconds = 1 / 60;\n            const durationInSeconds = length / sampleRate;\n            const analyze = (index)=>{\n                const suspendTime = renderQuantumInSeconds * index;\n                if (suspendTime < durationInSeconds) offlineAudioContext.suspend(suspendTime).then(()=>{\n                    const fftResult = new Float32Array(analyser.frequencyBinCount);\n                    analyser.getFloatFrequencyData(fftResult);\n                    this.fftResults.push(fftResult);\n                    analyze(index + 1);\n                });\n                if (index === 1) offlineAudioContext.startRendering();\n                else offlineAudioContext.resume();\n            };\n            source.start(0);\n            analyze(1);\n            this.audio = audioElement;\n            this.context = offlineAudioContext;\n            this.analyser = analyser;\n            this.sampleRate = sampleRate;\n            this.audioBuffer = audioBuffer;\n        } else {\n            const audioContext = new AudioContext();\n            const track = audioContext.createMediaElementSource(audioElement);\n            const analyser = audioContext.createAnalyser();\n            analyser.fftSize = 8192;\n            analyser.smoothingTimeConstant = 0.1;\n            track.connect(analyser);\n            analyser.connect(audioContext.destination);\n            this.audio = audioElement;\n            this.context = audioContext;\n            this.analyser = analyser;\n            this.sampleRate = this.context.sampleRate;\n            this.audioBuffer = null;\n        }\n    }\n    /**\n   * Gets the current frequency domain data from the playing audio track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        let fftResult = null;\n        if (this.audioBuffer && this.fftResults.length) {\n            const pct = this.audio.currentTime / this.audio.duration;\n            const index = Math.min(pct * this.fftResults.length | 0, this.fftResults.length - 1);\n            fftResult = this.fftResults[index];\n        }\n        return $f32f064564ee62f6$export$2c3136da0bf130f9.getFrequencies(this.analyser, this.sampleRate, fftResult, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Resume the internal AudioContext if it was suspended due to the lack of\n   * user interaction when the AudioAnalysis was instantiated.\n   * @returns {Promise<true>}\n   */ async resumeIfSuspended() {\n        if (this.context.state === 'suspended') await this.context.resume();\n        return true;\n    }\n}\nglobalThis.AudioAnalysis = $f32f064564ee62f6$export$2c3136da0bf130f9;\n\n\nconst $29a8a70a9466b14f$export$50b76700e2b15e9 = `\nclass StreamProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.hasStarted = false;\n    this.hasInterrupted = false;\n    this.outputBuffers = [];\n    this.bufferLength = 128;\n    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };\n    this.writeOffset = 0;\n    this.trackSampleOffsets = {};\n    this.port.onmessage = (event) => {\n      if (event.data) {\n        const payload = event.data;\n        if (payload.event === 'write') {\n          const int16Array = payload.buffer;\n          const float32Array = new Float32Array(int16Array.length);\n          for (let i = 0; i < int16Array.length; i++) {\n            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32\n          }\n          this.writeData(float32Array, payload.trackId);\n        } else if (\n          payload.event === 'offset' ||\n          payload.event === 'interrupt'\n        ) {\n          const requestId = payload.requestId;\n          const trackId = this.write.trackId;\n          const offset = this.trackSampleOffsets[trackId] || 0;\n          this.port.postMessage({\n            event: 'offset',\n            requestId,\n            trackId,\n            offset,\n          });\n          if (payload.event === 'interrupt') {\n            this.hasInterrupted = true;\n          }\n        } else {\n          throw new Error(\\`Unhandled event \"\\${payload.event}\"\\`);\n        }\n      }\n    };\n  }\n\n  writeData(float32Array, trackId = null) {\n    let { buffer } = this.write;\n    let offset = this.writeOffset;\n    for (let i = 0; i < float32Array.length; i++) {\n      buffer[offset++] = float32Array[i];\n      if (offset >= buffer.length) {\n        this.outputBuffers.push(this.write);\n        this.write = { buffer: new Float32Array(this.bufferLength), trackId };\n        buffer = this.write.buffer;\n        offset = 0;\n      }\n    }\n    this.writeOffset = offset;\n    return true;\n  }\n\n  process(inputs, outputs, parameters) {\n    const output = outputs[0];\n    const outputChannelData = output[0];\n    const outputBuffers = this.outputBuffers;\n    if (this.hasInterrupted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else if (outputBuffers.length) {\n      this.hasStarted = true;\n      const { buffer, trackId } = outputBuffers.shift();\n      for (let i = 0; i < outputChannelData.length; i++) {\n        outputChannelData[i] = buffer[i] || 0;\n      }\n      if (trackId) {\n        this.trackSampleOffsets[trackId] =\n          this.trackSampleOffsets[trackId] || 0;\n        this.trackSampleOffsets[trackId] += buffer.length;\n      }\n      return true;\n    } else if (this.hasStarted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nregisterProcessor('stream_processor', StreamProcessor);\n`;\nconst $29a8a70a9466b14f$var$script = new Blob([\n    $29a8a70a9466b14f$export$50b76700e2b15e9\n], {\n    type: 'application/javascript'\n});\nconst $29a8a70a9466b14f$var$src = URL.createObjectURL($29a8a70a9466b14f$var$script);\nconst $29a8a70a9466b14f$export$bfa8c596114d74df = $29a8a70a9466b14f$var$src;\n\n\n\nclass $d0a969833958d9e7$export$9698d62c78b8f366 {\n    /**\n   * Creates a new WavStreamPlayer instance\n   * @param {{sampleRate?: number}} options\n   * @returns {WavStreamPlayer}\n   */ constructor({ sampleRate: sampleRate = 44100 } = {}){\n        this.scriptSrc = (0, $29a8a70a9466b14f$export$bfa8c596114d74df);\n        this.sampleRate = sampleRate;\n        this.context = null;\n        this.stream = null;\n        this.analyser = null;\n        this.trackSampleOffsets = {};\n        this.interruptedTrackIds = {};\n    }\n    /**\n   * Connects the audio context and enables output to speakers\n   * @returns {Promise<true>}\n   */ async connect() {\n        this.context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        if (this._speakerID) this.context.setSinkId(this._speakerID);\n        if (this.context.state === \"suspended\") await this.context.resume();\n        try {\n            await this.context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const analyser = this.context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        this.analyser = analyser;\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the playing track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = \"frequency\", minDecibels = -100, maxDecibels = -30) {\n        if (!this.analyser) throw new Error(\"Not connected, please call .connect() first\");\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * @param {string} speaker deviceId\n   */ async updateSpeaker(speaker) {\n        const _prevSpeaker = this._speakerID;\n        this._speakerID = speaker;\n        if (this.context) try {\n            if (speaker === \"default\") await this.context.setSinkId();\n            else await this.context.setSinkId(speaker);\n        } catch (e) {\n            console.error(`Could not set sinkId to ${speaker}: ${e}`);\n            this._speakerID = _prevSpeaker;\n        }\n    }\n    /**\n   * Starts audio streaming\n   * @private\n   * @returns {Promise<true>}\n   */ _start() {\n        const streamNode = new AudioWorkletNode(this.context, \"stream_processor\");\n        streamNode.connect(this.context.destination);\n        streamNode.port.onmessage = (e)=>{\n            const { event: event } = e.data;\n            if (event === \"stop\") {\n                streamNode.disconnect();\n                this.stream = null;\n            } else if (event === \"offset\") {\n                const { requestId: requestId, trackId: trackId, offset: offset } = e.data;\n                const currentTime = offset / this.sampleRate;\n                this.trackSampleOffsets[requestId] = {\n                    trackId: trackId,\n                    offset: offset,\n                    currentTime: currentTime\n                };\n            }\n        };\n        this.analyser.disconnect();\n        streamNode.connect(this.analyser);\n        this.stream = streamNode;\n        return true;\n    }\n    /**\n   * Adds 16BitPCM data to the currently playing audio stream\n   * You can add chunks beyond the current play point and they will be queued for play\n   * @param {ArrayBuffer|Int16Array} arrayBuffer\n   * @param {string} [trackId]\n   * @returns {Int16Array}\n   */ add16BitPCM(arrayBuffer, trackId = \"default\") {\n        if (typeof trackId !== \"string\") throw new Error(`trackId must be a string`);\n        else if (this.interruptedTrackIds[trackId]) return;\n        if (!this.stream) this._start();\n        let buffer;\n        if (arrayBuffer instanceof Int16Array) buffer = arrayBuffer;\n        else if (arrayBuffer instanceof ArrayBuffer) buffer = new Int16Array(arrayBuffer);\n        else throw new Error(`argument must be Int16Array or ArrayBuffer`);\n        this.stream.port.postMessage({\n            event: \"write\",\n            buffer: buffer,\n            trackId: trackId\n        });\n        return buffer;\n    }\n    /**\n   * Gets the offset (sample count) of the currently playing stream\n   * @param {boolean} [interrupt]\n   * @returns {{trackId: string|null, offset: number, currentTime: number}}\n   */ async getTrackSampleOffset(interrupt = false) {\n        if (!this.stream) return null;\n        const requestId = crypto.randomUUID();\n        this.stream.port.postMessage({\n            event: interrupt ? \"interrupt\" : \"offset\",\n            requestId: requestId\n        });\n        let trackSampleOffset;\n        while(!trackSampleOffset){\n            trackSampleOffset = this.trackSampleOffsets[requestId];\n            await new Promise((r)=>setTimeout(()=>r(), 1));\n        }\n        const { trackId: trackId } = trackSampleOffset;\n        if (interrupt && trackId) this.interruptedTrackIds[trackId] = true;\n        return trackSampleOffset;\n    }\n    /**\n   * Strips the current stream and returns the sample offset of the audio\n   * @param {boolean} [interrupt]\n   * @returns {{trackId: string|null, offset: number, currentTime: number}}\n   */ async interrupt() {\n        return this.getTrackSampleOffset(true);\n    }\n}\nglobalThis.WavStreamPlayer = $d0a969833958d9e7$export$9698d62c78b8f366;\n\n\nconst $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet = `\nclass AudioProcessor extends AudioWorkletProcessor {\n\n  constructor() {\n    super();\n    this.port.onmessage = this.receive.bind(this);\n    this.initialize();\n  }\n\n  initialize() {\n    this.foundAudio = false;\n    this.recording = false;\n    this.chunks = [];\n  }\n\n  /**\n   * Concatenates sampled chunks into channels\n   * Format is chunk[Left[], Right[]]\n   */\n  readChannelData(chunks, channel = -1, maxChannels = 9) {\n    let channelLimit;\n    if (channel !== -1) {\n      if (chunks[0] && chunks[0].length - 1 < channel) {\n        throw new Error(\n          \\`Channel \\${channel} out of range: max \\${chunks[0].length}\\`\n        );\n      }\n      channelLimit = channel + 1;\n    } else {\n      channel = 0;\n      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);\n    }\n    const channels = [];\n    for (let n = channel; n < channelLimit; n++) {\n      const length = chunks.reduce((sum, chunk) => {\n        return sum + chunk[n].length;\n      }, 0);\n      const buffers = chunks.map((chunk) => chunk[n]);\n      const result = new Float32Array(length);\n      let offset = 0;\n      for (let i = 0; i < buffers.length; i++) {\n        result.set(buffers[i], offset);\n        offset += buffers[i].length;\n      }\n      channels[n] = result;\n    }\n    return channels;\n  }\n\n  /**\n   * Combines parallel audio data into correct format,\n   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]\n   */\n  formatAudioData(channels) {\n    if (channels.length === 1) {\n      // Simple case is only one channel\n      const float32Array = channels[0].slice();\n      const meanValues = channels[0].slice();\n      return { float32Array, meanValues };\n    } else {\n      const float32Array = new Float32Array(\n        channels[0].length * channels.length\n      );\n      const meanValues = new Float32Array(channels[0].length);\n      for (let i = 0; i < channels[0].length; i++) {\n        const offset = i * channels.length;\n        let meanValue = 0;\n        for (let n = 0; n < channels.length; n++) {\n          float32Array[offset + n] = channels[n][i];\n          meanValue += channels[n][i];\n        }\n        meanValues[i] = meanValue / channels.length;\n      }\n      return { float32Array, meanValues };\n    }\n  }\n\n  /**\n   * Converts 32-bit float data to 16-bit integers\n   */\n  floatTo16BitPCM(float32Array) {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      let s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Retrieves the most recent amplitude values from the audio stream\n   * @param {number} channel\n   */\n  getValues(channel = -1) {\n    const channels = this.readChannelData(this.chunks, channel);\n    const { meanValues } = this.formatAudioData(channels);\n    return { meanValues, channels };\n  }\n\n  /**\n   * Exports chunks as an audio/wav file\n   */\n  export() {\n    const channels = this.readChannelData(this.chunks);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const audioData = this.floatTo16BitPCM(float32Array);\n    return {\n      meanValues: meanValues,\n      audio: {\n        bitsPerSample: 16,\n        channels: channels,\n        data: audioData,\n      },\n    };\n  }\n\n  receive(e) {\n    const { event, id } = e.data;\n    let receiptData = {};\n    switch (event) {\n      case 'start':\n        this.recording = true;\n        break;\n      case 'stop':\n        this.recording = false;\n        break;\n      case 'clear':\n        this.initialize();\n        break;\n      case 'export':\n        receiptData = this.export();\n        break;\n      case 'read':\n        receiptData = this.getValues();\n        break;\n      default:\n        break;\n    }\n    // Always send back receipt\n    this.port.postMessage({ event: 'receipt', id, data: receiptData });\n  }\n\n  sendChunk(chunk) {\n    const channels = this.readChannelData([chunk]);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const rawAudioData = this.floatTo16BitPCM(float32Array);\n    const monoAudioData = this.floatTo16BitPCM(meanValues);\n    this.port.postMessage({\n      event: 'chunk',\n      data: {\n        mono: monoAudioData,\n        raw: rawAudioData,\n      },\n    });\n  }\n\n  process(inputList, outputList, parameters) {\n    // Copy input to output (e.g. speakers)\n    // Note that this creates choppy sounds with Mac products\n    const sourceLimit = Math.min(inputList.length, outputList.length);\n    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {\n      const input = inputList[inputNum];\n      const output = outputList[inputNum];\n      const channelCount = Math.min(input.length, output.length);\n      for (let channelNum = 0; channelNum < channelCount; channelNum++) {\n        input[channelNum].forEach((sample, i) => {\n          output[channelNum][i] = sample;\n        });\n      }\n    }\n    const inputs = inputList[0];\n    // There's latency at the beginning of a stream before recording starts\n    // Make sure we actually receive audio data before we start storing chunks\n    let sliceIndex = 0;\n    if (!this.foundAudio) {\n      for (const channel of inputs) {\n        sliceIndex = 0; // reset for each channel\n        if (this.foundAudio) {\n          break;\n        }\n        if (channel) {\n          for (const value of channel) {\n            if (value !== 0) {\n              // find only one non-zero entry in any channel\n              this.foundAudio = true;\n              break;\n            } else {\n              sliceIndex++;\n            }\n          }\n        }\n      }\n    }\n    if (inputs && inputs[0] && this.foundAudio && this.recording) {\n      // We need to copy the TypedArray, because the \\`process\\`\n      // internals will reuse the same buffer to hold each input\n      const chunk = inputs.map((input) => input.slice(sliceIndex));\n      this.chunks.push(chunk);\n      this.sendChunk(chunk);\n    }\n    return true;\n  }\n}\n\nregisterProcessor('audio_processor', AudioProcessor);\n`;\nconst $8e1d1e6ff08f6fb5$var$script = new Blob([\n    $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet\n], {\n    type: 'application/javascript'\n});\nconst $8e1d1e6ff08f6fb5$var$src = URL.createObjectURL($8e1d1e6ff08f6fb5$var$script);\nconst $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c = $8e1d1e6ff08f6fb5$var$src;\n\n\n\n\nclass $62bc376044a05513$export$439b217ca659a877 {\n    /**\n   * Create a new WavRecorder instance\n   * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]\n   * @returns {WavRecorder}\n   */ constructor({ sampleRate: sampleRate = 44100, outputToSpeakers: outputToSpeakers = false, debug: debug = false } = {}){\n        // Script source\n        this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);\n        // Config\n        this.sampleRate = sampleRate;\n        this.outputToSpeakers = outputToSpeakers;\n        this.debug = !!debug;\n        this._deviceChangeCallback = null;\n        this._devices = [];\n        this.deviceSelection = null;\n        // State variables\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        this.recording = false;\n        // Event handling with AudioWorklet\n        this._lastEventId = 0;\n        this.eventReceipts = {};\n        this.eventTimeout = 5000;\n        // Process chunks of audio\n        this._chunkProcessor = ()=>{};\n        this._chunkProcessorSize = void 0;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n    }\n    /**\n   * Decodes audio data from multiple formats to a Blob, url, Float32Array and AudioBuffer\n   * @param {Blob|Float32Array|Int16Array|ArrayBuffer|number[]} audioData\n   * @param {number} sampleRate\n   * @param {number} fromSampleRate\n   * @returns {Promise<DecodedAudioType>}\n   */ static async decode(audioData, sampleRate = 44100, fromSampleRate = -1) {\n        const context = new AudioContext({\n            sampleRate: sampleRate\n        });\n        let arrayBuffer;\n        let blob;\n        if (audioData instanceof Blob) {\n            if (fromSampleRate !== -1) throw new Error(`Can not specify \"fromSampleRate\" when reading from Blob`);\n            blob = audioData;\n            arrayBuffer = await blob.arrayBuffer();\n        } else if (audioData instanceof ArrayBuffer) {\n            if (fromSampleRate !== -1) throw new Error(`Can not specify \"fromSampleRate\" when reading from ArrayBuffer`);\n            arrayBuffer = audioData;\n            blob = new Blob([\n                arrayBuffer\n            ], {\n                type: 'audio/wav'\n            });\n        } else {\n            let float32Array;\n            let data;\n            if (audioData instanceof Int16Array) {\n                data = audioData;\n                float32Array = new Float32Array(audioData.length);\n                for(let i = 0; i < audioData.length; i++)float32Array[i] = audioData[i] / 0x8000;\n            } else if (audioData instanceof Float32Array) float32Array = audioData;\n            else if (audioData instanceof Array) float32Array = new Float32Array(audioData);\n            else throw new Error(`\"audioData\" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>`);\n            if (fromSampleRate === -1) throw new Error(`Must specify \"fromSampleRate\" when reading from Float32Array, In16Array or Array`);\n            else if (fromSampleRate < 3000) throw new Error(`Minimum \"fromSampleRate\" is 3000 (3kHz)`);\n            if (!data) data = (0, $6d4b7449a1e1544a$export$13afda237b1c9846).floatTo16BitPCM(float32Array);\n            const audio = {\n                bitsPerSample: 16,\n                channels: [\n                    float32Array\n                ],\n                data: data\n            };\n            const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n            const result = packer.pack(fromSampleRate, audio);\n            blob = result.blob;\n            arrayBuffer = await blob.arrayBuffer();\n        }\n        const audioBuffer = await context.decodeAudioData(arrayBuffer);\n        const values = audioBuffer.getChannelData(0);\n        const url = URL.createObjectURL(blob);\n        return {\n            blob: blob,\n            url: url,\n            values: values,\n            audioBuffer: audioBuffer\n        };\n    }\n    /**\n   * Logs data in debug mode\n   * @param {...any} arguments\n   * @returns {true}\n   */ log() {\n        if (this.debug) this.log(...arguments);\n        return true;\n    }\n    /**\n   * Retrieves the current sampleRate for the recorder\n   * @returns {number}\n   */ getSampleRate() {\n        return this.sampleRate;\n    }\n    /**\n   * Retrieves the current status of the recording\n   * @returns {\"ended\"|\"paused\"|\"recording\"}\n   */ getStatus() {\n        if (!this.processor) return 'ended';\n        else if (!this.recording) return 'paused';\n        else return 'recording';\n    }\n    /**\n   * Sends an event to the AudioWorklet\n   * @private\n   * @param {string} name\n   * @param {{[key: string]: any}} data\n   * @param {AudioWorkletNode} [_processor]\n   * @returns {Promise<{[key: string]: any}>}\n   */ async _event(name, data = {}, _processor = null) {\n        _processor = _processor || this.processor;\n        if (!_processor) throw new Error('Can not send events without recording first');\n        const message = {\n            event: name,\n            id: this._lastEventId++,\n            data: data\n        };\n        _processor.port.postMessage(message);\n        const t0 = new Date().valueOf();\n        while(!this.eventReceipts[message.id]){\n            if (new Date().valueOf() - t0 > this.eventTimeout) throw new Error(`Timeout waiting for \"${name}\" event`);\n            await new Promise((res)=>setTimeout(()=>res(true), 1));\n        }\n        const payload = this.eventReceipts[message.id];\n        delete this.eventReceipts[message.id];\n        return payload;\n    }\n    /**\n   * Sets device change callback, remove if callback provided is `null`\n   * @param {(Array<MediaDeviceInfo & {default: boolean}>): void|null} callback\n   * @returns {true}\n   */ listenForDeviceChange(callback) {\n        if (callback === null && this._deviceChangeCallback) {\n            navigator.mediaDevices.removeEventListener('devicechange', this._deviceChangeCallback);\n            this._deviceChangeCallback = null;\n        } else if (callback !== null) {\n            // Basically a debounce; we only want this called once when devices change\n            // And we only want the most recent callback() to be executed\n            // if a few are operating at the same time\n            let lastId = 0;\n            let lastDevices = [];\n            const serializeDevices = (devices)=>devices.map((d)=>d.deviceId).sort().join(',');\n            const cb = async ()=>{\n                let id = ++lastId;\n                const devices = await this.listDevices();\n                if (id === lastId) {\n                    if (serializeDevices(lastDevices) !== serializeDevices(devices)) {\n                        lastDevices = devices;\n                        callback(devices.slice());\n                    }\n                }\n            };\n            navigator.mediaDevices.addEventListener('devicechange', cb);\n            cb();\n            this._deviceChangeCallback = cb;\n        }\n        return true;\n    }\n    /**\n   * Manually request permission to use the microphone\n   * @returns {Promise<true>}\n   */ async requestPermission() {\n        const permissionStatus = await navigator.permissions.query({\n            name: 'microphone'\n        });\n        if (permissionStatus.state === 'denied') window.alert('You must grant microphone access to use this feature.');\n        else if (permissionStatus.state === 'prompt') try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            const tracks = stream.getTracks();\n            tracks.forEach((track)=>track.stop());\n        } catch (e) {\n            window.alert('You must grant microphone access to use this feature.');\n        }\n        return true;\n    }\n    /**\n   * List all eligible devices for recording, will request permission to use microphone\n   * @returns {Promise<Array<MediaDeviceInfo & {default: boolean}>>}\n   */ async listDevices() {\n        if (!navigator.mediaDevices || !('enumerateDevices' in navigator.mediaDevices)) throw new Error('Could not request user devices');\n        await this.requestPermission();\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const audioDevices = devices.filter((device)=>device.kind === 'audioinput');\n        return audioDevices;\n    // const defaultDeviceIndex = audioDevices.findIndex(\n    //   (device) => device.deviceId === 'default'\n    // );\n    // const deviceList = [];\n    // if (defaultDeviceIndex !== -1) {\n    //   let defaultDevice = audioDevices.splice(defaultDeviceIndex, 1)[0];\n    //   let existingIndex = audioDevices.findIndex(\n    //     (device) => device.groupId === defaultDevice.groupId\n    //   );\n    //   if (existingIndex !== -1) {\n    //     defaultDevice = audioDevices.splice(existingIndex, 1)[0];\n    //   }\n    //   defaultDevice.default = true;\n    //   deviceList.push(defaultDevice);\n    // }\n    // return deviceList.concat(audioDevices);\n    }\n    /**\n   * Begins a recording session and requests microphone permissions if not already granted\n   * Microphone recording indicator will appear on browser tab but status will be \"paused\"\n   * @param {string} [deviceId] if no device provided, default device will be used\n   * @returns {Promise<true>}\n   */ async begin(deviceId) {\n        if (this.processor) throw new Error(`Already connected: please call .end() to start a new session`);\n        if (!navigator.mediaDevices || !('getUserMedia' in navigator.mediaDevices)) throw new Error('Could not request user media');\n        deviceId = deviceId ?? this.deviceSelection?.deviceId;\n        try {\n            const config = {\n                audio: true\n            };\n            if (deviceId) config.audio = {\n                deviceId: {\n                    exact: deviceId\n                }\n            };\n            this.stream = await navigator.mediaDevices.getUserMedia(config);\n        } catch (err) {\n            throw new Error('Could not start media stream');\n        }\n        this.listDevices().then((devices)=>{\n            deviceId = this.stream.getAudioTracks()[0].getSettings().deviceId;\n            console.log('find current device', devices, deviceId, this.stream.getAudioTracks()[0].getSettings());\n            this.deviceSelection = devices.find((d)=>d.deviceId === deviceId);\n            console.log('current device', this.deviceSelection);\n        });\n        const context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        const source = context.createMediaStreamSource(this.stream);\n        // Load and execute the module script.\n        try {\n            await context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const processor = new AudioWorkletNode(context, 'audio_processor');\n        processor.port.onmessage = (e)=>{\n            const { event: event, id: id, data: data } = e.data;\n            if (event === 'receipt') this.eventReceipts[id] = data;\n            else if (event === 'chunk') {\n                if (this._chunkProcessorSize) {\n                    const buffer = this._chunkProcessorBuffer;\n                    this._chunkProcessorBuffer = {\n                        raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),\n                        mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)\n                    };\n                    if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {\n                        this._chunkProcessor(this._chunkProcessorBuffer);\n                        this._chunkProcessorBuffer = {\n                            raw: new ArrayBuffer(0),\n                            mono: new ArrayBuffer(0)\n                        };\n                    }\n                } else this._chunkProcessor(data);\n            }\n        };\n        const node = source.connect(processor);\n        const analyser = context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        node.connect(analyser);\n        if (this.outputToSpeakers) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Warning: Output to speakers may affect sound quality,\\nespecially due to system audio feedback preventative measures.\\nuse only for debugging\");\n            analyser.connect(context.destination);\n        }\n        this.source = source;\n        this.node = node;\n        this.analyser = analyser;\n        this.processor = processor;\n        console.log('begin completed');\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the recording track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Pauses the recording\n   * Keeps microphone stream open but halts storage of audio\n   * @returns {Promise<true>}\n   */ async pause() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        else if (!this.recording) throw new Error('Already paused: please call .record() first');\n        if (this._chunkProcessorBuffer.raw.byteLength) this._chunkProcessor(this._chunkProcessorBuffer);\n        this.log('Pausing ...');\n        await this._event('stop');\n        this.recording = false;\n        return true;\n    }\n    /**\n   * Start recording stream and storing to memory from the connected audio source\n   * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]\n   * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio\n   * @returns {Promise<true>}\n   */ async record(chunkProcessor = ()=>{}, chunkSize = 8192) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        else if (this.recording) throw new Error('Already recording: please call .pause() first');\n        else if (typeof chunkProcessor !== 'function') throw new Error(`chunkProcessor must be a function`);\n        this._chunkProcessor = chunkProcessor;\n        this._chunkProcessorSize = chunkSize;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n        this.log('Recording ...');\n        await this._event('start');\n        this.recording = true;\n        return true;\n    }\n    /**\n   * Clears the audio buffer, empties stored recording\n   * @returns {Promise<true>}\n   */ async clear() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        await this._event('clear');\n        return true;\n    }\n    /**\n   * Reads the current audio stream data\n   * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}\n   */ async read() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        this.log('Reading ...');\n        const result = await this._event('read');\n        return result;\n    }\n    /**\n   * Saves the current audio stream to a file\n   * @param {boolean} [force] Force saving while still recording\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async save(force = false) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        if (!force && this.recording) throw new Error('Currently recording: please call .pause() first, or call .save(true) to force');\n        this.log('Exporting ...');\n        const exportData = await this._event('export');\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Ends the current recording session and saves the result\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async end() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        const _processor = this.processor;\n        this.log('Stopping ...');\n        await this._event('stop');\n        this.recording = false;\n        const tracks = this.stream.getTracks();\n        tracks.forEach((track)=>track.stop());\n        this.log('Exporting ...');\n        const exportData = await this._event('export', {}, _processor);\n        this.processor.disconnect();\n        this.source.disconnect();\n        this.node.disconnect();\n        this.analyser.disconnect();\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Performs a full cleanup of WavRecorder instance\n   * Stops actively listening via microphone and removes existing listeners\n   * @returns {Promise<true>}\n   */ async quit() {\n        this.listenForDeviceChange(null);\n        // we do not reset this on end so that selections persist across starts\n        this.deviceSelection = null;\n        if (this.processor) await this.end();\n        return true;\n    }\n}\nglobalThis.WavRecorder = $62bc376044a05513$export$439b217ca659a877;\n\n\n\n\n\nclass $5fc11d7bc0d20724$export$2934cf2d25c67a48 {\n    /**\n   * Create a new MediaStreamRecorder instance\n   * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]\n   * @returns {MediaStreamRecorder}\n   */ constructor({ sampleRate: sampleRate = 44100, outputToSpeakers: outputToSpeakers = false, debug: debug = false } = {}){\n        // Script source\n        this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);\n        // Config\n        this.sampleRate = sampleRate;\n        this.outputToSpeakers = outputToSpeakers;\n        this.debug = !!debug;\n        // State variables\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        this.recording = false;\n        // Event handling with AudioWorklet\n        this._lastEventId = 0;\n        this.eventReceipts = {};\n        this.eventTimeout = 5000;\n        // Process chunks of audio\n        this._chunkProcessor = ()=>{};\n        this._chunkProcessorSize = void 0;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n    }\n    /**\n   * Logs data in debug mode\n   * @param {...any} arguments\n   * @returns {true}\n   */ log() {\n        if (this.debug) this.log(...arguments);\n        return true;\n    }\n    /**\n   * Retrieves the current sampleRate for the recorder\n   * @returns {number}\n   */ getSampleRate() {\n        return this.sampleRate;\n    }\n    /**\n   * Retrieves the current status of the recording\n   * @returns {\"ended\"|\"paused\"|\"recording\"}\n   */ getStatus() {\n        if (!this.processor) return \"ended\";\n        else if (!this.recording) return \"paused\";\n        else return \"recording\";\n    }\n    /**\n   * Sends an event to the AudioWorklet\n   * @private\n   * @param {string} name\n   * @param {{[key: string]: any}} data\n   * @param {AudioWorkletNode} [_processor]\n   * @returns {Promise<{[key: string]: any}>}\n   */ async _event(name, data = {}, _processor = null) {\n        _processor = _processor || this.processor;\n        if (!_processor) throw new Error(\"Can not send events without recording first\");\n        const message = {\n            event: name,\n            id: this._lastEventId++,\n            data: data\n        };\n        _processor.port.postMessage(message);\n        const t0 = new Date().valueOf();\n        while(!this.eventReceipts[message.id]){\n            if (new Date().valueOf() - t0 > this.eventTimeout) throw new Error(`Timeout waiting for \"${name}\" event`);\n            await new Promise((res)=>setTimeout(()=>res(true), 1));\n        }\n        const payload = this.eventReceipts[message.id];\n        delete this.eventReceipts[message.id];\n        return payload;\n    }\n    /**\n   * Begins a recording session for the given audioTrack\n   * Microphone recording indicator will appear on browser tab but status will be \"paused\"\n   * @param {MediaStreamTrack} [audioTrack] if no device provided, default device will be used\n   * @returns {Promise<true>}\n   */ async begin(audioTrack) {\n        if (this.processor) throw new Error(`Already connected: please call .end() to start a new session`);\n        if (!audioTrack || audioTrack.kind !== \"audio\") throw new Error(\"No audio track provided\");\n        this.stream = new MediaStream([\n            audioTrack\n        ]);\n        const context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        const source = context.createMediaStreamSource(this.stream);\n        // Load and execute the module script.\n        try {\n            await context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const processor = new AudioWorkletNode(context, \"audio_processor\");\n        processor.port.onmessage = (e)=>{\n            const { event: event, id: id, data: data } = e.data;\n            if (event === \"receipt\") this.eventReceipts[id] = data;\n            else if (event === \"chunk\") {\n                if (this._chunkProcessorSize) {\n                    const buffer = this._chunkProcessorBuffer;\n                    this._chunkProcessorBuffer = {\n                        raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),\n                        mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)\n                    };\n                    if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {\n                        this._chunkProcessor(this._chunkProcessorBuffer);\n                        this._chunkProcessorBuffer = {\n                            raw: new ArrayBuffer(0),\n                            mono: new ArrayBuffer(0)\n                        };\n                    }\n                } else this._chunkProcessor(data);\n            }\n        };\n        const node = source.connect(processor);\n        const analyser = context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        node.connect(analyser);\n        if (this.outputToSpeakers) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Warning: Output to speakers may affect sound quality,\\nespecially due to system audio feedback preventative measures.\\nuse only for debugging\");\n            analyser.connect(context.destination);\n        }\n        this.source = source;\n        this.node = node;\n        this.analyser = analyser;\n        this.processor = processor;\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the recording track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = \"frequency\", minDecibels = -100, maxDecibels = -30) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Pauses the recording\n   * Keeps microphone stream open but halts storage of audio\n   * @returns {Promise<true>}\n   */ async pause() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        else if (!this.recording) throw new Error(\"Already paused: please call .record() first\");\n        if (this._chunkProcessorBuffer.raw.byteLength) this._chunkProcessor(this._chunkProcessorBuffer);\n        this.log(\"Pausing ...\");\n        await this._event(\"stop\");\n        this.recording = false;\n        return true;\n    }\n    /**\n   * Start recording stream and storing to memory from the connected audio source\n   * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]\n   * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio\n   * @returns {Promise<true>}\n   */ async record(chunkProcessor = ()=>{}, chunkSize = 8192) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        else if (this.recording) throw new Error(\"Already recording: HELLO please call .pause() first\");\n        else if (typeof chunkProcessor !== \"function\") throw new Error(`chunkProcessor must be a function`);\n        this._chunkProcessor = chunkProcessor;\n        this._chunkProcessorSize = chunkSize;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n        this.log(\"Recording ...\");\n        await this._event(\"start\");\n        this.recording = true;\n        return true;\n    }\n    /**\n   * Clears the audio buffer, empties stored recording\n   * @returns {Promise<true>}\n   */ async clear() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        await this._event(\"clear\");\n        return true;\n    }\n    /**\n   * Reads the current audio stream data\n   * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}\n   */ async read() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        this.log(\"Reading ...\");\n        const result = await this._event(\"read\");\n        return result;\n    }\n    /**\n   * Saves the current audio stream to a file\n   * @param {boolean} [force] Force saving while still recording\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async save(force = false) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        if (!force && this.recording) throw new Error(\"Currently recording: please call .pause() first, or call .save(true) to force\");\n        this.log(\"Exporting ...\");\n        const exportData = await this._event(\"export\");\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Ends the current recording session and saves the result\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async end() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        const _processor = this.processor;\n        this.log(\"Stopping ...\");\n        await this._event(\"stop\");\n        this.recording = false;\n        this.log(\"Exporting ...\");\n        const exportData = await this._event(\"export\", {}, _processor);\n        this.processor.disconnect();\n        this.source.disconnect();\n        this.node.disconnect();\n        this.analyser.disconnect();\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Performs a full cleanup of WavRecorder instance\n   * Stops actively listening via microphone and removes existing listeners\n   * @returns {Promise<true>}\n   */ async quit() {\n        this.listenForDeviceChange(null);\n        if (this.processor) await this.end();\n        return true;\n    }\n}\nglobalThis.WavRecorder = WavRecorder;\n\n\n\n\nvar $58d19ff082af5e5c$exports = {};\n$58d19ff082af5e5c$exports = JSON.parse(\"{\\\"name\\\":\\\"@pipecat-ai/daily-transport\\\",\\\"version\\\":\\\"1.0.0\\\",\\\"license\\\":\\\"BSD-2-Clause\\\",\\\"main\\\":\\\"dist/index.js\\\",\\\"module\\\":\\\"dist/index.module.js\\\",\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"source\\\":\\\"src/index.ts\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/pipecat-ai/pipecat-client-web-transports.git\\\"},\\\"files\\\":[\\\"dist\\\",\\\"package.json\\\",\\\"README.md\\\"],\\\"scripts\\\":{\\\"build\\\":\\\"parcel build --no-cache\\\",\\\"dev\\\":\\\"parcel watch\\\",\\\"lint\\\":\\\"eslint . --ext ts --report-unused-disable-directives --max-warnings 0\\\"},\\\"devDependencies\\\":{\\\"@pipecat-ai/client-js\\\":\\\"^1.0.0\\\",\\\"eslint\\\":\\\"9.11.1\\\",\\\"eslint-config-prettier\\\":\\\"^9.1.0\\\",\\\"eslint-plugin-simple-import-sort\\\":\\\"^12.1.1\\\"},\\\"peerDependencies\\\":{\\\"@pipecat-ai/client-js\\\":\\\"~1.0.0\\\"},\\\"dependencies\\\":{\\\"@daily-co/daily-js\\\":\\\"^0.77.0\\\"},\\\"description\\\":\\\"Pipecat Daily Transport Package\\\",\\\"author\\\":\\\"Daily.co\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/pipecat-ai/pipecat-client-web-transports/issues\\\"},\\\"homepage\\\":\\\"https://github.com/pipecat-ai/pipecat-client-web-transports/blob/main/transports/daily-webrtc/README.md\\\"}\");\n\n\nvar $683f111f61e07358$export$ef180de88fd317cc;\n(function(DailyRTVIMessageType) {\n    DailyRTVIMessageType[\"AUDIO_BUFFERING_STARTED\"] = \"audio-buffering-started\";\n    DailyRTVIMessageType[\"AUDIO_BUFFERING_STOPPED\"] = \"audio-buffering-stopped\";\n})($683f111f61e07358$export$ef180de88fd317cc || ($683f111f61e07358$export$ef180de88fd317cc = {}));\nclass $683f111f61e07358$var$DailyCallWrapper {\n    constructor(daily){\n        this._daily = daily;\n        this._proxy = new Proxy(this._daily, {\n            get: (target, prop, receiver)=>{\n                if (typeof target[prop] === \"function\") {\n                    let errMsg;\n                    switch(String(prop)){\n                        // Disable methods that modify the lifecycle of the call. These operations\n                        // should be performed via the PipecatClient in order to keep state in sync.\n                        case \"preAuth\":\n                            errMsg = `Calls to preAuth() are disabled. Please use Transport.preAuth()`;\n                            break;\n                        case \"startCamera\":\n                            errMsg = `Calls to startCamera() are disabled. Please use PipecatClient.initDevices()`;\n                            break;\n                        case \"join\":\n                            errMsg = `Calls to join() are disabled. Please use PipecatClient.connect()`;\n                            break;\n                        case \"leave\":\n                            errMsg = `Calls to leave() are disabled. Please use PipecatClient.disconnect()`;\n                            break;\n                        case \"destroy\":\n                            errMsg = `Calls to destroy() are disabled.`;\n                            break;\n                    }\n                    if (errMsg) return ()=>{\n                        throw new Error(errMsg);\n                    };\n                    // Forward other method calls\n                    return (...args)=>{\n                        return target[prop](...args);\n                    };\n                }\n                // Forward property access\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n    get proxy() {\n        return this._proxy;\n    }\n}\nclass $683f111f61e07358$export$b1ca982aa1e488c1 extends (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.Transport) {\n    constructor(opts = {}){\n        super();\n        this._botId = \"\";\n        this._selectedCam = {};\n        this._selectedMic = {};\n        this._selectedSpeaker = {};\n        this._currentAudioTrack = null;\n        this._audioQueue = [];\n        this._callbacks = {};\n        const { bufferLocalAudioUntilBotReady: bufferLocalAudioUntilBotReady, ...dailyOpts } = opts;\n        this._dailyFactoryOptions = dailyOpts;\n        this._bufferLocalAudioUntilBotReady = bufferLocalAudioUntilBotReady || false;\n        this._daily = (0, _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]).createCallObject({\n            ...this._dailyFactoryOptions,\n            allowMultipleCallInstances: true\n        });\n        this._dailyWrapper = new $683f111f61e07358$var$DailyCallWrapper(this._daily);\n    }\n    setupRecorder() {\n        this._mediaStreamRecorder = new (0, $5fc11d7bc0d20724$export$2934cf2d25c67a48)({\n            sampleRate: $683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_SAMPLE_RATE\n        });\n    }\n    handleUserAudioStream(data) {\n        this._audioQueue.push(data);\n    }\n    flushAudioQueue() {\n        const batchSize = 10; // Number of buffers to send in one message\n        if (this._audioQueue.length === 0) return;\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).debug(`Will flush audio queue: ${this._audioQueue.length}`);\n        while(this._audioQueue.length > 0){\n            const batch = [];\n            // Collect up to `batchSize` items\n            while(batch.length < batchSize && this._audioQueue.length > 0){\n                const queuedData = this._audioQueue.shift();\n                if (queuedData) batch.push(queuedData);\n            }\n            if (batch.length > 0) this._sendAudioBatch(batch);\n        }\n    }\n    _sendAudioBatch(dataBatch) {\n        const encodedBatch = dataBatch.map((data)=>{\n            const pcmByteArray = new Uint8Array(data);\n            return btoa(String.fromCharCode(...pcmByteArray));\n        });\n        const audioMessage = {\n            id: \"raw-audio-batch\",\n            label: \"rtvi-ai\",\n            type: \"raw-audio-batch\",\n            data: {\n                base64AudioBatch: encodedBatch,\n                sampleRate: $683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_SAMPLE_RATE,\n                numChannels: 1\n            }\n        };\n        this.sendMessage(audioMessage);\n    }\n    initialize(options, messageHandler) {\n        if (this._bufferLocalAudioUntilBotReady) this.setupRecorder();\n        this._callbacks = options.callbacks ?? {};\n        this._onMessage = messageHandler;\n        if (this._dailyFactoryOptions.startVideoOff == null || options.enableCam != null) // Default is cam off\n        this._dailyFactoryOptions.startVideoOff = !(options.enableCam ?? false);\n        if (this._dailyFactoryOptions.startAudioOff == null || options.enableMic != null) // Default is mic on\n        this._dailyFactoryOptions.startAudioOff = !(options.enableMic ?? true);\n        this.attachEventListeners();\n        this.state = \"disconnected\";\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).debug(\"[Daily Transport] Initialized\", (0, (/*@__PURE__*/$parcel$interopDefault($58d19ff082af5e5c$exports))).version);\n    }\n    get dailyCallClient() {\n        return this._dailyWrapper.proxy;\n    }\n    get state() {\n        return this._state;\n    }\n    set state(state) {\n        if (this._state === state) return;\n        this._state = state;\n        this._callbacks.onTransportStateChanged?.(state);\n    }\n    getSessionInfo() {\n        return this._daily.meetingSessionSummary();\n    }\n    async getAllCams() {\n        const { devices: devices } = await this._daily.enumerateDevices();\n        return devices.filter((d)=>d.kind === \"videoinput\");\n    }\n    updateCam(camId) {\n        this._daily.setInputDevicesAsync({\n            videoDeviceId: camId\n        }).then((infos)=>{\n            this._selectedCam = infos.camera;\n        });\n    }\n    get selectedCam() {\n        return this._selectedCam;\n    }\n    async getAllMics() {\n        const { devices: devices } = await this._daily.enumerateDevices();\n        return devices.filter((d)=>d.kind === \"audioinput\");\n    }\n    updateMic(micId) {\n        this._daily.setInputDevicesAsync({\n            audioDeviceId: micId\n        }).then((infos)=>{\n            this._selectedMic = infos.mic;\n        });\n    }\n    get selectedMic() {\n        return this._selectedMic;\n    }\n    async getAllSpeakers() {\n        const { devices: devices } = await this._daily.enumerateDevices();\n        return devices.filter((d)=>d.kind === \"audiooutput\");\n    }\n    updateSpeaker(speakerId) {\n        this._daily.setOutputDeviceAsync({\n            outputDeviceId: speakerId\n        }).then((infos)=>{\n            this._selectedSpeaker = infos.speaker;\n        });\n    }\n    get selectedSpeaker() {\n        return this._selectedSpeaker;\n    }\n    enableMic(enable) {\n        this._daily.setLocalAudio(enable);\n    }\n    get isMicEnabled() {\n        return this._daily.localAudio();\n    }\n    enableCam(enable) {\n        this._daily.setLocalVideo(enable);\n    }\n    get isCamEnabled() {\n        return this._daily.localVideo();\n    }\n    enableScreenShare(enable) {\n        if (enable) this._daily.startScreenShare();\n        else this._daily.stopScreenShare();\n    }\n    get isSharingScreen() {\n        return this._daily.localScreenAudio() || this._daily.localScreenVideo();\n    }\n    tracks() {\n        const participants = this._daily.participants() ?? {};\n        const bot = participants?.[this._botId];\n        const tracks = {\n            local: {\n                audio: participants?.local?.tracks?.audio?.persistentTrack,\n                screenAudio: participants?.local?.tracks?.screenAudio?.persistentTrack,\n                screenVideo: participants?.local?.tracks?.screenVideo?.persistentTrack,\n                video: participants?.local?.tracks?.video?.persistentTrack\n            }\n        };\n        if (bot) tracks.bot = {\n            audio: bot?.tracks?.audio?.persistentTrack,\n            video: bot?.tracks?.video?.persistentTrack\n        };\n        return tracks;\n    }\n    async startRecording() {\n        try {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).info(\"[Daily Transport] Initializing recording\");\n            await this._mediaStreamRecorder.record((data)=>{\n                this.handleUserAudioStream(data.mono);\n            }, $683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_CHUNK_SIZE);\n            this._callbacks.onAudioBufferingStarted?.();\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).info(\"[Daily Transport] Recording Initialized\");\n        } catch (e) {\n            const err = e;\n            if (!err.message.includes(\"Already recording\")) (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"Error starting recording\", e);\n        }\n    }\n    async preAuth(dailyCallOptions) {\n        this._dailyFactoryOptions = dailyCallOptions;\n        await this._daily.preAuth(dailyCallOptions);\n    }\n    async initDevices() {\n        if (!this._daily) throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIError)(\"Transport instance not initialized\");\n        this.state = \"initializing\";\n        const infos = await this._daily.startCamera(this._dailyFactoryOptions);\n        const { devices: devices } = await this._daily.enumerateDevices();\n        const cams = devices.filter((d)=>d.kind === \"videoinput\");\n        const mics = devices.filter((d)=>d.kind === \"audioinput\");\n        const speakers = devices.filter((d)=>d.kind === \"audiooutput\");\n        this._selectedCam = infos.camera;\n        this._selectedMic = infos.mic;\n        this._selectedSpeaker = infos.speaker;\n        this._callbacks.onAvailableCamsUpdated?.(cams);\n        this._callbacks.onAvailableMicsUpdated?.(mics);\n        this._callbacks.onAvailableSpeakersUpdated?.(speakers);\n        this._callbacks.onCamUpdated?.(infos.camera);\n        this._callbacks.onMicUpdated?.(infos.mic);\n        this._callbacks.onSpeakerUpdated?.(infos.speaker);\n        // Instantiate audio observers\n        if (!this._daily.isLocalAudioLevelObserverRunning()) await this._daily.startLocalAudioLevelObserver(100);\n        if (!this._daily.isRemoteParticipantsAudioLevelObserverRunning()) await this._daily.startRemoteParticipantsAudioLevelObserver(100);\n        this.state = \"initialized\";\n    }\n    _validateConnectionParams(connectParams) {\n        if (connectParams === undefined || connectParams === null) return undefined;\n        if (typeof connectParams !== \"object\") throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIError)(\"Invalid connection parameters\");\n        const tmpParams = connectParams;\n        if (tmpParams.room_url) {\n            tmpParams.url = tmpParams.room_url;\n            delete tmpParams.room_url;\n        }\n        if (!tmpParams.token) // Daily doesn't like token being in the map and undefined or null\n        delete tmpParams.token;\n        return tmpParams;\n    }\n    async _connect(connectParams) {\n        if (!this._daily) throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIError)(\"Transport instance not initialized\");\n        if (connectParams) this._dailyFactoryOptions = {\n            ...this._dailyFactoryOptions,\n            ...connectParams\n        };\n        this.state = \"connecting\";\n        try {\n            await this._daily.join(this._dailyFactoryOptions);\n        } catch (e) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"Failed to join room\", e);\n            this.state = \"error\";\n            throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.TransportStartError)();\n        }\n        if (this._abortController?.signal.aborted) return;\n        this.state = \"connected\";\n        this._callbacks.onConnected?.();\n    }\n    async sendReadyMessage() {\n        return new Promise((resolve)=>{\n            // Detect iOS devices\n            const isIOS = ()=>{\n                const userAgent = navigator.userAgent;\n                return /iPad|iPhone|iPod/.test(userAgent) || /Macintosh/.test(userAgent) && \"ontouchend\" in document;\n            };\n            const sendReadyMessage = ()=>{\n                this.state = \"ready\";\n                this.flushAudioQueue();\n                this.sendMessage((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIMessage).clientReady());\n                this.stopRecording();\n                resolve();\n            };\n            for(const id in this._daily.participants()){\n                const p = this._daily.participants()[id];\n                if (!p.local && p.tracks?.audio?.persistentTrack) {\n                    // If we already have a remote audio track, we can send the ready message immediately\n                    sendReadyMessage();\n                    resolve();\n                    return;\n                }\n            }\n            const readyHandler = (ev)=>{\n                if (!ev.participant?.local) {\n                    this._daily.off(\"track-started\", readyHandler);\n                    // Check if it's an iOS device\n                    if (isIOS()) {\n                        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).debug(\"[Daily Transport] iOS device detected, adding 0.5 second delay before sending ready message\");\n                        // Add 500ms delay for iOS devices:\n                        // This is a workaround for iOS devices clipping a portion\n                        // of the audio after the track becomes playable.\n                        setTimeout(sendReadyMessage, 500);\n                    } else // Non-iOS device, send ready message immediately\n                    sendReadyMessage();\n                }\n            };\n            this._daily.on(\"track-started\", readyHandler);\n        });\n    }\n    stopRecording() {\n        if (this._mediaStreamRecorder && this._mediaStreamRecorder.getStatus() !== \"ended\") {\n            // disconnecting, we don't need to record anymore\n            this._mediaStreamRecorder.end();\n            this._callbacks.onAudioBufferingStopped?.();\n        }\n    }\n    attachEventListeners() {\n        this._daily.on(\"available-devices-updated\", this.handleAvailableDevicesUpdated.bind(this));\n        this._daily.on(\"selected-devices-updated\", this.handleSelectedDevicesUpdated.bind(this));\n        this._daily.on(\"track-started\", this.handleTrackStarted.bind(this));\n        this._daily.on(\"track-stopped\", this.handleTrackStopped.bind(this));\n        this._daily.on(\"participant-joined\", this.handleParticipantJoined.bind(this));\n        this._daily.on(\"participant-left\", this.handleParticipantLeft.bind(this));\n        this._daily.on(\"local-audio-level\", this.handleLocalAudioLevel.bind(this));\n        this._daily.on(\"remote-participants-audio-level\", this.handleRemoteAudioLevel.bind(this));\n        this._daily.on(\"app-message\", this.handleAppMessage.bind(this));\n        this._daily.on(\"left-meeting\", this.handleLeftMeeting.bind(this));\n        this._daily.on(\"error\", this.handleFatalError.bind(this));\n        this._daily.on(\"nonfatal-error\", this.handleNonFatalError.bind(this));\n    }\n    async _disconnect() {\n        this.state = \"disconnecting\";\n        this._daily.stopLocalAudioLevelObserver();\n        this._daily.stopRemoteParticipantsAudioLevelObserver();\n        this._audioQueue = [];\n        this._currentAudioTrack = null;\n        this.stopRecording();\n        await this._daily.leave();\n    }\n    sendMessage(message) {\n        this._daily.sendAppMessage(message, \"*\");\n    }\n    handleAppMessage(ev) {\n        // Bubble any messages with rtvi-ai label\n        if (ev.data.label === \"rtvi-ai\") this._onMessage({\n            id: ev.data.id,\n            type: ev.data.type,\n            data: ev.data.data\n        });\n    }\n    handleAvailableDevicesUpdated(ev) {\n        this._callbacks.onAvailableCamsUpdated?.(ev.availableDevices.filter((d)=>d.kind === \"videoinput\"));\n        this._callbacks.onAvailableMicsUpdated?.(ev.availableDevices.filter((d)=>d.kind === \"audioinput\"));\n        this._callbacks.onAvailableSpeakersUpdated?.(ev.availableDevices.filter((d)=>d.kind === \"audiooutput\"));\n    }\n    handleSelectedDevicesUpdated(ev) {\n        if (this._selectedCam?.deviceId !== ev.devices.camera) {\n            this._selectedCam = ev.devices.camera;\n            this._callbacks.onCamUpdated?.(ev.devices.camera);\n        }\n        if (this._selectedMic?.deviceId !== ev.devices.mic) {\n            this._selectedMic = ev.devices.mic;\n            this._callbacks.onMicUpdated?.(ev.devices.mic);\n        }\n        if (this._selectedSpeaker?.deviceId !== ev.devices.speaker) {\n            this._selectedSpeaker = ev.devices.speaker;\n            this._callbacks.onSpeakerUpdated?.(ev.devices.speaker);\n        }\n    }\n    async handleLocalAudioTrack(track) {\n        if (this.state == \"ready\" || !this._bufferLocalAudioUntilBotReady) return;\n        const status = this._mediaStreamRecorder.getStatus();\n        switch(status){\n            case \"ended\":\n                await this._mediaStreamRecorder.begin(track);\n                await this.startRecording();\n                break;\n            case \"paused\":\n                await this.startRecording();\n                break;\n            case \"recording\":\n            default:\n                if (this._currentAudioTrack !== track) {\n                    await this._mediaStreamRecorder.end();\n                    await this._mediaStreamRecorder.begin(track);\n                    await this.startRecording();\n                } else (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).warn(\"track-started event received for current track and already recording\");\n                break;\n        }\n        this._currentAudioTrack = track;\n    }\n    handleTrackStarted(ev) {\n        if (ev.type === \"screenAudio\" || ev.type === \"screenVideo\") this._callbacks.onScreenTrackStarted?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : undefined);\n        else {\n            if (ev.participant?.local && ev.track.kind === \"audio\") this.handleLocalAudioTrack(ev.track);\n            this._callbacks.onTrackStarted?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : undefined);\n        }\n    }\n    handleTrackStopped(ev) {\n        if (ev.type === \"screenAudio\" || ev.type === \"screenVideo\") this._callbacks.onScreenTrackStopped?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : undefined);\n        else this._callbacks.onTrackStopped?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : undefined);\n    }\n    handleParticipantJoined(ev) {\n        const p = $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant);\n        this._callbacks.onParticipantJoined?.(p);\n        if (p.local) return;\n        this._botId = ev.participant.session_id;\n        this._callbacks.onBotConnected?.(p);\n    }\n    handleParticipantLeft(ev) {\n        const p = $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant);\n        this._callbacks.onParticipantLeft?.(p);\n        if (p.local) return;\n        this._botId = \"\";\n        this._callbacks.onBotDisconnected?.(p);\n    }\n    handleLocalAudioLevel(ev) {\n        this._callbacks.onLocalAudioLevel?.(ev.audioLevel);\n    }\n    handleRemoteAudioLevel(ev) {\n        const participants = this._daily.participants();\n        const ids = Object.keys(ev.participantsAudioLevel);\n        for(let i = 0; i < ids.length; i++){\n            const id = ids[i];\n            const level = ev.participantsAudioLevel[id];\n            this._callbacks.onRemoteAudioLevel?.(level, $683f111f61e07358$var$dailyParticipantToParticipant(participants[id]));\n        }\n    }\n    handleLeftMeeting() {\n        this.state = \"disconnected\";\n        this._botId = \"\";\n        this._callbacks.onDisconnected?.();\n    }\n    handleFatalError(ev) {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"Daily fatal error\", ev.errorMsg);\n        this.state = \"error\";\n        this._botId = \"\";\n        this._callbacks.onError?.((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIMessage).error(ev.errorMsg, true));\n    }\n    handleNonFatalError(ev) {\n        switch(ev.type){\n            case \"screen-share-error\":\n                this._callbacks.onScreenShareError?.(ev.errorMsg);\n                break;\n        }\n    }\n}\n$683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_SAMPLE_RATE = 16000;\n$683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_CHUNK_SIZE = 512;\nconst $683f111f61e07358$var$dailyParticipantToParticipant = (p)=>({\n        id: p.user_id,\n        local: p.local,\n        name: p.user_name\n    });\n\n\n\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@pipecat-ai/daily-transport/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@pipecat-ai/daily-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/@pipecat-ai/daily-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAILY_ACCESS_LEVEL_FULL: () => (/* binding */ Pi),\n/* harmony export */   DAILY_ACCESS_LEVEL_LOBBY: () => (/* binding */ Ai),\n/* harmony export */   DAILY_ACCESS_LEVEL_NONE: () => (/* binding */ ji),\n/* harmony export */   DAILY_ACCESS_UNKNOWN: () => (/* binding */ Oi),\n/* harmony export */   DAILY_CAMERA_ERROR_CAM_AND_MIC_IN_USE: () => (/* binding */ Wi),\n/* harmony export */   DAILY_CAMERA_ERROR_CAM_IN_USE: () => (/* binding */ qi),\n/* harmony export */   DAILY_CAMERA_ERROR_CONSTRAINTS: () => (/* binding */ Ki),\n/* harmony export */   DAILY_CAMERA_ERROR_MIC_IN_USE: () => (/* binding */ zi),\n/* harmony export */   DAILY_CAMERA_ERROR_NOT_FOUND: () => (/* binding */ Qi),\n/* harmony export */   DAILY_CAMERA_ERROR_PERMISSIONS: () => (/* binding */ Hi),\n/* harmony export */   DAILY_CAMERA_ERROR_UNDEF_MEDIADEVICES: () => (/* binding */ Gi),\n/* harmony export */   DAILY_CAMERA_ERROR_UNKNOWN: () => (/* binding */ Yi),\n/* harmony export */   DAILY_EVENT_ACCESS_STATE_UPDATED: () => (/* binding */ fo),\n/* harmony export */   DAILY_EVENT_ACTIVE_SPEAKER_CHANGE: () => (/* binding */ Uo),\n/* harmony export */   DAILY_EVENT_ACTIVE_SPEAKER_MODE_CHANGE: () => (/* binding */ Vo),\n/* harmony export */   DAILY_EVENT_APP_MSG: () => (/* binding */ Io),\n/* harmony export */   DAILY_EVENT_CAMERA_ERROR: () => (/* binding */ oo),\n/* harmony export */   DAILY_EVENT_CPU_LOAD_CHANGE: () => (/* binding */ qo),\n/* harmony export */   DAILY_EVENT_ERROR: () => (/* binding */ ns),\n/* harmony export */   DAILY_EVENT_EXIT_FULLSCREEN: () => (/* binding */ Ho),\n/* harmony export */   DAILY_EVENT_FACE_COUNTS_UPDATED: () => (/* binding */ zo),\n/* harmony export */   DAILY_EVENT_FULLSCREEN: () => (/* binding */ Wo),\n/* harmony export */   DAILY_EVENT_IFRAME_LAUNCH_CONFIG: () => (/* binding */ Zi),\n/* harmony export */   DAILY_EVENT_IFRAME_READY_FOR_LAUNCH_CONFIG: () => (/* binding */ Xi),\n/* harmony export */   DAILY_EVENT_INPUT_SETTINGS_UPDATED: () => (/* binding */ es),\n/* harmony export */   DAILY_EVENT_JOINED_MEETING: () => (/* binding */ ao),\n/* harmony export */   DAILY_EVENT_JOINING_MEETING: () => (/* binding */ so),\n/* harmony export */   DAILY_EVENT_LANG_UPDATED: () => (/* binding */ Xo),\n/* harmony export */   DAILY_EVENT_LEFT_MEETING: () => (/* binding */ co),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_ERROR: () => (/* binding */ Yo),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_STARTED: () => (/* binding */ Go),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_STOPPED: () => (/* binding */ Ko),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_UPDATED: () => (/* binding */ Qo),\n/* harmony export */   DAILY_EVENT_LOADED: () => (/* binding */ ro),\n/* harmony export */   DAILY_EVENT_LOADING: () => (/* binding */ to),\n/* harmony export */   DAILY_EVENT_LOAD_ATTEMPT_FAILED: () => (/* binding */ no),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_CANCELED: () => (/* binding */ Bo),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_STARTED: () => (/* binding */ Ro),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_STOPPED: () => (/* binding */ Fo),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_DATA_ERROR: () => (/* binding */ mo),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_STATE_UPDATED: () => (/* binding */ go),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_SUMMARY_UPDATED: () => (/* binding */ vo),\n/* harmony export */   DAILY_EVENT_NETWORK_CONNECTION: () => (/* binding */ $o),\n/* harmony export */   DAILY_EVENT_NETWORK_QUALITY_CHANGE: () => (/* binding */ Jo),\n/* harmony export */   DAILY_EVENT_NONFATAL_ERROR: () => (/* binding */ ts),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_COUNTS_UPDATED: () => (/* binding */ ho),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_JOINED: () => (/* binding */ lo),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_LEFT: () => (/* binding */ po),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_UPDATED: () => (/* binding */ uo),\n/* harmony export */   DAILY_EVENT_RECEIVE_SETTINGS_UPDATED: () => (/* binding */ Zo),\n/* harmony export */   DAILY_EVENT_RECORDING_DATA: () => (/* binding */ jo),\n/* harmony export */   DAILY_EVENT_RECORDING_ERROR: () => (/* binding */ Po),\n/* harmony export */   DAILY_EVENT_RECORDING_STARTED: () => (/* binding */ Eo),\n/* harmony export */   DAILY_EVENT_RECORDING_STATS: () => (/* binding */ Oo),\n/* harmony export */   DAILY_EVENT_RECORDING_STOPPED: () => (/* binding */ To),\n/* harmony export */   DAILY_EVENT_RECORDING_UPLOAD_COMPLETED: () => (/* binding */ Ao),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_STARTED: () => (/* binding */ Lo),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_STOPPED: () => (/* binding */ No),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_UPDATED: () => (/* binding */ Do),\n/* harmony export */   DAILY_EVENT_STARTED_CAMERA: () => (/* binding */ io),\n/* harmony export */   DAILY_EVENT_THEME_UPDATED: () => (/* binding */ eo),\n/* harmony export */   DAILY_EVENT_TRACK_STARTED: () => (/* binding */ wo),\n/* harmony export */   DAILY_EVENT_TRACK_STOPPED: () => (/* binding */ So),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_ERROR: () => (/* binding */ Co),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_MSG: () => (/* binding */ xo),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_STARTED: () => (/* binding */ ko),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_STOPPED: () => (/* binding */ Mo),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_ADDED: () => (/* binding */ yo),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_REMOVED: () => (/* binding */ _o),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_UPDATED: () => (/* binding */ bo),\n/* harmony export */   DAILY_FATAL_ERROR_CONNECTION: () => (/* binding */ $i),\n/* harmony export */   DAILY_FATAL_ERROR_EJECTED: () => (/* binding */ Li),\n/* harmony export */   DAILY_FATAL_ERROR_EOL: () => (/* binding */ Vi),\n/* harmony export */   DAILY_FATAL_ERROR_EXP_ROOM: () => (/* binding */ Ri),\n/* harmony export */   DAILY_FATAL_ERROR_EXP_TOKEN: () => (/* binding */ Fi),\n/* harmony export */   DAILY_FATAL_ERROR_MEETING_FULL: () => (/* binding */ Ui),\n/* harmony export */   DAILY_FATAL_ERROR_NBF_ROOM: () => (/* binding */ Di),\n/* harmony export */   DAILY_FATAL_ERROR_NBF_TOKEN: () => (/* binding */ Ni),\n/* harmony export */   DAILY_FATAL_ERROR_NOT_ALLOWED: () => (/* binding */ Ji),\n/* harmony export */   DAILY_FATAL_ERROR_NO_ROOM: () => (/* binding */ Bi),\n/* harmony export */   DAILY_RECEIVE_SETTINGS_ALL_PARTICIPANTS_KEY: () => (/* binding */ xi),\n/* harmony export */   DAILY_RECEIVE_SETTINGS_BASE_KEY: () => (/* binding */ Ii),\n/* harmony export */   DAILY_STATE_ERROR: () => (/* binding */ wi),\n/* harmony export */   DAILY_STATE_JOINED: () => (/* binding */ bi),\n/* harmony export */   DAILY_STATE_JOINING: () => (/* binding */ yi),\n/* harmony export */   DAILY_STATE_LEFT: () => (/* binding */ _i),\n/* harmony export */   DAILY_STATE_NEW: () => (/* binding */ vi),\n/* harmony export */   DAILY_TRACK_STATE_BLOCKED: () => (/* binding */ Si),\n/* harmony export */   DAILY_TRACK_STATE_INTERRUPTED: () => (/* binding */ Ei),\n/* harmony export */   DAILY_TRACK_STATE_LOADING: () => (/* binding */ Ci),\n/* harmony export */   DAILY_TRACK_STATE_OFF: () => (/* binding */ ki),\n/* harmony export */   DAILY_TRACK_STATE_PLAYABLE: () => (/* binding */ Ti),\n/* harmony export */   DAILY_TRACK_STATE_SENDABLE: () => (/* binding */ Mi),\n/* harmony export */   \"default\": () => (/* binding */ ic)\n/* harmony export */ });\nfunction e(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],-1===t.indexOf(n)&&{}.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function t(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function n(e){return n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},n(e)}function r(e){var t=function(e,t){if(\"object\"!=n(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,t||\"default\");if(\"object\"!=n(i))return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===t?String:Number)(e)}(e,\"string\");return\"symbol\"==n(t)?t:t+\"\"}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,r(i.key),i)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,\"prototype\",{writable:!1}),e}function s(e,t){if(t&&(\"object\"==n(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(e)}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function l(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,\"prototype\",{writable:!1}),t&&c(e,t)}function u(e,t,n){return(t=r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t,n,r,i,o,s){try{var a=e[o](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function p(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function s(e){d(o,r,i,s,a,\"next\",e)}function a(e){d(o,r,i,s,a,\"throw\",e)}s(void 0)}))}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(null!=n){var r,i,o,s,a=[],c=!0,l=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(a.push(r.value),a.length!==t);c=!0);}catch(e){l=!0,i=e}finally{try{if(!c&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw i}}return a}}(e,t)||function(e,t){if(e){if(\"string\"==typeof e)return h(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function v(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}var g,m={exports:{}},y=\"object\"==typeof Reflect?Reflect:null,b=y&&\"function\"==typeof y.apply?y.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};g=y&&\"function\"==typeof y.ownKeys?y.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var _=Number.isNaN||function(e){return e!=e};function w(){w.init.call(this)}m.exports=w,m.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){\"function\"==typeof e.removeListener&&e.removeListener(\"error\",i),n([].slice.call(arguments))}j(e,t,o,{once:!0}),\"error\"!==t&&function(e,t,n){\"function\"==typeof e.on&&j(e,\"error\",t,n)}(e,i,{once:!0})}))},w.EventEmitter=w,w.prototype._events=void 0,w.prototype._eventsCount=0,w.prototype._maxListeners=void 0;var S=10;function k(e){if(\"function\"!=typeof e)throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof e)}function M(e){return void 0===e._maxListeners?w.defaultMaxListeners:e._maxListeners}function C(e,t,n,r){var i,o,s,a;if(k(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit(\"newListener\",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if(\"function\"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=M(e))>0&&s.length>i&&!s.warned){s.warned=!0;var c=new Error(\"Possible EventEmitter memory leak detected. \"+s.length+\" \"+String(t)+\" listeners added. Use emitter.setMaxListeners() to increase limit\");c.name=\"MaxListenersExceededWarning\",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function E(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function T(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=E.bind(r);return i.listener=n,r.wrapFn=i,i}function O(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:\"function\"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):A(i,i.length)}function P(e){var t=this._events;if(void 0!==t){var n=t[e];if(\"function\"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function A(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function j(e,t,n,r){if(\"function\"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if(\"function\"!=typeof e.addEventListener)throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(w,\"defaultMaxListeners\",{enumerable:!0,get:function(){return S},set:function(e){if(\"number\"!=typeof e||e<0||_(e))throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+e+\".\");S=e}}),w.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},w.prototype.setMaxListeners=function(e){if(\"number\"!=typeof e||e<0||_(e))throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+e+\".\");return this._maxListeners=e,this},w.prototype.getMaxListeners=function(){return M(this)},w.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r=\"error\"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error(\"Unhandled error.\"+(o?\" (\"+o.message+\")\":\"\"));throw s.context=o,s}var a=i[e];if(void 0===a)return!1;if(\"function\"==typeof a)b(a,this,t);else{var c=a.length,l=A(a,c);for(n=0;n<c;++n)b(l[n],this,t)}return!0},w.prototype.addListener=function(e,t){return C(this,e,t,!1)},w.prototype.on=w.prototype.addListener,w.prototype.prependListener=function(e,t){return C(this,e,t,!0)},w.prototype.once=function(e,t){return k(t),this.on(e,T(this,e,t)),this},w.prototype.prependOnceListener=function(e,t){return k(t),this.prependListener(e,T(this,e,t)),this},w.prototype.removeListener=function(e,t){var n,r,i,o,s;if(k(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit(\"removeListener\",e,n.listener||t));else if(\"function\"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit(\"removeListener\",e,s||t)}return this},w.prototype.off=w.prototype.removeListener,w.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)\"removeListener\"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners(\"removeListener\"),this._events=Object.create(null),this._eventsCount=0,this}if(\"function\"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},w.prototype.listeners=function(e){return O(this,e,!0)},w.prototype.rawListeners=function(e){return O(this,e,!1)},w.listenerCount=function(e,t){return\"function\"==typeof e.listenerCount?e.listenerCount(t):P.call(e,t)},w.prototype.listenerCount=P,w.prototype.eventNames=function(){return this._eventsCount>0?g(this._events):[]};var I=m.exports,x=v(I),L=Object.prototype.hasOwnProperty;function D(e,t,n){for(n of e.keys())if(N(n,t))return n}function N(e,t){var n,r,i;if(e===t)return!0;if(e&&t&&(n=e.constructor)===t.constructor){if(n===Date)return e.getTime()===t.getTime();if(n===RegExp)return e.toString()===t.toString();if(n===Array){if((r=e.length)===t.length)for(;r--&&N(e[r],t[r]););return-1===r}if(n===Set){if(e.size!==t.size)return!1;for(r of e){if((i=r)&&\"object\"==typeof i&&!(i=D(t,i)))return!1;if(!t.has(i))return!1}return!0}if(n===Map){if(e.size!==t.size)return!1;for(r of e){if((i=r[0])&&\"object\"==typeof i&&!(i=D(t,i)))return!1;if(!N(r[1],t.get(i)))return!1}return!0}if(n===ArrayBuffer)e=new Uint8Array(e),t=new Uint8Array(t);else if(n===DataView){if((r=e.byteLength)===t.byteLength)for(;r--&&e.getInt8(r)===t.getInt8(r););return-1===r}if(ArrayBuffer.isView(e)){if((r=e.byteLength)===t.byteLength)for(;r--&&e[r]===t[r];);return-1===r}if(!n||\"object\"==typeof e){for(n in r=0,e){if(L.call(e,n)&&++r&&!L.call(t,n))return!1;if(!(n in t)||!N(e[n],t[n]))return!1}return Object.keys(t).length===r}}return e!=e&&t!=t}const R={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Electron:\"electron\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"},F={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",electron:\"Electron\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"},B={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"},U={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"},V={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"};class J{static getFirstMatch(e,t){const n=t.match(e);return n&&n.length>0&&n[1]||\"\"}static getSecondMatch(e,t){const n=t.match(e);return n&&n.length>1&&n[2]||\"\"}static matchAndReturnConst(e,t,n){if(e.test(t))return n}static getWindowsVersionName(e){switch(e){case\"NT\":return\"NT\";case\"XP\":case\"NT 5.1\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}}static getMacOSVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}}static getAndroidVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0}static getVersionPrecision(e){return e.split(\".\").length}static compareVersions(e,t,n=!1){const r=J.getVersionPrecision(e),i=J.getVersionPrecision(t);let o=Math.max(r,i),s=0;const a=J.map([e,t],(e=>{const t=o-J.getVersionPrecision(e),n=e+new Array(t+1).join(\".0\");return J.map(n.split(\".\"),(e=>new Array(20-e.length).join(\"0\")+e)).reverse()}));for(n&&(s=o-Math.min(r,i)),o-=1;o>=s;){if(a[0][o]>a[1][o])return 1;if(a[0][o]===a[1][o]){if(o===s)return 0;o-=1}else if(a[0][o]<a[1][o])return-1}}static map(e,t){const n=[];let r;if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n}static find(e,t){let n,r;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(n=0,r=e.length;n<r;n+=1){const r=e[n];if(t(r,n))return r}}static assign(e,...t){const n=e;let r,i;if(Object.assign)return Object.assign(e,...t);for(r=0,i=t.length;r<i;r+=1){const e=t[r];if(\"object\"==typeof e&&null!==e){Object.keys(e).forEach((t=>{n[t]=e[t]}))}}return e}static getBrowserAlias(e){return R[e]}static getBrowserTypeByAlias(e){return F[e]||\"\"}}const $=/version\\/(\\d+(\\.?_?\\d+)+)/i,q=[{test:[/googlebot/i],describe(e){const t={name:\"Googlebot\"},n=J.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/opera/i],describe(e){const t={name:\"Opera\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opr\\/|opios/i],describe(e){const t={name:\"Opera\"},n=J.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/SamsungBrowser/i],describe(e){const t={name:\"Samsung Internet for Android\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Whale/i],describe(e){const t={name:\"NAVER Whale Browser\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MZBrowser/i],describe(e){const t={name:\"MZ Browser\"},n=J.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/focus/i],describe(e){const t={name:\"Focus\"},n=J.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/swing/i],describe(e){const t={name:\"Swing\"},n=J.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/coast/i],describe(e){const t={name:\"Opera Coast\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opt\\/\\d+(?:.?_?\\d+)+/i],describe(e){const t={name:\"Opera Touch\"},n=J.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/yabrowser/i],describe(e){const t={name:\"Yandex Browser\"},n=J.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/ucbrowser/i],describe(e){const t={name:\"UC Browser\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Maxthon|mxios/i],describe(e){const t={name:\"Maxthon\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/epiphany/i],describe(e){const t={name:\"Epiphany\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/puffin/i],describe(e){const t={name:\"Puffin\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sleipnir/i],describe(e){const t={name:\"Sleipnir\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/k-meleon/i],describe(e){const t={name:\"K-Meleon\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/micromessenger/i],describe(e){const t={name:\"WeChat\"},n=J.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/qqbrowser/i],describe(e){const t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},n=J.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/msie|trident/i],describe(e){const t={name:\"Internet Explorer\"},n=J.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/\\sedg\\//i],describe(e){const t={name:\"Microsoft Edge\"},n=J.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/edg([ea]|ios)/i],describe(e){const t={name:\"Microsoft Edge\"},n=J.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/vivaldi/i],describe(e){const t={name:\"Vivaldi\"},n=J.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/seamonkey/i],describe(e){const t={name:\"SeaMonkey\"},n=J.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sailfish/i],describe(e){const t={name:\"Sailfish\"},n=J.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return n&&(t.version=n),t}},{test:[/silk/i],describe(e){const t={name:\"Amazon Silk\"},n=J.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/phantom/i],describe(e){const t={name:\"PhantomJS\"},n=J.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/slimerjs/i],describe(e){const t={name:\"SlimerJS\"},n=J.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t={name:\"BlackBerry\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(web|hpw)[o0]s/i],describe(e){const t={name:\"WebOS Browser\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/bada/i],describe(e){const t={name:\"Bada\"},n=J.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/tizen/i],describe(e){const t={name:\"Tizen\"},n=J.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/qupzilla/i],describe(e){const t={name:\"QupZilla\"},n=J.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/firefox|iceweasel|fxios/i],describe(e){const t={name:\"Firefox\"},n=J.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/electron/i],describe(e){const t={name:\"Electron\"},n=J.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MiuiBrowser/i],describe(e){const t={name:\"Miui\"},n=J.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/chromium/i],describe(e){const t={name:\"Chromium\"},n=J.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/chrome|crios|crmo/i],describe(e){const t={name:\"Chrome\"},n=J.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/GSA/i],describe(e){const t={name:\"Google Search\"},n=J.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t={name:\"Android Browser\"},n=J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/playstation 4/i],describe(e){const t={name:\"PlayStation 4\"},n=J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/safari|applewebkit/i],describe(e){const t={name:\"Safari\"},n=J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/.*/i],describe(e){const t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:J.getFirstMatch(t,e),version:J.getSecondMatch(t,e)}}}];var z=[{test:[/Roku\\/DVP/],describe(e){const t=J.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:U.Roku,version:t}}},{test:[/windows phone/i],describe(e){const t=J.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:U.WindowsPhone,version:t}}},{test:[/windows /i],describe(e){const t=J.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),n=J.getWindowsVersionName(t);return{name:U.Windows,version:t,versionName:n}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe(e){const t={name:U.iOS},n=J.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/,e);return n&&(t.version=n),t}},{test:[/macintosh/i],describe(e){const t=J.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),n=J.getMacOSVersionName(t),r={name:U.MacOS,version:t};return n&&(r.versionName=n),r}},{test:[/(ipod|iphone|ipad)/i],describe(e){const t=J.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:U.iOS,version:t}}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t=J.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),n=J.getAndroidVersionName(t),r={name:U.Android,version:t};return n&&(r.versionName=n),r}},{test:[/(web|hpw)[o0]s/i],describe(e){const t=J.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),n={name:U.WebOS};return t&&t.length&&(n.version=t),n}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t=J.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||J.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||J.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:U.BlackBerry,version:t}}},{test:[/bada/i],describe(e){const t=J.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:U.Bada,version:t}}},{test:[/tizen/i],describe(e){const t=J.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:U.Tizen,version:t}}},{test:[/linux/i],describe:()=>({name:U.Linux})},{test:[/CrOS/],describe:()=>({name:U.ChromeOS})},{test:[/PlayStation 4/],describe(e){const t=J.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:U.PlayStation4,version:t}}}],W=[{test:[/googlebot/i],describe:()=>({type:\"bot\",vendor:\"Google\"})},{test:[/huawei/i],describe(e){const t=J.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",n={type:B.mobile,vendor:\"Huawei\"};return t&&(n.model=t),n}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:()=>({type:B.tablet,vendor:\"Nexus\"})},{test:[/ipad/i],describe:()=>({type:B.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:()=>({type:B.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/kftt build/i],describe:()=>({type:B.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"})},{test:[/silk/i],describe:()=>({type:B.tablet,vendor:\"Amazon\"})},{test:[/tablet(?! pc)/i],describe:()=>({type:B.tablet})},{test(e){const t=e.test(/ipod|iphone/i),n=e.test(/like (ipod|iphone)/i);return t&&!n},describe(e){const t=J.getFirstMatch(/(ipod|iphone)/i,e);return{type:B.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:()=>({type:B.mobile,vendor:\"Nexus\"})},{test:[/[^-]mobi/i],describe:()=>({type:B.mobile})},{test:e=>\"blackberry\"===e.getBrowserName(!0),describe:()=>({type:B.mobile,vendor:\"BlackBerry\"})},{test:e=>\"bada\"===e.getBrowserName(!0),describe:()=>({type:B.mobile})},{test:e=>\"windows phone\"===e.getBrowserName(),describe:()=>({type:B.mobile,vendor:\"Microsoft\"})},{test(e){const t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:()=>({type:B.tablet})},{test:e=>\"android\"===e.getOSName(!0),describe:()=>({type:B.mobile})},{test:e=>\"macos\"===e.getOSName(!0),describe:()=>({type:B.desktop,vendor:\"Apple\"})},{test:e=>\"windows\"===e.getOSName(!0),describe:()=>({type:B.desktop})},{test:e=>\"linux\"===e.getOSName(!0),describe:()=>({type:B.desktop})},{test:e=>\"playstation 4\"===e.getOSName(!0),describe:()=>({type:B.tv})},{test:e=>\"roku\"===e.getOSName(!0),describe:()=>({type:B.tv})}],H=[{test:e=>\"microsoft edge\"===e.getBrowserName(!0),describe(e){if(/\\sedg\\//i.test(e))return{name:V.Blink};const t=J.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:V.EdgeHTML,version:t}}},{test:[/trident/i],describe(e){const t={name:V.Trident},n=J.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:e=>e.test(/presto/i),describe(e){const t={name:V.Presto},n=J.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=e.test(/gecko/i),n=e.test(/like gecko/i);return t&&!n},describe(e){const t={name:V.Gecko},n=J.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:()=>({name:V.Blink})},{test:[/(apple)?webkit/i],describe(e){const t={name:V.WebKit},n=J.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}}];class G{constructor(e,t=!1){if(null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}getUA(){return this._ua}test(e){return e.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const e=J.find(q,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.browser=e.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const e=J.find(z,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.os=e.describe(this.getUA())),this.parsedResult.os}getOSName(e){const{name:t}=this.getOS();return e?String(t).toLowerCase()||\"\":t||\"\"}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(e=!1){const{type:t}=this.getPlatform();return e?String(t).toLowerCase()||\"\":t||\"\"}parsePlatform(){this.parsedResult.platform={};const e=J.find(W,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.platform=e.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}getEngineName(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"}parseEngine(){this.parsedResult.engine={};const e=J.find(H,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.engine=e.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return J.assign({},this.parsedResult)}satisfies(e){const t={};let n=0;const r={};let i=0;if(Object.keys(e).forEach((o=>{const s=e[o];\"string\"==typeof s?(r[o]=s,i+=1):\"object\"==typeof s&&(t[o]=s,n+=1)})),n>0){const e=Object.keys(t),n=J.find(e,(e=>this.isOS(e)));if(n){const e=this.satisfies(t[n]);if(void 0!==e)return e}const r=J.find(e,(e=>this.isPlatform(e)));if(r){const e=this.satisfies(t[r]);if(void 0!==e)return e}}if(i>0){const e=Object.keys(r),t=J.find(e,(e=>this.isBrowser(e,!0)));if(void 0!==t)return this.compareVersion(r[t])}}isBrowser(e,t=!1){const n=this.getBrowserName().toLowerCase();let r=e.toLowerCase();const i=J.getBrowserTypeByAlias(r);return t&&i&&(r=i.toLowerCase()),r===n}compareVersion(e){let t=[0],n=e,r=!1;const i=this.getBrowserVersion();if(\"string\"==typeof i)return\">\"===e[0]||\"<\"===e[0]?(n=e.substr(1),\"=\"===e[1]?(r=!0,n=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?n=e.substr(1):\"~\"===e[0]&&(r=!0,n=e.substr(1)),t.indexOf(J.compareVersions(i,n,r))>-1}isOS(e){return this.getOSName(!0)===String(e).toLowerCase()}isPlatform(e){return this.getPlatformType(!0)===String(e).toLowerCase()}isEngine(e){return this.getEngineName(!0)===String(e).toLowerCase()}is(e,t=!1){return this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)}some(e=[]){return e.some((e=>this.is(e)))}}\n/*!\n * Bowser - a browser detector\n * https://github.com/lancedikson/bowser\n * MIT License | (c) Dustin Diaz 2012-2015\n * MIT License | (c) Denis Demchenko 2015-2019\n */class Q{static getParser(e,t=!1){if(\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new G(e,t)}static parse(e){return new G(e).getResult()}static get BROWSER_MAP(){return F}static get ENGINE_MAP(){return V}static get OS_MAP(){return U}static get PLATFORMS_MAP(){return B}}function K(){return Date.now()+Math.random().toString()}function Y(){throw new Error(\"Method must be implemented in subclass\")}function X(e,t){return null!=t&&t.proxyUrl?t.proxyUrl+(\"/\"===t.proxyUrl.slice(-1)?\"\":\"/\")+e.substring(8):e}function Z(e){return null!=e&&e.callObjectBundleUrlOverride?e.callObjectBundleUrlOverride:X(\"https://c.daily.co/call-machine/versioned/\".concat(\"0.77.0\",\"/static/call-machine-object-bundle.js\"),e)}function ee(e){try{new URL(e)}catch(e){return!1}return!0}const te=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,ne=\"8.55.0\",re=globalThis;function ie(e,t,n){const r=n||re,i=r.__SENTRY__=r.__SENTRY__||{},o=i[ne]=i[ne]||{};return o[e]||(o[e]=t())}const oe=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,se=[\"debug\",\"info\",\"warn\",\"error\",\"log\",\"assert\",\"trace\"],ae={};function ce(e){if(!(\"console\"in re))return e();const t=re.console,n={},r=Object.keys(ae);r.forEach((e=>{const r=ae[e];n[e]=t[e],t[e]=r}));try{return e()}finally{r.forEach((e=>{t[e]=n[e]}))}}const le=ie(\"logger\",(function(){let e=!1;const t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return oe?se.forEach((n=>{t[n]=(...t)=>{e&&ce((()=>{re.console[n](`Sentry Logger [${n}]:`,...t)}))}})):se.forEach((e=>{t[e]=()=>{}})),t})),ue=\"?\",de=/\\(error: (.*)\\)/,pe=/captureMessage|captureException/;function he(e){return e[e.length-1]||{}}const fe=\"<anonymous>\";function ve(e){try{return e&&\"function\"==typeof e&&e.name||fe}catch(e){return fe}}function ge(e){const t=e.exception;if(t){const e=[];try{return t.values.forEach((t=>{t.stacktrace.frames&&e.push(...t.stacktrace.frames)})),e}catch(e){return}}}const me={},ye={};function be(e,t){me[e]=me[e]||[],me[e].push(t)}function _e(e,t){if(!ye[e]){ye[e]=!0;try{t()}catch(t){oe&&le.error(`Error while instrumenting ${e}`,t)}}}function we(e,t){const n=e&&me[e];if(n)for(const r of n)try{r(t)}catch(t){oe&&le.error(`Error while triggering instrumentation handler.\\nType: ${e}\\nName: ${ve(r)}\\nError:`,t)}}let Se=null;function ke(){Se=re.onerror,re.onerror=function(e,t,n,r,i){return we(\"error\",{column:r,error:i,line:n,msg:e,url:t}),!!Se&&Se.apply(this,arguments)},re.onerror.__SENTRY_INSTRUMENTED__=!0}let Me=null;function Ce(){Me=re.onunhandledrejection,re.onunhandledrejection=function(e){return we(\"unhandledrejection\",e),!Me||Me.apply(this,arguments)},re.onunhandledrejection.__SENTRY_INSTRUMENTED__=!0}function Ee(){return Te(re),re}function Te(e){const t=e.__SENTRY__=e.__SENTRY__||{};return t.version=t.version||ne,t[ne]=t[ne]||{}}const Oe=Object.prototype.toString;function Pe(e){switch(Oe.call(e)){case\"[object Error]\":case\"[object Exception]\":case\"[object DOMException]\":case\"[object WebAssembly.Exception]\":return!0;default:return Be(e,Error)}}function Ae(e,t){return Oe.call(e)===`[object ${t}]`}function je(e){return Ae(e,\"ErrorEvent\")}function Ie(e){return Ae(e,\"DOMError\")}function xe(e){return Ae(e,\"String\")}function Le(e){return\"object\"==typeof e&&null!==e&&\"__sentry_template_string__\"in e&&\"__sentry_template_values__\"in e}function De(e){return null===e||Le(e)||\"object\"!=typeof e&&\"function\"!=typeof e}function Ne(e){return Ae(e,\"Object\")}function Re(e){return\"undefined\"!=typeof Event&&Be(e,Event)}function Fe(e){return Boolean(e&&e.then&&\"function\"==typeof e.then)}function Be(e,t){try{return e instanceof t}catch(e){return!1}}function Ue(e){return!(\"object\"!=typeof e||null===e||!e.__isVue&&!e._isVue)}const Ve=re;function Je(e,t={}){if(!e)return\"<unknown>\";try{let n=e;const r=5,i=[];let o=0,s=0;const a=\" > \",c=a.length;let l;const u=Array.isArray(t)?t:t.keyAttrs,d=!Array.isArray(t)&&t.maxStringLength||80;for(;n&&o++<r&&(l=$e(n,u),!(\"html\"===l||o>1&&s+i.length*c+l.length>=d));)i.push(l),s+=l.length,n=n.parentNode;return i.reverse().join(a)}catch(e){return\"<unknown>\"}}function $e(e,t){const n=e,r=[];if(!n||!n.tagName)return\"\";if(Ve.HTMLElement&&n instanceof HTMLElement&&n.dataset){if(n.dataset.sentryComponent)return n.dataset.sentryComponent;if(n.dataset.sentryElement)return n.dataset.sentryElement}r.push(n.tagName.toLowerCase());const i=t&&t.length?t.filter((e=>n.getAttribute(e))).map((e=>[e,n.getAttribute(e)])):null;if(i&&i.length)i.forEach((e=>{r.push(`[${e[0]}=\"${e[1]}\"]`)}));else{n.id&&r.push(`#${n.id}`);const e=n.className;if(e&&xe(e)){const t=e.split(/\\s+/);for(const e of t)r.push(`.${e}`)}}const o=[\"aria-label\",\"type\",\"name\",\"title\",\"alt\"];for(const e of o){const t=n.getAttribute(e);t&&r.push(`[${e}=\"${t}\"]`)}return r.join(\"\")}function qe(e,t=0){return\"string\"!=typeof e||0===t||e.length<=t?e:`${e.slice(0,t)}...`}function ze(e,t){if(!Array.isArray(e))return\"\";const n=[];for(let t=0;t<e.length;t++){const r=e[t];try{Ue(r)?n.push(\"[VueViewModel]\"):n.push(String(r))}catch(e){n.push(\"[value cannot be serialized]\")}}return n.join(t)}function We(e,t,n=!1){return!!xe(e)&&(Ae(t,\"RegExp\")?t.test(e):!!xe(t)&&(n?e===t:e.includes(t)))}function He(e,t=[],n=!1){return t.some((t=>We(e,t,n)))}function Ge(e,t,n){if(!(t in e))return;const r=e[t],i=n(r);\"function\"==typeof i&&Ke(i,r);try{e[t]=i}catch(n){oe&&le.log(`Failed to replace method \"${t}\" in object`,e)}}function Qe(e,t,n){try{Object.defineProperty(e,t,{value:n,writable:!0,configurable:!0})}catch(n){oe&&le.log(`Failed to add non-enumerable property \"${t}\" to object`,e)}}function Ke(e,t){try{const n=t.prototype||{};e.prototype=t.prototype=n,Qe(e,\"__sentry_original__\",t)}catch(e){}}function Ye(e){return e.__sentry_original__}function Xe(e){if(Pe(e))return{message:e.message,name:e.name,stack:e.stack,...et(e)};if(Re(e)){const t={type:e.type,target:Ze(e.target),currentTarget:Ze(e.currentTarget),...et(e)};return\"undefined\"!=typeof CustomEvent&&Be(e,CustomEvent)&&(t.detail=e.detail),t}return e}function Ze(e){try{return t=e,\"undefined\"!=typeof Element&&Be(t,Element)?Je(e):Object.prototype.toString.call(e)}catch(e){return\"<unknown>\"}var t}function et(e){if(\"object\"==typeof e&&null!==e){const t={};for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}return{}}function tt(e){return nt(e,new Map)}function nt(e,t){if(function(e){if(!Ne(e))return!1;try{const t=Object.getPrototypeOf(e).constructor.name;return!t||\"Object\"===t}catch(e){return!0}}(e)){const n=t.get(e);if(void 0!==n)return n;const r={};t.set(e,r);for(const n of Object.getOwnPropertyNames(e))void 0!==e[n]&&(r[n]=nt(e[n],t));return r}if(Array.isArray(e)){const n=t.get(e);if(void 0!==n)return n;const r=[];return t.set(e,r),e.forEach((e=>{r.push(nt(e,t))})),r}return e}function rt(){return Date.now()/1e3}const it=function(){const{performance:e}=re;if(!e||!e.now)return rt;const t=Date.now()-e.now(),n=null==e.timeOrigin?t:e.timeOrigin;return()=>(n+e.now())/1e3}();function ot(){const e=re,t=e.crypto||e.msCrypto;let n=()=>16*Math.random();try{if(t&&t.randomUUID)return t.randomUUID().replace(/-/g,\"\");t&&t.getRandomValues&&(n=()=>{const e=new Uint8Array(1);return t.getRandomValues(e),e[0]})}catch(e){}return([1e7]+1e3+4e3+8e3+1e11).replace(/[018]/g,(e=>(e^(15&n())>>e/4).toString(16)))}function st(e){return e.exception&&e.exception.values?e.exception.values[0]:void 0}function at(e){const{message:t,event_id:n}=e;if(t)return t;const r=st(e);return r?r.type&&r.value?`${r.type}: ${r.value}`:r.type||r.value||n||\"<unknown>\":n||\"<unknown>\"}function ct(e,t,n){const r=e.exception=e.exception||{},i=r.values=r.values||[],o=i[0]=i[0]||{};o.value||(o.value=t||\"\"),o.type||(o.type=n||\"Error\")}function lt(e,t){const n=st(e);if(!n)return;const r=n.mechanism;if(n.mechanism={type:\"generic\",handled:!0,...r,...t},t&&\"data\"in t){const e={...r&&r.data,...t.data};n.mechanism.data=e}}function ut(e){if(function(e){try{return e.__sentry_captured__}catch(e){}}(e))return!0;try{Qe(e,\"__sentry_captured__\",!0)}catch(e){}return!1}var dt;function pt(e){return new ft((t=>{t(e)}))}function ht(e){return new ft(((t,n)=>{n(e)}))}(()=>{const{performance:e}=re;if(!e||!e.now)return;const t=36e5,n=e.now(),r=Date.now(),i=e.timeOrigin?Math.abs(e.timeOrigin+n-r):t,o=i<t,s=e.timing&&e.timing.navigationStart,a=\"number\"==typeof s?Math.abs(s+n-r):t;(o||a<t)&&(i<=a&&e.timeOrigin)})(),function(e){e[e.PENDING=0]=\"PENDING\";e[e.RESOLVED=1]=\"RESOLVED\";e[e.REJECTED=2]=\"REJECTED\"}(dt||(dt={}));class ft{constructor(e){ft.prototype.__init.call(this),ft.prototype.__init2.call(this),ft.prototype.__init3.call(this),ft.prototype.__init4.call(this),this._state=dt.PENDING,this._handlers=[];try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}then(e,t){return new ft(((n,r)=>{this._handlers.push([!1,t=>{if(e)try{n(e(t))}catch(e){r(e)}else n(t)},e=>{if(t)try{n(t(e))}catch(e){r(e)}else r(e)}]),this._executeHandlers()}))}catch(e){return this.then((e=>e),e)}finally(e){return new ft(((t,n)=>{let r,i;return this.then((t=>{i=!1,r=t,e&&e()}),(t=>{i=!0,r=t,e&&e()})).then((()=>{i?n(r):t(r)}))}))}__init(){this._resolve=e=>{this._setResult(dt.RESOLVED,e)}}__init2(){this._reject=e=>{this._setResult(dt.REJECTED,e)}}__init3(){this._setResult=(e,t)=>{this._state===dt.PENDING&&(Fe(t)?t.then(this._resolve,this._reject):(this._state=e,this._value=t,this._executeHandlers()))}}__init4(){this._executeHandlers=()=>{if(this._state===dt.PENDING)return;const e=this._handlers.slice();this._handlers=[],e.forEach((e=>{e[0]||(this._state===dt.RESOLVED&&e[1](this._value),this._state===dt.REJECTED&&e[2](this._value),e[0]=!0)}))}}}function vt(e){const t=it(),n={sid:ot(),init:!0,timestamp:t,started:t,duration:0,status:\"ok\",errors:0,ignoreDuration:!1,toJSON:()=>function(e){return tt({sid:`${e.sid}`,init:e.init,started:new Date(1e3*e.started).toISOString(),timestamp:new Date(1e3*e.timestamp).toISOString(),status:e.status,errors:e.errors,did:\"number\"==typeof e.did||\"string\"==typeof e.did?`${e.did}`:void 0,duration:e.duration,abnormal_mechanism:e.abnormal_mechanism,attrs:{release:e.release,environment:e.environment,ip_address:e.ipAddress,user_agent:e.userAgent}})}(n)};return e&&gt(n,e),n}function gt(e,t={}){if(t.user&&(!e.ipAddress&&t.user.ip_address&&(e.ipAddress=t.user.ip_address),e.did||t.did||(e.did=t.user.id||t.user.email||t.user.username)),e.timestamp=t.timestamp||it(),t.abnormal_mechanism&&(e.abnormal_mechanism=t.abnormal_mechanism),t.ignoreDuration&&(e.ignoreDuration=t.ignoreDuration),t.sid&&(e.sid=32===t.sid.length?t.sid:ot()),void 0!==t.init&&(e.init=t.init),!e.did&&t.did&&(e.did=`${t.did}`),\"number\"==typeof t.started&&(e.started=t.started),e.ignoreDuration)e.duration=void 0;else if(\"number\"==typeof t.duration)e.duration=t.duration;else{const t=e.timestamp-e.started;e.duration=t>=0?t:0}t.release&&(e.release=t.release),t.environment&&(e.environment=t.environment),!e.ipAddress&&t.ipAddress&&(e.ipAddress=t.ipAddress),!e.userAgent&&t.userAgent&&(e.userAgent=t.userAgent),\"number\"==typeof t.errors&&(e.errors=t.errors),t.status&&(e.status=t.status)}function mt(){return ot()}function yt(){return ot().substring(16)}function bt(e,t,n=2){if(!t||\"object\"!=typeof t||n<=0)return t;if(e&&t&&0===Object.keys(t).length)return e;const r={...e};for(const e in t)Object.prototype.hasOwnProperty.call(t,e)&&(r[e]=bt(r[e],t[e],n-1));return r}const _t=\"_sentrySpan\";function wt(e,t){t?Qe(e,_t,t):delete e[_t]}function St(e){return e[_t]}class kt{constructor(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._attachments=[],this._user={},this._tags={},this._extra={},this._contexts={},this._sdkProcessingMetadata={},this._propagationContext={traceId:mt(),spanId:yt()}}clone(){const e=new kt;return e._breadcrumbs=[...this._breadcrumbs],e._tags={...this._tags},e._extra={...this._extra},e._contexts={...this._contexts},this._contexts.flags&&(e._contexts.flags={values:[...this._contexts.flags.values]}),e._user=this._user,e._level=this._level,e._session=this._session,e._transactionName=this._transactionName,e._fingerprint=this._fingerprint,e._eventProcessors=[...this._eventProcessors],e._requestSession=this._requestSession,e._attachments=[...this._attachments],e._sdkProcessingMetadata={...this._sdkProcessingMetadata},e._propagationContext={...this._propagationContext},e._client=this._client,e._lastEventId=this._lastEventId,wt(e,St(this)),e}setClient(e){this._client=e}setLastEventId(e){this._lastEventId=e}getClient(){return this._client}lastEventId(){return this._lastEventId}addScopeListener(e){this._scopeListeners.push(e)}addEventProcessor(e){return this._eventProcessors.push(e),this}setUser(e){return this._user=e||{email:void 0,id:void 0,ip_address:void 0,username:void 0},this._session&&gt(this._session,{user:e}),this._notifyScopeListeners(),this}getUser(){return this._user}getRequestSession(){return this._requestSession}setRequestSession(e){return this._requestSession=e,this}setTags(e){return this._tags={...this._tags,...e},this._notifyScopeListeners(),this}setTag(e,t){return this._tags={...this._tags,[e]:t},this._notifyScopeListeners(),this}setExtras(e){return this._extra={...this._extra,...e},this._notifyScopeListeners(),this}setExtra(e,t){return this._extra={...this._extra,[e]:t},this._notifyScopeListeners(),this}setFingerprint(e){return this._fingerprint=e,this._notifyScopeListeners(),this}setLevel(e){return this._level=e,this._notifyScopeListeners(),this}setTransactionName(e){return this._transactionName=e,this._notifyScopeListeners(),this}setContext(e,t){return null===t?delete this._contexts[e]:this._contexts[e]=t,this._notifyScopeListeners(),this}setSession(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this}getSession(){return this._session}update(e){if(!e)return this;const t=\"function\"==typeof e?e(this):e,[n,r]=t instanceof Mt?[t.getScopeData(),t.getRequestSession()]:Ne(t)?[e,e.requestSession]:[],{tags:i,extra:o,user:s,contexts:a,level:c,fingerprint:l=[],propagationContext:u}=n||{};return this._tags={...this._tags,...i},this._extra={...this._extra,...o},this._contexts={...this._contexts,...a},s&&Object.keys(s).length&&(this._user=s),c&&(this._level=c),l.length&&(this._fingerprint=l),u&&(this._propagationContext=u),r&&(this._requestSession=r),this}clear(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._requestSession=void 0,this._session=void 0,wt(this,void 0),this._attachments=[],this.setPropagationContext({traceId:mt()}),this._notifyScopeListeners(),this}addBreadcrumb(e,t){const n=\"number\"==typeof t?t:100;if(n<=0)return this;const r={timestamp:rt(),...e};return this._breadcrumbs.push(r),this._breadcrumbs.length>n&&(this._breadcrumbs=this._breadcrumbs.slice(-n),this._client&&this._client.recordDroppedEvent(\"buffer_overflow\",\"log_item\")),this._notifyScopeListeners(),this}getLastBreadcrumb(){return this._breadcrumbs[this._breadcrumbs.length-1]}clearBreadcrumbs(){return this._breadcrumbs=[],this._notifyScopeListeners(),this}addAttachment(e){return this._attachments.push(e),this}clearAttachments(){return this._attachments=[],this}getScopeData(){return{breadcrumbs:this._breadcrumbs,attachments:this._attachments,contexts:this._contexts,tags:this._tags,extra:this._extra,user:this._user,level:this._level,fingerprint:this._fingerprint||[],eventProcessors:this._eventProcessors,propagationContext:this._propagationContext,sdkProcessingMetadata:this._sdkProcessingMetadata,transactionName:this._transactionName,span:St(this)}}setSDKProcessingMetadata(e){return this._sdkProcessingMetadata=bt(this._sdkProcessingMetadata,e,2),this}setPropagationContext(e){return this._propagationContext={spanId:yt(),...e},this}getPropagationContext(){return this._propagationContext}captureException(e,t){const n=t&&t.event_id?t.event_id:ot();if(!this._client)return le.warn(\"No client configured on scope - will not capture exception!\"),n;const r=new Error(\"Sentry syntheticException\");return this._client.captureException(e,{originalException:e,syntheticException:r,...t,event_id:n},this),n}captureMessage(e,t,n){const r=n&&n.event_id?n.event_id:ot();if(!this._client)return le.warn(\"No client configured on scope - will not capture message!\"),r;const i=new Error(e);return this._client.captureMessage(e,t,{originalException:e,syntheticException:i,...n,event_id:r},this),r}captureEvent(e,t){const n=t&&t.event_id?t.event_id:ot();return this._client?(this._client.captureEvent(e,{...t,event_id:n},this),n):(le.warn(\"No client configured on scope - will not capture event!\"),n)}_notifyScopeListeners(){this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach((e=>{e(this)})),this._notifyingListeners=!1)}}const Mt=kt;class Ct{constructor(e,t){let n,r;n=e||new Mt,r=t||new Mt,this._stack=[{scope:n}],this._isolationScope=r}withScope(e){const t=this._pushScope();let n;try{n=e(t)}catch(e){throw this._popScope(),e}return Fe(n)?n.then((e=>(this._popScope(),e)),(e=>{throw this._popScope(),e})):(this._popScope(),n)}getClient(){return this.getStackTop().client}getScope(){return this.getStackTop().scope}getIsolationScope(){return this._isolationScope}getStackTop(){return this._stack[this._stack.length-1]}_pushScope(){const e=this.getScope().clone();return this._stack.push({client:this.getClient(),scope:e}),e}_popScope(){return!(this._stack.length<=1)&&!!this._stack.pop()}}function Et(){const e=Te(Ee());return e.stack=e.stack||new Ct(ie(\"defaultCurrentScope\",(()=>new Mt)),ie(\"defaultIsolationScope\",(()=>new Mt)))}function Tt(e){return Et().withScope(e)}function Ot(e,t){const n=Et();return n.withScope((()=>(n.getStackTop().scope=e,t(e))))}function Pt(e){return Et().withScope((()=>e(Et().getIsolationScope())))}function At(e){const t=Te(e);return t.acs?t.acs:{withIsolationScope:Pt,withScope:Tt,withSetScope:Ot,withSetIsolationScope:(e,t)=>Pt(t),getCurrentScope:()=>Et().getScope(),getIsolationScope:()=>Et().getIsolationScope()}}function jt(){return At(Ee()).getCurrentScope()}function It(){return At(Ee()).getIsolationScope()}function xt(){return jt().getClient()}function Lt(e){const t=e.getPropagationContext(),{traceId:n,spanId:r,parentSpanId:i}=t;return tt({trace_id:n,span_id:r,parent_span_id:i})}function Dt(e){const t=e._sentryMetrics;if(!t)return;const n={};for(const[,[e,r]]of t){(n[e]||(n[e]=[])).push(tt(r))}return n}const Nt=/^sentry-/;function Rt(e){const t=function(e){if(!e||!xe(e)&&!Array.isArray(e))return;if(Array.isArray(e))return e.reduce(((e,t)=>{const n=Ft(t);return Object.entries(n).forEach((([t,n])=>{e[t]=n})),e}),{});return Ft(e)}(e);if(!t)return;const n=Object.entries(t).reduce(((e,[t,n])=>{if(t.match(Nt)){e[t.slice(7)]=n}return e}),{});return Object.keys(n).length>0?n:void 0}function Ft(e){return e.split(\",\").map((e=>e.split(\"=\").map((e=>decodeURIComponent(e.trim()))))).reduce(((e,[t,n])=>(t&&n&&(e[t]=n),e)),{})}let Bt=!1;function Ut(e){const{spanId:t,traceId:n,isRemote:r}=e.spanContext();return tt({parent_span_id:r?t:$t(e).parent_span_id,span_id:r?yt():t,trace_id:n})}function Vt(e){return\"number\"==typeof e?Jt(e):Array.isArray(e)?e[0]+e[1]/1e9:e instanceof Date?Jt(e.getTime()):it()}function Jt(e){return e>9999999999?e/1e3:e}function $t(e){if(function(e){return\"function\"==typeof e.getSpanJSON}(e))return e.getSpanJSON();try{const{spanId:t,traceId:n}=e.spanContext();if(function(e){const t=e;return!!(t.attributes&&t.startTime&&t.name&&t.endTime&&t.status)}(e)){const{attributes:r,startTime:i,name:o,endTime:s,parentSpanId:a,status:c}=e;return tt({span_id:t,trace_id:n,data:r,description:o,parent_span_id:a,start_timestamp:Vt(i),timestamp:Vt(s)||void 0,status:qt(c),op:r[\"sentry.op\"],origin:r[\"sentry.origin\"],_metrics_summary:Dt(e)})}return{span_id:t,trace_id:n}}catch(e){return{}}}function qt(e){if(e&&0!==e.code)return 1===e.code?\"ok\":e.message||\"unknown_error\"}function zt(e){return e._sentryRootSpan||e}function Wt(){Bt||(ce((()=>{console.warn(\"[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.\")})),Bt=!0)}const Ht=\"production\";function Gt(e,t){const n=t.getOptions(),{publicKey:r}=t.getDsn()||{},i=tt({environment:n.environment||Ht,release:n.release,public_key:r,trace_id:e});return t.emit(\"createDsc\",i),i}function Qt(e){const t=xt();if(!t)return{};const n=zt(e),r=n._frozenDsc;if(r)return r;const i=n.spanContext().traceState,o=i&&i.get(\"sentry.dsc\"),s=o&&Rt(o);if(s)return s;const a=Gt(e.spanContext().traceId,t),c=$t(n),l=c.data||{},u=l[\"sentry.sample_rate\"];null!=u&&(a.sample_rate=`${u}`);const d=l[\"sentry.source\"],p=c.description;return\"url\"!==d&&p&&(a.transaction=p),function(e){if(\"boolean\"==typeof __SENTRY_TRACING__&&!__SENTRY_TRACING__)return!1;const t=xt(),n=e||t&&t.getOptions();return!!n&&(n.enableTracing||\"tracesSampleRate\"in n||\"tracesSampler\"in n)}()&&(a.sampled=String(function(e){const{traceFlags:t}=e.spanContext();return 1===t}(n))),t.emit(\"createDsc\",a,n),a}const Kt=/^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;function Yt(e,t=!1){const{host:n,path:r,pass:i,port:o,projectId:s,protocol:a,publicKey:c}=e;return`${a}://${c}${t&&i?`:${i}`:\"\"}@${n}${o?`:${o}`:\"\"}/${r?`${r}/`:r}${s}`}function Xt(e){return{protocol:e.protocol,publicKey:e.publicKey||\"\",pass:e.pass||\"\",host:e.host,port:e.port||\"\",path:e.path||\"\",projectId:e.projectId}}function Zt(e){const t=\"string\"==typeof e?function(e){const t=Kt.exec(e);if(!t)return void ce((()=>{console.error(`Invalid Sentry Dsn: ${e}`)}));const[n,r,i=\"\",o=\"\",s=\"\",a=\"\"]=t.slice(1);let c=\"\",l=a;const u=l.split(\"/\");if(u.length>1&&(c=u.slice(0,-1).join(\"/\"),l=u.pop()),l){const e=l.match(/^\\d+/);e&&(l=e[0])}return Xt({host:o,pass:i,path:c,projectId:l,port:s,protocol:n,publicKey:r})}(e):Xt(e);if(t&&function(e){if(!oe)return!0;const{port:t,projectId:n,protocol:r}=e;return!([\"protocol\",\"publicKey\",\"host\",\"projectId\"].find((t=>!e[t]&&(le.error(`Invalid Sentry Dsn: ${t} missing`),!0)))||(n.match(/^\\d+$/)?function(e){return\"http\"===e||\"https\"===e}(r)?t&&isNaN(parseInt(t,10))&&(le.error(`Invalid Sentry Dsn: Invalid port ${t}`),1):(le.error(`Invalid Sentry Dsn: Invalid protocol ${r}`),1):(le.error(`Invalid Sentry Dsn: Invalid projectId ${n}`),1)))}(t))return t}function en(e,t=100,n=1/0){try{return nn(\"\",e,t,n)}catch(e){return{ERROR:`**non-serializable** (${e})`}}}function tn(e,t=3,n=102400){const r=en(e,t);return i=r,function(e){return~-encodeURI(e).split(/%..|./).length}(JSON.stringify(i))>n?tn(e,t-1,n):r;var i}function nn(e,t,n=1/0,r=1/0,i=function(){const e=\"function\"==typeof WeakSet,t=e?new WeakSet:[];return[function(n){if(e)return!!t.has(n)||(t.add(n),!1);for(let e=0;e<t.length;e++)if(t[e]===n)return!0;return t.push(n),!1},function(n){if(e)t.delete(n);else for(let e=0;e<t.length;e++)if(t[e]===n){t.splice(e,1);break}}]}()){const[o,s]=i;if(null==t||[\"boolean\",\"string\"].includes(typeof t)||\"number\"==typeof t&&Number.isFinite(t))return t;const a=function(e,t){try{if(\"domain\"===e&&t&&\"object\"==typeof t&&t._events)return\"[Domain]\";if(\"domainEmitter\"===e)return\"[DomainEmitter]\";if(\"undefined\"!=typeof global&&t===global)return\"[Global]\";if(\"undefined\"!=typeof window&&t===window)return\"[Window]\";if(\"undefined\"!=typeof document&&t===document)return\"[Document]\";if(Ue(t))return\"[VueViewModel]\";if(Ne(n=t)&&\"nativeEvent\"in n&&\"preventDefault\"in n&&\"stopPropagation\"in n)return\"[SyntheticEvent]\";if(\"number\"==typeof t&&!Number.isFinite(t))return`[${t}]`;if(\"function\"==typeof t)return`[Function: ${ve(t)}]`;if(\"symbol\"==typeof t)return`[${String(t)}]`;if(\"bigint\"==typeof t)return`[BigInt: ${String(t)}]`;const r=function(e){const t=Object.getPrototypeOf(e);return t?t.constructor.name:\"null prototype\"}(t);return/^HTML(\\w*)Element$/.test(r)?`[HTMLElement: ${r}]`:`[object ${r}]`}catch(e){return`**non-serializable** (${e})`}var n}(e,t);if(!a.startsWith(\"[object \"))return a;if(t.__sentry_skip_normalization__)return t;const c=\"number\"==typeof t.__sentry_override_normalization_depth__?t.__sentry_override_normalization_depth__:n;if(0===c)return a.replace(\"object \",\"\");if(o(t))return\"[Circular ~]\";const l=t;if(l&&\"function\"==typeof l.toJSON)try{return nn(\"\",l.toJSON(),c-1,r,i)}catch(e){}const u=Array.isArray(t)?[]:{};let d=0;const p=Xe(t);for(const e in p){if(!Object.prototype.hasOwnProperty.call(p,e))continue;if(d>=r){u[e]=\"[MaxProperties ~]\";break}const t=p[e];u[e]=nn(e,t,c-1,r,i),d++}return s(t),u}function rn(e,t=[]){return[e,t]}function on(e,t){const[n,r]=e;return[n,[...r,t]]}function sn(e,t){const n=e[1];for(const e of n){if(t(e,e[0].type))return!0}return!1}function an(e){return re.__SENTRY__&&re.__SENTRY__.encodePolyfill?re.__SENTRY__.encodePolyfill(e):(new TextEncoder).encode(e)}function cn(e){const[t,n]=e;let r=JSON.stringify(t);function i(e){\"string\"==typeof r?r=\"string\"==typeof e?r+e:[an(r),e]:r.push(\"string\"==typeof e?an(e):e)}for(const e of n){const[t,n]=e;if(i(`\\n${JSON.stringify(t)}\\n`),\"string\"==typeof n||n instanceof Uint8Array)i(n);else{let e;try{e=JSON.stringify(n)}catch(t){e=JSON.stringify(en(n))}i(e)}}return\"string\"==typeof r?r:function(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);let r=0;for(const t of e)n.set(t,r),r+=t.length;return n}(r)}function ln(e){const t=\"string\"==typeof e.data?an(e.data):e.data;return[tt({type:\"attachment\",length:t.length,filename:e.filename,content_type:e.contentType,attachment_type:e.attachmentType}),t]}const un={session:\"session\",sessions:\"session\",attachment:\"attachment\",transaction:\"transaction\",event:\"error\",client_report:\"internal\",user_report:\"default\",profile:\"profile\",profile_chunk:\"profile\",replay_event:\"replay\",replay_recording:\"replay\",check_in:\"monitor\",feedback:\"feedback\",span:\"span\",statsd:\"metric_bucket\",raw_security:\"security\"};function dn(e){return un[e]}function pn(e){if(!e||!e.sdk)return;const{name:t,version:n}=e.sdk;return{name:t,version:n}}function hn(e,t,n,r){const i=pn(n),o=e.type&&\"replay_event\"!==e.type?e.type:\"event\";!function(e,t){t&&(e.sdk=e.sdk||{},e.sdk.name=e.sdk.name||t.name,e.sdk.version=e.sdk.version||t.version,e.sdk.integrations=[...e.sdk.integrations||[],...t.integrations||[]],e.sdk.packages=[...e.sdk.packages||[],...t.packages||[]])}(e,n&&n.sdk);const s=function(e,t,n,r){const i=e.sdkProcessingMetadata&&e.sdkProcessingMetadata.dynamicSamplingContext;return{event_id:e.event_id,sent_at:(new Date).toISOString(),...t&&{sdk:t},...!!n&&r&&{dsn:Yt(r)},...i&&{trace:tt({...i})}}}(e,i,r,t);delete e.sdkProcessingMetadata;return rn(s,[[{type:o},e]])}function fn(e,t,n,r=0){return new ft(((i,o)=>{const s=e[r];if(null===t||\"function\"!=typeof s)i(t);else{const a=s({...t},n);te&&s.id&&null===a&&le.log(`Event processor \"${s.id}\" dropped event`),Fe(a)?a.then((t=>fn(e,t,n,r+1).then(i))).then(null,o):fn(e,a,n,r+1).then(i).then(null,o)}}))}let vn,gn,mn;function yn(e,t){const{fingerprint:n,span:r,breadcrumbs:i,sdkProcessingMetadata:o}=t;!function(e,t){const{extra:n,tags:r,user:i,contexts:o,level:s,transactionName:a}=t,c=tt(n);c&&Object.keys(c).length&&(e.extra={...c,...e.extra});const l=tt(r);l&&Object.keys(l).length&&(e.tags={...l,...e.tags});const u=tt(i);u&&Object.keys(u).length&&(e.user={...u,...e.user});const d=tt(o);d&&Object.keys(d).length&&(e.contexts={...d,...e.contexts});s&&(e.level=s);a&&\"transaction\"!==e.type&&(e.transaction=a)}(e,t),r&&function(e,t){e.contexts={trace:Ut(t),...e.contexts},e.sdkProcessingMetadata={dynamicSamplingContext:Qt(t),...e.sdkProcessingMetadata};const n=zt(t),r=$t(n).description;r&&!e.transaction&&\"transaction\"===e.type&&(e.transaction=r)}(e,r),function(e,t){e.fingerprint=e.fingerprint?Array.isArray(e.fingerprint)?e.fingerprint:[e.fingerprint]:[],t&&(e.fingerprint=e.fingerprint.concat(t));e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint}(e,n),function(e,t){const n=[...e.breadcrumbs||[],...t];e.breadcrumbs=n.length?n:void 0}(e,i),function(e,t){e.sdkProcessingMetadata={...e.sdkProcessingMetadata,...t}}(e,o)}function bn(e,t){const{extra:n,tags:r,user:i,contexts:o,level:s,sdkProcessingMetadata:a,breadcrumbs:c,fingerprint:l,eventProcessors:u,attachments:d,propagationContext:p,transactionName:h,span:f}=t;_n(e,\"extra\",n),_n(e,\"tags\",r),_n(e,\"user\",i),_n(e,\"contexts\",o),e.sdkProcessingMetadata=bt(e.sdkProcessingMetadata,a,2),s&&(e.level=s),h&&(e.transactionName=h),f&&(e.span=f),c.length&&(e.breadcrumbs=[...e.breadcrumbs,...c]),l.length&&(e.fingerprint=[...e.fingerprint,...l]),u.length&&(e.eventProcessors=[...e.eventProcessors,...u]),d.length&&(e.attachments=[...e.attachments,...d]),e.propagationContext={...e.propagationContext,...p}}function _n(e,t,n){e[t]=bt(e[t],n,1)}function wn(e,t,n,r,i,o){const{normalizeDepth:s=3,normalizeMaxBreadth:a=1e3}=e,c={...t,event_id:t.event_id||n.event_id||ot(),timestamp:t.timestamp||rt()},l=n.integrations||e.integrations.map((e=>e.name));!function(e,t){const{environment:n,release:r,dist:i,maxValueLength:o=250}=t;e.environment=e.environment||n||Ht,!e.release&&r&&(e.release=r);!e.dist&&i&&(e.dist=i);e.message&&(e.message=qe(e.message,o));const s=e.exception&&e.exception.values&&e.exception.values[0];s&&s.value&&(s.value=qe(s.value,o));const a=e.request;a&&a.url&&(a.url=qe(a.url,o))}(c,e),function(e,t){t.length>0&&(e.sdk=e.sdk||{},e.sdk.integrations=[...e.sdk.integrations||[],...t])}(c,l),i&&i.emit(\"applyFrameMetadata\",t),void 0===t.type&&function(e,t){const n=function(e){const t=re._sentryDebugIds;if(!t)return{};const n=Object.keys(t);return mn&&n.length===gn||(gn=n.length,mn=n.reduce(((n,r)=>{vn||(vn={});const i=vn[r];if(i)n[i[0]]=i[1];else{const i=e(r);for(let e=i.length-1;e>=0;e--){const o=i[e],s=o&&o.filename,a=t[r];if(s&&a){n[s]=a,vn[r]=[s,a];break}}}return n}),{})),mn}(t);try{e.exception.values.forEach((e=>{e.stacktrace.frames.forEach((e=>{n&&e.filename&&(e.debug_id=n[e.filename])}))}))}catch(e){}}(c,e.stackParser);const u=function(e,t){if(!t)return e;const n=e?e.clone():new Mt;return n.update(t),n}(r,n.captureContext);n.mechanism&&lt(c,n.mechanism);const d=i?i.getEventProcessors():[],p=ie(\"globalScope\",(()=>new Mt)).getScopeData();if(o){bn(p,o.getScopeData())}if(u){bn(p,u.getScopeData())}const h=[...n.attachments||[],...p.attachments];h.length&&(n.attachments=h),yn(c,p);return fn([...d,...p.eventProcessors],c,n).then((e=>(e&&function(e){const t={};try{e.exception.values.forEach((e=>{e.stacktrace.frames.forEach((e=>{e.debug_id&&(e.abs_path?t[e.abs_path]=e.debug_id:e.filename&&(t[e.filename]=e.debug_id),delete e.debug_id)}))}))}catch(e){}if(0===Object.keys(t).length)return;e.debug_meta=e.debug_meta||{},e.debug_meta.images=e.debug_meta.images||[];const n=e.debug_meta.images;Object.entries(t).forEach((([e,t])=>{n.push({type:\"sourcemap\",code_file:e,debug_id:t})}))}(e),\"number\"==typeof s&&s>0?function(e,t,n){if(!e)return null;const r={...e,...e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map((e=>({...e,...e.data&&{data:en(e.data,t,n)}})))},...e.user&&{user:en(e.user,t,n)},...e.contexts&&{contexts:en(e.contexts,t,n)},...e.extra&&{extra:en(e.extra,t,n)}};e.contexts&&e.contexts.trace&&r.contexts&&(r.contexts.trace=e.contexts.trace,e.contexts.trace.data&&(r.contexts.trace.data=en(e.contexts.trace.data,t,n)));e.spans&&(r.spans=e.spans.map((e=>({...e,...e.data&&{data:en(e.data,t,n)}}))));e.contexts&&e.contexts.flags&&r.contexts&&(r.contexts.flags=en(e.contexts.flags,3,n));return r}(e,s,a):e)))}function Sn(e){if(e)return function(e){return e instanceof Mt||\"function\"==typeof e}(e)||function(e){return Object.keys(e).some((e=>kn.includes(e)))}(e)?{captureContext:e}:e}const kn=[\"user\",\"level\",\"extra\",\"contexts\",\"tags\",\"fingerprint\",\"requestSession\",\"propagationContext\"];function Mn(e,t){return jt().captureEvent(e,t)}function Cn(e){const t=xt(),n=It(),r=jt(),{release:i,environment:o=Ht}=t&&t.getOptions()||{},{userAgent:s}=re.navigator||{},a=vt({release:i,environment:o,user:r.getUser()||n.getUser(),...s&&{userAgent:s},...e}),c=n.getSession();return c&&\"ok\"===c.status&&gt(c,{status:\"exited\"}),En(),n.setSession(a),r.setSession(a),a}function En(){const e=It(),t=jt(),n=t.getSession()||e.getSession();n&&function(e,t){let n={};t?n={status:t}:\"ok\"===e.status&&(n={status:\"exited\"}),gt(e,n)}(n),Tn(),e.setSession(),t.setSession()}function Tn(){const e=It(),t=jt(),n=xt(),r=t.getSession()||e.getSession();r&&n&&n.captureSession(r)}function On(e=!1){e?En():Tn()}function Pn(e,t,n){return t||`${function(e){return`${function(e){const t=e.protocol?`${e.protocol}:`:\"\",n=e.port?`:${e.port}`:\"\";return`${t}//${e.host}${n}${e.path?`/${e.path}`:\"\"}/api/`}(e)}${e.projectId}/envelope/`}(e)}?${function(e,t){const n={sentry_version:\"7\"};return e.publicKey&&(n.sentry_key=e.publicKey),t&&(n.sentry_client=`${t.name}/${t.version}`),new URLSearchParams(n).toString()}(e,n)}`}const An=[];function jn(e,t){for(const n of t)n&&n.afterAllSetup&&n.afterAllSetup(e)}function In(e,t,n){if(n[t.name])te&&le.log(`Integration skipped because it was already installed: ${t.name}`);else{if(n[t.name]=t,-1===An.indexOf(t.name)&&\"function\"==typeof t.setupOnce&&(t.setupOnce(),An.push(t.name)),t.setup&&\"function\"==typeof t.setup&&t.setup(e),\"function\"==typeof t.preprocessEvent){const n=t.preprocessEvent.bind(t);e.on(\"preprocessEvent\",((t,r)=>n(t,r,e)))}if(\"function\"==typeof t.processEvent){const n=t.processEvent.bind(t),r=Object.assign(((t,r)=>n(t,r,e)),{id:t.name});e.addEventProcessor(r)}te&&le.log(`Integration installed: ${t.name}`)}}class xn extends Error{constructor(e,t=\"warn\"){super(e),this.message=e,this.logLevel=t}}const Ln=\"Not capturing exception because it's already been captured.\";class Dn{constructor(e){if(this._options=e,this._integrations={},this._numProcessing=0,this._outcomes={},this._hooks={},this._eventProcessors=[],e.dsn?this._dsn=Zt(e.dsn):te&&le.warn(\"No DSN provided, client will not send events.\"),this._dsn){const t=Pn(this._dsn,e.tunnel,e._metadata?e._metadata.sdk:void 0);this._transport=e.transport({tunnel:this._options.tunnel,recordDroppedEvent:this.recordDroppedEvent.bind(this),...e.transportOptions,url:t})}const t=[\"enableTracing\",\"tracesSampleRate\",\"tracesSampler\"].find((t=>t in e&&null==e[t]));t&&ce((()=>{console.warn(`[Sentry] Deprecation warning: \\`${t}\\` is set to undefined, which leads to tracing being enabled. In v9, a value of \\`undefined\\` will result in tracing being disabled.`)}))}captureException(e,t,n){const r=ot();if(ut(e))return te&&le.log(Ln),r;const i={event_id:r,...t};return this._process(this.eventFromException(e,i).then((e=>this._captureEvent(e,i,n)))),i.event_id}captureMessage(e,t,n,r){const i={event_id:ot(),...n},o=Le(e)?e:String(e),s=De(e)?this.eventFromMessage(o,t,i):this.eventFromException(e,i);return this._process(s.then((e=>this._captureEvent(e,i,r)))),i.event_id}captureEvent(e,t,n){const r=ot();if(t&&t.originalException&&ut(t.originalException))return te&&le.log(Ln),r;const i={event_id:r,...t},o=(e.sdkProcessingMetadata||{}).capturedSpanScope;return this._process(this._captureEvent(e,i,o||n)),i.event_id}captureSession(e){\"string\"!=typeof e.release?te&&le.warn(\"Discarded session because of missing or non-string release\"):(this.sendSession(e),gt(e,{init:!1}))}getDsn(){return this._dsn}getOptions(){return this._options}getSdkMetadata(){return this._options._metadata}getTransport(){return this._transport}flush(e){const t=this._transport;return t?(this.emit(\"flush\"),this._isClientDoneProcessing(e).then((n=>t.flush(e).then((e=>n&&e))))):pt(!0)}close(e){return this.flush(e).then((e=>(this.getOptions().enabled=!1,this.emit(\"close\"),e)))}getEventProcessors(){return this._eventProcessors}addEventProcessor(e){this._eventProcessors.push(e)}init(){(this._isEnabled()||this._options.integrations.some((({name:e})=>e.startsWith(\"Spotlight\"))))&&this._setupIntegrations()}getIntegrationByName(e){return this._integrations[e]}addIntegration(e){const t=this._integrations[e.name];In(this,e,this._integrations),t||jn(this,[e])}sendEvent(e,t={}){this.emit(\"beforeSendEvent\",e,t);let n=hn(e,this._dsn,this._options._metadata,this._options.tunnel);for(const e of t.attachments||[])n=on(n,ln(e));const r=this.sendEnvelope(n);r&&r.then((t=>this.emit(\"afterSendEvent\",e,t)),null)}sendSession(e){const t=function(e,t,n,r){const i=pn(n);return rn({sent_at:(new Date).toISOString(),...i&&{sdk:i},...!!r&&t&&{dsn:Yt(t)}},[\"aggregates\"in e?[{type:\"sessions\"},e]:[{type:\"session\"},e.toJSON()]])}(e,this._dsn,this._options._metadata,this._options.tunnel);this.sendEnvelope(t)}recordDroppedEvent(e,t,n){if(this._options.sendClientReports){const r=\"number\"==typeof n?n:1,i=`${e}:${t}`;te&&le.log(`Recording outcome: \"${i}\"${r>1?` (${r} times)`:\"\"}`),this._outcomes[i]=(this._outcomes[i]||0)+r}}on(e,t){const n=this._hooks[e]=this._hooks[e]||[];return n.push(t),()=>{const e=n.indexOf(t);e>-1&&n.splice(e,1)}}emit(e,...t){const n=this._hooks[e];n&&n.forEach((e=>e(...t)))}sendEnvelope(e){return this.emit(\"beforeEnvelope\",e),this._isEnabled()&&this._transport?this._transport.send(e).then(null,(e=>(te&&le.error(\"Error while sending envelope:\",e),e))):(te&&le.error(\"Transport disabled\"),pt({}))}_setupIntegrations(){const{integrations:e}=this._options;this._integrations=function(e,t){const n={};return t.forEach((t=>{t&&In(e,t,n)})),n}(this,e),jn(this,e)}_updateSessionFromEvent(e,t){let n=\"fatal\"===t.level,r=!1;const i=t.exception&&t.exception.values;if(i){r=!0;for(const e of i){const t=e.mechanism;if(t&&!1===t.handled){n=!0;break}}}const o=\"ok\"===e.status;(o&&0===e.errors||o&&n)&&(gt(e,{...n&&{status:\"crashed\"},errors:e.errors||Number(r||n)}),this.captureSession(e))}_isClientDoneProcessing(e){return new ft((t=>{let n=0;const r=setInterval((()=>{0==this._numProcessing?(clearInterval(r),t(!0)):(n+=1,e&&n>=e&&(clearInterval(r),t(!1)))}),1)}))}_isEnabled(){return!1!==this.getOptions().enabled&&void 0!==this._transport}_prepareEvent(e,t,n=jt(),r=It()){const i=this.getOptions(),o=Object.keys(this._integrations);return!t.integrations&&o.length>0&&(t.integrations=o),this.emit(\"preprocessEvent\",e,t),e.type||r.setLastEventId(e.event_id||t.event_id),wn(i,e,t,n,this,r).then((e=>{if(null===e)return e;e.contexts={trace:Lt(n),...e.contexts};const t=function(e,t){const n=t.getPropagationContext();return n.dsc||Gt(n.traceId,e)}(this,n);return e.sdkProcessingMetadata={dynamicSamplingContext:t,...e.sdkProcessingMetadata},e}))}_captureEvent(e,t={},n){return this._processEvent(e,t,n).then((e=>e.event_id),(e=>{te&&(e instanceof xn&&\"log\"===e.logLevel?le.log(e.message):le.warn(e))}))}_processEvent(e,t,n){const r=this.getOptions(),{sampleRate:i}=r,o=Rn(e),s=Nn(e),a=e.type||\"error\",c=`before send for type \\`${a}\\``,l=void 0===i?void 0:function(e){if(\"boolean\"==typeof e)return Number(e);const t=\"string\"==typeof e?parseFloat(e):e;if(!(\"number\"!=typeof t||isNaN(t)||t<0||t>1))return t;te&&le.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(e)} of type ${JSON.stringify(typeof e)}.`)}(i);if(s&&\"number\"==typeof l&&Math.random()>l)return this.recordDroppedEvent(\"sample_rate\",\"error\",e),ht(new xn(`Discarding event because it's not included in the random sample (sampling rate = ${i})`,\"log\"));const u=\"replay_event\"===a?\"replay\":a,d=(e.sdkProcessingMetadata||{}).capturedSpanIsolationScope;return this._prepareEvent(e,t,n,d).then((n=>{if(null===n)throw this.recordDroppedEvent(\"event_processor\",u,e),new xn(\"An event processor returned `null`, will not send event.\",\"log\");if(t.data&&!0===t.data.__sentry__)return n;const i=function(e,t,n,r){const{beforeSend:i,beforeSendTransaction:o,beforeSendSpan:s}=t;if(Nn(n)&&i)return i(n,r);if(Rn(n)){if(n.spans&&s){const t=[];for(const r of n.spans){const n=s(r);n?t.push(n):(Wt(),e.recordDroppedEvent(\"before_send\",\"span\"))}n.spans=t}if(o){if(n.spans){const e=n.spans.length;n.sdkProcessingMetadata={...n.sdkProcessingMetadata,spanCountBeforeProcessing:e}}return o(n,r)}}return n}(this,r,n,t);return function(e,t){const n=`${t} must return \\`null\\` or a valid event.`;if(Fe(e))return e.then((e=>{if(!Ne(e)&&null!==e)throw new xn(n);return e}),(e=>{throw new xn(`${t} rejected with ${e}`)}));if(!Ne(e)&&null!==e)throw new xn(n);return e}(i,c)})).then((r=>{if(null===r){if(this.recordDroppedEvent(\"before_send\",u,e),o){const t=1+(e.spans||[]).length;this.recordDroppedEvent(\"before_send\",\"span\",t)}throw new xn(`${c} returned \\`null\\`, will not send event.`,\"log\")}const i=n&&n.getSession();if(!o&&i&&this._updateSessionFromEvent(i,r),o){const e=(r.sdkProcessingMetadata&&r.sdkProcessingMetadata.spanCountBeforeProcessing||0)-(r.spans?r.spans.length:0);e>0&&this.recordDroppedEvent(\"before_send\",\"span\",e)}const s=r.transaction_info;if(o&&s&&r.transaction!==e.transaction){const e=\"custom\";r.transaction_info={...s,source:e}}return this.sendEvent(r,t),r})).then(null,(e=>{if(e instanceof xn)throw e;throw this.captureException(e,{data:{__sentry__:!0},originalException:e}),new xn(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${e}`)}))}_process(e){this._numProcessing++,e.then((e=>(this._numProcessing--,e)),(e=>(this._numProcessing--,e)))}_clearOutcomes(){const e=this._outcomes;return this._outcomes={},Object.entries(e).map((([e,t])=>{const[n,r]=e.split(\":\");return{reason:n,category:r,quantity:t}}))}_flushOutcomes(){te&&le.log(\"Flushing outcomes...\");const e=this._clearOutcomes();if(0===e.length)return void(te&&le.log(\"No outcomes to send\"));if(!this._dsn)return void(te&&le.log(\"No dsn provided, will not send outcomes\"));te&&le.log(\"Sending outcomes:\",e);const t=(n=e,rn((r=this._options.tunnel&&Yt(this._dsn))?{dsn:r}:{},[[{type:\"client_report\"},{timestamp:i||rt(),discarded_events:n}]]));var n,r,i;this.sendEnvelope(t)}}function Nn(e){return void 0===e.type}function Rn(e){return\"transaction\"===e.type}function Fn(e){const t=[];function n(e){return t.splice(t.indexOf(e),1)[0]||Promise.resolve(void 0)}return{$:t,add:function(r){if(!(void 0===e||t.length<e))return ht(new xn(\"Not adding Promise because buffer limit was reached.\"));const i=r();return-1===t.indexOf(i)&&t.push(i),i.then((()=>n(i))).then(null,(()=>n(i).then(null,(()=>{})))),i},drain:function(e){return new ft(((n,r)=>{let i=t.length;if(!i)return n(!0);const o=setTimeout((()=>{e&&e>0&&n(!1)}),e);t.forEach((e=>{pt(e).then((()=>{--i||(clearTimeout(o),n(!0))}),r)}))}))}}}function Bn(e,{statusCode:t,headers:n},r=Date.now()){const i={...e},o=n&&n[\"x-sentry-rate-limits\"],s=n&&n[\"retry-after\"];if(o)for(const e of o.trim().split(\",\")){const[t,n,,,o]=e.split(\":\",5),s=parseInt(t,10),a=1e3*(isNaN(s)?60:s);if(n)for(const e of n.split(\";\"))\"metric_bucket\"===e&&o&&!o.split(\";\").includes(\"custom\")||(i[e]=r+a);else i.all=r+a}else s?i.all=r+function(e,t=Date.now()){const n=parseInt(`${e}`,10);if(!isNaN(n))return 1e3*n;const r=Date.parse(`${e}`);return isNaN(r)?6e4:r-t}(s,r):429===t&&(i.all=r+6e4);return i}function Un(e,t,n=Fn(e.bufferSize||64)){let r={};return{send:function(i){const o=[];if(sn(i,((t,n)=>{const i=dn(n);if(function(e,t,n=Date.now()){return function(e,t){return e[t]||e.all||0}(e,t)>n}(r,i)){const r=Vn(t,n);e.recordDroppedEvent(\"ratelimit_backoff\",i,r)}else o.push(t)})),0===o.length)return pt({});const s=rn(i[0],o),a=t=>{sn(s,((n,r)=>{const i=Vn(n,r);e.recordDroppedEvent(t,dn(r),i)}))};return n.add((()=>t({body:cn(s)}).then((e=>(void 0!==e.statusCode&&(e.statusCode<200||e.statusCode>=300)&&te&&le.warn(`Sentry responded with status code ${e.statusCode} to sent event.`),r=Bn(r,e),e)),(e=>{throw a(\"network_error\"),e})))).then((e=>e),(e=>{if(e instanceof xn)return te&&le.error(\"Skipped sending event because buffer is full.\"),a(\"queue_overflow\"),pt({});throw e}))},flush:e=>n.drain(e)}}function Vn(e,t){if(\"event\"===t||\"transaction\"===t)return Array.isArray(e)?e[1]:void 0}const Jn=100;function $n(e,t){const n=xt(),r=It();if(!n)return;const{beforeBreadcrumb:i=null,maxBreadcrumbs:o=Jn}=n.getOptions();if(o<=0)return;const s={timestamp:rt(),...e},a=i?ce((()=>i(s,t))):s;null!==a&&(n.emit&&n.emit(\"beforeAddBreadcrumb\",a,t),r.addBreadcrumb(a,o))}let qn;const zn=new WeakMap,Wn=()=>({name:\"FunctionToString\",setupOnce(){qn=Function.prototype.toString;try{Function.prototype.toString=function(...e){const t=Ye(this),n=zn.has(xt())&&void 0!==t?t:this;return qn.apply(n,e)}}catch(e){}},setup(e){zn.set(e,!0)}}),Hn=[/^Script error\\.?$/,/^Javascript error: Script error\\.? on line 0$/,/^ResizeObserver loop completed with undelivered notifications.$/,/^Cannot redefine property: googletag$/,\"undefined is not an object (evaluating 'a.L')\",'can\\'t redefine non-configurable property \"solana\"',\"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\",\"Can't find variable: _AutofillCallbackHandler\",/^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/],Gn=(e={})=>({name:\"InboundFilters\",processEvent(t,n,r){const i=r.getOptions(),o=function(e={},t={}){return{allowUrls:[...e.allowUrls||[],...t.allowUrls||[]],denyUrls:[...e.denyUrls||[],...t.denyUrls||[]],ignoreErrors:[...e.ignoreErrors||[],...t.ignoreErrors||[],...e.disableErrorDefaults?[]:Hn],ignoreTransactions:[...e.ignoreTransactions||[],...t.ignoreTransactions||[]],ignoreInternal:void 0===e.ignoreInternal||e.ignoreInternal}}(e,i);return function(e,t){if(t.ignoreInternal&&function(e){try{return\"SentryError\"===e.exception.values[0].type}catch(e){}return!1}(e))return te&&le.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${at(e)}`),!0;if(function(e,t){if(e.type||!t||!t.length)return!1;return function(e){const t=[];e.message&&t.push(e.message);let n;try{n=e.exception.values[e.exception.values.length-1]}catch(e){}n&&n.value&&(t.push(n.value),n.type&&t.push(`${n.type}: ${n.value}`));return t}(e).some((e=>He(e,t)))}(e,t.ignoreErrors))return te&&le.warn(`Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${at(e)}`),!0;if(function(e){if(e.type)return!1;if(!e.exception||!e.exception.values||0===e.exception.values.length)return!1;return!e.message&&!e.exception.values.some((e=>e.stacktrace||e.type&&\"Error\"!==e.type||e.value))}(e))return te&&le.warn(`Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${at(e)}`),!0;if(function(e,t){if(\"transaction\"!==e.type||!t||!t.length)return!1;const n=e.transaction;return!!n&&He(n,t)}(e,t.ignoreTransactions))return te&&le.warn(`Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${at(e)}`),!0;if(function(e,t){if(!t||!t.length)return!1;const n=Qn(e);return!!n&&He(n,t)}(e,t.denyUrls))return te&&le.warn(`Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${at(e)}.\\nUrl: ${Qn(e)}`),!0;if(!function(e,t){if(!t||!t.length)return!0;const n=Qn(e);return!n||He(n,t)}(e,t.allowUrls))return te&&le.warn(`Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${at(e)}.\\nUrl: ${Qn(e)}`),!0;return!1}(t,o)?null:t}});function Qn(e){try{let t;try{t=e.exception.values[0].stacktrace.frames}catch(e){}return t?function(e=[]){for(let t=e.length-1;t>=0;t--){const n=e[t];if(n&&\"<anonymous>\"!==n.filename&&\"[native code]\"!==n.filename)return n.filename||null}return null}(t):null}catch(t){return te&&le.error(`Cannot extract url for event ${at(e)}`),null}}function Kn(e,t,n=250,r,i,o,s){if(!(o.exception&&o.exception.values&&s&&Be(s.originalException,Error)))return;const a=o.exception.values.length>0?o.exception.values[o.exception.values.length-1]:void 0;var c,l;a&&(o.exception.values=(c=Yn(e,t,i,s.originalException,r,o.exception.values,a,0),l=n,c.map((e=>(e.value&&(e.value=qe(e.value,l)),e)))))}function Yn(e,t,n,r,i,o,s,a){if(o.length>=n+1)return o;let c=[...o];if(Be(r[i],Error)){Xn(s,a);const o=e(t,r[i]),l=c.length;Zn(o,i,l,a),c=Yn(e,t,n,r[i],i,[o,...c],o,l)}return Array.isArray(r.errors)&&r.errors.forEach(((r,o)=>{if(Be(r,Error)){Xn(s,a);const l=e(t,r),u=c.length;Zn(l,`errors[${o}]`,u,a),c=Yn(e,t,n,r,i,[l,...c],l,u)}})),c}function Xn(e,t){e.mechanism=e.mechanism||{type:\"generic\",handled:!0},e.mechanism={...e.mechanism,...\"AggregateError\"===e.type&&{is_exception_group:!0},exception_id:t}}function Zn(e,t,n,r){e.mechanism=e.mechanism||{type:\"generic\",handled:!0},e.mechanism={...e.mechanism,type:\"chained\",source:t,exception_id:n,parent_id:r}}function er(e){if(!e)return{};const t=e.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);if(!t)return{};const n=t[6]||\"\",r=t[8]||\"\";return{host:t[4],path:t[5],protocol:t[2],search:n,hash:r,relative:t[5]+n+r}}function tr(){\"console\"in re&&se.forEach((function(e){e in re.console&&Ge(re.console,e,(function(t){return ae[e]=t,function(...t){we(\"console\",{args:t,level:e});const n=ae[e];n&&n.apply(re.console,t)}}))}))}function nr(e){return\"warn\"===e?\"warning\":[\"fatal\",\"error\",\"warning\",\"log\",\"info\",\"debug\"].includes(e)?e:\"log\"}const rr=()=>{let e;return{name:\"Dedupe\",processEvent(t){if(t.type)return t;try{if(function(e,t){if(!t)return!1;if(function(e,t){const n=e.message,r=t.message;if(!n&&!r)return!1;if(n&&!r||!n&&r)return!1;if(n!==r)return!1;if(!or(e,t))return!1;if(!ir(e,t))return!1;return!0}(e,t))return!0;if(function(e,t){const n=sr(t),r=sr(e);if(!n||!r)return!1;if(n.type!==r.type||n.value!==r.value)return!1;if(!or(e,t))return!1;if(!ir(e,t))return!1;return!0}(e,t))return!0;return!1}(t,e))return te&&le.warn(\"Event dropped due to being a duplicate of previously captured event.\"),null}catch(e){}return e=t}}};function ir(e,t){let n=ge(e),r=ge(t);if(!n&&!r)return!0;if(n&&!r||!n&&r)return!1;if(r.length!==n.length)return!1;for(let e=0;e<r.length;e++){const t=r[e],i=n[e];if(t.filename!==i.filename||t.lineno!==i.lineno||t.colno!==i.colno||t.function!==i.function)return!1}return!0}function or(e,t){let n=e.fingerprint,r=t.fingerprint;if(!n&&!r)return!0;if(n&&!r||!n&&r)return!1;try{return!(n.join(\"\")!==r.join(\"\"))}catch(e){return!1}}function sr(e){return e.exception&&e.exception.values&&e.exception.values[0]}function ar(e){return void 0===e?void 0:e>=400&&e<500?\"warning\":e>=500?\"error\":void 0}const cr=re;function lr(e){return e&&/^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(e.toString())}function ur(){if(\"string\"==typeof EdgeRuntime)return!0;if(!function(){if(!(\"fetch\"in cr))return!1;try{return new Headers,new Request(\"http://www.example.com\"),new Response,!0}catch(e){return!1}}())return!1;if(lr(cr.fetch))return!0;let e=!1;const t=cr.document;if(t&&\"function\"==typeof t.createElement)try{const n=t.createElement(\"iframe\");n.hidden=!0,t.head.appendChild(n),n.contentWindow&&n.contentWindow.fetch&&(e=lr(n.contentWindow.fetch)),t.head.removeChild(n)}catch(e){oe&&le.warn(\"Could not create sandbox iframe for pure fetch check, bailing to window.fetch: \",e)}return e}function dr(e,t){const n=\"fetch\";be(n,e),_e(n,(()=>function(e,t=!1){if(t&&!ur())return;Ge(re,\"fetch\",(function(t){return function(...n){const r=new Error,{method:i,url:o}=function(e){if(0===e.length)return{method:\"GET\",url:\"\"};if(2===e.length){const[t,n]=e;return{url:hr(t),method:pr(n,\"method\")?String(n.method).toUpperCase():\"GET\"}}const t=e[0];return{url:hr(t),method:pr(t,\"method\")?String(t.method).toUpperCase():\"GET\"}}(n),s={args:n,fetchData:{method:i,url:o},startTimestamp:1e3*it(),virtualError:r};return e||we(\"fetch\",{...s}),t.apply(re,n).then((async t=>(e?e(t):we(\"fetch\",{...s,endTimestamp:1e3*it(),response:t}),t)),(e=>{throw we(\"fetch\",{...s,endTimestamp:1e3*it(),error:e}),Pe(e)&&void 0===e.stack&&(e.stack=r.stack,Qe(e,\"framesToPop\",1)),e}))}}))}(void 0,t)))}function pr(e,t){return!!e&&\"object\"==typeof e&&!!e[t]}function hr(e){return\"string\"==typeof e?e:e?pr(e,\"url\")?e.url:e.toString?e.toString():\"\":\"\"}const fr=re;const vr=re;let gr=0;function mr(){return gr>0}function yr(e,t={}){if(!function(e){return\"function\"==typeof e}(e))return e;try{const t=e.__sentry_wrapped__;if(t)return\"function\"==typeof t?t:e;if(Ye(e))return e}catch(t){return e}const n=function(...n){try{const r=n.map((e=>yr(e,t)));return e.apply(this,r)}catch(e){throw gr++,setTimeout((()=>{gr--})),function(...e){const t=At(Ee());if(2===e.length){const[n,r]=e;return n?t.withSetScope(n,r):t.withScope(r)}t.withScope(e[0])}((r=>{var i,o;r.addEventProcessor((e=>(t.mechanism&&(ct(e,void 0,void 0),lt(e,t.mechanism)),e.extra={...e.extra,arguments:n},e))),i=e,jt().captureException(i,Sn(o))})),e}};try{for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])}catch(e){}Ke(n,e),Qe(e,\"__sentry_wrapped__\",n);try{Object.getOwnPropertyDescriptor(n,\"name\").configurable&&Object.defineProperty(n,\"name\",{get:()=>e.name})}catch(e){}return n}const br=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__;function _r(e,t){const n=kr(e,t),r={type:Er(t),value:Tr(t)};return n.length&&(r.stacktrace={frames:n}),void 0===r.type&&\"\"===r.value&&(r.value=\"Unrecoverable error caught\"),r}function wr(e,t,n,r){const i=xt(),o=i&&i.getOptions().normalizeDepth,s=function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)){const n=e[t];if(n instanceof Error)return n}return}(t),a={__serialized__:tn(t,o)};if(s)return{exception:{values:[_r(e,s)]},extra:a};const c={exception:{values:[{type:Re(t)?t.constructor.name:r?\"UnhandledRejection\":\"Error\",value:Ar(t,{isUnhandledRejection:r})}]},extra:a};if(n){const t=kr(e,n);t.length&&(c.exception.values[0].stacktrace={frames:t})}return c}function Sr(e,t){return{exception:{values:[_r(e,t)]}}}function kr(e,t){const n=t.stacktrace||t.stack||\"\",r=function(e){if(e&&Mr.test(e.message))return 1;return 0}(t),i=function(e){if(\"number\"==typeof e.framesToPop)return e.framesToPop;return 0}(t);try{return e(n,r,i)}catch(e){}return[]}const Mr=/Minified React error #\\d+;/i;function Cr(e){return\"undefined\"!=typeof WebAssembly&&void 0!==WebAssembly.Exception&&e instanceof WebAssembly.Exception}function Er(e){const t=e&&e.name;if(!t&&Cr(e)){return e.message&&Array.isArray(e.message)&&2==e.message.length?e.message[0]:\"WebAssembly.Exception\"}return t}function Tr(e){const t=e&&e.message;return t?t.error&&\"string\"==typeof t.error.message?t.error.message:Cr(e)&&Array.isArray(e.message)&&2==e.message.length?e.message[1]:t:\"No error message\"}function Or(e,t,n,r,i){let o;if(je(t)&&t.error){return Sr(e,t.error)}if(Ie(t)||Ae(t,\"DOMException\")){const i=t;if(\"stack\"in t)o=Sr(e,t);else{const t=i.name||(Ie(i)?\"DOMError\":\"DOMException\"),s=i.message?`${t}: ${i.message}`:t;o=Pr(e,s,n,r),ct(o,s)}return\"code\"in i&&(o.tags={...o.tags,\"DOMException.code\":`${i.code}`}),o}if(Pe(t))return Sr(e,t);if(Ne(t)||Re(t)){return o=wr(e,t,n,i),lt(o,{synthetic:!0}),o}return o=Pr(e,t,n,r),ct(o,`${t}`,void 0),lt(o,{synthetic:!0}),o}function Pr(e,t,n,r){const i={};if(r&&n){const r=kr(e,n);r.length&&(i.exception={values:[{value:t,stacktrace:{frames:r}}]}),lt(i,{synthetic:!0})}if(Le(t)){const{__sentry_template_string__:e,__sentry_template_values__:n}=t;return i.logentry={message:e,params:n},i}return i.message=t,i}function Ar(e,{isUnhandledRejection:t}){const n=function(e,t=40){const n=Object.keys(Xe(e));n.sort();const r=n[0];if(!r)return\"[object has no keys]\";if(r.length>=t)return qe(r,t);for(let e=n.length;e>0;e--){const r=n.slice(0,e).join(\", \");if(!(r.length>t))return e===n.length?r:qe(r,t)}return\"\"}(e),r=t?\"promise rejection\":\"exception\";if(je(e))return`Event \\`ErrorEvent\\` captured as ${r} with message \\`${e.message}\\``;if(Re(e)){return`Event \\`${function(e){try{const t=Object.getPrototypeOf(e);return t?t.constructor.name:void 0}catch(e){}}(e)}\\` (type=${e.type}) captured as ${r}`}return`Object captured as ${r} with keys: ${n}`}class jr extends Dn{constructor(e){const t={parentSpanIsAlwaysRootSpan:!0,...e};!function(e,t,n=[t],r=\"npm\"){const i=e._metadata||{};i.sdk||(i.sdk={name:`sentry.javascript.${t}`,packages:n.map((e=>({name:`${r}:@sentry/${e}`,version:ne}))),version:ne}),e._metadata=i}(t,\"browser\",[\"browser\"],vr.SENTRY_SDK_SOURCE||\"npm\"),super(t),t.sendClientReports&&vr.document&&vr.document.addEventListener(\"visibilitychange\",(()=>{\"hidden\"===vr.document.visibilityState&&this._flushOutcomes()}))}eventFromException(e,t){return function(e,t,n,r){const i=Or(e,t,n&&n.syntheticException||void 0,r);return lt(i),i.level=\"error\",n&&n.event_id&&(i.event_id=n.event_id),pt(i)}(this._options.stackParser,e,t,this._options.attachStacktrace)}eventFromMessage(e,t=\"info\",n){return function(e,t,n=\"info\",r,i){const o=Pr(e,t,r&&r.syntheticException||void 0,i);return o.level=n,r&&r.event_id&&(o.event_id=r.event_id),pt(o)}(this._options.stackParser,e,t,n,this._options.attachStacktrace)}captureUserFeedback(e){if(!this._isEnabled())return void(br&&le.warn(\"SDK not enabled, will not capture user feedback.\"));const t=function(e,{metadata:t,tunnel:n,dsn:r}){const i={event_id:e.event_id,sent_at:(new Date).toISOString(),...t&&t.sdk&&{sdk:{name:t.sdk.name,version:t.sdk.version}},...!!n&&!!r&&{dsn:Yt(r)}},o=function(e){return[{type:\"user_report\"},e]}(e);return rn(i,[o])}(e,{metadata:this.getSdkMetadata(),dsn:this.getDsn(),tunnel:this.getOptions().tunnel});this.sendEnvelope(t)}_prepareEvent(e,t,n){return e.platform=e.platform||\"javascript\",super._prepareEvent(e,t,n)}}const Ir=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,xr=re;let Lr,Dr,Nr,Rr;function Fr(){if(!xr.document)return;const e=we.bind(null,\"dom\"),t=Br(e,!0);xr.document.addEventListener(\"click\",t,!1),xr.document.addEventListener(\"keypress\",t,!1),[\"EventTarget\",\"Node\"].forEach((t=>{const n=xr[t],r=n&&n.prototype;r&&r.hasOwnProperty&&r.hasOwnProperty(\"addEventListener\")&&(Ge(r,\"addEventListener\",(function(t){return function(n,r,i){if(\"click\"===n||\"keypress\"==n)try{const r=this.__sentry_instrumentation_handlers__=this.__sentry_instrumentation_handlers__||{},o=r[n]=r[n]||{refCount:0};if(!o.handler){const r=Br(e);o.handler=r,t.call(this,n,r,i)}o.refCount++}catch(e){}return t.call(this,n,r,i)}})),Ge(r,\"removeEventListener\",(function(e){return function(t,n,r){if(\"click\"===t||\"keypress\"==t)try{const n=this.__sentry_instrumentation_handlers__||{},i=n[t];i&&(i.refCount--,i.refCount<=0&&(e.call(this,t,i.handler,r),i.handler=void 0,delete n[t]),0===Object.keys(n).length&&delete this.__sentry_instrumentation_handlers__)}catch(e){}return e.call(this,t,n,r)}})))}))}function Br(e,t=!1){return n=>{if(!n||n._sentryCaptured)return;const r=function(e){try{return e.target}catch(e){return null}}(n);if(function(e,t){return\"keypress\"===e&&(!t||!t.tagName||\"INPUT\"!==t.tagName&&\"TEXTAREA\"!==t.tagName&&!t.isContentEditable)}(n.type,r))return;Qe(n,\"_sentryCaptured\",!0),r&&!r._sentryId&&Qe(r,\"_sentryId\",ot());const i=\"keypress\"===n.type?\"input\":n.type;if(!function(e){if(e.type!==Dr)return!1;try{if(!e.target||e.target._sentryId!==Nr)return!1}catch(e){}return!0}(n)){e({event:n,name:i,global:t}),Dr=n.type,Nr=r?r._sentryId:void 0}clearTimeout(Lr),Lr=xr.setTimeout((()=>{Nr=void 0,Dr=void 0}),1e3)}}function Ur(e){const t=\"history\";be(t,e),_e(t,Vr)}function Vr(){if(!function(){const e=fr.chrome,t=e&&e.app&&e.app.runtime,n=\"history\"in fr&&!!fr.history.pushState&&!!fr.history.replaceState;return!t&&n}())return;const e=xr.onpopstate;function t(e){return function(...t){const n=t.length>2?t[2]:void 0;if(n){const e=Rr,t=String(n);Rr=t;we(\"history\",{from:e,to:t})}return e.apply(this,t)}}xr.onpopstate=function(...t){const n=xr.location.href,r=Rr;Rr=n;if(we(\"history\",{from:r,to:n}),e)try{return e.apply(this,t)}catch(e){}},Ge(xr.history,\"pushState\",t),Ge(xr.history,\"replaceState\",t)}const Jr={};function $r(e){Jr[e]=void 0}const qr=\"__sentry_xhr_v3__\";function zr(){if(!xr.XMLHttpRequest)return;const e=XMLHttpRequest.prototype;e.open=new Proxy(e.open,{apply(e,t,n){const r=new Error,i=1e3*it(),o=xe(n[0])?n[0].toUpperCase():void 0,s=function(e){if(xe(e))return e;try{return e.toString()}catch(e){}return}(n[1]);if(!o||!s)return e.apply(t,n);t[qr]={method:o,url:s,request_headers:{}},\"POST\"===o&&s.match(/sentry_key/)&&(t.__sentry_own_request__=!0);const a=()=>{const e=t[qr];if(e&&4===t.readyState){try{e.status_code=t.status}catch(e){}we(\"xhr\",{endTimestamp:1e3*it(),startTimestamp:i,xhr:t,virtualError:r})}};return\"onreadystatechange\"in t&&\"function\"==typeof t.onreadystatechange?t.onreadystatechange=new Proxy(t.onreadystatechange,{apply:(e,t,n)=>(a(),e.apply(t,n))}):t.addEventListener(\"readystatechange\",a),t.setRequestHeader=new Proxy(t.setRequestHeader,{apply(e,t,n){const[r,i]=n,o=t[qr];return o&&xe(r)&&xe(i)&&(o.request_headers[r.toLowerCase()]=i),e.apply(t,n)}}),e.apply(t,n)}}),e.send=new Proxy(e.send,{apply(e,t,n){const r=t[qr];if(!r)return e.apply(t,n);void 0!==n[0]&&(r.body=n[0]);return we(\"xhr\",{startTimestamp:1e3*it(),xhr:t}),e.apply(t,n)}})}function Wr(e,t=function(e){const t=Jr[e];if(t)return t;let n=xr[e];if(lr(n))return Jr[e]=n.bind(xr);const r=xr.document;if(r&&\"function\"==typeof r.createElement)try{const t=r.createElement(\"iframe\");t.hidden=!0,r.head.appendChild(t);const i=t.contentWindow;i&&i[e]&&(n=i[e]),r.head.removeChild(t)}catch(t){Ir&&le.warn(`Could not create sandbox iframe for ${e} check, bailing to window.${e}: `,t)}return n?Jr[e]=n.bind(xr):n}(\"fetch\")){let n=0,r=0;return Un(e,(function(i){const o=i.body.length;n+=o,r++;const s={body:i.body,method:\"POST\",referrerPolicy:\"origin\",headers:e.headers,keepalive:n<=6e4&&r<15,...e.fetchOptions};if(!t)return $r(\"fetch\"),ht(\"No fetch implementation available\");try{return t(e.url,s).then((e=>(n-=o,r--,{statusCode:e.status,headers:{\"x-sentry-rate-limits\":e.headers.get(\"X-Sentry-Rate-Limits\"),\"retry-after\":e.headers.get(\"Retry-After\")}})))}catch(e){return $r(\"fetch\"),n-=o,r--,ht(e)}}))}function Hr(e,t,n,r){const i={filename:e,function:\"<anonymous>\"===t?ue:t,in_app:!0};return void 0!==n&&(i.lineno=n),void 0!==r&&(i.colno=r),i}const Gr=/^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i,Qr=/^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,Kr=/\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,Yr=/^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i,Xr=/(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,Zr=function(...e){const t=e.sort(((e,t)=>e[0]-t[0])).map((e=>e[1]));return(e,n=0,r=0)=>{const i=[],o=e.split(\"\\n\");for(let e=n;e<o.length;e++){const n=o[e];if(n.length>1024)continue;const s=de.test(n)?n.replace(de,\"$1\"):n;if(!s.match(/\\S*Error: /)){for(const e of t){const t=e(s);if(t){i.push(t);break}}if(i.length>=50+r)break}}return function(e){if(!e.length)return[];const t=Array.from(e);/sentryWrapped/.test(he(t).function||\"\")&&t.pop();t.reverse(),pe.test(he(t).function||\"\")&&(t.pop(),pe.test(he(t).function||\"\")&&t.pop());return t.slice(0,50).map((e=>({...e,filename:e.filename||he(t).filename,function:e.function||ue})))}(i.slice(r))}}(...[[30,e=>{const t=Gr.exec(e);if(t){const[,e,n,r]=t;return Hr(e,ue,+n,+r)}const n=Qr.exec(e);if(n){if(n[2]&&0===n[2].indexOf(\"eval\")){const e=Kr.exec(n[2]);e&&(n[2]=e[1],n[3]=e[2],n[4]=e[3])}const[e,t]=ei(n[1]||ue,n[2]);return Hr(t,e,n[3]?+n[3]:void 0,n[4]?+n[4]:void 0)}}],[50,e=>{const t=Yr.exec(e);if(t){if(t[3]&&t[3].indexOf(\" > eval\")>-1){const e=Xr.exec(t[3]);e&&(t[1]=t[1]||\"eval\",t[3]=e[1],t[4]=e[2],t[5]=\"\")}let e=t[3],n=t[1]||ue;return[n,e]=ei(n,e),Hr(e,n,t[4]?+t[4]:void 0,t[5]?+t[5]:void 0)}}]]),ei=(e,t)=>{const n=-1!==e.indexOf(\"safari-extension\"),r=-1!==e.indexOf(\"safari-web-extension\");return n||r?[-1!==e.indexOf(\"@\")?e.split(\"@\")[0]:ue,n?`safari-extension:${t}`:`safari-web-extension:${t}`]:[e,t]},ti=1024,ni=(e={})=>{const t={console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0,...e};return{name:\"Breadcrumbs\",setup(e){var n;t.console&&function(e){const t=\"console\";be(t,e),_e(t,tr)}(function(e){return function(t){if(xt()!==e)return;const n={category:\"console\",data:{arguments:t.args,logger:\"console\"},level:nr(t.level),message:ze(t.args,\" \")};if(\"assert\"===t.level){if(!1!==t.args[0])return;n.message=`Assertion failed: ${ze(t.args.slice(1),\" \")||\"console.assert\"}`,n.data.arguments=t.args.slice(1)}$n(n,{input:t.args,level:t.level})}}(e)),t.dom&&(n=function(e,t){return function(n){if(xt()!==e)return;let r,i,o=\"object\"==typeof t?t.serializeAttribute:void 0,s=\"object\"==typeof t&&\"number\"==typeof t.maxStringLength?t.maxStringLength:void 0;s&&s>ti&&(br&&le.warn(`\\`dom.maxStringLength\\` cannot exceed 1024, but a value of ${s} was configured. Sentry will use 1024 instead.`),s=ti),\"string\"==typeof o&&(o=[o]);try{const e=n.event,t=function(e){return!!e&&!!e.target}(e)?e.target:e;r=Je(t,{keyAttrs:o,maxStringLength:s}),i=function(e){if(!Ve.HTMLElement)return null;let t=e;for(let e=0;e<5;e++){if(!t)return null;if(t instanceof HTMLElement){if(t.dataset.sentryComponent)return t.dataset.sentryComponent;if(t.dataset.sentryElement)return t.dataset.sentryElement}t=t.parentNode}return null}(t)}catch(e){r=\"<unknown>\"}if(0===r.length)return;const a={category:`ui.${n.name}`,message:r};i&&(a.data={\"ui.component_name\":i}),$n(a,{event:n.event,name:n.name,global:n.global})}}(e,t.dom),be(\"dom\",n),_e(\"dom\",Fr)),t.xhr&&function(e){be(\"xhr\",e),_e(\"xhr\",zr)}(function(e){return function(t){if(xt()!==e)return;const{startTimestamp:n,endTimestamp:r}=t,i=t.xhr[qr];if(!n||!r||!i)return;const{method:o,url:s,status_code:a,body:c}=i,l={method:o,url:s,status_code:a},u={xhr:t.xhr,input:c,startTimestamp:n,endTimestamp:r};$n({category:\"xhr\",data:l,type:\"http\",level:ar(a)},u)}}(e)),t.fetch&&dr(function(e){return function(t){if(xt()!==e)return;const{startTimestamp:n,endTimestamp:r}=t;if(r&&(!t.fetchData.url.match(/sentry_key/)||\"POST\"!==t.fetchData.method))if(t.error){$n({category:\"fetch\",data:t.fetchData,level:\"error\",type:\"http\"},{data:t.error,input:t.args,startTimestamp:n,endTimestamp:r})}else{const e=t.response,i={...t.fetchData,status_code:e&&e.status},o={input:t.args,response:e,startTimestamp:n,endTimestamp:r};$n({category:\"fetch\",data:i,type:\"http\",level:ar(i.status_code)},o)}}}(e)),t.history&&Ur(function(e){return function(t){if(xt()!==e)return;let n=t.from,r=t.to;const i=er(vr.location.href);let o=n?er(n):void 0;const s=er(r);o&&o.path||(o=i),i.protocol===s.protocol&&i.host===s.host&&(r=s.relative),i.protocol===o.protocol&&i.host===o.host&&(n=o.relative),$n({category:\"navigation\",data:{from:n,to:r}})}}(e)),t.sentry&&e.on(\"beforeSendEvent\",function(e){return function(t){xt()===e&&$n({category:\"sentry.\"+(\"transaction\"===t.type?\"transaction\":\"event\"),event_id:t.event_id,level:t.level,message:at(t)},{event:t})}}(e))}}};const ri=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"BroadcastChannel\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"SharedWorker\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"],ii=(e={})=>{const t={XMLHttpRequest:!0,eventTarget:!0,requestAnimationFrame:!0,setInterval:!0,setTimeout:!0,...e};return{name:\"BrowserApiErrors\",setupOnce(){t.setTimeout&&Ge(vr,\"setTimeout\",oi),t.setInterval&&Ge(vr,\"setInterval\",oi),t.requestAnimationFrame&&Ge(vr,\"requestAnimationFrame\",si),t.XMLHttpRequest&&\"XMLHttpRequest\"in vr&&Ge(XMLHttpRequest.prototype,\"send\",ai);const e=t.eventTarget;if(e){(Array.isArray(e)?e:ri).forEach(ci)}}}};function oi(e){return function(...t){const n=t[0];return t[0]=yr(n,{mechanism:{data:{function:ve(e)},handled:!1,type:\"instrument\"}}),e.apply(this,t)}}function si(e){return function(t){return e.apply(this,[yr(t,{mechanism:{data:{function:\"requestAnimationFrame\",handler:ve(e)},handled:!1,type:\"instrument\"}})])}}function ai(e){return function(...t){const n=this;return[\"onload\",\"onerror\",\"onprogress\",\"onreadystatechange\"].forEach((e=>{e in n&&\"function\"==typeof n[e]&&Ge(n,e,(function(t){const n={mechanism:{data:{function:e,handler:ve(t)},handled:!1,type:\"instrument\"}},r=Ye(t);return r&&(n.mechanism.data.handler=ve(r)),yr(t,n)}))})),e.apply(this,t)}}function ci(e){const t=vr[e],n=t&&t.prototype;n&&n.hasOwnProperty&&n.hasOwnProperty(\"addEventListener\")&&(Ge(n,\"addEventListener\",(function(t){return function(n,r,i){try{\"function\"==typeof r.handleEvent&&(r.handleEvent=yr(r.handleEvent,{mechanism:{data:{function:\"handleEvent\",handler:ve(r),target:e},handled:!1,type:\"instrument\"}}))}catch(e){}return t.apply(this,[n,yr(r,{mechanism:{data:{function:\"addEventListener\",handler:ve(r),target:e},handled:!1,type:\"instrument\"}}),i])}})),Ge(n,\"removeEventListener\",(function(e){return function(t,n,r){try{const i=n.__sentry_wrapped__;i&&e.call(this,t,i,r)}catch(e){}return e.call(this,t,n,r)}})))}const li=()=>({name:\"BrowserSession\",setupOnce(){void 0!==vr.document?(Cn({ignoreDuration:!0}),On(),Ur((({from:e,to:t})=>{void 0!==e&&e!==t&&(Cn({ignoreDuration:!0}),On())}))):br&&le.warn(\"Using the `browserSessionIntegration` in non-browser environments is not supported.\")}}),ui=(e={})=>{const t={onerror:!0,onunhandledrejection:!0,...e};return{name:\"GlobalHandlers\",setupOnce(){Error.stackTraceLimit=50},setup(e){t.onerror&&(!function(e){!function(e){const t=\"error\";be(t,e),_e(t,ke)}((t=>{const{stackParser:n,attachStacktrace:r}=pi();if(xt()!==e||mr())return;const{msg:i,url:o,line:s,column:a,error:c}=t,l=function(e,t,n,r){const i=e.exception=e.exception||{},o=i.values=i.values||[],s=o[0]=o[0]||{},a=s.stacktrace=s.stacktrace||{},c=a.frames=a.frames||[],l=r,u=n,d=xe(t)&&t.length>0?t:function(){try{return Ve.document.location.href}catch(e){return\"\"}}();0===c.length&&c.push({colno:l,filename:d,function:ue,in_app:!0,lineno:u});return e}(Or(n,c||i,void 0,r,!1),o,s,a);l.level=\"error\",Mn(l,{originalException:c,mechanism:{handled:!1,type:\"onerror\"}})}))}(e),di(\"onerror\")),t.onunhandledrejection&&(!function(e){!function(e){const t=\"unhandledrejection\";be(t,e),_e(t,Ce)}((t=>{const{stackParser:n,attachStacktrace:r}=pi();if(xt()!==e||mr())return;const i=function(e){if(De(e))return e;try{if(\"reason\"in e)return e.reason;if(\"detail\"in e&&\"reason\"in e.detail)return e.detail.reason}catch(e){}return e}(t),o=De(i)?{exception:{values:[{type:\"UnhandledRejection\",value:`Non-Error promise rejection captured with value: ${String(i)}`}]}}:Or(n,i,void 0,r,!0);o.level=\"error\",Mn(o,{originalException:i,mechanism:{handled:!1,type:\"onunhandledrejection\"}})}))}(e),di(\"onunhandledrejection\"))}}};function di(e){br&&le.log(`Global Handler attached: ${e}`)}function pi(){const e=xt();return e&&e.getOptions()||{stackParser:()=>[],attachStacktrace:!1}}const hi=()=>({name:\"HttpContext\",preprocessEvent(e){if(!vr.navigator&&!vr.location&&!vr.document)return;const t=e.request&&e.request.url||vr.location&&vr.location.href,{referrer:n}=vr.document||{},{userAgent:r}=vr.navigator||{},i={...e.request&&e.request.headers,...n&&{Referer:n},...r&&{\"User-Agent\":r}},o={...e.request,...t&&{url:t},headers:i};e.request=o}}),fi=(e={})=>{const t=e.limit||5,n=e.key||\"cause\";return{name:\"LinkedErrors\",preprocessEvent(e,r,i){const o=i.getOptions();Kn(_r,o.stackParser,o.maxValueLength,n,t,e,r)}}};var vi=\"new\",gi=\"loading\",mi=\"loaded\",yi=\"joining-meeting\",bi=\"joined-meeting\",_i=\"left-meeting\",wi=\"error\",Si=\"blocked\",ki=\"off\",Mi=\"sendable\",Ci=\"loading\",Ei=\"interrupted\",Ti=\"playable\",Oi=\"unknown\",Pi=\"full\",Ai=\"lobby\",ji=\"none\",Ii=\"base\",xi=\"*\",Li=\"ejected\",Di=\"nbf-room\",Ni=\"nbf-token\",Ri=\"exp-room\",Fi=\"exp-token\",Bi=\"no-room\",Ui=\"meeting-full\",Vi=\"end-of-life\",Ji=\"not-allowed\",$i=\"connection-error\",qi=\"cam-in-use\",zi=\"mic-in-use\",Wi=\"cam-mic-in-use\",Hi=\"permissions\",Gi=\"undefined-mediadevices\",Qi=\"not-found\",Ki=\"constraints\",Yi=\"unknown\",Xi=\"iframe-ready-for-launch-config\",Zi=\"iframe-launch-config\",eo=\"theme-updated\",to=\"loading\",no=\"load-attempt-failed\",ro=\"loaded\",io=\"started-camera\",oo=\"camera-error\",so=\"joining-meeting\",ao=\"joined-meeting\",co=\"left-meeting\",lo=\"participant-joined\",uo=\"participant-updated\",po=\"participant-left\",ho=\"participant-counts-updated\",fo=\"access-state-updated\",vo=\"meeting-session-summary-updated\",go=\"meeting-session-state-updated\",mo=\"meeting-session-data-error\",yo=\"waiting-participant-added\",bo=\"waiting-participant-updated\",_o=\"waiting-participant-removed\",wo=\"track-started\",So=\"track-stopped\",ko=\"transcription-started\",Mo=\"transcription-stopped\",Co=\"transcription-error\",Eo=\"recording-started\",To=\"recording-stopped\",Oo=\"recording-stats\",Po=\"recording-error\",Ao=\"recording-upload-completed\",jo=\"recording-data\",Io=\"app-message\",xo=\"transcription-message\",Lo=\"remote-media-player-started\",Do=\"remote-media-player-updated\",No=\"remote-media-player-stopped\",Ro=\"local-screen-share-started\",Fo=\"local-screen-share-stopped\",Bo=\"local-screen-share-canceled\",Uo=\"active-speaker-change\",Vo=\"active-speaker-mode-change\",Jo=\"network-quality-change\",$o=\"network-connection\",qo=\"cpu-load-change\",zo=\"face-counts-updated\",Wo=\"fullscreen\",Ho=\"exited-fullscreen\",Go=\"live-streaming-started\",Qo=\"live-streaming-updated\",Ko=\"live-streaming-stopped\",Yo=\"live-streaming-error\",Xo=\"lang-updated\",Zo=\"receive-settings-updated\",es=\"input-settings-updated\",ts=\"nonfatal-error\",ns=\"error\",rs=4096,is=102400,os=\"iframe-call-message\",ss=\"local-screen-start\",as=\"daily-method-update-live-streaming-endpoints\",cs=\"transmit-log\",ls=\"daily-custom-track\",us={NONE:\"none\",BGBLUR:\"background-blur\",BGIMAGE:\"background-image\",FACE_DETECTION:\"face-detection\"},ds={NONE:\"none\",NOISE_CANCELLATION:\"noise-cancellation\"},ps={PLAY:\"play\",PAUSE:\"pause\"},hs=[\"jpg\",\"png\",\"jpeg\"],fs=\"add-endpoints\",vs=\"remove-endpoints\",gs=\"sip-call-transfer\";function ms(){return!ys()&&\"undefined\"!=typeof window&&window.navigator&&window.navigator.userAgent?window.navigator.userAgent:\"\"}function ys(){return\"undefined\"!=typeof navigator&&navigator.product&&\"ReactNative\"===navigator.product}function bs(){return navigator&&navigator.mediaDevices&&navigator.mediaDevices.getUserMedia}function _s(){return!!(navigator&&navigator.mediaDevices&&navigator.mediaDevices.getDisplayMedia)&&(function(e,t){if(!e||!t)return!0;switch(e){case\"Chrome\":return t.major>=75;case\"Safari\":return RTCRtpTransceiver.prototype.hasOwnProperty(\"currentDirection\")&&!(13===t.major&&0===t.minor&&0===t.point);case\"Firefox\":return t.major>=67}return!0}(Os(),Ps())||ys())}function ws(){if(ys())return!1;if(!document)return!1;var e=document.createElement(\"iframe\");return!!e.requestFullscreen||!!e.webkitRequestFullscreen}var Ss=function(){try{var e=document.createElement(\"canvas\"),t=null!=(navigator.webdriver?e.getContext(\"webgl2\"):e.getContext(\"webgl2\",{failIfMajorPerformanceCaveat:!0}));return e.remove(),t}catch(e){return!1}}();function ks(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return!ys()&&(!!Ss&&(e?function(){if(Ts())return!1;return[\"Chrome\",\"Firefox\"].includes(Os())}():function(){if(Ts())return!1;var e=Os();if(\"Safari\"===e){var t=xs();if(t.major<15||15===t.major&&t.minor<4)return!1}if(\"Chrome\"===e){return As().major>=77}if(\"Firefox\"===e){return Ls().major>=97}return[\"Chrome\",\"Firefox\",\"Safari\"].includes(e)}()))}function Ms(){if(ys())return!1;if(Es())return!1;if(\"undefined\"==typeof AudioWorkletNode)return!1;switch(Os()){case\"Chrome\":case\"Firefox\":return!0;case\"Safari\":var e=Ps();return e.major>17||17===e.major&&e.minor>=4}return!1}function Cs(){return bs()&&!function(){var e,t=Os();if(!ms())return!0;switch(t){case\"Chrome\":return(e=As()).major&&e.major>0&&e.major<75;case\"Firefox\":return(e=Ls()).major<91;case\"Safari\":return(e=xs()).major<13||13===e.major&&e.minor<1;default:return!0}}()}function Es(){return ms().match(/Linux; Android/)}function Ts(){var e,t=ms(),n=t.match(/Mac/)&&(!ys()&&\"undefined\"!=typeof window&&null!==(e=window)&&void 0!==e&&null!==(e=e.navigator)&&void 0!==e&&e.maxTouchPoints?window.navigator.maxTouchPoints:0)>=5;return!!(t.match(/Mobi/)||t.match(/Android/)||n)||(!!ms().match(/DailyAnd\\//)||void 0)}function Os(){if(\"undefined\"!=typeof window){var e=ms();return js()?\"Safari\":e.indexOf(\"Edge\")>-1?\"Edge\":e.match(/Chrome\\//)?\"Chrome\":e.indexOf(\"Safari\")>-1||Is()?\"Safari\":e.indexOf(\"Firefox\")>-1?\"Firefox\":e.indexOf(\"MSIE\")>-1||e.indexOf(\".NET\")>-1?\"IE\":\"Unknown Browser\"}}function Ps(){switch(Os()){case\"Chrome\":return As();case\"Safari\":return xs();case\"Firefox\":return Ls();case\"Edge\":return function(){var e=0,t=0;if(\"undefined\"!=typeof window){var n=ms().match(/Edge\\/(\\d+).(\\d+)/);if(n)try{e=parseInt(n[1]),t=parseInt(n[2])}catch(e){}}return{major:e,minor:t}}()}}function As(){var e=0,t=0,n=0,r=0,i=!1;if(\"undefined\"!=typeof window){var o=ms(),s=o.match(/Chrome\\/(\\d+).(\\d+).(\\d+).(\\d+)/);if(s)try{e=parseInt(s[1]),t=parseInt(s[2]),n=parseInt(s[3]),r=parseInt(s[4]),i=o.indexOf(\"OPR/\")>-1}catch(e){}}return{major:e,minor:t,build:n,patch:r,opera:i}}function js(){return!!ms().match(/iPad|iPhone|iPod/i)&&bs()}function Is(){return ms().indexOf(\"AppleWebKit/605.1.15\")>-1}function xs(){var e=0,t=0,n=0;if(\"undefined\"!=typeof window){var r=ms().match(/Version\\/(\\d+).(\\d+)(.(\\d+))?/);if(r)try{e=parseInt(r[1]),t=parseInt(r[2]),n=parseInt(r[4])}catch(e){}else(js()||Is())&&(e=14,t=0,n=3)}return{major:e,minor:t,point:n}}function Ls(){var e=0,t=0;if(\"undefined\"!=typeof window){var n=ms().match(/Firefox\\/(\\d+).(\\d+)/);if(n)try{e=parseInt(n[1]),t=parseInt(n[2])}catch(e){}}return{major:e,minor:t}}var Ds=function(){return o((function e(){t(this,e)}),[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){Y()}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){Y()}},{key:\"sendMessageToCallMachine\",value:function(e,t,n,r){Y()}},{key:\"sendMessageToDailyJs\",value:function(e,t){Y()}},{key:\"removeListener\",value:function(e){Y()}}])}();function Ns(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Rs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ns(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ns(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Fs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Fs=function(){return!!e})()}var Bs=function(){function e(){var n,r,i,o;return t(this,e),r=this,i=a(i=e),(n=s(r,Fs()?Reflect.construct(i,o||[],a(r).constructor):i.apply(r,o)))._wrappedListeners={},n._messageCallbacks={},n}return l(e,Ds),o(e,[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){var r=this,i=function(i){if(i.data&&\"iframe-call-message\"===i.data.what&&(!i.data.callClientId||i.data.callClientId===t)&&(!i.data.from||\"module\"!==i.data.from)){var o=Rs({},i.data);if(delete o.from,o.callbackStamp&&r._messageCallbacks[o.callbackStamp]){var s=o.callbackStamp;r._messageCallbacks[s].call(n,o),delete r._messageCallbacks[s]}delete o.what,delete o.callbackStamp,e.call(n,o)}};this._wrappedListeners[e]=i,window.addEventListener(\"message\",i)}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){var r=function(r){var i;if(!(!r.data||r.data.what!==os||!r.data.action||r.data.from&&\"module\"!==r.data.from||r.data.callClientId&&t&&r.data.callClientId!==t||null!=r&&null!==(i=r.data)&&void 0!==i&&i.callFrameId)){var o=r.data;e.call(n,o)}};this._wrappedListeners[e]=r,window.addEventListener(\"message\",r)}},{key:\"sendMessageToCallMachine\",value:function(e,t,n,r){if(!n)throw new Error(\"undefined callClientId. Are you trying to use a DailyCall instance previously destroyed?\");var i=Rs({},e);if(i.what=os,i.from=\"module\",i.callClientId=n,t){var o=K();this._messageCallbacks[o]=t,i.callbackStamp=o}var s=r?r.contentWindow:window,a=this._callMachineTargetOrigin(r);a&&s.postMessage(i,a)}},{key:\"sendMessageToDailyJs\",value:function(e,t){e.what=os,e.callClientId=t,e.from=\"embedded\",window.postMessage(e,this._targetOriginFromWindowLocation())}},{key:\"removeListener\",value:function(e){var t=this._wrappedListeners[e];t&&(window.removeEventListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"forwardPackagedMessageToCallMachine\",value:function(e,t,n){var r=Rs({},e);r.callClientId=n;var i=t?t.contentWindow:window,o=this._callMachineTargetOrigin(t);o&&i.postMessage(r,o)}},{key:\"addListenerForPackagedMessagesFromCallMachine\",value:function(e,t){var n=function(n){if(n.data&&\"iframe-call-message\"===n.data.what&&(!n.data.callClientId||n.data.callClientId===t)&&(!n.data.from||\"module\"!==n.data.from)){var r=n.data;e(r)}};return this._wrappedListeners[e]=n,window.addEventListener(\"message\",n),e}},{key:\"removeListenerForPackagedMessagesFromCallMachine\",value:function(e){var t=this._wrappedListeners[e];t&&(window.removeEventListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"_callMachineTargetOrigin\",value:function(e){return e?e.src?new URL(e.src).origin:void 0:this._targetOriginFromWindowLocation()}},{key:\"_targetOriginFromWindowLocation\",value:function(){return\"file:\"===window.location.protocol?\"*\":window.location.origin}}])}();function Us(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Vs=function(){return!!e})()}var Js=function(){function e(){var n,r,i,o;return t(this,e),r=this,i=a(i=e),n=s(r,Vs()?Reflect.construct(i,o||[],a(r).constructor):i.apply(r,o)),global.callMachineToDailyJsEmitter=global.callMachineToDailyJsEmitter||new I.EventEmitter,global.dailyJsToCallMachineEmitter=global.dailyJsToCallMachineEmitter||new I.EventEmitter,n._wrappedListeners={},n._messageCallbacks={},n}return l(e,Ds),o(e,[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){this._addListener(e,global.callMachineToDailyJsEmitter,t,n,\"received call machine message\")}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){this._addListener(e,global.dailyJsToCallMachineEmitter,t,n,\"received daily-js message\")}},{key:\"sendMessageToCallMachine\",value:function(e,t,n){this._sendMessage(e,global.dailyJsToCallMachineEmitter,n,t,\"sending message to call machine\")}},{key:\"sendMessageToDailyJs\",value:function(e,t){this._sendMessage(e,global.callMachineToDailyJsEmitter,t,null,\"sending message to daily-js\")}},{key:\"removeListener\",value:function(e){var t=this._wrappedListeners[e];t&&(global.callMachineToDailyJsEmitter.removeListener(\"message\",t),global.dailyJsToCallMachineEmitter.removeListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"_addListener\",value:function(e,t,n,r,i){var o=this,s=function(t){if(t.callClientId===n){if(t.callbackStamp&&o._messageCallbacks[t.callbackStamp]){var i=t.callbackStamp;o._messageCallbacks[i].call(r,t),delete o._messageCallbacks[i]}e.call(r,t)}};this._wrappedListeners[e]=s,t.addListener(\"message\",s)}},{key:\"_sendMessage\",value:function(e,t,n,r,i){var o=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Us(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Us(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e);if(o.callClientId=n,r){var s=K();this._messageCallbacks[s]=r,o.callbackStamp=s}t.emit(\"message\",o)}}])}(),$s=\"replace\",qs=\"shallow-merge\",zs=[$s,qs];var Ws=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.data,i=n.mergeStrategy,o=void 0===i?$s:i;t(this,e),e._validateMergeStrategy(o),e._validateData(r,o),this.mergeStrategy=o,this.data=r}return o(e,[{key:\"isNoOp\",value:function(){return e.isNoOpUpdate(this.data,this.mergeStrategy)}}],[{key:\"isNoOpUpdate\",value:function(e,t){return 0===Object.keys(e).length&&t===qs}},{key:\"_validateMergeStrategy\",value:function(e){if(!zs.includes(e))throw Error(\"Unrecognized mergeStrategy provided. Options are: [\".concat(zs,\"]\"))}},{key:\"_validateData\",value:function(e,t){if(!function(e){if(null==e||\"object\"!==n(e))return!1;var t=Object.getPrototypeOf(e);return null==t||t===Object.prototype}(e))throw Error(\"Meeting session data must be a plain (map-like) object\");var r;try{if(r=JSON.stringify(e),t===$s){var i=JSON.parse(r);N(i,e)||console.warn(\"The meeting session data provided will be modified when serialized.\",i,e)}else if(t===qs)for(var o in e)if(Object.hasOwnProperty.call(e,o)&&void 0!==e[o]){var s=JSON.parse(JSON.stringify(e[o]));N(e[o],s)||console.warn(\"At least one key in the meeting session data provided will be modified when serialized.\",s,e[o])}}catch(e){throw Error(\"Meeting session data must be serializable to JSON: \".concat(e))}if(r.length>is)throw Error(\"Meeting session data is too large (\".concat(r.length,\" characters). Maximum size suppported is \").concat(is,\".\"))}}])}();function Hs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Hs=function(){return!!e})()}function Gs(e){var t=\"function\"==typeof Map?new Map:void 0;return Gs=function(e){if(null===e||!function(e){try{return-1!==Function.toString.call(e).indexOf(\"[native code]\")}catch(t){return\"function\"==typeof e}}(e))return e;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return function(e,t,n){if(Hs())return Reflect.construct.apply(null,arguments);var r=[null];r.push.apply(r,t);var i=new(e.bind.apply(e,r));return n&&c(i,n.prototype),i}(e,arguments,a(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),c(n,e)},Gs(e)}function Qs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Qs=function(){return!!e})()}function Ks(e){var t,n=null===(t=window._daily)||void 0===t?void 0:t.pendings;if(n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}var Ys=function(){return o((function e(n){t(this,e),this._currentLoad=null,this._callClientId=n}),[{key:\"load\",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0,i=arguments.length>2?arguments[2]:void 0;if(this.loaded)return window._daily.instances[this._callClientId].callMachine.reset(),void r(!0);e=this._callClientId,window._daily.pendings.push(e),this._currentLoad&&this._currentLoad.cancel(),this._currentLoad=new Xs(n,(function(){r(!1)}),(function(e,n){n||Ks(t._callClientId),i(e,n)})),this._currentLoad.start()}},{key:\"cancel\",value:function(){this._currentLoad&&this._currentLoad.cancel(),Ks(this._callClientId)}},{key:\"loaded\",get:function(){return this._currentLoad&&this._currentLoad.succeeded}}])}(),Xs=function(){return o((function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0,i=arguments.length>2?arguments[2]:void 0;t(this,e),this._attemptsRemaining=3,this._currentAttempt=null,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i}),[{key:\"start\",value:function(){var e=this;if(!this._currentAttempt){var t=function(n){e._currentAttempt.cancelled||(e._attemptsRemaining--,e._failureCallback(n,e._attemptsRemaining>0),e._attemptsRemaining<=0||setTimeout((function(){e._currentAttempt.cancelled||(e._currentAttempt=new ta(e._dailyConfig,e._successCallback,t),e._currentAttempt.start())}),3e3))};this._currentAttempt=new ta(this._dailyConfig,this._successCallback,t),this._currentAttempt.start()}}},{key:\"cancel\",value:function(){this._currentAttempt&&this._currentAttempt.cancel()}},{key:\"cancelled\",get:function(){return this._currentAttempt&&this._currentAttempt.cancelled}},{key:\"succeeded\",get:function(){return this._currentAttempt&&this._currentAttempt.succeeded}}])}(),Zs=function(){function e(){return t(this,e),n=this,i=arguments,r=a(r=e),s(n,Qs()?Reflect.construct(r,i||[],a(n).constructor):r.apply(n,i));var n,r,i}return l(e,Gs(Error)),o(e)}(),ea=2e4,ta=function(){return o((function e(n,r,i){t(this,e),this._loadAttemptImpl=ys()||!n.avoidEval?new na(n,r,i):new ra(n,r,i)}),[{key:\"start\",value:(e=p((function*(){return this._loadAttemptImpl.start()})),function(){return e.apply(this,arguments)})},{key:\"cancel\",value:function(){this._loadAttemptImpl.cancel()}},{key:\"cancelled\",get:function(){return this._loadAttemptImpl.cancelled}},{key:\"succeeded\",get:function(){return this._loadAttemptImpl.succeeded}}]);var e}(),na=function(){return o((function e(n,r,i){t(this,e),this.cancelled=!1,this.succeeded=!1,this._networkTimedOut=!1,this._networkTimeout=null,this._iosCache=\"undefined\"!=typeof iOSCallObjectBundleCache&&iOSCallObjectBundleCache,this._refetchHeaders=null,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i}),[{key:\"start\",value:(i=p((function*(){var e=Z(this._dailyConfig);!(yield this._tryLoadFromIOSCache(e))&&this._loadFromNetwork(e)})),function(){return i.apply(this,arguments)})},{key:\"cancel\",value:function(){clearTimeout(this._networkTimeout),this.cancelled=!0}},{key:\"_tryLoadFromIOSCache\",value:(r=p((function*(e){if(!this._iosCache)return!1;try{var t=yield this._iosCache.get(e);return!!this.cancelled||!!t&&(t.code?(Function('\"use strict\";'+t.code)(),this.succeeded=!0,this._successCallback(),!0):(this._refetchHeaders=t.refetchHeaders,!1))}catch(e){return!1}})),function(e){return r.apply(this,arguments)})},{key:\"_loadFromNetwork\",value:(n=p((function*(e){var t=this;this._networkTimeout=setTimeout((function(){t._networkTimedOut=!0,t._failureCallback({msg:\"Timed out (>\".concat(ea,\" ms) when loading call object bundle \").concat(e),type:\"timeout\"})}),ea);try{var n=this._refetchHeaders?{headers:this._refetchHeaders}:{},r=yield fetch(e,n);if(clearTimeout(this._networkTimeout),this.cancelled||this._networkTimedOut)throw new Zs;var i=yield this._getBundleCodeFromResponse(e,r);if(this.cancelled)throw new Zs;Function('\"use strict\";'+i)(),this._iosCache&&this._iosCache.set(e,i,r.headers),this.succeeded=!0,this._successCallback()}catch(t){if(clearTimeout(this._networkTimeout),t instanceof Zs||this.cancelled||this._networkTimedOut)return;this._failureCallback({msg:\"Failed to load call object bundle \".concat(e,\": \").concat(t),type:t.message})}})),function(e){return n.apply(this,arguments)})},{key:\"_getBundleCodeFromResponse\",value:(e=p((function*(e,t){if(t.ok)return yield t.text();if(this._iosCache&&304===t.status)return(yield this._iosCache.renew(e,t.headers)).code;throw new Error(\"Received \".concat(t.status,\" response\"))})),function(t,n){return e.apply(this,arguments)})}]);var e,n,r,i}(),ra=function(){return o((function e(n,r,i){t(this,e),this.cancelled=!1,this.succeeded=!1,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i,this._attemptId=K(),this._networkTimeout=null,this._scriptElement=null}),[{key:\"start\",value:function(){window._dailyCallMachineLoadWaitlist||(window._dailyCallMachineLoadWaitlist=new Set);var e=Z(this._dailyConfig);\"object\"===(\"undefined\"==typeof document?\"undefined\":n(document))?this._startLoading(e):this._failureCallback({msg:\"Call object bundle must be loaded in a DOM/web context\",type:\"missing context\"})}},{key:\"cancel\",value:function(){this._stopLoading(),this.cancelled=!0}},{key:\"_startLoading\",value:function(e){var t=this;this._signUpForCallMachineLoadWaitlist(),this._networkTimeout=setTimeout((function(){t._stopLoading(),t._failureCallback({msg:\"Timed out (>\".concat(ea,\" ms) when loading call object bundle \").concat(e),type:\"timeout\"})}),ea);var n=document.getElementsByTagName(\"head\")[0],r=document.createElement(\"script\");this._scriptElement=r,r.onload=function(){t._stopLoading(),t.succeeded=!0,t._successCallback()},r.onerror=function(e){t._stopLoading(),t._failureCallback({msg:\"Failed to load call object bundle \".concat(e.target.src),type:e.message})},r.src=e,n.appendChild(r)}},{key:\"_stopLoading\",value:function(){this._withdrawFromCallMachineLoadWaitlist(),clearTimeout(this._networkTimeout),this._scriptElement&&(this._scriptElement.onload=null,this._scriptElement.onerror=null)}},{key:\"_signUpForCallMachineLoadWaitlist\",value:function(){window._dailyCallMachineLoadWaitlist.add(this._attemptId)}},{key:\"_withdrawFromCallMachineLoadWaitlist\",value:function(){window._dailyCallMachineLoadWaitlist.delete(this._attemptId)}}])}(),ia=function(e,t,n){return!0===aa(e.local,t,n)},oa=function(e,t,n){return e.local.streams&&e.local.streams[t]&&e.local.streams[t].stream&&e.local.streams[t].stream[\"get\".concat(\"video\"===n?\"Video\":\"Audio\",\"Tracks\")]()[0]},sa=function(e,t,n,r){var i=ca(e,t,n,r);return i&&i.pendingTrack},aa=function(e,t,n){if(!e)return!1;var r=function(e){switch(e){case\"avatar\":return!0;case\"staged\":return e;default:return!!e}},i=e.public.subscribedTracks;return i&&i[t]?-1===[\"cam-audio\",\"cam-video\",\"screen-video\",\"screen-audio\",\"rmpAudio\",\"rmpVideo\"].indexOf(n)&&i[t].custom?[!0,\"staged\"].includes(i[t].custom)?r(i[t].custom):r(i[t].custom[n]):r(i[t][n]):!i||r(i.ALL)},ca=function(e,t,n,r){var i=Object.values(e.streams||{}).filter((function(e){return e.participantId===t&&e.type===n&&e.pendingTrack&&e.pendingTrack.kind===r})).sort((function(e,t){return new Date(t.starttime)-new Date(e.starttime)}));return i&&i[0]},la=function(e,t){var n=e.local.public.customTracks;if(n&&n[t])return n[t].track};function ua(e,t){for(var n=t.getState(),r=0,i=[\"cam\",\"screen\"];r<i.length;r++)for(var o=i[r],s=0,a=[\"video\",\"audio\"];s<a.length;s++){var c=a[s],l=\"cam\"===o?c:\"screen\".concat(c.charAt(0).toUpperCase()+c.slice(1)),u=e.tracks[l];if(u){var d=e.local?oa(n,o,c):sa(n,e.session_id,o,c);\"playable\"===u.state&&(u.track=d),u.persistentTrack=d}}}function da(e,t){try{var n=t.getState();for(var r in e.tracks)if(!pa(r)){var i=e.tracks[r].kind;if(i){var o=e.tracks[r];if(o){var s=e.local?la(n,r):sa(n,e.session_id,r,i);\"playable\"===o.state&&(e.tracks[r].track=s),o.persistentTrack=s}}else console.error(\"unknown type for custom track\")}}catch(e){console.error(e)}}function pa(e){return[\"video\",\"audio\",\"screenVideo\",\"screenAudio\"].includes(e)}function ha(e,t,n){var r=n.getState();if(e.local){if(e.audio)try{e.audioTrack=r.local.streams.cam.stream.getAudioTracks()[0],e.audioTrack||(e.audio=!1)}catch(e){}if(e.video)try{e.videoTrack=r.local.streams.cam.stream.getVideoTracks()[0],e.videoTrack||(e.video=!1)}catch(e){}if(e.screen)try{e.screenVideoTrack=r.local.streams.screen.stream.getVideoTracks()[0],e.screenAudioTrack=r.local.streams.screen.stream.getAudioTracks()[0],e.screenVideoTrack||e.screenAudioTrack||(e.screen=!1)}catch(e){}}else{var i=!0;try{var o=r.participants[e.session_id];o&&o.public&&o.public.rtcType&&\"peer-to-peer\"===o.public.rtcType.impl&&o.private&&![\"connected\",\"completed\"].includes(o.private.peeringState)&&(i=!1)}catch(e){console.error(e)}if(!i)return e.audio=!1,e.audioTrack=!1,e.video=!1,e.videoTrack=!1,e.screen=!1,void(e.screenTrack=!1);try{r.streams;if(e.audio&&ia(r,e.session_id,\"cam-audio\")){var s=sa(r,e.session_id,\"cam\",\"audio\");s&&(t&&t.audioTrack&&t.audioTrack.id===s.id?e.audioTrack=s:s.muted||(e.audioTrack=s)),e.audioTrack||(e.audio=!1)}if(e.video&&ia(r,e.session_id,\"cam-video\")){var a=sa(r,e.session_id,\"cam\",\"video\");a&&(t&&t.videoTrack&&t.videoTrack.id===a.id?e.videoTrack=a:a.muted||(e.videoTrack=a)),e.videoTrack||(e.video=!1)}if(e.screen&&ia(r,e.session_id,\"screen-audio\")){var c=sa(r,e.session_id,\"screen\",\"audio\");c&&(t&&t.screenAudioTrack&&t.screenAudioTrack.id===c.id?e.screenAudioTrack=c:c.muted||(e.screenAudioTrack=c))}if(e.screen&&ia(r,e.session_id,\"screen-video\")){var l=sa(r,e.session_id,\"screen\",\"video\");l&&(t&&t.screenVideoTrack&&t.screenVideoTrack.id===l.id?e.screenVideoTrack=l:l.muted||(e.screenVideoTrack=l))}e.screenVideoTrack||e.screenAudioTrack||(e.screen=!1)}catch(e){console.error(\"unexpected error matching up tracks\",e)}}}function fa(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if(\"string\"==typeof e)return va(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?va(e,t):void 0}}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,s=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw o}}}}function va(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var ga=new Map,ma=null;function ya(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if(\"string\"==typeof e)return ba(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ba(e,t):void 0}}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,s=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw o}}}}function ba(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var _a=new Map,wa=null;function Sa(e){Ma()?function(e){ga.has(e)||(ga.set(e,{}),navigator.mediaDevices.enumerateDevices().then((function(t){ga.has(e)&&(ga.get(e).lastDevicesString=JSON.stringify(t),ma||(ma=function(){var e=p((function*(){var e,t=yield navigator.mediaDevices.enumerateDevices(),n=fa(ga.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value,i=JSON.stringify(t);i!==ga.get(r).lastDevicesString&&(ga.get(r).lastDevicesString=i,r(t))}}catch(e){n.e(e)}finally{n.f()}}));return function(){return e.apply(this,arguments)}}(),navigator.mediaDevices.addEventListener(\"devicechange\",ma)))})).catch((function(){})))}(e):function(e){_a.has(e)||(_a.set(e,{}),navigator.mediaDevices.enumerateDevices().then((function(t){_a.has(e)&&(_a.get(e).lastDevicesString=JSON.stringify(t),wa||(wa=setInterval(p((function*(){var e,t=yield navigator.mediaDevices.enumerateDevices(),n=ya(_a.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value,i=JSON.stringify(t);i!==_a.get(r).lastDevicesString&&(_a.get(r).lastDevicesString=i,r(t))}}catch(e){n.e(e)}finally{n.f()}})),3e3)))})))}(e)}function ka(e){Ma()?function(e){ga.has(e)&&(ga.delete(e),0===ga.size&&ma&&(navigator.mediaDevices.removeEventListener(\"devicechange\",ma),ma=null))}(e):function(e){_a.has(e)&&(_a.delete(e),0===_a.size&&wa&&(clearInterval(wa),wa=null))}(e)}function Ma(){var e;return ys()||void 0!==(null===(e=navigator.mediaDevices)||void 0===e?void 0:e.ondevicechange)}var Ca=new Set;function Ea(e,t){var n=t.isLocalScreenVideo;return e&&\"live\"===e.readyState&&!function(e,t){return(!t.isLocalScreenVideo||\"Chrome\"!==Os())&&e.muted&&!Ca.has(e.id)}(e,{isLocalScreenVideo:n})}function Ta(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oa(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ta(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ta(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pa=Object.freeze({VIDEO:\"video\",AUDIO:\"audio\",SCREEN_VIDEO:\"screenVideo\",SCREEN_AUDIO:\"screenAudio\",CUSTOM_VIDEO:\"customVideo\",CUSTOM_AUDIO:\"customAudio\"}),Aa=Object.freeze({PARTICIPANTS:\"participants\",STREAMING:\"streaming\",TRANSCRIPTION:\"transcription\"}),ja=Object.values(Pa),Ia=[\"v\",\"a\",\"sv\",\"sa\",\"cv\",\"ca\"];Object.freeze(ja.reduce((function(e,t,n){return e[t]=Ia[n],e}),{})),Object.freeze(Ia.reduce((function(e,t,n){return e[t]=ja[n],e}),{}));var xa=[Pa.VIDEO,Pa.AUDIO,Pa.SCREEN_VIDEO,Pa.SCREEN_AUDIO],La=Object.values(Aa),Da=[\"p\",\"s\",\"t\"];Object.freeze(La.reduce((function(e,t,n){return e[t]=Da[n],e}),{})),Object.freeze(Da.reduce((function(e,t,n){return e[t]=La[n],e}),{}));var Na=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.base,i=n.byUserId,o=n.byParticipantId;t(this,e),this.base=r,this.byUserId=i,this.byParticipantId=o}return o(e,[{key:\"clone\",value:function(){var t=new e;if(this.base instanceof Ra?t.base=this.base.clone():t.base=this.base,void 0!==this.byUserId)for(var n in t.byUserId={},this.byUserId){var r=this.byUserId[n];t.byUserId[n]=r instanceof Ra?r.clone():r}if(void 0!==this.byParticipantId)for(var i in t.byParticipantId={},this.byParticipantId){var o=this.byParticipantId[i];t.byParticipantId[i]=o instanceof Ra?o.clone():o}return t}},{key:\"toJSONObject\",value:function(){var e={};if(\"boolean\"==typeof this.base?e.base=this.base:this.base instanceof Ra&&(e.base=this.base.toJSONObject()),void 0!==this.byUserId)for(var t in e.byUserId={},this.byUserId){var n=this.byUserId[t];e.byUserId[t]=n instanceof Ra?n.toJSONObject():n}if(void 0!==this.byParticipantId)for(var r in e.byParticipantId={},this.byParticipantId){var i=this.byParticipantId[r];e.byParticipantId[r]=i instanceof Ra?i.toJSONObject():i}return e}},{key:\"toMinifiedJSONObject\",value:function(){var e={};if(void 0!==this.base&&(\"boolean\"==typeof this.base?e.b=this.base:e.b=this.base.toMinifiedJSONObject()),void 0!==this.byUserId)for(var t in e.u={},this.byUserId){var n=this.byUserId[t];e.u[t]=\"boolean\"==typeof n?n:n.toMinifiedJSONObject()}if(void 0!==this.byParticipantId)for(var r in e.p={},this.byParticipantId){var i=this.byParticipantId[r];e.p[r]=\"boolean\"==typeof i?i:i.toMinifiedJSONObject()}return e}},{key:\"normalize\",value:function(){return this.base instanceof Ra&&(this.base=this.base.normalize()),this.byUserId&&(this.byUserId=Object.fromEntries(Object.entries(this.byUserId).map((function(e){var t=f(e,2),n=t[0],r=t[1];return[n,r instanceof Ra?r.normalize():r]})))),this.byParticipantId&&(this.byParticipantId=Object.fromEntries(Object.entries(this.byParticipantId).map((function(e){var t=f(e,2),n=t[0],r=t[1];return[n,r instanceof Ra?r.normalize():r]})))),this}}],[{key:\"fromJSONObject\",value:function(t){var n,r,i;if(void 0!==t.base&&(n=\"boolean\"==typeof t.base?t.base:Ra.fromJSONObject(t.base)),void 0!==t.byUserId)for(var o in r={},t.byUserId){var s=t.byUserId[o];r[o]=\"boolean\"==typeof s?s:Ra.fromJSONObject(s)}if(void 0!==t.byParticipantId)for(var a in i={},t.byParticipantId){var c=t.byParticipantId[a];i[a]=\"boolean\"==typeof c?c:Ra.fromJSONObject(c)}return new e({base:n,byUserId:r,byParticipantId:i})}},{key:\"fromMinifiedJSONObject\",value:function(t){var n,r,i;if(void 0!==t.b&&(n=\"boolean\"==typeof t.b?t.b:Ra.fromMinifiedJSONObject(t.b)),void 0!==t.u)for(var o in r={},t.u){var s=t.u[o];r[o]=\"boolean\"==typeof s?s:Ra.fromMinifiedJSONObject(s)}if(void 0!==t.p)for(var a in i={},t.p){var c=t.p[a];i[a]=\"boolean\"==typeof c?c:Ra.fromMinifiedJSONObject(c)}return new e({base:n,byUserId:r,byParticipantId:i})}},{key:\"validateJSONObject\",value:function(e){if(\"object\"!==n(e))return[!1,\"canReceive must be an object\"];for(var t=[\"base\",\"byUserId\",\"byParticipantId\"],r=0,i=Object.keys(e);r<i.length;r++){var o=i[r];if(!t.includes(o))return[!1,\"canReceive can only contain keys (\".concat(t.join(\", \"),\")\")];if(\"base\"===o){var s=f(Ra.validateJSONObject(e.base,!0),2),a=s[0],c=s[1];if(!a)return[!1,c]}else{if(\"object\"!==n(e[o]))return[!1,\"invalid (non-object) value for field '\".concat(o,\"' in canReceive\")];for(var l=0,u=Object.values(e[o]);l<u.length;l++){var d=u[l],p=f(Ra.validateJSONObject(d),2),h=p[0],v=p[1];if(!h)return[!1,v]}}}return[!0]}}])}(),Ra=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.video,i=n.audio,o=n.screenVideo,s=n.screenAudio,a=n.customVideo,c=n.customAudio;t(this,e),this.video=r,this.audio=i,this.screenVideo=o,this.screenAudio=s,this.customVideo=a,this.customAudio=c}return o(e,[{key:\"clone\",value:function(){var t=new e;return void 0!==this.video&&(t.video=this.video),void 0!==this.audio&&(t.audio=this.audio),void 0!==this.screenVideo&&(t.screenVideo=this.screenVideo),void 0!==this.screenAudio&&(t.screenAudio=this.screenAudio),void 0!==this.customVideo&&(t.customVideo=Oa({},this.customVideo)),void 0!==this.customAudio&&(t.customAudio=Oa({},this.customAudio)),t}},{key:\"toJSONObject\",value:function(){var e={};return void 0!==this.video&&(e.video=this.video),void 0!==this.audio&&(e.audio=this.audio),void 0!==this.screenVideo&&(e.screenVideo=this.screenVideo),void 0!==this.screenAudio&&(e.screenAudio=this.screenAudio),void 0!==this.customVideo&&(e.customVideo=Oa({},this.customVideo)),void 0!==this.customAudio&&(e.customAudio=Oa({},this.customAudio)),e}},{key:\"toMinifiedJSONObject\",value:function(){var e={};return void 0!==this.video&&(e.v=this.video),void 0!==this.audio&&(e.a=this.audio),void 0!==this.screenVideo&&(e.sv=this.screenVideo),void 0!==this.screenAudio&&(e.sa=this.screenAudio),void 0!==this.customVideo&&(e.cv=Oa({},this.customVideo)),void 0!==this.customAudio&&(e.ca=Oa({},this.customAudio)),e}},{key:\"normalize\",value:function(){function e(e,t){return e&&1===Object.keys(e).length&&e[\"*\"]===t}return!(!0!==this.video||!0!==this.audio||!0!==this.screenVideo||!0!==this.screenAudio||!e(this.customVideo,!0)||!e(this.customAudio,!0))||(!1!==this.video||!1!==this.audio||!1!==this.screenVideo||!1!==this.screenAudio||!e(this.customVideo,!1)||!e(this.customAudio,!1))&&this}}],[{key:\"fromBoolean\",value:function(t){return new e({video:t,audio:t,screenVideo:t,screenAudio:t,customVideo:{\"*\":t},customAudio:{\"*\":t}})}},{key:\"fromJSONObject\",value:function(t){return new e({video:t.video,audio:t.audio,screenVideo:t.screenVideo,screenAudio:t.screenAudio,customVideo:void 0!==t.customVideo?Oa({},t.customVideo):void 0,customAudio:void 0!==t.customAudio?Oa({},t.customAudio):void 0})}},{key:\"fromMinifiedJSONObject\",value:function(t){return new e({video:t.v,audio:t.a,screenVideo:t.sv,screenAudio:t.sa,customVideo:t.cv,customAudio:t.ca})}},{key:\"validateJSONObject\",value:function(e,t){if(\"boolean\"==typeof e)return[!0];if(\"object\"!==n(e))return[!1,\"invalid (non-object, non-boolean) value in canReceive\"];for(var r=Object.keys(e),i=0,o=r;i<o.length;i++){var s=o[i];if(!ja.includes(s))return[!1,\"invalid media type '\".concat(s,\"' in canReceive\")];if(xa.includes(s)){if(\"boolean\"!=typeof e[s])return[!1,\"invalid (non-boolean) value for media type '\".concat(s,\"' in canReceive\")]}else{if(\"object\"!==n(e[s]))return[!1,\"invalid (non-object) value for media type '\".concat(s,\"' in canReceive\")];for(var a=0,c=Object.values(e[s]);a<c.length;a++){if(\"boolean\"!=typeof c[a])return[!1,\"invalid (non-boolean) value for entry within '\".concat(s,\"' in canReceive\")]}if(t&&void 0===e[s][\"*\"])return[!1,'canReceive \"base\" permission must specify \"*\" as an entry within \\''.concat(s,\"'\")]}}return t&&r.length!==ja.length?[!1,'canReceive \"base\" permission must specify all media types: '.concat(ja.join(\", \"),\" (or be set to a boolean shorthand)\")]:[!0]}}])}(),Fa=[\"result\"],Ba=[\"preserveIframe\"];function Ua(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Va(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ua(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ua(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ja(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Ja=function(){return!!e})()}function $a(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if(\"string\"==typeof e)return qa(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qa(e,t):void 0}}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,s=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw o}}}}function qa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var za={};var Wa=\"video\",Ha=\"voice\",Ga=ys()?{data:{}}:{data:{},topology:\"none\"},Qa={present:0,hidden:0},Ka={maxBitrate:{min:1e5,max:25e5},maxFramerate:{min:1,max:30},scaleResolutionDownBy:{min:1,max:8}},Ya=Object.keys(Ka),Xa=[\"state\",\"volume\",\"simulcastEncodings\"],Za={androidInCallNotification:{title:\"string\",subtitle:\"string\",iconName:\"string\",disableForCustomOverride:\"boolean\"},disableAutoDeviceManagement:{audio:\"boolean\",video:\"boolean\"}},ec={id:{iconPath:\"string\",iconPathDarkMode:\"string\",label:\"string\",tooltip:\"string\",visualState:\"'default' | 'sidebar-open' | 'active'\"}},tc={id:{allow:\"string\",controlledBy:\"'*' | 'owners' | string[]\",csp:\"string\",iconURL:\"string\",label:\"string\",loading:\"'eager' | 'lazy'\",location:\"'main' | 'sidebar'\",name:\"string\",referrerPolicy:\"string\",sandbox:\"string\",src:\"string\",srcdoc:\"string\",shared:\"string[] | 'owners' | boolean\"}},nc={customIntegrations:{validate:Ec,help:Mc()},customTrayButtons:{validate:Cc,help:\"customTrayButtons should be a dictionary of the type \".concat(JSON.stringify(ec))},url:{validate:function(e){return\"string\"==typeof e},help:\"url should be a string\"},baseUrl:{validate:function(e){return\"string\"==typeof e},help:\"baseUrl should be a string\"},token:{validate:function(e){return\"string\"==typeof e},help:\"token should be a string\",queryString:\"t\"},dailyConfig:{validate:function(e,t){try{return t.validateDailyConfig(e),!0}catch(e){console.error(\"Failed to validate dailyConfig\",e)}return!1},help:\"Unsupported dailyConfig. Check error logs for detailed info.\"},reactNativeConfig:{validate:function(e){return Tc(e,Za)},help:\"reactNativeConfig should look like \".concat(JSON.stringify(Za),\", all fields optional\")},lang:{validate:function(e){return[\"da\",\"de\",\"en-us\",\"en\",\"es\",\"fi\",\"fr\",\"it\",\"jp\",\"ka\",\"nl\",\"no\",\"pl\",\"pt\",\"pt-BR\",\"ru\",\"sv\",\"tr\",\"user\"].includes(e)},help:\"language not supported. Options are: da, de, en-us, en, es, fi, fr, it, jp, ka, nl, no, pl, pt, pt-BR, ru, sv, tr, user\"},userName:!0,userData:{validate:function(e){try{return vc(e),!0}catch(e){return console.error(e),!1}},help:\"invalid userData type provided\"},startVideoOff:!0,startAudioOff:!0,allowLocalVideo:!0,allowLocalAudio:!0,activeSpeakerMode:!0,showLeaveButton:!0,showLocalVideo:!0,showParticipantsBar:!0,showFullscreenButton:!0,showUserNameChangeUI:!0,iframeStyle:!0,customLayout:!0,cssFile:!0,cssText:!0,bodyClass:!0,videoSource:{validate:function(e,t){if(\"boolean\"==typeof e)return t._preloadCache.allowLocalVideo=e,!0;var n;if(e instanceof MediaStreamTrack)t._sharedTracks.videoTrack=e,n={customTrack:ls};else{if(delete t._sharedTracks.videoTrack,\"string\"!=typeof e)return console.error(\"videoSource must be a MediaStreamTrack, boolean, or a string\"),!1;n={deviceId:e}}return t._updatePreloadCacheInputSettings({video:{settings:n}},!1),!0}},audioSource:{validate:function(e,t){if(\"boolean\"==typeof e)return t._preloadCache.allowLocalAudio=e,!0;var n;if(e instanceof MediaStreamTrack)t._sharedTracks.audioTrack=e,n={customTrack:ls};else{if(delete t._sharedTracks.audioTrack,\"string\"!=typeof e)return console.error(\"audioSource must be a MediaStreamTrack, boolean, or a string\"),!1;n={deviceId:e}}return t._updatePreloadCacheInputSettings({audio:{settings:n}},!1),!0}},subscribeToTracksAutomatically:{validate:function(e,t){return t._preloadCache.subscribeToTracksAutomatically=e,!0}},theme:{validate:function(e){var t=[\"accent\",\"accentText\",\"background\",\"backgroundAccent\",\"baseText\",\"border\",\"mainAreaBg\",\"mainAreaBgAccent\",\"mainAreaText\",\"supportiveText\"],r=function(e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];if(!t.includes(i))return console.error('unsupported color \"'.concat(i,'\". Valid colors: ').concat(t.join(\", \"))),!1;if(!e[i].match(/^#[0-9a-f]{6}|#[0-9a-f]{3}$/i))return console.error(\"\".concat(i,' theme color should be provided in valid hex color format. Received: \"').concat(e[i],'\"')),!1}return!0};return\"object\"===n(e)&&(\"light\"in e&&\"dark\"in e||\"colors\"in e)?\"light\"in e&&\"dark\"in e?\"colors\"in e.light?\"colors\"in e.dark?r(e.light.colors)&&r(e.dark.colors):(console.error('Dark theme is missing \"colors\" property.',e),!1):(console.error('Light theme is missing \"colors\" property.',e),!1):r(e.colors):(console.error('Theme must contain either both \"light\" and \"dark\" properties, or \"colors\".',e),!1)},help:\"unsupported theme configuration. Check error logs for detailed info.\"},layoutConfig:{validate:function(e){if(\"grid\"in e){var t=e.grid;if(\"maxTilesPerPage\"in t){if(!Number.isInteger(t.maxTilesPerPage))return console.error(\"grid.maxTilesPerPage should be an integer. You passed \".concat(t.maxTilesPerPage,\".\")),!1;if(t.maxTilesPerPage>49)return console.error(\"grid.maxTilesPerPage can't be larger than 49 without sacrificing browser performance. Please contact us at https://www.daily.co/contact to talk about your use case.\"),!1}if(\"minTilesPerPage\"in t){if(!Number.isInteger(t.minTilesPerPage))return console.error(\"grid.minTilesPerPage should be an integer. You passed \".concat(t.minTilesPerPage,\".\")),!1;if(t.minTilesPerPage<1)return console.error(\"grid.minTilesPerPage can't be lower than 1.\"),!1;if(\"maxTilesPerPage\"in t&&t.minTilesPerPage>t.maxTilesPerPage)return console.error(\"grid.minTilesPerPage can't be higher than grid.maxTilesPerPage.\"),!1}}return!0},help:\"unsupported layoutConfig. Check error logs for detailed info.\"},receiveSettings:{validate:function(e){return gc(e,{allowAllParticipantsKey:!1})},help:kc({allowAllParticipantsKey:!1})},sendSettings:{validate:function(e,t){return!!function(e,t){try{return t.validateUpdateSendSettings(e),!0}catch(e){return console.error(\"Failed to validate send settings\",e),!1}}(e,t)&&(t._preloadCache.sendSettings=e,!0)},help:\"Invalid sendSettings provided. Check error logs for detailed info.\"},inputSettings:{validate:function(e,t){var n;return!!mc(e)&&(t._inputSettings||(t._inputSettings={}),yc(e,null===(n=t.properties)||void 0===n?void 0:n.dailyConfig,t._sharedTracks),t._updatePreloadCacheInputSettings(e,!0),!0)},help:Sc()},layout:{validate:function(e){return\"custom-v1\"===e||\"browser\"===e||\"none\"===e},help:'layout may only be set to \"custom-v1\"',queryString:\"layout\"},emb:{queryString:\"emb\"},embHref:{queryString:\"embHref\"},dailyJsVersion:{queryString:\"dailyJsVersion\"},proxy:{queryString:\"proxy\"},strictMode:!0,allowMultipleCallInstances:!0},rc={styles:{validate:function(e){for(var t in e)if(\"cam\"!==t&&\"screen\"!==t)return!1;if(e.cam)for(var n in e.cam)if(\"div\"!==n&&\"video\"!==n)return!1;if(e.screen)for(var r in e.screen)if(\"div\"!==r&&\"video\"!==r)return!1;return!0},help:\"styles format should be a subset of: { cam: {div: {}, video: {}}, screen: {div: {}, video: {}} }\"},setSubscribedTracks:{validate:function(e,t){if(t._preloadCache.subscribeToTracksAutomatically)return!1;var n=[!0,!1,\"staged\"];if(n.includes(e)||!ys()&&\"avatar\"===e)return!0;var r=[\"audio\",\"video\",\"screenAudio\",\"screenVideo\",\"rmpAudio\",\"rmpVideo\"],i=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];for(var o in e)if(\"custom\"===o){if(!n.includes(e[o])&&!i(e[o],!0))return!1}else{var s=!t&&!r.includes(o),a=!n.includes(e[o]);if(s||a)return!1}return!0};return i(e)},help:\"setSubscribedTracks cannot be used when setSubscribeToTracksAutomatically is enabled, and should be of the form: \"+\"true\".concat(ys()?\"\":\" | 'avatar'\",\" | false | 'staged' | { [audio: true|false|'staged'], [video: true|false|'staged'], [screenAudio: true|false|'staged'], [screenVideo: true|false|'staged'] }\")},setAudio:!0,setVideo:!0,setScreenShare:{validate:function(e){return!1===e},help:\"setScreenShare must be false, as it's only meant for stopping remote participants' screen shares\"},eject:!0,updatePermissions:{validate:function(e){for(var t=0,n=Object.entries(e);t<n.length;t++){var r=f(n[t],2),i=r[0],o=r[1];switch(i){case\"hasPresence\":if(\"boolean\"!=typeof o)return!1;break;case\"canSend\":if(o instanceof Set||o instanceof Array||Array.isArray(o)){var s,a=[\"video\",\"audio\",\"screenVideo\",\"screenAudio\",\"customVideo\",\"customAudio\"],c=$a(o);try{for(c.s();!(s=c.n()).done;){var l=s.value;if(!a.includes(l))return!1}}catch(e){c.e(e)}finally{c.f()}}else if(\"boolean\"!=typeof o)return!1;(o instanceof Array||Array.isArray(o))&&(e.canSend=new Set(o));break;case\"canReceive\":var u=f(Na.validateJSONObject(o),2),d=u[0],p=u[1];if(!d)return console.error(p),!1;break;case\"canAdmin\":if(o instanceof Set||o instanceof Array||Array.isArray(o)){var h,v=[\"participants\",\"streaming\",\"transcription\"],g=$a(o);try{for(g.s();!(h=g.n()).done;){var m=h.value;if(!v.includes(m))return!1}}catch(e){g.e(e)}finally{g.f()}}else if(\"boolean\"!=typeof o)return!1;(o instanceof Array||Array.isArray(o))&&(e.canAdmin=new Set(o));break;default:return!1}}return!0},help:\"updatePermissions can take hasPresence, canSend, canReceive, and canAdmin permissions. hasPresence must be a boolean. canSend can be a boolean or an Array or Set of media types (video, audio, screenVideo, screenAudio, customVideo, customAudio). canReceive must be an object specifying base, byUserId, and/or byParticipantId fields (see documentation for more details). canAdmin can be a boolean or an Array or Set of admin types (participants, streaming, transcription).\"}};Promise.any||(Promise.any=function(){var e=p((function*(e){return new Promise((function(t,n){var r=[];e.forEach((function(i){return Promise.resolve(i).then((function(e){t(e)})).catch((function(t){r.push(t),r.length===e.length&&n(r)}))}))}))}));return function(t){return e.apply(this,arguments)}}());var ic=function(){function r(e){var n,i,o,c,l,d,h=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t(this,r),o=this,c=a(c=r),u(i=s(o,Ja()?Reflect.construct(c,l||[],a(o).constructor):c.apply(o,l)),\"startListeningForDeviceChanges\",(function(){Sa(i.handleDeviceChange)})),u(i,\"stopListeningForDeviceChanges\",(function(){ka(i.handleDeviceChange)})),u(i,\"handleDeviceChange\",(function(e){e=e.map((function(e){return JSON.parse(JSON.stringify(e))})),i.emitDailyJSEvent({action:\"available-devices-updated\",availableDevices:e})})),u(i,\"handleNativeAppStateChange\",function(){var e=p((function*(e){if(\"destroyed\"===e)return console.warn(\"App has been destroyed before leaving the meeting. Cleaning up all the resources!\"),void(yield i.destroy());var t=\"active\"===e;i.disableReactNativeAutoDeviceManagement(\"video\")||(t?i.camUnmutedBeforeLosingNativeActiveState&&i.setLocalVideo(!0):(i.camUnmutedBeforeLosingNativeActiveState=i.localVideo(),i.camUnmutedBeforeLosingNativeActiveState&&i.setLocalVideo(!1)))}));return function(t){return e.apply(this,arguments)}}()),u(i,\"handleNativeAudioFocusChange\",(function(e){i.disableReactNativeAutoDeviceManagement(\"audio\")||(i._hasNativeAudioFocus=e,i.toggleParticipantAudioBasedOnNativeAudioFocus(),i._hasNativeAudioFocus?i.micUnmutedBeforeLosingNativeAudioFocus&&i.setLocalAudio(!0):(i.micUnmutedBeforeLosingNativeAudioFocus=i.localAudio(),i.setLocalAudio(!1)))})),u(i,\"handleNativeSystemScreenCaptureStop\",(function(){i.stopScreenShare()})),i.strictMode=void 0===h.strictMode||h.strictMode,i.allowMultipleCallInstances=null!==(n=h.allowMultipleCallInstances)&&void 0!==n&&n,Object.keys(za).length&&(i._logDuplicateInstanceAttempt(),!i.allowMultipleCallInstances)){if(i.strictMode)throw new Error(\"Duplicate DailyIframe instances are not allowed\");console.warn(\"Using strictMode: false to allow multiple call instances is now deprecated. Set `allowMultipleCallInstances: true`\")}if(window._daily||(window._daily={pendings:[],instances:{}}),i.callClientId=K(),za[(d=i).callClientId]=d,window._daily.instances[i.callClientId]={},i._sharedTracks={},window._daily.instances[i.callClientId].tracks=i._sharedTracks,h.dailyJsVersion=r.version(),i._iframe=e,i._callObjectMode=\"none\"===h.layout&&!i._iframe,i._preloadCache={subscribeToTracksAutomatically:!0,outputDeviceId:null,inputSettings:null,sendSettings:null,videoTrackForNetworkConnectivityTest:null,videoTrackForConnectionQualityTest:null},void 0!==h.showLocalVideo?i._callObjectMode?console.error(\"showLocalVideo is not available in call object mode\"):i._showLocalVideo=!!h.showLocalVideo:i._showLocalVideo=!0,void 0!==h.showParticipantsBar?i._callObjectMode?console.error(\"showParticipantsBar is not available in call object mode\"):i._showParticipantsBar=!!h.showParticipantsBar:i._showParticipantsBar=!0,void 0!==h.customIntegrations?i._callObjectMode?console.error(\"customIntegrations is not available in call object mode\"):i._customIntegrations=h.customIntegrations:i._customIntegrations={},void 0!==h.customTrayButtons?i._callObjectMode?console.error(\"customTrayButtons is not available in call object mode\"):i._customTrayButtons=h.customTrayButtons:i._customTrayButtons={},void 0!==h.activeSpeakerMode?i._callObjectMode?console.error(\"activeSpeakerMode is not available in call object mode\"):i._activeSpeakerMode=!!h.activeSpeakerMode:i._activeSpeakerMode=!1,h.receiveSettings?i._callObjectMode?i._receiveSettings=h.receiveSettings:console.error(\"receiveSettings is only available in call object mode\"):i._receiveSettings={},i.validateProperties(h),i.properties=Va({},h),i._inputSettings||(i._inputSettings={}),i._callObjectLoader=i._callObjectMode?new Ys(i.callClientId):null,i._callState=vi,i._isPreparingToJoin=!1,i._accessState={access:Oi},i._meetingSessionSummary={},i._finalSummaryOfPrevSession={},i._meetingSessionState=jc(Ga,i._callObjectMode),i._nativeInCallAudioMode=Wa,i._participants={},i._isScreenSharing=!1,i._participantCounts=Qa,i._rmpPlayerState={},i._waitingParticipants={},i._network={threshold:\"good\",quality:100,networkState:\"unknown\",stats:{}},i._activeSpeaker={},i._localAudioLevel=0,i._isLocalAudioLevelObserverRunning=!1,i._remoteParticipantsAudioLevel={},i._isRemoteParticipantsAudioLevelObserverRunning=!1,i._maxAppMessageSize=rs,i._messageChannel=ys()?new Js:new Bs,i._iframe&&(i._iframe.requestFullscreen?i._iframe.addEventListener(\"fullscreenchange\",(function(){document.fullscreenElement===i._iframe?(i.emitDailyJSEvent({action:Wo}),i.sendMessageToCallMachine({action:Wo})):(i.emitDailyJSEvent({action:Ho}),i.sendMessageToCallMachine({action:Ho}))})):i._iframe.webkitRequestFullscreen&&i._iframe.addEventListener(\"webkitfullscreenchange\",(function(){document.webkitFullscreenElement===i._iframe?(i.emitDailyJSEvent({action:Wo}),i.sendMessageToCallMachine({action:Wo})):(i.emitDailyJSEvent({action:Ho}),i.sendMessageToCallMachine({action:Ho}))}))),ys()){var f=i.nativeUtils();f.addAudioFocusChangeListener&&f.removeAudioFocusChangeListener&&f.addAppStateChangeListener&&f.removeAppStateChangeListener&&f.addSystemScreenCaptureStopListener&&f.removeSystemScreenCaptureStopListener||console.warn(\"expected (add|remove)(AudioFocusChange|AppActiveStateChange|SystemScreenCaptureStop)Listener to be available in React Native\"),i._hasNativeAudioFocus=!0,f.addAudioFocusChangeListener(i.handleNativeAudioFocusChange),f.addAppStateChangeListener(i.handleNativeAppStateChange),f.addSystemScreenCaptureStopListener(i.handleNativeSystemScreenCaptureStop)}return i._callObjectMode&&i.startListeningForDeviceChanges(),i._messageChannel.addListenerForMessagesFromCallMachine(i.handleMessageFromCallMachine,i.callClientId,i),i}return l(r,x),o(r,[{key:\"destroy\",value:(ee=p((function*(){var e;try{yield this.leave()}catch(e){}var t=this._iframe;if(t){var n=t.parentElement;n&&n.removeChild(t)}if(this._messageChannel.removeListener(this.handleMessageFromCallMachine),ys()){var r=this.nativeUtils();r.removeAudioFocusChangeListener(this.handleNativeAudioFocusChange),r.removeAppStateChangeListener(this.handleNativeAppStateChange),r.removeSystemScreenCaptureStopListener(this.handleNativeSystemScreenCaptureStop)}this._callObjectMode&&this.stopListeningForDeviceChanges(),this.resetMeetingDependentVars(),this._destroyed=!0,this.emitDailyJSEvent({action:\"call-instance-destroyed\"}),delete za[this.callClientId],(null===(e=window)||void 0===e||null===(e=e._daily)||void 0===e?void 0:e.instances)&&delete window._daily.instances[this.callClientId],this.strictMode&&(this.callClientId=void 0)})),function(){return ee.apply(this,arguments)})},{key:\"isDestroyed\",value:function(){return!!this._destroyed}},{key:\"loadCss\",value:function(e){var t=e.bodyClass,n=e.cssFile,r=e.cssText;return hc(),this.sendMessageToCallMachine({action:\"load-css\",cssFile:this.absoluteUrl(n),bodyClass:t,cssText:r}),this}},{key:\"iframe\",value:function(){return hc(),this._iframe}},{key:\"meetingState\",value:function(){return this._callState}},{key:\"accessState\",value:function(){return dc(this._callObjectMode,\"accessState()\"),this._accessState}},{key:\"participants\",value:function(){return this._participants}},{key:\"participantCounts\",value:function(){return this._participantCounts}},{key:\"waitingParticipants\",value:function(){return dc(this._callObjectMode,\"waitingParticipants()\"),this._waitingParticipants}},{key:\"validateParticipantProperties\",value:function(e,t){for(var n in t){if(!rc[n])throw new Error(\"unrecognized updateParticipant property \".concat(n));if(rc[n].validate&&!rc[n].validate(t[n],this,this._participants[e]))throw new Error(rc[n].help)}}},{key:\"updateParticipant\",value:function(e,t){return this._participants.local&&this._participants.local.session_id===e&&(e=\"local\"),e&&t&&(this.validateParticipantProperties(e,t),this.sendMessageToCallMachine({action:\"update-participant\",id:e,properties:t})),this}},{key:\"updateParticipants\",value:function(e){var t=this._participants.local&&this._participants.local.session_id;for(var n in e)n===t&&(n=\"local\"),n&&e[n]&&this.validateParticipantProperties(n,e[n]);return this.sendMessageToCallMachine({action:\"update-participants\",participants:e}),this}},{key:\"updateWaitingParticipant\",value:(Y=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(dc(this._callObjectMode,\"updateWaitingParticipant()\"),sc(this._callState,\"updateWaitingParticipant()\"),\"string\"!=typeof t||\"object\"!==n(r))throw new Error(\"updateWaitingParticipant() must take an id string and a updates object\");return new Promise((function(n,i){e.sendMessageToCallMachine({action:\"daily-method-update-waiting-participant\",id:t,updates:r},(function(e){e.error&&i(e.error),e.id||i(new Error(\"unknown error in updateWaitingParticipant()\")),n({id:e.id})}))}))})),function(){return Y.apply(this,arguments)})},{key:\"updateWaitingParticipants\",value:(G=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(dc(this._callObjectMode,\"updateWaitingParticipants()\"),sc(this._callState,\"updateWaitingParticipants()\"),\"object\"!==n(t))throw new Error(\"updateWaitingParticipants() must take a mapping between ids and update objects\");return new Promise((function(n,r){e.sendMessageToCallMachine({action:\"daily-method-update-waiting-participants\",updatesById:t},(function(e){e.error&&r(e.error),e.ids||r(new Error(\"unknown error in updateWaitingParticipants()\")),n({ids:e.ids})}))}))})),function(){return G.apply(this,arguments)})},{key:\"requestAccess\",value:(H=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.access,r=void 0===n?{level:Pi}:n,i=t.name,o=void 0===i?\"\":i;return dc(this._callObjectMode,\"requestAccess()\"),sc(this._callState,\"requestAccess()\"),new Promise((function(t,n){e.sendMessageToCallMachine({action:\"daily-method-request-access\",access:r,name:o},(function(e){e.error&&n(e.error),e.access||n(new Error(\"unknown error in requestAccess()\")),t({access:e.access,granted:e.granted})}))}))})),function(){return H.apply(this,arguments)})},{key:\"localAudio\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.audio.state):null}},{key:\"localVideo\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.video.state):null}},{key:\"setLocalAudio\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return\"forceDiscardTrack\"in t&&(ys()?(console.warn(\"forceDiscardTrack option not supported in React Native; ignoring\"),t={}):e&&(console.warn(\"forceDiscardTrack option only supported when calling setLocalAudio(false); ignoring\"),t={})),this.sendMessageToCallMachine({action:\"local-audio\",state:e,options:t}),this}},{key:\"localScreenAudio\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.screenAudio.state):null}},{key:\"localScreenVideo\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.screenVideo.state):null}},{key:\"updateScreenShare\",value:function(e){if(this._isScreenSharing)return this.sendMessageToCallMachine({action:\"local-screen-update\",options:e}),this;console.warn(\"There is no screen share in progress. Try calling startScreenShare first.\")}},{key:\"setLocalVideo\",value:function(e){return this.sendMessageToCallMachine({action:\"local-video\",state:e}),this}},{key:\"_setAllowLocalAudio\",value:function(e){if(this._preloadCache.allowLocalAudio=e,this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-allow-local-audio\",state:e}),this}},{key:\"_setAllowLocalVideo\",value:function(e){if(this._preloadCache.allowLocalVideo=e,this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-allow-local-video\",state:e}),this}},{key:\"getReceiveSettings\",value:(W=p((function*(e){var t=this,r=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).showInheritedValues,i=void 0!==r&&r;if(dc(this._callObjectMode,\"getReceiveSettings()\"),!this._callMachineInitialized)return this._receiveSettings;switch(n(e)){case\"string\":return new Promise((function(n){t.sendMessageToCallMachine({action:\"get-single-participant-receive-settings\",id:e,showInheritedValues:i},(function(e){n(e.receiveSettings)}))}));case\"undefined\":return this._receiveSettings;default:throw new Error('first argument to getReceiveSettings() must be a participant id (or \"base\"), or there should be no arguments')}})),function(e){return W.apply(this,arguments)})},{key:\"updateReceiveSettings\",value:(z=p((function*(e){var t=this;if(dc(this._callObjectMode,\"updateReceiveSettings()\"),!gc(e,{allowAllParticipantsKey:!0}))throw new Error(kc({allowAllParticipantsKey:!0}));return sc(this._callState,\"updateReceiveSettings()\",\"To specify receive settings earlier, use the receiveSettings config property.\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"update-receive-settings\",receiveSettings:e},(function(e){n({receiveSettings:e.receiveSettings})}))}))})),function(e){return z.apply(this,arguments)})},{key:\"_prepInputSettingsForSharing\",value:function(e,t){if(e){var n={};if(e.audio){var r,i,o;e.audio.settings&&(!Object.keys(e.audio.settings).length&&t||(n.audio={settings:Va({},e.audio.settings)})),t&&null!==(r=n.audio)&&void 0!==r&&null!==(r=r.settings)&&void 0!==r&&r.customTrack&&(n.audio.settings={customTrack:this._sharedTracks.audioTrack});var s=\"none\"===(null===(i=e.audio.processor)||void 0===i?void 0:i.type)&&(null===(o=e.audio.processor)||void 0===o?void 0:o._isDefaultWhenNone);if(e.audio.processor&&!s){var a=Va({},e.audio.processor);delete a._isDefaultWhenNone,n.audio=Va(Va({},n.audio),{},{processor:a})}}if(e.video){var c,l,u;e.video.settings&&(!Object.keys(e.video.settings).length&&t||(n.video={settings:Va({},e.video.settings)})),t&&null!==(c=n.video)&&void 0!==c&&null!==(c=c.settings)&&void 0!==c&&c.customTrack&&(n.video.settings={customTrack:this._sharedTracks.videoTrack});var d=\"none\"===(null===(l=e.video.processor)||void 0===l?void 0:l.type)&&(null===(u=e.video.processor)||void 0===u?void 0:u._isDefaultWhenNone);if(e.video.processor&&!d){var p=Va({},e.video.processor);delete p._isDefaultWhenNone,n.video=Va(Va({},n.video),{},{processor:p})}}return n}}},{key:\"getInputSettings\",value:function(){var e=this;return hc(),new Promise((function(t){t(e._getInputSettings())}))}},{key:\"_getInputSettings\",value:function(){var e,t,n,r,i,o,s={processor:{type:\"none\",_isDefaultWhenNone:!0}};this._inputSettings?(e=(null===(n=this._inputSettings)||void 0===n?void 0:n.video)||s,t=(null===(r=this._inputSettings)||void 0===r?void 0:r.audio)||s):(e=(null===(i=this._preloadCache)||void 0===i||null===(i=i.inputSettings)||void 0===i?void 0:i.video)||s,t=(null===(o=this._preloadCache)||void 0===o||null===(o=o.inputSettings)||void 0===o?void 0:o.audio)||s);var a={audio:t,video:e};return this._prepInputSettingsForSharing(a,!0)}},{key:\"_updatePreloadCacheInputSettings\",value:function(e,t){var n=this._inputSettings||{},r={};if(e.video){var i,o,s;if(r.video={},e.video.settings)r.video.settings={},t||e.video.settings.customTrack||null===(s=n.video)||void 0===s||!s.settings?r.video.settings=e.video.settings:r.video.settings=Va(Va({},n.video.settings),e.video.settings),Object.keys(r.video.settings).length||delete r.video.settings;else null!==(i=n.video)&&void 0!==i&&i.settings&&(r.video.settings=n.video.settings);e.video.processor?r.video.processor=e.video.processor:null!==(o=n.video)&&void 0!==o&&o.processor&&(r.video.processor=n.video.processor)}else n.video&&(r.video=n.video);if(e.audio){var a,c,l;if(r.audio={},e.audio.settings)r.audio.settings={},t||e.audio.settings.customTrack||null===(l=n.audio)||void 0===l||!l.settings?r.audio.settings=e.audio.settings:r.audio.settings=Va(Va({},n.audio.settings),e.audio.settings),Object.keys(r.audio.settings).length||delete r.audio.settings;else null!==(a=n.audio)&&void 0!==a&&a.settings&&(r.audio.settings=n.audio.settings);e.audio.processor?r.audio.processor=e.audio.processor:null!==(c=n.audio)&&void 0!==c&&c.processor&&(r.audio.processor=n.audio.processor)}else n.audio&&(r.audio=n.audio);this._maybeUpdateInputSettings(r)}},{key:\"_devicesFromInputSettings\",value:function(e){var t,n,r=(null==e||null===(t=e.video)||void 0===t||null===(t=t.settings)||void 0===t?void 0:t.deviceId)||null,i=(null==e||null===(n=e.audio)||void 0===n||null===(n=n.settings)||void 0===n?void 0:n.deviceId)||null,o=this._preloadCache.outputDeviceId||null;return{camera:r?{deviceId:r}:{},mic:i?{deviceId:i}:{},speaker:o?{deviceId:o}:{}}}},{key:\"updateInputSettings\",value:(q=p((function*(e){var t=this;return hc(),mc(e)?e.video||e.audio?(yc(e,this.properties.dailyConfig,this._sharedTracks),this._callObjectMode&&!this._callMachineInitialized?(this._updatePreloadCacheInputSettings(e,!0),this._getInputSettings()):new Promise((function(n,r){t.sendMessageToCallMachine({action:\"update-input-settings\",inputSettings:e},(function(i){if(i.error)r(i.error);else{if(i.returnPreloadCache)return t._updatePreloadCacheInputSettings(e,!0),void n(t._getInputSettings());t._maybeUpdateInputSettings(i.inputSettings),n(t._prepInputSettingsForSharing(i.inputSettings,!0))}}))}))):this._getInputSettings():(console.error(Sc()),Promise.reject(Sc()))})),function(e){return q.apply(this,arguments)})},{key:\"setBandwidth\",value:function(e){var t=e.kbs,n=e.trackConstraints;if(hc(),this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-bandwidth\",kbs:t,trackConstraints:n}),this}},{key:\"getDailyLang\",value:function(){var e=this;if(hc(),this._callMachineInitialized)return new Promise((function(t){e.sendMessageToCallMachine({action:\"get-daily-lang\"},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))}},{key:\"setDailyLang\",value:function(e){return hc(),this.sendMessageToCallMachine({action:\"set-daily-lang\",lang:e}),this}},{key:\"setProxyUrl\",value:function(e){return this.sendMessageToCallMachine({action:\"set-proxy-url\",proxyUrl:e}),this}},{key:\"setIceConfig\",value:function(e){return this.sendMessageToCallMachine({action:\"set-ice-config\",iceConfig:e}),this}},{key:\"meetingSessionSummary\",value:function(){return[_i,wi].includes(this._callState)?this._finalSummaryOfPrevSession:this._meetingSessionSummary}},{key:\"getMeetingSession\",value:($=p((function*(){var e=this;return console.warn(\"getMeetingSession() is deprecated: use meetingSessionSummary(), which will return immediately\"),sc(this._callState,\"getMeetingSession()\"),new Promise((function(t){e.sendMessageToCallMachine({action:\"get-meeting-session\"},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))})),function(){return $.apply(this,arguments)})},{key:\"meetingSessionState\",value:function(){return sc(this._callState,\"meetingSessionState\"),this._meetingSessionState}},{key:\"setMeetingSessionData\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"replace\";dc(this._callObjectMode,\"setMeetingSessionData()\"),sc(this._callState,\"setMeetingSessionData\");try{!function(e,t){new Ws({data:e,mergeStrategy:t})}(e,t)}catch(e){throw console.error(e),e}try{this.sendMessageToCallMachine({action:\"set-session-data\",data:e,mergeStrategy:t})}catch(e){throw new Error(\"Error setting meeting session data: \".concat(e))}}},{key:\"setUserName\",value:function(e,t){var n=this;return this.properties.userName=e,new Promise((function(r){n.sendMessageToCallMachine({action:\"set-user-name\",name:null!=e?e:\"\",thisMeetingOnly:ys()||!!t&&!!t.thisMeetingOnly},(function(e){delete e.action,delete e.callbackStamp,r(e)}))}))}},{key:\"setUserData\",value:(J=p((function*(e){var t=this;try{vc(e)}catch(e){throw console.error(e),e}if(this.properties.userData=e,this._callMachineInitialized)return new Promise((function(n){try{t.sendMessageToCallMachine({action:\"set-user-data\",userData:e},(function(e){delete e.action,delete e.callbackStamp,n(e)}))}catch(e){throw new Error(\"Error setting user data: \".concat(e))}}))})),function(e){return J.apply(this,arguments)})},{key:\"validateAudioLevelInterval\",value:function(e){if(e&&(e<100||\"number\"!=typeof e))throw new Error(\"The interval must be a number greater than or equal to 100 milliseconds.\")}},{key:\"startLocalAudioLevelObserver\",value:function(e){var t=this;if(\"undefined\"==typeof AudioWorkletNode&&!ys())throw new Error(\"startLocalAudioLevelObserver() is not supported on this browser\");if(this.validateAudioLevelInterval(e),this._callMachineInitialized)return this._isLocalAudioLevelObserverRunning=!0,new Promise((function(n,r){t.sendMessageToCallMachine({action:\"start-local-audio-level-observer\",interval:e},(function(e){t._isLocalAudioLevelObserverRunning=!e.error,e.error?r({error:e.error}):n()}))}));this._preloadCache.localAudioLevelObserver={enabled:!0,interval:e}}},{key:\"isLocalAudioLevelObserverRunning\",value:function(){return this._isLocalAudioLevelObserverRunning}},{key:\"stopLocalAudioLevelObserver\",value:function(){this._preloadCache.localAudioLevelObserver=null,this._localAudioLevel=0,this._isLocalAudioLevelObserverRunning=!1,this.sendMessageToCallMachine({action:\"stop-local-audio-level-observer\"})}},{key:\"startRemoteParticipantsAudioLevelObserver\",value:function(e){var t=this;if(this.validateAudioLevelInterval(e),this._callMachineInitialized)return this._isRemoteParticipantsAudioLevelObserverRunning=!0,new Promise((function(n,r){t.sendMessageToCallMachine({action:\"start-remote-participants-audio-level-observer\",interval:e},(function(e){t._isRemoteParticipantsAudioLevelObserverRunning=!e.error,e.error?r({error:e.error}):n()}))}));this._preloadCache.remoteParticipantsAudioLevelObserver={enabled:!0,interval:e}}},{key:\"isRemoteParticipantsAudioLevelObserverRunning\",value:function(){return this._isRemoteParticipantsAudioLevelObserverRunning}},{key:\"stopRemoteParticipantsAudioLevelObserver\",value:function(){this._preloadCache.remoteParticipantsAudioLevelObserver=null,this._remoteParticipantsAudioLevel={},this._isRemoteParticipantsAudioLevelObserverRunning=!1,this.sendMessageToCallMachine({action:\"stop-remote-participants-audio-level-observer\"})}},{key:\"startCamera\",value:(V=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(dc(this._callObjectMode,\"startCamera()\"),cc(this._callState,this._isPreparingToJoin,\"startCamera()\",\"Did you mean to use setLocalAudio() and/or setLocalVideo() instead?\"),this.needsLoad())try{yield this.load(t)}catch(e){return Promise.reject(e)}else{if(this._didPreAuth){if(t.url&&t.url!==this.properties.url)return console.error(\"url in startCamera() is different than the one used in preAuth()\"),Promise.reject();if(t.token&&t.token!==this.properties.token)return console.error(\"token in startCamera() is different than the one used in preAuth()\"),Promise.reject()}this.validateProperties(t),this.properties=Va(Va({},this.properties),t)}return new Promise((function(t){e._preloadCache.inputSettings=e._prepInputSettingsForSharing(e._inputSettings,!1),e.sendMessageToCallMachine({action:\"start-camera\",properties:oc(e.properties,e.callClientId),preloadCache:oc(e._preloadCache,e.callClientId)},(function(e){t({camera:e.camera,mic:e.mic,speaker:e.speaker})}))}))})),function(){return V.apply(this,arguments)})},{key:\"validateCustomTrack\",value:function(e,t,n){if(n&&n.length>50)throw new Error(\"Custom track `trackName` must not be more than 50 characters\");if(t&&\"music\"!==t&&\"speech\"!==t&&!(t instanceof Object))throw new Error(\"Custom track `mode` must be either `music` | `speech` | `DailyMicAudioModeSettings` or `undefined`\");if(!!n&&[\"cam-audio\",\"cam-video\",\"screen-video\",\"screen-audio\",\"rmpAudio\",\"rmpVideo\",\"customVideoDefaults\"].includes(n))throw new Error(\"Custom track `trackName` must not match a track name already used by daily: cam-audio, cam-video, customVideoDefaults, screen-video, screen-audio, rmpAudio, rmpVideo\");if(!(e instanceof MediaStreamTrack))throw new Error(\"Custom tracks provided must be instances of MediaStreamTrack\")}},{key:\"startCustomTrack\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{track:track,mode:mode,trackName:trackName};return hc(),sc(this._callState,\"startCustomTrack()\"),this.validateCustomTrack(t.track,t.mode,t.trackName),new Promise((function(n,r){e._sharedTracks.customTrack=t.track,t.track=ls,e.sendMessageToCallMachine({action:\"start-custom-track\",properties:t},(function(e){e.error?r({error:e.error}):n(e.mediaTag)}))}))}},{key:\"stopCustomTrack\",value:function(e){var t=this;return hc(),sc(this._callState,\"stopCustomTrack()\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"stop-custom-track\",mediaTag:e},(function(e){n(e.mediaTag)}))}))}},{key:\"setCamera\",value:function(e){var t=this;return fc(),lc(this._callMachineInitialized,\"setCamera()\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"set-camera\",cameraDeviceId:e},(function(e){n({device:e.device})}))}))}},{key:\"setAudioDevice\",value:(U=p((function*(e){return fc(),this.nativeUtils().setAudioDevice(e),{deviceId:yield this.nativeUtils().getAudioDevice()}})),function(e){return U.apply(this,arguments)})},{key:\"cycleCamera\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Promise((function(n){e.sendMessageToCallMachine({action:\"cycle-camera\",properties:t},(function(e){n({device:e.device})}))}))}},{key:\"cycleMic\",value:function(){var e=this;return hc(),new Promise((function(t){e.sendMessageToCallMachine({action:\"cycle-mic\"},(function(e){t({device:e.device})}))}))}},{key:\"getCameraFacingMode\",value:function(){var e=this;return fc(),new Promise((function(t){e.sendMessageToCallMachine({action:\"get-camera-facing-mode\"},(function(e){t(e.facingMode)}))}))}},{key:\"setInputDevicesAsync\",value:(B=p((function*(e){var t=this,n=e.audioDeviceId,r=e.videoDeviceId,i=e.audioSource,o=e.videoSource;if(hc(),void 0!==i&&(n=i),void 0!==o&&(r=o),\"boolean\"==typeof n&&(this._setAllowLocalAudio(n),n=void 0),\"boolean\"==typeof r&&(this._setAllowLocalVideo(r),r=void 0),!n&&!r)return yield this.getInputDevices();var s={};return n&&(n instanceof MediaStreamTrack?(this._sharedTracks.audioTrack=n,n=ls,s.audio={settings:{customTrack:n}}):(delete this._sharedTracks.audioTrack,s.audio={settings:{deviceId:n}})),r&&(r instanceof MediaStreamTrack?(this._sharedTracks.videoTrack=r,r=ls,s.video={settings:{customTrack:r}}):(delete this._sharedTracks.videoTrack,s.video={settings:{deviceId:r}})),this._callObjectMode&&this.needsLoad()?(this._updatePreloadCacheInputSettings(s,!1),this._devicesFromInputSettings(this._inputSettings)):new Promise((function(e){t.sendMessageToCallMachine({action:\"set-input-devices\",audioDeviceId:n,videoDeviceId:r},(function(n){if(delete n.action,delete n.callbackStamp,n.returnPreloadCache)return t._updatePreloadCacheInputSettings(s,!1),void e(t._devicesFromInputSettings(t._inputSettings));e(n)}))}))})),function(e){return B.apply(this,arguments)})},{key:\"setOutputDeviceAsync\",value:(F=p((function*(e){var t=this,n=e.outputDeviceId;return hc(),n&&(this._preloadCache.outputDeviceId=n),this._callObjectMode&&this.needsLoad()?this._devicesFromInputSettings(this._inputSettings):new Promise((function(e){t.sendMessageToCallMachine({action:\"set-output-device\",outputDeviceId:n},(function(n){delete n.action,delete n.callbackStamp,n.returnPreloadCache?e(t._devicesFromInputSettings(t._inputSettings)):e(n)}))}))})),function(e){return F.apply(this,arguments)})},{key:\"getInputDevices\",value:(R=p((function*(){var e=this;return this._callObjectMode&&this.needsLoad()?this._devicesFromInputSettings(this._inputSettings):new Promise((function(t){e.sendMessageToCallMachine({action:\"get-input-devices\"},(function(n){n.returnPreloadCache?t(e._devicesFromInputSettings(e._inputSettings)):t({camera:n.camera,mic:n.mic,speaker:n.speaker})}))}))})),function(){return R.apply(this,arguments)})},{key:\"nativeInCallAudioMode\",value:function(){return fc(),this._nativeInCallAudioMode}},{key:\"setNativeInCallAudioMode\",value:function(e){if(fc(),[Wa,Ha].includes(e)){if(e!==this._nativeInCallAudioMode)return this._nativeInCallAudioMode=e,!this.disableReactNativeAutoDeviceManagement(\"audio\")&&ac(this._callState,this._isPreparingToJoin)&&this.nativeUtils().setAudioMode(this._nativeInCallAudioMode),this}else console.error(\"invalid in-call audio mode specified: \",e)}},{key:\"preAuth\",value:(D=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(dc(this._callObjectMode,\"preAuth()\"),cc(this._callState,this._isPreparingToJoin,\"preAuth()\"),this.needsLoad()&&(yield this.load(t)),!t.url)throw new Error(\"preAuth() requires at least a url to be provided\");return this.validateProperties(t),this.properties=Va(Va({},this.properties),t),new Promise((function(t,n){e._preloadCache.inputSettings=e._prepInputSettingsForSharing(e._inputSettings,!1),e.sendMessageToCallMachine({action:\"daily-method-preauth\",properties:oc(e.properties,e.callClientId),preloadCache:oc(e._preloadCache,e.callClientId)},(function(r){return r.error?n(r.error):r.access?(e._didPreAuth=!0,void t({access:r.access})):n(new Error(\"unknown error in preAuth()\"))}))}))})),function(){return D.apply(this,arguments)})},{key:\"load\",value:(L=p((function*(e){var t=this;if(this.needsLoad()){if(this._destroyed&&(this._logUseAfterDestroy(),this.strictMode))throw new Error(\"Use after destroy\");if(e&&(this.validateProperties(e),this.properties=Va(Va({},this.properties),e)),!this._callObjectMode&&!this.properties.url)throw new Error(\"can't load iframe meeting because url property isn't set\");return this._updateCallState(gi),this.emitDailyJSEvent({action:to}),this._callObjectMode?new Promise((function(e,n){t._callObjectLoader.cancel();var r=Date.now();t._callObjectLoader.load(t.properties.dailyConfig,(function(n){t._bundleLoadTime=n?\"no-op\":Date.now()-r,t._updateCallState(mi),n&&t.emitDailyJSEvent({action:ro}),e()}),(function(e,r){if(t.emitDailyJSEvent({action:no}),!r){t._updateCallState(wi),t.resetMeetingDependentVars();var i={action:ns,errorMsg:e.msg,error:{type:\"connection-error\",msg:\"Failed to load call object bundle.\",details:{on:\"load\",sourceError:e,bundleUrl:Z(t.properties.dailyConfig)}}};t._maybeSendToSentry(i),t.emitDailyJSEvent(i),n(e.msg)}}))})):(this._iframe.src=X(this.assembleMeetingUrl(),this.properties.dailyConfig),new Promise((function(e,n){t._loadedCallback=function(r){t._callState!==wi?(t._updateCallState(mi),(t.properties.cssFile||t.properties.cssText)&&t.loadCss(t.properties),e()):n(r)}})))}})),function(e){return L.apply(this,arguments)})},{key:\"join\",value:(I=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._testCallInProgress&&this.stopTestCallQuality();var n=!1;if(this.needsLoad()){this.updateIsPreparingToJoin(!0);try{yield this.load(t)}catch(e){return this.updateIsPreparingToJoin(!1),Promise.reject(e)}}else{if(n=!(!this.properties.cssFile&&!this.properties.cssText),this._didPreAuth){if(t.url&&t.url!==this.properties.url)return console.error(\"url in join() is different than the one used in preAuth()\"),this.updateIsPreparingToJoin(!1),Promise.reject();if(t.token&&t.token!==this.properties.token)return console.error(\"token in join() is different than the one used in preAuth()\"),this.updateIsPreparingToJoin(!1),Promise.reject()}if(t.url&&!this._callObjectMode&&t.url&&t.url!==this.properties.url)return console.error(\"url in join() is different than the one used in load() (\".concat(this.properties.url,\" -> \").concat(t.url,\")\")),this.updateIsPreparingToJoin(!1),Promise.reject();this.validateProperties(t),this.properties=Va(Va({},this.properties),t)}return void 0!==t.showLocalVideo&&(this._callObjectMode?console.error(\"showLocalVideo is not available in callObject mode\"):this._showLocalVideo=!!t.showLocalVideo),void 0!==t.showParticipantsBar&&(this._callObjectMode?console.error(\"showParticipantsBar is not available in callObject mode\"):this._showParticipantsBar=!!t.showParticipantsBar),this._callState===bi||this._callState===yi?(console.warn(\"already joined meeting, call leave() before joining again\"),void this.updateIsPreparingToJoin(!1)):(this._updateCallState(yi,!1),this.emitDailyJSEvent({action:so}),this._preloadCache.inputSettings=this._prepInputSettingsForSharing(this._inputSettings||{},!1),this.sendMessageToCallMachine({action:\"join-meeting\",properties:oc(this.properties,this.callClientId),preloadCache:oc(this._preloadCache,this.callClientId)}),new Promise((function(t,r){e._joinedCallback=function(i,o){if(e._callState!==wi){if(e._updateCallState(bi),i)for(var s in i){if(e._callObjectMode){var a=e._callMachine().store;ua(i[s],a),da(i[s],a),ha(i[s],e._participants[s],a)}e._participants[s]=Va({},i[s]),e.toggleParticipantAudioBasedOnNativeAudioFocus()}n&&e.loadCss(e.properties),t(i)}else r(o)}})))})),function(){return I.apply(this,arguments)})},{key:\"leave\",value:(j=p((function*(){var e=this;return this._testCallInProgress&&this.stopTestCallQuality(),new Promise((function(t){e._callState===_i||e._callState===wi?t():e._callObjectLoader&&!e._callObjectLoader.loaded?(e._callObjectLoader.cancel(),e._updateCallState(_i),e.resetMeetingDependentVars(),e.emitDailyJSEvent({action:_i}),t()):(e._resolveLeave=t,e.sendMessageToCallMachine({action:\"leave-meeting\"}))}))})),function(){return j.apply(this,arguments)})},{key:\"startScreenShare\",value:(A=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(lc(this._callMachineInitialized,\"startScreenShare()\"),t.screenVideoSendSettings&&this._validateVideoSendSettings(\"screenVideo\",t.screenVideoSendSettings),t.mediaStream&&(this._sharedTracks.screenMediaStream=t.mediaStream,t.mediaStream=ls),\"undefined\"!=typeof DailyNativeUtils&&void 0!==DailyNativeUtils.isIOS&&DailyNativeUtils.isIOS){var n=this.nativeUtils();if(yield n.isScreenBeingCaptured())return void this.emitDailyJSEvent({action:ts,type:\"screen-share-error\",errorMsg:\"Could not start the screen sharing. The screen is already been captured!\"});n.setSystemScreenCaptureStartCallback((function(){n.setSystemScreenCaptureStartCallback(null),e.sendMessageToCallMachine({action:ss,captureOptions:t})})),n.presentSystemScreenCapturePrompt()}else this.sendMessageToCallMachine({action:ss,captureOptions:t})})),function(){return A.apply(this,arguments)})},{key:\"stopScreenShare\",value:function(){lc(this._callMachineInitialized,\"stopScreenShare()\"),this.sendMessageToCallMachine({action:\"local-screen-stop\"})}},{key:\"startRecording\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.type;if(t&&\"cloud\"!==t&&\"raw-tracks\"!==t&&\"local\"!==t)throw new Error(\"invalid type: \".concat(t,\", allowed values 'cloud', 'raw-tracks', or 'local'\"));this.sendMessageToCallMachine(Va({action:\"local-recording-start\"},e))}},{key:\"updateRecording\",value:function(e){var t=e.layout,n=void 0===t?{preset:\"default\"}:t,r=e.instanceId;this.sendMessageToCallMachine({action:\"daily-method-update-recording\",layout:n,instanceId:r})}},{key:\"stopRecording\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(Va({action:\"local-recording-stop\"},e))}},{key:\"startLiveStreaming\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(Va({action:\"daily-method-start-live-streaming\"},e))}},{key:\"updateLiveStreaming\",value:function(e){var t=e.layout,n=void 0===t?{preset:\"default\"}:t,r=e.instanceId;this.sendMessageToCallMachine({action:\"daily-method-update-live-streaming\",layout:n,instanceId:r})}},{key:\"addLiveStreamingEndpoints\",value:function(e){var t=e.endpoints,n=e.instanceId;this.sendMessageToCallMachine({action:as,endpointsOp:fs,endpoints:t,instanceId:n})}},{key:\"removeLiveStreamingEndpoints\",value:function(e){var t=e.endpoints,n=e.instanceId;this.sendMessageToCallMachine({action:as,endpointsOp:vs,endpoints:t,instanceId:n})}},{key:\"stopLiveStreaming\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(Va({action:\"daily-method-stop-live-streaming\"},e))}},{key:\"validateDailyConfig\",value:function(e){e.camSimulcastEncodings&&(console.warn(\"camSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide camera simulcast settings.\"),this.validateSimulcastEncodings(e.camSimulcastEncodings)),e.screenSimulcastEncodings&&console.warn(\"screenSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide screen simulcast settings.\"),Es()&&e.noAutoDefaultDeviceChange&&console.warn(\"noAutoDefaultDeviceChange is not supported on Android, and will be ignored.\")}},{key:\"validateSimulcastEncodings\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(e){if(!(e instanceof Array||Array.isArray(e)))throw new Error(\"encodings must be an Array\");if(!Ac(e.length,1,3))throw new Error(\"encodings must be an Array with between 1 to \".concat(3,\" layers\"));for(var r=0;r<e.length;r++){var i=e[r];for(var o in this._validateEncodingLayerHasValidProperties(i),i)if(Ya.includes(o)){if(\"number\"!=typeof i[o])throw new Error(\"\".concat(o,\" must be a number\"));if(t){var s=t[o],a=s.min,c=s.max;if(!Ac(i[o],a,c))throw new Error(\"\".concat(o,\" value not in range. valid range: \").concat(a,\" to \").concat(c))}}else if(![\"active\",\"scalabilityMode\"].includes(o))throw new Error(\"Invalid key \".concat(o,\", valid keys are:\")+Object.values(Ya));if(n&&!i.hasOwnProperty(\"maxBitrate\"))throw new Error(\"maxBitrate is not specified\")}}}},{key:\"startRemoteMediaPlayer\",value:(P=p((function*(e){var t=this,n=e.url,r=e.settings,i=void 0===r?{state:ps.PLAY}:r;try{!function(e){if(\"string\"!=typeof e)throw new Error('url parameter must be \"string\" type')}(n),Pc(i),function(e){for(var t in e)if(!Xa.includes(t))throw new Error(\"Invalid key \".concat(t,\", valid keys are: \").concat(Xa));e.simulcastEncodings&&this.validateSimulcastEncodings(e.simulcastEncodings,Ka,!0)}(i)}catch(e){throw console.error(\"invalid argument Error: \".concat(e)),console.error('startRemoteMediaPlayer arguments must be of the form:\\n  { url: \"playback url\",\\n  settings?:\\n  {state: \"play\"|\"pause\", simulcastEncodings?: [{}] } }'),e}return new Promise((function(e,r){t.sendMessageToCallMachine({action:\"daily-method-start-remote-media-player\",url:n,settings:i},(function(t){t.error?r({error:t.error,errorMsg:t.errorMsg}):e({session_id:t.session_id,remoteMediaPlayerState:{state:t.state,settings:t.settings}})}))}))})),function(e){return P.apply(this,arguments)})},{key:\"stopRemoteMediaPlayer\",value:(O=p((function*(e){var t=this;if(\"string\"!=typeof e)throw new Error(\" remotePlayerID must be of type string\");return new Promise((function(n,r){t.sendMessageToCallMachine({action:\"daily-method-stop-remote-media-player\",session_id:e},(function(e){e.error?r({error:e.error,errorMsg:e.errorMsg}):n()}))}))})),function(e){return O.apply(this,arguments)})},{key:\"updateRemoteMediaPlayer\",value:(T=p((function*(e){var t=this,n=e.session_id,r=e.settings;try{Pc(r)}catch(e){throw console.error(\"invalid argument Error: \".concat(e)),console.error('updateRemoteMediaPlayer arguments must be of the form:\\n  session_id: \"participant session\",\\n  { settings?: {state: \"play\"|\"pause\"} }'),e}return new Promise((function(e,i){t.sendMessageToCallMachine({action:\"daily-method-update-remote-media-player\",session_id:n,settings:r},(function(t){t.error?i({error:t.error,errorMsg:t.errorMsg}):e({session_id:t.session_id,remoteMediaPlayerState:{state:t.state,settings:t.settings}})}))}))})),function(e){return T.apply(this,arguments)})},{key:\"startTranscription\",value:function(e){sc(this._callState,\"startTranscription()\"),this.sendMessageToCallMachine(Va({action:\"daily-method-start-transcription\"},e))}},{key:\"updateTranscription\",value:function(e){if(sc(this._callState,\"updateTranscription()\"),!e)throw new Error(\"updateTranscription Error: options is mandatory\");if(\"object\"!==n(e))throw new Error(\"updateTranscription Error: options must be object type\");if(e.participants&&!Array.isArray(e.participants))throw new Error(\"updateTranscription Error: participants must be an array\");this.sendMessageToCallMachine(Va({action:\"daily-method-update-transcription\"},e))}},{key:\"stopTranscription\",value:function(e){if(sc(this._callState,\"stopTranscription()\"),e&&\"object\"!==n(e))throw new Error(\"stopTranscription Error: options must be object type\");if(e&&!e.instanceId)throw new Error('\"instanceId\" not provided');this.sendMessageToCallMachine(Va({action:\"daily-method-stop-transcription\"},e))}},{key:\"startDialOut\",value:(E=p((function*(e){var t=this;sc(this._callState,\"startDialOut()\");var n=function(e){if(e){if(!Array.isArray(e))throw new Error(\"Error starting dial out: audio codec must be an array\");if(e.length<=0)throw new Error(\"Error starting dial out: audio codec array specified but empty\");e.forEach((function(e){if(\"string\"!=typeof e)throw new Error(\"Error starting dial out: audio codec must be a string\");if(\"OPUS\"!==e&&\"PCMU\"!==e&&\"PCMA\"!==e&&\"G722\"!==e)throw new Error(\"Error starting dial out: audio codec must be one of OPUS, PCMU, PCMA, G722\")}))}};if(!e.sipUri&&!e.phoneNumber)throw new Error(\"Error starting dial out: either a sip uri or phone number must be provided\");if(e.sipUri&&e.phoneNumber)throw new Error(\"Error starting dial out: only one of sip uri or phone number must be provided\");if(e.sipUri){if(\"string\"!=typeof e.sipUri)throw new Error(\"Error starting dial out: sipUri must be a string\");if(!e.sipUri.startsWith(\"sip:\"))throw new Error(\"Error starting dial out: Invalid SIP URI, must start with 'sip:'\");if(e.video&&\"boolean\"!=typeof e.video)throw new Error(\"Error starting dial out: video must be a boolean value\");!function(e){if(e&&(n(e.audio),e.video)){if(!Array.isArray(e.video))throw new Error(\"Error starting dial out: video codec must be an array\");if(e.video.length<=0)throw new Error(\"Error starting dial out: video codec array specified but empty\");e.video.forEach((function(e){if(\"string\"!=typeof e)throw new Error(\"Error starting dial out: video codec must be a string\");if(\"H264\"!==e&&\"VP8\"!==e)throw new Error(\"Error starting dial out: video codec must be H264 or VP8\")}))}}(e.codecs)}if(e.phoneNumber){if(\"string\"!=typeof e.phoneNumber)throw new Error(\"Error starting dial out: phoneNumber must be a string\");if(!/^\\+\\d{1,}$/.test(e.phoneNumber))throw new Error(\"Error starting dial out: Invalid phone number, must be valid phone number as per E.164\");e.codecs&&n(e.codecs.audio)}if(e.callerId){if(\"string\"!=typeof e.callerId)throw new Error(\"Error starting dial out: callerId must be a string\");if(e.sipUri)throw new Error(\"Error starting dial out: callerId not allowed with sipUri\")}if(e.displayName){if(\"string\"!=typeof e.displayName)throw new Error(\"Error starting dial out: displayName must be a string\");if(e.displayName.length>=200)throw new Error(\"Error starting dial out: displayName length must be less than 200\")}if(e.userId){if(\"string\"!=typeof e.userId)throw new Error(\"Error starting dial out: userId must be a string\");if(e.userId.length>36)throw new Error(\"Error starting dial out: userId length must be less than or equal to 36\")}return new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:\"dialout-start\"},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return E.apply(this,arguments)})},{key:\"stopDialOut\",value:function(e){var t=this;return sc(this._callState,\"stopDialOut()\"),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:\"dialout-stop\"},e),(function(e){e.error?r(e.error):n(e)}))}))}},{key:\"sipCallTransfer\",value:(C=p((function*(e){var t=this;if(sc(this._callState,\"sipCallTransfer()\"),!e)throw new Error(\"sipCallTransfer() requires a sessionId and toEndPoint\");return e.useSipRefer=!1,Oc(e,\"sipCallTransfer\"),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:gs},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return C.apply(this,arguments)})},{key:\"sipRefer\",value:(M=p((function*(e){var t=this;if(sc(this._callState,\"sipRefer()\"),!e)throw new Error(\"sessionId and toEndPoint are mandatory parameter\");return e.useSipRefer=!0,Oc(e,\"sipRefer\"),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:gs},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return M.apply(this,arguments)})},{key:\"sendDTMF\",value:(k=p((function*(e){var t=this;return sc(this._callState,\"sendDTMF()\"),function(e){var t=e.sessionId,n=e.tones;if(!t||!n)throw new Error(\"sessionId and tones are mandatory parameter\");if(\"string\"!=typeof t||\"string\"!=typeof n)throw new Error(\"sessionId and tones should be of string type\");if(n.length>20)throw new Error(\"tones string must be upto 20 characters\");var r=/[^0-9A-D*#]/g,i=n.match(r);if(i&&i[0])throw new Error(\"\".concat(i[0],\" is not valid DTMF tone\"))}(e),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:\"send-dtmf\"},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return k.apply(this,arguments)})},{key:\"getNetworkStats\",value:function(){var e=this;if(this._callState!==bi){return Promise.resolve(Va({stats:{latest:{}}},this._network))}return new Promise((function(t){e.sendMessageToCallMachine({action:\"get-calc-stats\"},(function(n){t(Va(Va({},e._network),{},{stats:n.stats}))}))}))}},{key:\"testWebsocketConnectivity\",value:(S=p((function*(){var e=this;if(uc(this._testCallInProgress,\"testWebsocketConnectivity()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}return new Promise((function(t,n){e.sendMessageToCallMachine({action:\"test-websocket-connectivity\"},(function(e){e.error?n(e.error):t(e.results)}))}))})),function(){return S.apply(this,arguments)})},{key:\"abortTestWebsocketConnectivity\",value:function(){this.sendMessageToCallMachine({action:\"abort-test-websocket-connectivity\"})}},{key:\"_validateVideoTrackForNetworkTests\",value:function(e){return e?e instanceof MediaStreamTrack?!!Ea(e,{isLocalScreenVideo:!1})||(console.error(\"Video track is not playable. This test needs a live video track.\"),!1):(console.error(\"Video track needs to be of type `MediaStreamTrack`.\"),!1):(console.error(\"Missing video track. You must provide a video track in order to run this test.\"),!1)}},{key:\"testCallQuality\",value:(w=p((function*(){var t=this;hc(),dc(this._callObjectMode,\"testCallQuality()\"),lc(this._callMachineInitialized,\"testCallQuality()\",null,!0),cc(this._callState,this._isPreparingToJoin,\"testCallQuality()\");var n=this._testCallAlreadyInProgress,r=function(e){n||(t._testCallInProgress=e)};if(r(!0),this.needsLoad())try{var i=this._callState;yield this.load(),this._callState=i}catch(e){return r(!1),Promise.reject(e)}return new Promise((function(n){t.sendMessageToCallMachine({action:\"test-call-quality\",dailyJsVersion:t.properties.dailyJsVersion},(function(i){var o=i.results,s=o.result,a=e(o,Fa);if(\"failed\"===s){var c,l=Va({},a);null!==(c=a.error)&&void 0!==c&&c.details?(a.error.details=JSON.parse(a.error.details),l.error=Va(Va({},l.error),{},{details:Va({},l.error.details)}),l.error.details.duringTest=\"testCallQuality\"):(l.error=l.error?Va({},l.error):{},l.error.details={duringTest:\"testCallQuality\"}),t._maybeSendToSentry(l)}r(!1),n(Va({result:s},a))}))}))})),function(){return w.apply(this,arguments)})},{key:\"stopTestCallQuality\",value:function(){this.sendMessageToCallMachine({action:\"stop-test-call-quality\"})}},{key:\"testConnectionQuality\",value:(_=p((function*(e){var t;ys()?(console.warn(\"testConnectionQuality() is deprecated: use testPeerToPeerCallQuality() instead\"),t=yield this.testPeerToPeerCallQuality(e)):(console.warn(\"testConnectionQuality() is deprecated: use testCallQuality() instead\"),t=yield this.testCallQuality());var n={result:t.result,secondsElapsed:t.secondsElapsed};return t.data&&(n.data={maxRTT:t.data.maxRoundTripTime,packetLoss:t.data.avgRecvPacketLoss}),n})),function(e){return _.apply(this,arguments)})},{key:\"testPeerToPeerCallQuality\",value:(b=p((function*(e){var t=this;if(uc(this._testCallInProgress,\"testPeerToPeerCallQuality()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}var n=e.videoTrack,r=e.duration;if(!this._validateVideoTrackForNetworkTests(n))throw new Error(\"Video track error\");return this._sharedTracks.videoTrackForConnectionQualityTest=n,new Promise((function(e,n){t.sendMessageToCallMachine({action:\"test-p2p-call-quality\",duration:r},(function(t){t.error?n(t.error):e(t.results)}))}))})),function(e){return b.apply(this,arguments)})},{key:\"stopTestConnectionQuality\",value:function(){ys()?(console.warn(\"stopTestConnectionQuality() is deprecated: use testPeerToPeerCallQuality() and stopTestPeerToPeerCallQuality() instead\"),this.stopTestPeerToPeerCallQuality()):(console.warn(\"stopTestConnectionQuality() is deprecated: use testCallQuality() and stopTestCallQuality() instead\"),this.stopTestCallQuality())}},{key:\"stopTestPeerToPeerCallQuality\",value:function(){this.sendMessageToCallMachine({action:\"stop-test-p2p-call-quality\"})}},{key:\"testNetworkConnectivity\",value:(y=p((function*(e){var t=this;if(uc(this._testCallInProgress,\"testNetworkConnectivity()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}if(!this._validateVideoTrackForNetworkTests(e))throw new Error(\"Video track error\");return this._sharedTracks.videoTrackForNetworkConnectivityTest=e,new Promise((function(e,n){t.sendMessageToCallMachine({action:\"test-network-connectivity\"},(function(t){t.error?n(t.error):e(t.results)}))}))})),function(e){return y.apply(this,arguments)})},{key:\"abortTestNetworkConnectivity\",value:function(){this.sendMessageToCallMachine({action:\"abort-test-network-connectivity\"})}},{key:\"getCpuLoadStats\",value:function(){var e=this;return new Promise((function(t){if(e._callState===bi){e.sendMessageToCallMachine({action:\"get-cpu-load-stats\"},(function(e){t(e.cpuStats)}))}else t({cpuLoadState:void 0,cpuLoadStateReason:void 0,stats:{}})}))}},{key:\"_validateEncodingLayerHasValidProperties\",value:function(e){var t;if(!((null===(t=Object.keys(e))||void 0===t?void 0:t.length)>0))throw new Error(\"Empty encoding is not allowed. At least one of these valid keys should be specified:\"+Object.values(Ya))}},{key:\"_validateVideoSendSettings\",value:function(e,t){var r=\"screenVideo\"===e?[\"default-screen-video\",\"detail-optimized\",\"motion-optimized\",\"motion-and-detail-balanced\"]:[\"default-video\",\"bandwidth-optimized\",\"bandwidth-and-quality-balanced\",\"quality-optimized\",\"adaptive-2-layers\",\"adaptive-3-layers\"],i=\"Video send settings should be either an object or one of the supported presets: \".concat(r.join());if(\"string\"==typeof t){if(!r.includes(t))throw new Error(i)}else{if(\"object\"!==n(t))throw new Error(i);if(!t.maxQuality&&!t.encodings&&void 0===t.allowAdaptiveLayers)throw new Error(\"Video send settings must contain at least maxQuality, allowAdaptiveLayers or encodings attribute\");if(t.maxQuality&&-1===[\"low\",\"medium\",\"high\"].indexOf(t.maxQuality))throw new Error(\"maxQuality must be either low, medium or high\");if(t.encodings){var o=!1;switch(Object.keys(t.encodings).length){case 1:o=!t.encodings.low;break;case 2:o=!t.encodings.low||!t.encodings.medium;break;case 3:o=!t.encodings.low||!t.encodings.medium||!t.encodings.high;break;default:o=!0}if(o)throw new Error(\"Encodings must be defined as: low, low and medium, or low, medium and high.\");t.encodings.low&&this._validateEncodingLayerHasValidProperties(t.encodings.low),t.encodings.medium&&this._validateEncodingLayerHasValidProperties(t.encodings.medium),t.encodings.high&&this._validateEncodingLayerHasValidProperties(t.encodings.high)}}}},{key:\"validateUpdateSendSettings\",value:function(e){var t=this;if(!e||0===Object.keys(e).length)throw new Error(\"Send settings must contain at least information for one track!\");Object.entries(e).forEach((function(e){var n=f(e,2),r=n[0],i=n[1];t._validateVideoSendSettings(r,i)}))}},{key:\"updateSendSettings\",value:function(e){var t=this;return this.validateUpdateSendSettings(e),this.needsLoad()?(this._preloadCache.sendSettings=e,{sendSettings:this._preloadCache.sendSettings}):new Promise((function(n,r){t.sendMessageToCallMachine({action:\"update-send-settings\",sendSettings:e},(function(e){e.error?r(e.error):n(e.sendSettings)}))}))}},{key:\"getSendSettings\",value:function(){return this._sendSettings||this._preloadCache.sendSettings}},{key:\"getLocalAudioLevel\",value:function(){return this._localAudioLevel}},{key:\"getRemoteParticipantsAudioLevel\",value:function(){return this._remoteParticipantsAudioLevel}},{key:\"getActiveSpeaker\",value:function(){return hc(),this._activeSpeaker}},{key:\"setActiveSpeakerMode\",value:function(e){return hc(),this.sendMessageToCallMachine({action:\"set-active-speaker-mode\",enabled:e}),this}},{key:\"activeSpeakerMode\",value:function(){return hc(),this._activeSpeakerMode}},{key:\"subscribeToTracksAutomatically\",value:function(){return this._preloadCache.subscribeToTracksAutomatically}},{key:\"setSubscribeToTracksAutomatically\",value:function(e){return sc(this._callState,\"setSubscribeToTracksAutomatically()\",\"Use the subscribeToTracksAutomatically configuration property.\"),this._preloadCache.subscribeToTracksAutomatically=e,this.sendMessageToCallMachine({action:\"daily-method-subscribe-to-tracks-automatically\",enabled:e}),this}},{key:\"enumerateDevices\",value:(m=p((function*(){var e=this;if(this._callObjectMode){var t=yield navigator.mediaDevices.enumerateDevices();return\"Firefox\"===Os()&&Ps().major>115&&Ps().major<123&&(t=t.filter((function(e){return\"audiooutput\"!==e.kind}))),{devices:t.map((function(e){var t=JSON.parse(JSON.stringify(e));if(!ys()&&\"videoinput\"===e.kind&&e.getCapabilities){var n,r=e.getCapabilities();t.facing=(null==r||null===(n=r.facingMode)||void 0===n?void 0:n.length)>=1?r.facingMode[0]:void 0}return t}))}}return new Promise((function(t){e.sendMessageToCallMachine({action:\"enumerate-devices\"},(function(e){t({devices:e.devices})}))}))})),function(){return m.apply(this,arguments)})},{key:\"sendAppMessage\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"*\";if(sc(this._callState,\"sendAppMessage()\"),JSON.stringify(e).length>this._maxAppMessageSize)throw new Error(\"Message data too large. Max size is \"+this._maxAppMessageSize);return this.sendMessageToCallMachine({action:\"app-msg\",data:e,to:t}),this}},{key:\"addFakeParticipant\",value:function(e){return hc(),sc(this._callState,\"addFakeParticipant()\"),this.sendMessageToCallMachine(Va({action:\"add-fake-participant\"},e)),this}},{key:\"setShowNamesMode\",value:function(e){return pc(this._callObjectMode,\"setShowNamesMode()\"),hc(),e&&\"always\"!==e&&\"never\"!==e?(console.error('setShowNamesMode argument should be \"always\", \"never\", or false'),this):(this.sendMessageToCallMachine({action:\"set-show-names\",mode:e}),this)}},{key:\"setShowLocalVideo\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return pc(this._callObjectMode,\"setShowLocalVideo()\"),hc(),sc(this._callState,\"setShowLocalVideo()\"),\"boolean\"!=typeof e?(console.error(\"setShowLocalVideo only accepts a boolean value\"),this):(this.sendMessageToCallMachine({action:\"set-show-local-video\",show:e}),this._showLocalVideo=e,this)}},{key:\"showLocalVideo\",value:function(){return pc(this._callObjectMode,\"showLocalVideo()\"),hc(),this._showLocalVideo}},{key:\"setShowParticipantsBar\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return pc(this._callObjectMode,\"setShowParticipantsBar()\"),hc(),sc(this._callState,\"setShowParticipantsBar()\"),\"boolean\"!=typeof e?(console.error(\"setShowParticipantsBar only accepts a boolean value\"),this):(this.sendMessageToCallMachine({action:\"set-show-participants-bar\",show:e}),this._showParticipantsBar=e,this)}},{key:\"showParticipantsBar\",value:function(){return pc(this._callObjectMode,\"showParticipantsBar()\"),hc(),this._showParticipantsBar}},{key:\"customIntegrations\",value:function(){return hc(),pc(this._callObjectMode,\"customIntegrations()\"),this._customIntegrations}},{key:\"setCustomIntegrations\",value:function(e){return hc(),pc(this._callObjectMode,\"setCustomIntegrations()\"),sc(this._callState,\"setCustomIntegrations()\"),Ec(e)?(this.sendMessageToCallMachine({action:\"set-custom-integrations\",integrations:e}),this._customIntegrations=e,this):this}},{key:\"startCustomIntegrations\",value:function(e){var t=this;if(hc(),pc(this._callObjectMode,\"startCustomIntegrations()\"),sc(this._callState,\"startCustomIntegrations()\"),Array.isArray(e)&&e.some((function(e){return\"string\"!=typeof e}))||!Array.isArray(e)&&\"string\"!=typeof e)return console.error(\"startCustomIntegrations() only accepts string | string[]\"),this;var n=\"string\"==typeof e?[e]:e,r=n.filter((function(e){return!(e in t._customIntegrations)}));return r.length?(console.error(\"Can't find custom integration(s): \\\"\".concat(r.join(\", \"),'\"')),this):(this.sendMessageToCallMachine({action:\"start-custom-integrations\",ids:n}),this)}},{key:\"stopCustomIntegrations\",value:function(e){var t=this;if(hc(),pc(this._callObjectMode,\"stopCustomIntegrations()\"),sc(this._callState,\"stopCustomIntegrations()\"),Array.isArray(e)&&e.some((function(e){return\"string\"!=typeof e}))||!Array.isArray(e)&&\"string\"!=typeof e)return console.error(\"stopCustomIntegrations() only accepts string | string[]\"),this;var n=\"string\"==typeof e?[e]:e,r=n.filter((function(e){return!(e in t._customIntegrations)}));return r.length?(console.error(\"Can't find custom integration(s): \\\"\".concat(r.join(\", \"),'\"')),this):(this.sendMessageToCallMachine({action:\"stop-custom-integrations\",ids:n}),this)}},{key:\"customTrayButtons\",value:function(){return pc(this._callObjectMode,\"customTrayButtons()\"),hc(),this._customTrayButtons}},{key:\"updateCustomTrayButtons\",value:function(e){return pc(this._callObjectMode,\"updateCustomTrayButtons()\"),hc(),sc(this._callState,\"updateCustomTrayButtons()\"),Cc(e)?(this.sendMessageToCallMachine({action:\"update-custom-tray-buttons\",btns:e}),this._customTrayButtons=e,this):(console.error(\"updateCustomTrayButtons only accepts a dictionary of the type \".concat(JSON.stringify(ec))),this)}},{key:\"theme\",value:function(){return pc(this._callObjectMode,\"theme()\"),this.properties.theme}},{key:\"setTheme\",value:function(e){var t=this;return pc(this._callObjectMode,\"setTheme()\"),new Promise((function(n,r){try{t.validateProperties({theme:e}),t.properties.theme=Va({},e),t.sendMessageToCallMachine({action:\"set-theme\",theme:t.properties.theme});try{t.emitDailyJSEvent({action:eo,theme:t.properties.theme})}catch(e){console.log(\"could not emit 'theme-updated'\",e)}n(t.properties.theme)}catch(e){r(e)}}))}},{key:\"requestFullscreen\",value:(g=p((function*(){if(hc(),this._iframe&&!document.fullscreenElement&&ws())try{(yield this._iframe.requestFullscreen)?this._iframe.requestFullscreen():this._iframe.webkitRequestFullscreen()}catch(e){console.log(\"could not make video call fullscreen\",e)}})),function(){return g.apply(this,arguments)})},{key:\"exitFullscreen\",value:function(){hc(),document.fullscreenElement?document.exitFullscreen():document.webkitFullscreenElement&&document.webkitExitFullscreen()}},{key:\"getSidebarView\",value:(v=p((function*(){var e=this;return this._callObjectMode?(console.error(\"getSidebarView is not available in callObject mode\"),Promise.resolve(null)):new Promise((function(t){e.sendMessageToCallMachine({action:\"get-sidebar-view\"},(function(e){t(e.view)}))}))})),function(){return v.apply(this,arguments)})},{key:\"setSidebarView\",value:function(e){return this._callObjectMode?(console.error(\"setSidebarView is not available in callObject mode\"),this):(this.sendMessageToCallMachine({action:\"set-sidebar-view\",view:e}),this)}},{key:\"room\",value:(h=p((function*(){var e=this,t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).includeRoomConfigDefaults,n=void 0===t||t;return this._accessState.access===Oi||this.needsLoad()?this.properties.url?{roomUrlPendingJoin:this.properties.url}:null:new Promise((function(t){e.sendMessageToCallMachine({action:\"lib-room-info\",includeRoomConfigDefaults:n},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))})),function(){return h.apply(this,arguments)})},{key:\"geo\",value:(d=p((function*(){try{var e=yield fetch(\"https://gs.daily.co/_ks_/x-swsl/:\");return{current:(yield e.json()).geo}}catch(e){return console.error(\"geo lookup failed\",e),{current:\"\"}}})),function(){return d.apply(this,arguments)})},{key:\"setNetworkTopology\",value:(c=p((function*(e){var t=this;return hc(),sc(this._callState,\"setNetworkTopology()\"),new Promise((function(n,r){t.sendMessageToCallMachine({action:\"set-network-topology\",opts:e},(function(e){e.error?r({error:e.error}):n({workerId:e.workerId})}))}))})),function(e){return c.apply(this,arguments)})},{key:\"getNetworkTopology\",value:(i=p((function*(){var e=this;return new Promise((function(t,n){e.needsLoad()&&t({topology:\"none\"}),e.sendMessageToCallMachine({action:\"get-network-topology\"},(function(e){e.error?n({error:e.error}):t({topology:e.topology})}))}))})),function(){return i.apply(this,arguments)})},{key:\"setPlayNewParticipantSound\",value:function(e){if(hc(),\"number\"!=typeof e&&!0!==e&&!1!==e)throw new Error(\"argument to setShouldPlayNewParticipantSound should be true, false, or a number, but is \".concat(e));this.sendMessageToCallMachine({action:\"daily-method-set-play-ding\",arg:e})}},{key:\"on\",value:function(e,t){return x.prototype.on.call(this,e,t)}},{key:\"once\",value:function(e,t){return x.prototype.once.call(this,e,t)}},{key:\"off\",value:function(e,t){return x.prototype.off.call(this,e,t)}},{key:\"validateProperties\",value:function(e){var t,n;if(null!=e&&null!==(t=e.dailyConfig)&&void 0!==t&&t.userMediaAudioConstraints){var r,i;ys()||console.warn(\"userMediaAudioConstraints is deprecated. You can override constraints with inputSettings.audio.settings, found in DailyCallOptions.\");var o=e.inputSettings||{};o.audio=(null===(r=e.inputSettings)||void 0===r?void 0:r.audio)||{},o.audio.settings=(null===(i=e.inputSettings)||void 0===i||null===(i=i.audio)||void 0===i?void 0:i.settings)||{},o.audio.settings=Va(Va({},o.audio.settings),e.dailyConfig.userMediaAudioConstraints),e.inputSettings=o,delete e.dailyConfig.userMediaAudioConstraints}if(null!=e&&null!==(n=e.dailyConfig)&&void 0!==n&&n.userMediaVideoConstraints){var s,a;ys()||console.warn(\"userMediaVideoConstraints is deprecated. You can override constraints with inputSettings.video.settings, found in DailyCallOptions.\");var c=e.inputSettings||{};c.video=(null===(s=e.inputSettings)||void 0===s?void 0:s.video)||{},c.video.settings=(null===(a=e.inputSettings)||void 0===a||null===(a=a.video)||void 0===a?void 0:a.settings)||{},c.video.settings=Va(Va({},c.video.settings),e.dailyConfig.userMediaVideoConstraints),e.inputSettings=c,delete e.dailyConfig.userMediaVideoConstraints}for(var l in e){if(!nc[l])throw new Error(\"unrecognized property '\".concat(l,\"'\"));if(nc[l].validate&&!nc[l].validate(e[l],this))throw new Error(\"property '\".concat(l,\"': \").concat(nc[l].help))}}},{key:\"assembleMeetingUrl\",value:function(){var e,t,n=Va(Va({},this.properties),{},{emb:this.callClientId,embHref:encodeURIComponent(window.location.href),proxy:null!==(e=this.properties.dailyConfig)&&void 0!==e&&e.proxyUrl?encodeURIComponent(null===(t=this.properties.dailyConfig)||void 0===t?void 0:t.proxyUrl):void 0}),r=n.url.match(/\\?/)?\"&\":\"?\";return n.url+r+Object.keys(nc).filter((function(e){return nc[e].queryString&&void 0!==n[e]})).map((function(e){return\"\".concat(nc[e].queryString,\"=\").concat(n[e])})).join(\"&\")}},{key:\"needsLoad\",value:function(){return[vi,gi,_i,wi].includes(this._callState)}},{key:\"sendMessageToCallMachine\",value:function(e,t){if(this._destroyed&&(this._logUseAfterDestroy(),this.strictMode))throw new Error(\"Use after destroy\");this._messageChannel.sendMessageToCallMachine(e,t,this.callClientId,this._iframe)}},{key:\"forwardPackagedMessageToCallMachine\",value:function(e){this._messageChannel.forwardPackagedMessageToCallMachine(e,this._iframe,this.callClientId)}},{key:\"addListenerForPackagedMessagesFromCallMachine\",value:function(e){return this._messageChannel.addListenerForPackagedMessagesFromCallMachine(e,this.callClientId)}},{key:\"removeListenerForPackagedMessagesFromCallMachine\",value:function(e){this._messageChannel.removeListenerForPackagedMessagesFromCallMachine(e)}},{key:\"handleMessageFromCallMachine\",value:function(t){switch(t.action){case Xi:this.sendMessageToCallMachine(Va({action:Zi},this.properties));break;case\"call-machine-initialized\":this._callMachineInitialized=!0;var n={action:cs,level:\"log\",code:1011,stats:{event:\"bundle load\",time:\"no-op\"===this._bundleLoadTime?0:this._bundleLoadTime,preLoaded:\"no-op\"===this._bundleLoadTime,url:Z(this.properties.dailyConfig)}};this.sendMessageToCallMachine(n),this._delayDuplicateInstanceLog&&this._logDuplicateInstanceAttempt();break;case ro:this._loadedCallback&&(this._loadedCallback(),this._loadedCallback=null),this.emitDailyJSEvent(t);break;case ao:var r,i=Va({},t);delete i.internal,this._maxAppMessageSize=(null===(r=t.internal)||void 0===r?void 0:r._maxAppMessageSize)||rs,this._joinedCallback&&(this._joinedCallback(t.participants),this._joinedCallback=null),this.emitDailyJSEvent(i);break;case lo:case uo:if(this._callState===_i)return;if(t.participant&&t.participant.session_id){var o=t.participant.local?\"local\":t.participant.session_id;if(this._callObjectMode){var s=this._callMachine().store;ua(t.participant,s),da(t.participant,s),ha(t.participant,this._participants[o],s)}try{this.maybeParticipantTracksStopped(this._participants[o],t.participant),this.maybeParticipantTracksStarted(this._participants[o],t.participant),this.maybeEventRecordingStopped(this._participants[o],t.participant),this.maybeEventRecordingStarted(this._participants[o],t.participant)}catch(e){console.error(\"track events error\",e)}this.compareEqualForParticipantUpdateEvent(t.participant,this._participants[o])||(this._participants[o]=Va({},t.participant),this.toggleParticipantAudioBasedOnNativeAudioFocus(),this.emitDailyJSEvent(t))}break;case po:if(t.participant&&t.participant.session_id){var a=this._participants[t.participant.session_id];a&&this.maybeParticipantTracksStopped(a,null),delete this._participants[t.participant.session_id],this.emitDailyJSEvent(t)}break;case ho:N(this._participantCounts,t.participantCounts)||(this._participantCounts=t.participantCounts,this.emitDailyJSEvent(t));break;case fo:var c={access:t.access};t.awaitingAccess&&(c.awaitingAccess=t.awaitingAccess),N(this._accessState,c)||(this._accessState=c,this.emitDailyJSEvent(t));break;case vo:if(t.meetingSession){this._meetingSessionSummary=t.meetingSession,this.emitDailyJSEvent(t);var l=Va(Va({},t),{},{action:\"meeting-session-updated\"});this.emitDailyJSEvent(l)}break;case ns:var u;this._iframe&&!t.preserveIframe&&(this._iframe.src=\"\"),this._updateCallState(wi),this.resetMeetingDependentVars(),this._loadedCallback&&(this._loadedCallback(t.errorMsg),this._loadedCallback=null),t.preserveIframe;var d=e(t,Ba);null!=d&&null!==(u=d.error)&&void 0!==u&&u.details&&(d.error.details=JSON.parse(d.error.details)),this._maybeSendToSentry(t),this._joinedCallback&&(this._joinedCallback(null,d),this._joinedCallback=null),this.emitDailyJSEvent(d);break;case co:this._callState!==wi&&this._updateCallState(_i),this.resetMeetingDependentVars(),this._resolveLeave&&(this._resolveLeave(),this._resolveLeave=null),this.emitDailyJSEvent(t);break;case\"selected-devices-updated\":t.devices&&this.emitDailyJSEvent(t);break;case Jo:var p=t.state,h=t.threshold,f=t.quality,v=p.state,g=p.reasons;v===this._network.networkState&&N(g,this._network.networkStateReasons)&&h===this._network.threshold&&f===this._network.quality||(this._network.networkState=v,this._network.networkStateReasons=g,this._network.quality=f,this._network.threshold=h,t.networkState=v,g.length&&(t.networkStateReasons=g),delete t.state,this.emitDailyJSEvent(t));break;case qo:t&&t.cpuLoadState&&this.emitDailyJSEvent(t);break;case zo:t&&void 0!==t.faceCounts&&this.emitDailyJSEvent(t);break;case Uo:var m=t.activeSpeaker;this._activeSpeaker.peerId!==m.peerId&&(this._activeSpeaker.peerId=m.peerId,this.emitDailyJSEvent({action:t.action,activeSpeaker:this._activeSpeaker}));break;case\"show-local-video-changed\":if(this._callObjectMode)return;var y=t.show;this._showLocalVideo=y,this.emitDailyJSEvent({action:t.action,show:y});break;case Vo:var b=t.enabled;this._activeSpeakerMode!==b&&(this._activeSpeakerMode=b,this.emitDailyJSEvent({action:t.action,enabled:this._activeSpeakerMode}));break;case yo:case bo:case _o:this._waitingParticipants=t.allWaitingParticipants,this.emitDailyJSEvent({action:t.action,participant:t.participant});break;case Zo:N(this._receiveSettings,t.receiveSettings)||(this._receiveSettings=t.receiveSettings,this.emitDailyJSEvent({action:t.action,receiveSettings:t.receiveSettings}));break;case es:this._maybeUpdateInputSettings(t.inputSettings);break;case\"send-settings-updated\":N(this._sendSettings,t.sendSettings)||(this._sendSettings=t.sendSettings,this._preloadCache.sendSettings=null,this.emitDailyJSEvent({action:t.action,sendSettings:t.sendSettings}));break;case\"local-audio-level\":this._localAudioLevel=t.audioLevel,this._preloadCache.localAudioLevelObserver=null,this.emitDailyJSEvent(t);break;case\"remote-participants-audio-level\":this._remoteParticipantsAudioLevel=t.participantsAudioLevel,this._preloadCache.remoteParticipantsAudioLevelObserver=null,this.emitDailyJSEvent(t);break;case Lo:var _=t.session_id;this._rmpPlayerState[_]=t.playerState,this.emitDailyJSEvent(t);break;case No:delete this._rmpPlayerState[t.session_id],this.emitDailyJSEvent(t);break;case Do:var w=t.session_id,S=this._rmpPlayerState[w];S&&this.compareEqualForRMPUpdateEvent(S,t.remoteMediaPlayerState)||(this._rmpPlayerState[w]=t.remoteMediaPlayerState,this.emitDailyJSEvent(t));break;case\"custom-button-click\":case\"sidebar-view-changed\":this.emitDailyJSEvent(t);break;case go:var k=this._meetingSessionState.topology!==(t.meetingSessionState&&t.meetingSessionState.topology);this._meetingSessionState=jc(t.meetingSessionState,this._callObjectMode),(this._callObjectMode||k)&&this.emitDailyJSEvent(t);break;case Ro:this._isScreenSharing=!0,this.emitDailyJSEvent(t);break;case Fo:case Bo:this._isScreenSharing=!1,this.emitDailyJSEvent(t);break;case Eo:case To:case Oo:case Po:case Ao:case ko:case Mo:case Co:case io:case oo:case Io:case xo:case\"test-completed\":case $o:case jo:case Go:case Qo:case Ko:case Yo:case ts:case Xo:case\"dialin-ready\":case\"dialin-connected\":case\"dialin-error\":case\"dialin-stopped\":case\"dialin-warning\":case\"dialout-connected\":case\"dialout-answered\":case\"dialout-error\":case\"dialout-stopped\":case\"dialout-warning\":this.emitDailyJSEvent(t);break;case\"request-fullscreen\":this.requestFullscreen();break;case\"request-exit-fullscreen\":this.exitFullscreen()}}},{key:\"maybeEventRecordingStopped\",value:function(e,t){var n=\"record\";e&&(t.local||!1!==t[n]||e[n]===t[n]||this.emitDailyJSEvent({action:To}))}},{key:\"maybeEventRecordingStarted\",value:function(e,t){var n=\"record\";e&&(t.local||!0!==t[n]||e[n]===t[n]||this.emitDailyJSEvent({action:Eo}))}},{key:\"_trackStatePlayable\",value:function(e){return!(!e||e.state!==Ti)}},{key:\"_trackChanged\",value:function(e,t){return!((null==e?void 0:e.id)===(null==t?void 0:t.id))}},{key:\"maybeEventTrackStopped\",value:function(e,t,n){var r,i,o=null!==(r=null==t?void 0:t.tracks[e])&&void 0!==r?r:null,s=null!==(i=null==n?void 0:n.tracks[e])&&void 0!==i?i:null,a=null==o?void 0:o.track;if(a){var c=this._trackStatePlayable(o),l=this._trackStatePlayable(s),u=this._trackChanged(a,null==s?void 0:s.track);c&&(l&&!u||this.emitDailyJSEvent({action:So,track:a,participant:null!=n?n:t,type:e}))}}},{key:\"maybeEventTrackStarted\",value:function(e,t,n){var r,i,o=null!==(r=null==t?void 0:t.tracks[e])&&void 0!==r?r:null,s=null!==(i=null==n?void 0:n.tracks[e])&&void 0!==i?i:null,a=null==s?void 0:s.track;if(a){var c=this._trackStatePlayable(o),l=this._trackStatePlayable(s),u=this._trackChanged(null==o?void 0:o.track,a);l&&(c&&!u||this.emitDailyJSEvent({action:wo,track:a,participant:n,type:e}))}}},{key:\"maybeParticipantTracksStopped\",value:function(e,t){if(e)for(var n in e.tracks)this.maybeEventTrackStopped(n,e,t)}},{key:\"maybeParticipantTracksStarted\",value:function(e,t){if(t)for(var n in t.tracks)this.maybeEventTrackStarted(n,e,t)}},{key:\"compareEqualForRMPUpdateEvent\",value:function(e,t){var n,r;return e.state===t.state&&(null===(n=e.settings)||void 0===n?void 0:n.volume)===(null===(r=t.settings)||void 0===r?void 0:r.volume)}},{key:\"emitDailyJSEvent\",value:function(e){try{e.callClientId=this.callClientId,this.emit(e.action,e)}catch(t){console.log(\"could not emit\",e,t)}}},{key:\"compareEqualForParticipantUpdateEvent\",value:function(e,t){return!!N(e,t)&&((!e.videoTrack||!t.videoTrack||e.videoTrack.id===t.videoTrack.id&&e.videoTrack.muted===t.videoTrack.muted&&e.videoTrack.enabled===t.videoTrack.enabled)&&(!e.audioTrack||!t.audioTrack||e.audioTrack.id===t.audioTrack.id&&e.audioTrack.muted===t.audioTrack.muted&&e.audioTrack.enabled===t.audioTrack.enabled))}},{key:\"nativeUtils\",value:function(){return ys()?\"undefined\"==typeof DailyNativeUtils?(console.warn(\"in React Native, DailyNativeUtils is expected to be available\"),null):DailyNativeUtils:null}},{key:\"updateIsPreparingToJoin\",value:function(e){this._updateCallState(this._callState,e)}},{key:\"_updateCallState\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._isPreparingToJoin;if(e!==this._callState||t!==this._isPreparingToJoin){var n=this._callState,r=this._isPreparingToJoin;this._callState=e,this._isPreparingToJoin=t;var i=this._callState===bi;this.updateShowAndroidOngoingMeetingNotification(i);var o=ac(n,r),s=ac(this._callState,this._isPreparingToJoin);o!==s&&(this.updateKeepDeviceAwake(s),this.updateDeviceAudioMode(s),this.updateNoOpRecordingEnsuringBackgroundContinuity(s))}}},{key:\"resetMeetingDependentVars\",value:function(){this._participants={},this._participantCounts=Qa,this._waitingParticipants={},this._activeSpeaker={},this._activeSpeakerMode=!1,this._didPreAuth=!1,this._accessState={access:Oi},this._finalSummaryOfPrevSession=this._meetingSessionSummary,this._meetingSessionSummary={},this._meetingSessionState=jc(Ga,this._callObjectMode),this._isScreenSharing=!1,this._receiveSettings={},this._inputSettings=void 0,this._sendSettings={},this._localAudioLevel=0,this._isLocalAudioLevelObserverRunning=!1,this._remoteParticipantsAudioLevel={},this._isRemoteParticipantsAudioLevelObserverRunning=!1,this._maxAppMessageSize=rs,this._callMachineInitialized=!1,this._bundleLoadTime=void 0,this._preloadCache}},{key:\"updateKeepDeviceAwake\",value:function(e){ys()&&this.nativeUtils().setKeepDeviceAwake(e,this.callClientId)}},{key:\"updateDeviceAudioMode\",value:function(e){if(ys()&&!this.disableReactNativeAutoDeviceManagement(\"audio\")){var t=e?this._nativeInCallAudioMode:\"idle\";this.nativeUtils().setAudioMode(t)}}},{key:\"updateShowAndroidOngoingMeetingNotification\",value:function(e){if(ys()&&this.nativeUtils().setShowOngoingMeetingNotification){var t,n,r,i;if(this.properties.reactNativeConfig&&this.properties.reactNativeConfig.androidInCallNotification){var o=this.properties.reactNativeConfig.androidInCallNotification;t=o.title,n=o.subtitle,r=o.iconName,i=o.disableForCustomOverride}i&&(e=!1),this.nativeUtils().setShowOngoingMeetingNotification(e,t,n,r,this.callClientId)}}},{key:\"updateNoOpRecordingEnsuringBackgroundContinuity\",value:function(e){ys()&&this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity&&this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity(e)}},{key:\"toggleParticipantAudioBasedOnNativeAudioFocus\",value:function(){var e;if(ys()){var t=null===(e=this._callMachine())||void 0===e||null===(e=e.store)||void 0===e?void 0:e.getState();for(var n in null==t?void 0:t.streams){var r=t.streams[n];r&&r.pendingTrack&&\"audio\"===r.pendingTrack.kind&&(r.pendingTrack.enabled=this._hasNativeAudioFocus)}}}},{key:\"disableReactNativeAutoDeviceManagement\",value:function(e){return this.properties.reactNativeConfig&&this.properties.reactNativeConfig.disableAutoDeviceManagement&&this.properties.reactNativeConfig.disableAutoDeviceManagement[e]}},{key:\"absoluteUrl\",value:function(e){if(void 0!==e){var t=document.createElement(\"a\");return t.href=e,t.href}}},{key:\"sayHello\",value:function(){var e=\"hello, world.\";return console.log(e),e}},{key:\"_logUseAfterDestroy\",value:function(){var e=Object.values(za)[0];if(this.needsLoad()){if(e&&!e.needsLoad()){var t={action:cs,level:\"error\",code:this.strictMode?9995:9997};e.sendMessageToCallMachine(t)}else if(!this.strictMode){console.error(\"You are are attempting to use a call instance that was previously destroyed, which is unsupported. Please remove `strictMode: false` from your constructor properties to enable strict mode to track down and fix this unsupported usage.\")}}else{var n={action:cs,level:\"error\",code:this.strictMode?9995:9997};this._messageChannel.sendMessageToCallMachine(n,null,this.callClientId,this._iframe)}}},{key:\"_logDuplicateInstanceAttempt\",value:function(){for(var e=0,t=Object.values(za);e<t.length;e++){var n=t[e];n._callMachineInitialized?(n.sendMessageToCallMachine({action:cs,level:\"warn\",code:this.allowMultipleCallInstances?9993:9992}),n._delayDuplicateInstanceLog=!1):n._delayDuplicateInstanceLog=!0}}},{key:\"_maybeSendToSentry\",value:function(e){var t,n,i,o;if(null!==(t=e.error)&&void 0!==t&&t.type){if(![$i,Vi,Bi].includes(e.error.type))return;if(e.error.type===Bi&&e.error.msg.includes(\"deleted\"))return}var s=null!==(n=this.properties)&&void 0!==n&&n.url?new URL(this.properties.url):void 0,a=\"production\";s&&s.host.includes(\".staging.daily\")&&(a=\"staging\");var c,l,u,d,p,h=function(e){const t=[Gn(),Wn(),ii(),ni(),ui(),fi(),rr(),hi()];return!1!==e.autoSessionTracking&&t.push(li()),t}({}).filter((function(e){return![\"BrowserApiErrors\",\"Breadcrumbs\",\"GlobalHandlers\"].includes(e.name)})),f=new jr({dsn:\"https://f10f1c81e5d44a4098416c0867a8b740@o77906.ingest.sentry.io/168844\",transport:Wr,stackParser:Zr,integrations:h,environment:a}),v=new Mt;if(v.setClient(f),f.init(),this.session_id&&v.setExtra(\"sessionId\",this.session_id),this.properties){var g=Va({},this.properties);g.userName=g.userName?\"[Filtered]\":void 0,g.userData=g.userData?\"[Filtered]\":void 0,g.token=g.token?\"[Filtered]\":void 0,v.setExtra(\"properties\",g)}if(s){var m=s.searchParams.get(\"domain\");if(!m){var y=s.host.match(/(.*?)\\./);m=y&&y[1]||\"\"}m&&v.setTag(\"domain\",m)}e.error&&(v.setTag(\"fatalErrorType\",e.error.type),v.setExtra(\"errorDetails\",e.error.details),(null===(c=e.error.details)||void 0===c?void 0:c.uri)&&v.setTag(\"serverAddress\",e.error.details.uri),(null===(l=e.error.details)||void 0===l?void 0:l.workerGroup)&&v.setTag(\"workerGroup\",e.error.details.workerGroup),(null===(u=e.error.details)||void 0===u?void 0:u.geoGroup)&&v.setTag(\"geoGroup\",e.error.details.geoGroup),(null===(d=e.error.details)||void 0===d?void 0:d.on)&&v.setTag(\"connectionAttempt\",e.error.details.on),null!==(p=e.error.details)&&void 0!==p&&p.bundleUrl&&(v.setTag(\"bundleUrl\",e.error.details.bundleUrl),v.setTag(\"bundleError\",e.error.details.sourceError.type)));v.setTags({callMode:this._callObjectMode?ys()?\"reactNative\":null!==(i=this.properties)&&void 0!==i&&null!==(i=i.dailyConfig)&&void 0!==i&&null!==(i=i.callMode)&&void 0!==i&&i.includes(\"prebuilt\")?this.properties.dailyConfig.callMode:\"custom\":\"prebuilt-frame\",version:r.version()});var b=(null===(o=e.error)||void 0===o?void 0:o.msg)||e.errorMsg;v.captureException(new Error(b))}},{key:\"_callMachine\",value:function(){var e;return null===(e=window._daily)||void 0===e||null===(e=e.instances)||void 0===e||null===(e=e[this.callClientId])||void 0===e?void 0:e.callMachine}},{key:\"_maybeUpdateInputSettings\",value:function(e){if(!N(this._inputSettings,e)){var t=this._getInputSettings();this._inputSettings=e;var n=this._getInputSettings();N(t,n)||this.emitDailyJSEvent({action:es,inputSettings:n})}}}],[{key:\"supportedBrowser\",value:function(){if(ys())return{supported:!0,mobile:!0,name:\"React Native\",version:null,supportsScreenShare:!0,supportsSfu:!0,supportsVideoProcessing:!1,supportsAudioProcessing:!1};var e=Q.getParser(ms());return{supported:!!Cs(),mobile:\"mobile\"===e.getPlatformType(),name:e.getBrowserName(),version:e.getBrowserVersion(),supportsFullscreen:!!ws(),supportsScreenShare:!!_s(),supportsSfu:!!Cs(),supportsVideoProcessing:ks(),supportsAudioProcessing:Ms()}}},{key:\"version\",value:function(){return\"0.77.0\"}},{key:\"createCallObject\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.layout=\"none\",new r(null,e)}},{key:\"wrap\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(hc(),!e||!e.contentWindow||\"string\"!=typeof e.src)throw new Error(\"DailyIframe::Wrap needs an iframe-like first argument\");return t.layout||(t.customLayout?t.layout=\"custom-v1\":t.layout=\"browser\"),new r(e,t)}},{key:\"createFrame\",value:function(e,t){var n,i;hc(),e&&t?(n=e,i=t):e&&e.append?(n=e,i={}):(n=document.body,i=e||{});var o=i.iframeStyle;o||(o=n===document.body?{position:\"fixed\",border:\"1px solid black\",backgroundColor:\"white\",width:\"375px\",height:\"450px\",right:\"1em\",bottom:\"1em\"}:{border:0,width:\"100%\",height:\"100%\"});var s=document.createElement(\"iframe\");window.navigator&&window.navigator.userAgent.match(/Chrome\\/61\\./)?s.allow=\"microphone, camera\":s.allow=\"microphone; camera; autoplay; display-capture; screen-wake-lock\",s.style.visibility=\"hidden\",n.appendChild(s),s.style.visibility=null,Object.keys(o).forEach((function(e){return s.style[e]=o[e]})),i.layout||(i.customLayout?i.layout=\"custom-v1\":i.layout=\"browser\");try{return new r(s,i)}catch(e){throw n.removeChild(s),e}}},{key:\"createTransparentFrame\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};hc();var t=document.createElement(\"iframe\");return t.allow=\"microphone; camera; autoplay\",t.style.cssText=\"\\n      position: fixed;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      border: 0;\\n      pointer-events: none;\\n    \",document.body.appendChild(t),e.layout||(e.layout=\"custom-v1\"),r.wrap(t,e)}},{key:\"getCallInstance\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return e?za[e]:Object.values(za)[0]}}]);var i,c,d,h,v,g,m,y,b,_,w,S,k,M,C,E,T,O,P,A,j,I,L,D,R,F,B,U,V,J,$,q,z,W,H,G,Y,ee}();function oc(e,t){var n={};for(var r in e)if(e[r]instanceof MediaStreamTrack)console.warn(\"MediaStreamTrack found in props or cache.\",r),n[r]=ls;else if(\"dailyConfig\"===r){if(e[r].modifyLocalSdpHook){var i=window._daily.instances[t].customCallbacks||{};i.modifyLocalSdpHook=e[r].modifyLocalSdpHook,window._daily.instances[t].customCallbacks=i,delete e[r].modifyLocalSdpHook}if(e[r].modifyRemoteSdpHook){var o=window._daily.instances[t].customCallbacks||{};o.modifyRemoteSdpHook=e[r].modifyRemoteSdpHook,window._daily.instances[t].customCallbacks=o,delete e[r].modifyRemoteSdpHook}n[r]=e[r]}else n[r]=e[r];return n}function sc(e){var t=arguments.length>2?arguments[2]:void 0;if(e!==bi){var n=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" only supported after join.\");throw t&&(n+=\" \".concat(t)),console.error(n),new Error(n)}}function ac(e,t){return[yi,bi].includes(e)||t}function cc(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"This daily-js method\",r=arguments.length>3?arguments[3]:void 0;if(ac(e,t)){var i=\"\".concat(n,\" not supported after joining a meeting.\");throw r&&(i+=\" \".concat(r)),console.error(i),new Error(i)}}function lc(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",n=arguments.length>2?arguments[2]:void 0;if(!e){var r=\"\".concat(t,arguments.length>3&&void 0!==arguments[3]&&arguments[3]?\" requires preAuth() or startCamera() to initialize call state.\":\" requires preAuth(), startCamera(), or join() to initialize call state.\");throw n&&(r+=\" \".concat(n)),console.error(r),new Error(r)}}function uc(e){if(e){var t=\"A pre-call quality test is in progress. Please try \".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" again once testing has completed. Use stopTestCallQuality() to end it early.\");throw console.error(t),new Error(t)}}function dc(e){if(!e){var t=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" is only supported on custom callObject instances\");throw console.error(t),new Error(t)}}function pc(e){if(e){var t=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" is only supported as part of Daily's Prebuilt\");throw console.error(t),new Error(t)}}function hc(){if(ys())throw new Error(\"This daily-js method is not currently supported in React Native\")}function fc(){if(!ys())throw new Error(\"This daily-js method is only supported in React Native\")}function vc(e){if(void 0===e)return!0;var t;if(\"string\"==typeof e)t=e;else try{t=JSON.stringify(e),N(JSON.parse(t),e)||console.warn(\"The userData provided will be modified when serialized.\")}catch(e){throw Error(\"userData must be serializable to JSON: \".concat(e))}if(t.length>4096)throw Error(\"userData is too large (\".concat(t.length,\" characters). Maximum size suppported is \").concat(4096,\".\"));return!0}function gc(e,t){for(var n=t.allowAllParticipantsKey,r=function(e){var t=[\"local\"];return n||t.push(\"*\"),e&&!t.includes(e)},i=function(e){return!!(void 0===e.layer||Number.isInteger(e.layer)&&e.layer>=0||\"inherit\"===e.layer)},o=function(e){return!!e&&(!(e.video&&!i(e.video))&&!(e.screenVideo&&!i(e.screenVideo)))},s=0,a=Object.entries(e);s<a.length;s++){var c=f(a[s],2),l=c[0],u=c[1];if(!r(l)||!o(u))return!1}return!0}function mc(e){if(\"object\"!==n(e))return!1;for(var t=0,r=Object.entries(e);t<r.length;t++){var i=f(r[t],2),o=i[0],s=i[1];switch(o){case\"video\":if(\"object\"!==n(s))return!1;for(var a=0,c=Object.entries(s);a<c.length;a++){var l=f(c[a],2),u=l[0],d=l[1];switch(u){case\"processor\":if(!_c(d))return!1;break;case\"settings\":if(!wc(d))return!1;break;default:return!1}}break;case\"audio\":if(\"object\"!==n(s))return!1;for(var p=0,h=Object.entries(s);p<h.length;p++){var v=f(h[p],2),g=v[0],m=v[1];switch(g){case\"processor\":if(!bc(m))return!1;break;case\"settings\":if(!wc(m))return!1;break;default:return!1}}break;default:return!1}}return!0}function yc(e,t,n){var r,i=[];e.video&&e.video.processor&&(ks(null!==(r=null==t?void 0:t.useLegacyVideoProcessor)&&void 0!==r&&r)||(e.video.settings?delete e.video.processor:delete e.video,i.push(\"video\")));e.audio&&e.audio.processor&&(Ms()||(e.audio.settings?delete e.audio.processor:delete e.audio,i.push(\"audio\"))),i.length>0&&console.error(\"Ignoring settings for browser- or platform-unsupported input processor(s): \".concat(i.join(\", \"))),e.audio&&e.audio.settings&&(e.audio.settings.customTrack?(n.audioTrack=e.audio.settings.customTrack,e.audio.settings={customTrack:ls}):delete n.audioTrack),e.video&&e.video.settings&&(e.video.settings.customTrack?(n.videoTrack=e.video.settings.customTrack,e.video.settings={customTrack:ls}):delete n.videoTrack)}function bc(e){if(ys())return console.warn(\"Video processing is not yet supported in React Native\"),!1;var t=[\"type\"];return!!e&&(\"object\"===n(e)&&(Object.keys(e).filter((function(e){return!t.includes(e)})).forEach((function(t){console.warn(\"invalid key inputSettings -> audio -> processor : \".concat(t)),delete e[t]})),!!function(e){if(\"string\"!=typeof e)return!1;if(!Object.values(ds).includes(e))return console.error(\"inputSettings audio processor type invalid\"),!1;return!0}(e.type)))}function _c(e){if(ys())return console.warn(\"Video processing is not yet supported in React Native\"),!1;var t=[\"type\",\"config\"];if(!e)return!1;if(\"object\"!==n(e))return!1;if(!function(e){if(\"string\"!=typeof e)return!1;if(!Object.values(us).includes(e))return console.error(\"inputSettings video processor type invalid\"),!1;return!0}(e.type))return!1;if(e.config){if(\"object\"!==n(e.config))return!1;if(!function(e,t){var n=Object.keys(t);if(0===n.length)return!0;var r=\"invalid object in inputSettings -> video -> processor -> config\";switch(e){case us.BGBLUR:return n.length>1||\"strength\"!==n[0]?(console.error(r),!1):!(\"number\"!=typeof t.strength||t.strength<=0||t.strength>1||isNaN(t.strength))||(console.error(\"\".concat(r,\"; expected: {0 < strength <= 1}, got: \").concat(t.strength)),!1);case us.BGIMAGE:return!(void 0!==t.source&&!function(e){if(\"default\"===e.source)return e.type=\"default\",!0;if(e.source instanceof ArrayBuffer)return!0;if(ee(e.source))return e.type=\"url\",!!function(e){var t=new URL(e),n=t.pathname;if(\"data:\"===t.protocol)try{var r=n.substring(n.indexOf(\":\")+1,n.indexOf(\";\")).split(\"/\")[1];return hs.includes(r)}catch(e){return console.error(\"failed to deduce blob content type\",e),!1}var i=n.split(\".\").at(-1).toLowerCase().trim();return hs.includes(i)}(e.source)||(console.error(\"invalid image type; supported types: [\".concat(hs.join(\", \"),\"]\")),!1);return t=e.source,n=Number(t),isNaN(n)||!Number.isInteger(n)||n<=0||n>10?(console.error(\"invalid image selection; must be an int, > 0, <= \".concat(10)),!1):(e.type=\"daily-preselect\",!0);var t,n}(t));default:return!0}}(e.type,e.config))return!1}return Object.keys(e).filter((function(e){return!t.includes(e)})).forEach((function(t){console.warn(\"invalid key inputSettings -> video -> processor : \".concat(t)),delete e[t]})),!0}function wc(e){return\"object\"===n(e)&&(!e.customTrack||e.customTrack instanceof MediaStreamTrack)}function Sc(){var e=Object.values(us).join(\" | \"),t=Object.values(ds).join(\" | \");return\"inputSettings must be of the form: { video?: { processor?: { type: [ \".concat(e,\" ], config?: {} } }, audio?: { processor: {type: [ \").concat(t,\" ] } } }\")}function kc(e){var t=e.allowAllParticipantsKey;return\"receiveSettings must be of the form { [<remote participant id> | \".concat(Ii).concat(t?' | \"'.concat(\"*\",'\"'):\"\",\"]: \")+'{ [video: [{ layer: [<non-negative integer> | \"inherit\"] } | \"inherit\"]], [screenVideo: [{ layer: [<non-negative integer> | \"inherit\"] } | \"inherit\"]] }}}'}function Mc(){return\"customIntegrations should be an object of type \".concat(JSON.stringify(tc),\".\")}function Cc(e){if(e&&\"object\"!==n(e)||Array.isArray(e))return console.error(\"customTrayButtons should be an Object of the type \".concat(JSON.stringify(ec),\".\")),!1;if(e)for(var t=0,r=Object.entries(e);t<r.length;t++)for(var i=f(r[t],1)[0],o=0,s=Object.entries(e[i]);o<s.length;o++){var a=f(s[o],2),c=a[0],l=a[1],u=ec.id[c];if(!u)return console.error(\"customTrayButton does not support key \".concat(c)),!1;switch(c){case\"iconPath\":case\"iconPathDarkMode\":if(!ee(l))return console.error(\"customTrayButton \".concat(c,\" should be a url.\")),!1;break;case\"visualState\":if(![\"default\",\"sidebar-open\",\"active\"].includes(l))return console.error(\"customTrayButton \".concat(c,\" should be \").concat(u,\". Got: \").concat(l)),!1;break;default:if(n(l)!==u)return console.error(\"customTrayButton \".concat(c,\" should be a \").concat(u,\".\")),!1}}return!0}function Ec(e){if(!e||e&&\"object\"!==n(e)||Array.isArray(e))return console.error(Mc()),!1;for(var t=function(e){return\"\".concat(e,\" should be \").concat(tc.id[e])},r=function(e,t){return console.error(\"customIntegration \".concat(e,\": \").concat(t))},i=0,o=Object.entries(e);i<o.length;i++){var s=f(o[i],1)[0];if(!(\"label\"in e[s]))return r(s,\"label is required\"),!1;if(!(\"location\"in e[s]))return r(s,\"location is required\"),!1;if(!(\"src\"in e[s])&&!(\"srcdoc\"in e[s]))return r(s,\"src or srcdoc is required\"),!1;for(var a=0,c=Object.entries(e[s]);a<c.length;a++){var l=f(c[a],2),u=l[0],d=l[1];switch(u){case\"allow\":case\"csp\":case\"name\":case\"referrerPolicy\":case\"sandbox\":if(\"string\"!=typeof d)return r(s,t(u)),!1;break;case\"iconURL\":if(!ee(d))return r(s,\"\".concat(u,\" should be a url\")),!1;break;case\"src\":if(\"srcdoc\"in e[s])return r(s,\"cannot have both src and srcdoc\"),!1;if(!ee(d))return r(s,'src \"'.concat(d,'\" is not a valid URL')),!1;break;case\"srcdoc\":if(\"src\"in e[s])return r(s,\"cannot have both src and srcdoc\"),!1;if(\"string\"!=typeof d)return r(s,t(u)),!1;break;case\"location\":if(![\"main\",\"sidebar\"].includes(d))return r(s,t(u)),!1;break;case\"controlledBy\":if(\"*\"!==d&&\"owners\"!==d&&(!Array.isArray(d)||d.some((function(e){return\"string\"!=typeof e}))))return r(s,t(u)),!1;break;case\"shared\":if((!Array.isArray(d)||d.some((function(e){return\"string\"!=typeof e})))&&\"owners\"!==d&&\"boolean\"!=typeof d)return r(s,t(u)),!1;break;default:if(!tc.id[u])return console.error(\"customIntegration does not support key \".concat(u)),!1}}}return!0}function Tc(e,t){if(void 0===t)return!1;switch(n(t)){case\"string\":return n(e)===t;case\"object\":if(\"object\"!==n(e))return!1;for(var r in e)if(!Tc(e[r],t[r]))return!1;return!0;default:return!1}}function Oc(e,t){var n=e.sessionId,r=e.toEndPoint,i=e.callerId,o=e.useSipRefer;if(!n||!r)throw new Error(\"\".concat(t,\"() requires a sessionId and toEndPoint\"));if(\"string\"!=typeof n||\"string\"!=typeof r)throw new Error(\"Invalid paramater: sessionId and toEndPoint must be of type string\");if(o&&!r.startsWith(\"sip:\"))throw new Error('\"toEndPoint\" must be a \"sip\" address');if(!r.startsWith(\"sip:\")&&!r.startsWith(\"+\"))throw new Error(\"toEndPoint: \".concat(r,' must starts with either \"sip:\" or \"+\"'));if(i&&\"string\"!=typeof i)throw new Error(\"callerId must be of type string\");if(i&&!r.startsWith(\"+\"))throw new Error(\"callerId is only valid when transferring to a PSTN number\")}function Pc(e){if(\"object\"!==n(e))throw new Error('RemoteMediaPlayerSettings: must be \"object\" type');if(e.state&&!Object.values(ps).includes(e.state))throw new Error(\"Invalid value for RemoteMediaPlayerSettings.state, valid values are: \"+JSON.stringify(ps));if(e.volume){if(\"number\"!=typeof e.volume)throw new Error('RemoteMediaPlayerSettings.volume: must be \"number\" type');if(e.volume<0||e.volume>2)throw new Error(\"RemoteMediaPlayerSettings.volume: must be between 0.0 - 2.0\")}}function Ac(e,t,n){return!(\"number\"!=typeof e||e<t||e>n)}function jc(e,t){return e&&!t&&delete e.data,e}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@pipecat-ai/daily-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@pipecat-ai/small-webrtc-transport/dist/index.module.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/@pipecat-ai/small-webrtc-transport/dist/index.module.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SmallWebRTCTransport: () => (/* binding */ $b31644dc78dca54a$export$62043589d053a879)\n/* harmony export */ });\n/* harmony import */ var _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pipecat-ai/client-js */ \"(ssr)/../../node_modules/@pipecat-ai/client-js/dist/index.module.js\");\n/* harmony import */ var _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @daily-co/daily-js */ \"(ssr)/../../node_modules/@pipecat-ai/small-webrtc-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js\");\n\n\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $b31644dc78dca54a$exports = {};\n\n$parcel$export($b31644dc78dca54a$exports, \"SmallWebRTCTransport\", () => $b31644dc78dca54a$export$62043589d053a879);\n\n/**\n * Raw wav audio file contents\n * @typedef {Object} WavPackerAudioType\n * @property {Blob} blob\n * @property {string} url\n * @property {number} channelCount\n * @property {number} sampleRate\n * @property {number} duration\n */ /**\n * Utility class for assembling PCM16 \"audio/wav\" data\n * @class\n */ class $6d4b7449a1e1544a$export$13afda237b1c9846 {\n    /**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   * @param {Float32Array} float32Array\n   * @returns {ArrayBuffer}\n   */ static floatTo16BitPCM(float32Array) {\n        const buffer = new ArrayBuffer(float32Array.length * 2);\n        const view = new DataView(buffer);\n        let offset = 0;\n        for(let i = 0; i < float32Array.length; i++, offset += 2){\n            let s = Math.max(-1, Math.min(1, float32Array[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n        }\n        return buffer;\n    }\n    /**\n   * Concatenates two ArrayBuffers\n   * @param {ArrayBuffer} leftBuffer\n   * @param {ArrayBuffer} rightBuffer\n   * @returns {ArrayBuffer}\n   */ static mergeBuffers(leftBuffer, rightBuffer) {\n        const tmpArray = new Uint8Array(leftBuffer.byteLength + rightBuffer.byteLength);\n        tmpArray.set(new Uint8Array(leftBuffer), 0);\n        tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);\n        return tmpArray.buffer;\n    }\n    /**\n   * Packs data into an Int16 format\n   * @private\n   * @param {number} size 0 = 1x Int16, 1 = 2x Int16\n   * @param {number} arg value to pack\n   * @returns\n   */ _packData(size, arg) {\n        return [\n            new Uint8Array([\n                arg,\n                arg >> 8\n            ]),\n            new Uint8Array([\n                arg,\n                arg >> 8,\n                arg >> 16,\n                arg >> 24\n            ])\n        ][size];\n    }\n    /**\n   * Packs audio into \"audio/wav\" Blob\n   * @param {number} sampleRate\n   * @param {{bitsPerSample: number, channels: Array<Float32Array>, data: Int16Array}} audio\n   * @returns {WavPackerAudioType}\n   */ pack(sampleRate, audio) {\n        if (!audio?.bitsPerSample) throw new Error(`Missing \"bitsPerSample\"`);\n        else if (!audio?.channels) throw new Error(`Missing \"channels\"`);\n        else if (!audio?.data) throw new Error(`Missing \"data\"`);\n        const { bitsPerSample: bitsPerSample, channels: channels, data: data } = audio;\n        const output = [\n            // Header\n            'RIFF',\n            this._packData(1, 52),\n            'WAVE',\n            // chunk 1\n            'fmt ',\n            this._packData(1, 16),\n            this._packData(0, 1),\n            this._packData(0, channels.length),\n            this._packData(1, sampleRate),\n            this._packData(1, sampleRate * channels.length * bitsPerSample / 8),\n            this._packData(0, channels.length * bitsPerSample / 8),\n            this._packData(0, bitsPerSample),\n            // chunk 2\n            'data',\n            this._packData(1, channels[0].length * channels.length * bitsPerSample / 8),\n            data\n        ];\n        const blob = new Blob(output, {\n            type: 'audio/mpeg'\n        });\n        const url = URL.createObjectURL(blob);\n        return {\n            blob: blob,\n            url: url,\n            channelCount: channels.length,\n            sampleRate: sampleRate,\n            duration: data.byteLength / (channels.length * sampleRate * 2)\n        };\n    }\n}\nglobalThis.WavPacker = $6d4b7449a1e1544a$export$13afda237b1c9846;\n\n\n/**\n * Constants for help with visualization\n * Helps map frequency ranges from Fast Fourier Transform\n * to human-interpretable ranges, notably music ranges and\n * human vocal ranges.\n */ // Eighth octave frequencies\nconst $03f71ce85e00ada6$var$octave8Frequencies = [\n    4186.01,\n    4434.92,\n    4698.63,\n    4978.03,\n    5274.04,\n    5587.65,\n    5919.91,\n    6271.93,\n    6644.88,\n    7040.0,\n    7458.62,\n    7902.13\n];\n// Labels for each of the above frequencies\nconst $03f71ce85e00ada6$var$octave8FrequencyLabels = [\n    'C',\n    'C#',\n    'D',\n    'D#',\n    'E',\n    'F',\n    'F#',\n    'G',\n    'G#',\n    'A',\n    'A#',\n    'B'\n];\nconst $03f71ce85e00ada6$export$776c63898ae5b636 = [];\nconst $03f71ce85e00ada6$export$facd167cc27ea9b0 = [];\nfor(let i = 1; i <= 8; i++)for(let f = 0; f < $03f71ce85e00ada6$var$octave8Frequencies.length; f++){\n    const freq = $03f71ce85e00ada6$var$octave8Frequencies[f];\n    $03f71ce85e00ada6$export$776c63898ae5b636.push(freq / Math.pow(2, 8 - i));\n    $03f71ce85e00ada6$export$facd167cc27ea9b0.push($03f71ce85e00ada6$var$octave8FrequencyLabels[f] + i);\n}\n/**\n * Subset of the note frequencies between 32 and 2000 Hz\n * 6 octave range: C1 to B6\n */ const $03f71ce85e00ada6$var$voiceFrequencyRange = [\n    32.0,\n    2000.0\n];\nconst $03f71ce85e00ada6$export$dbc1581ed2cfa183 = $03f71ce85e00ada6$export$776c63898ae5b636.filter((_, i)=>{\n    return $03f71ce85e00ada6$export$776c63898ae5b636[i] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];\n});\nconst $03f71ce85e00ada6$export$30a6f2881311088f = $03f71ce85e00ada6$export$facd167cc27ea9b0.filter((_, i)=>{\n    return $03f71ce85e00ada6$export$776c63898ae5b636[i] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];\n});\n\n\nclass $f32f064564ee62f6$export$2c3136da0bf130f9 {\n    /**\n   * Retrieves frequency domain data from an AnalyserNode adjusted to a decibel range\n   * returns human-readable formatting and labels\n   * @param {AnalyserNode} analyser\n   * @param {number} sampleRate\n   * @param {Float32Array} [fftResult]\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {AudioAnalysisOutputType}\n   */ static getFrequencies(analyser, sampleRate, fftResult, analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        if (!fftResult) {\n            fftResult = new Float32Array(analyser.frequencyBinCount);\n            analyser.getFloatFrequencyData(fftResult);\n        }\n        const nyquistFrequency = sampleRate / 2;\n        const frequencyStep = 1 / fftResult.length * nyquistFrequency;\n        let outputValues;\n        let frequencies;\n        let labels;\n        if (analysisType === 'music' || analysisType === 'voice') {\n            const useFrequencies = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);\n            const aggregateOutput = Array(useFrequencies.length).fill(minDecibels);\n            for(let i = 0; i < fftResult.length; i++){\n                const frequency = i * frequencyStep;\n                const amplitude = fftResult[i];\n                for(let n = useFrequencies.length - 1; n >= 0; n--)if (frequency > useFrequencies[n]) {\n                    aggregateOutput[n] = Math.max(aggregateOutput[n], amplitude);\n                    break;\n                }\n            }\n            outputValues = aggregateOutput;\n            frequencies = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);\n            labels = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$30a6f2881311088f) : (0, $03f71ce85e00ada6$export$facd167cc27ea9b0);\n        } else {\n            outputValues = Array.from(fftResult);\n            frequencies = outputValues.map((_, i)=>frequencyStep * i);\n            labels = frequencies.map((f)=>`${f.toFixed(2)} Hz`);\n        }\n        // We normalize to {0, 1}\n        const normalizedOutput = outputValues.map((v)=>{\n            return Math.max(0, Math.min((v - minDecibels) / (maxDecibels - minDecibels), 1));\n        });\n        const values = new Float32Array(normalizedOutput);\n        return {\n            values: values,\n            frequencies: frequencies,\n            labels: labels\n        };\n    }\n    /**\n   * Creates a new AudioAnalysis instance for an HTMLAudioElement\n   * @param {HTMLAudioElement} audioElement\n   * @param {AudioBuffer|null} [audioBuffer] If provided, will cache all frequency domain data from the buffer\n   * @returns {AudioAnalysis}\n   */ constructor(audioElement, audioBuffer = null){\n        this.fftResults = [];\n        if (audioBuffer) {\n            /**\n       * Modified from\n       * https://stackoverflow.com/questions/75063715/using-the-web-audio-api-to-analyze-a-song-without-playing\n       *\n       * We do this to populate FFT values for the audio if provided an `audioBuffer`\n       * The reason to do this is that Safari fails when using `createMediaElementSource`\n       * This has a non-zero RAM cost so we only opt-in to run it on Safari, Chrome is better\n       */ const { length: length, sampleRate: sampleRate } = audioBuffer;\n            const offlineAudioContext = new OfflineAudioContext({\n                length: length,\n                sampleRate: sampleRate\n            });\n            const source = offlineAudioContext.createBufferSource();\n            source.buffer = audioBuffer;\n            const analyser = offlineAudioContext.createAnalyser();\n            analyser.fftSize = 8192;\n            analyser.smoothingTimeConstant = 0.1;\n            source.connect(analyser);\n            // limit is :: 128 / sampleRate;\n            // but we just want 60fps - cuts ~1s from 6MB to 1MB of RAM\n            const renderQuantumInSeconds = 1 / 60;\n            const durationInSeconds = length / sampleRate;\n            const analyze = (index)=>{\n                const suspendTime = renderQuantumInSeconds * index;\n                if (suspendTime < durationInSeconds) offlineAudioContext.suspend(suspendTime).then(()=>{\n                    const fftResult = new Float32Array(analyser.frequencyBinCount);\n                    analyser.getFloatFrequencyData(fftResult);\n                    this.fftResults.push(fftResult);\n                    analyze(index + 1);\n                });\n                if (index === 1) offlineAudioContext.startRendering();\n                else offlineAudioContext.resume();\n            };\n            source.start(0);\n            analyze(1);\n            this.audio = audioElement;\n            this.context = offlineAudioContext;\n            this.analyser = analyser;\n            this.sampleRate = sampleRate;\n            this.audioBuffer = audioBuffer;\n        } else {\n            const audioContext = new AudioContext();\n            const track = audioContext.createMediaElementSource(audioElement);\n            const analyser = audioContext.createAnalyser();\n            analyser.fftSize = 8192;\n            analyser.smoothingTimeConstant = 0.1;\n            track.connect(analyser);\n            analyser.connect(audioContext.destination);\n            this.audio = audioElement;\n            this.context = audioContext;\n            this.analyser = analyser;\n            this.sampleRate = this.context.sampleRate;\n            this.audioBuffer = null;\n        }\n    }\n    /**\n   * Gets the current frequency domain data from the playing audio track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        let fftResult = null;\n        if (this.audioBuffer && this.fftResults.length) {\n            const pct = this.audio.currentTime / this.audio.duration;\n            const index = Math.min(pct * this.fftResults.length | 0, this.fftResults.length - 1);\n            fftResult = this.fftResults[index];\n        }\n        return $f32f064564ee62f6$export$2c3136da0bf130f9.getFrequencies(this.analyser, this.sampleRate, fftResult, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Resume the internal AudioContext if it was suspended due to the lack of\n   * user interaction when the AudioAnalysis was instantiated.\n   * @returns {Promise<true>}\n   */ async resumeIfSuspended() {\n        if (this.context.state === 'suspended') await this.context.resume();\n        return true;\n    }\n}\nglobalThis.AudioAnalysis = $f32f064564ee62f6$export$2c3136da0bf130f9;\n\n\nconst $29a8a70a9466b14f$export$50b76700e2b15e9 = `\nclass StreamProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.hasStarted = false;\n    this.hasInterrupted = false;\n    this.outputBuffers = [];\n    this.bufferLength = 128;\n    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };\n    this.writeOffset = 0;\n    this.trackSampleOffsets = {};\n    this.port.onmessage = (event) => {\n      if (event.data) {\n        const payload = event.data;\n        if (payload.event === 'write') {\n          const int16Array = payload.buffer;\n          const float32Array = new Float32Array(int16Array.length);\n          for (let i = 0; i < int16Array.length; i++) {\n            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32\n          }\n          this.writeData(float32Array, payload.trackId);\n        } else if (\n          payload.event === 'offset' ||\n          payload.event === 'interrupt'\n        ) {\n          const requestId = payload.requestId;\n          const trackId = this.write.trackId;\n          const offset = this.trackSampleOffsets[trackId] || 0;\n          this.port.postMessage({\n            event: 'offset',\n            requestId,\n            trackId,\n            offset,\n          });\n          if (payload.event === 'interrupt') {\n            this.hasInterrupted = true;\n          }\n        } else {\n          throw new Error(\\`Unhandled event \"\\${payload.event}\"\\`);\n        }\n      }\n    };\n  }\n\n  writeData(float32Array, trackId = null) {\n    let { buffer } = this.write;\n    let offset = this.writeOffset;\n    for (let i = 0; i < float32Array.length; i++) {\n      buffer[offset++] = float32Array[i];\n      if (offset >= buffer.length) {\n        this.outputBuffers.push(this.write);\n        this.write = { buffer: new Float32Array(this.bufferLength), trackId };\n        buffer = this.write.buffer;\n        offset = 0;\n      }\n    }\n    this.writeOffset = offset;\n    return true;\n  }\n\n  process(inputs, outputs, parameters) {\n    const output = outputs[0];\n    const outputChannelData = output[0];\n    const outputBuffers = this.outputBuffers;\n    if (this.hasInterrupted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else if (outputBuffers.length) {\n      this.hasStarted = true;\n      const { buffer, trackId } = outputBuffers.shift();\n      for (let i = 0; i < outputChannelData.length; i++) {\n        outputChannelData[i] = buffer[i] || 0;\n      }\n      if (trackId) {\n        this.trackSampleOffsets[trackId] =\n          this.trackSampleOffsets[trackId] || 0;\n        this.trackSampleOffsets[trackId] += buffer.length;\n      }\n      return true;\n    } else if (this.hasStarted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nregisterProcessor('stream_processor', StreamProcessor);\n`;\nconst $29a8a70a9466b14f$var$script = new Blob([\n    $29a8a70a9466b14f$export$50b76700e2b15e9\n], {\n    type: 'application/javascript'\n});\nconst $29a8a70a9466b14f$var$src = URL.createObjectURL($29a8a70a9466b14f$var$script);\nconst $29a8a70a9466b14f$export$bfa8c596114d74df = $29a8a70a9466b14f$var$src;\n\n\n\nclass $d0a969833958d9e7$export$9698d62c78b8f366 {\n    /**\n   * Creates a new WavStreamPlayer instance\n   * @param {{sampleRate?: number}} options\n   * @returns {WavStreamPlayer}\n   */ constructor({ sampleRate: sampleRate = 44100 } = {}){\n        this.scriptSrc = (0, $29a8a70a9466b14f$export$bfa8c596114d74df);\n        this.sampleRate = sampleRate;\n        this.context = null;\n        this.stream = null;\n        this.analyser = null;\n        this.trackSampleOffsets = {};\n        this.interruptedTrackIds = {};\n    }\n    /**\n   * Connects the audio context and enables output to speakers\n   * @returns {Promise<true>}\n   */ async connect() {\n        this.context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        if (this._speakerID) this.context.setSinkId(this._speakerID);\n        if (this.context.state === \"suspended\") await this.context.resume();\n        try {\n            await this.context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const analyser = this.context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        this.analyser = analyser;\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the playing track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = \"frequency\", minDecibels = -100, maxDecibels = -30) {\n        if (!this.analyser) throw new Error(\"Not connected, please call .connect() first\");\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * @param {string} speaker deviceId\n   */ async updateSpeaker(speaker) {\n        const _prevSpeaker = this._speakerID;\n        this._speakerID = speaker;\n        if (this.context) try {\n            if (speaker === \"default\") await this.context.setSinkId();\n            else await this.context.setSinkId(speaker);\n        } catch (e) {\n            console.error(`Could not set sinkId to ${speaker}: ${e}`);\n            this._speakerID = _prevSpeaker;\n        }\n    }\n    /**\n   * Starts audio streaming\n   * @private\n   * @returns {Promise<true>}\n   */ _start() {\n        const streamNode = new AudioWorkletNode(this.context, \"stream_processor\");\n        streamNode.connect(this.context.destination);\n        streamNode.port.onmessage = (e)=>{\n            const { event: event } = e.data;\n            if (event === \"stop\") {\n                streamNode.disconnect();\n                this.stream = null;\n            } else if (event === \"offset\") {\n                const { requestId: requestId, trackId: trackId, offset: offset } = e.data;\n                const currentTime = offset / this.sampleRate;\n                this.trackSampleOffsets[requestId] = {\n                    trackId: trackId,\n                    offset: offset,\n                    currentTime: currentTime\n                };\n            }\n        };\n        this.analyser.disconnect();\n        streamNode.connect(this.analyser);\n        this.stream = streamNode;\n        return true;\n    }\n    /**\n   * Adds 16BitPCM data to the currently playing audio stream\n   * You can add chunks beyond the current play point and they will be queued for play\n   * @param {ArrayBuffer|Int16Array} arrayBuffer\n   * @param {string} [trackId]\n   * @returns {Int16Array}\n   */ add16BitPCM(arrayBuffer, trackId = \"default\") {\n        if (typeof trackId !== \"string\") throw new Error(`trackId must be a string`);\n        else if (this.interruptedTrackIds[trackId]) return;\n        if (!this.stream) this._start();\n        let buffer;\n        if (arrayBuffer instanceof Int16Array) buffer = arrayBuffer;\n        else if (arrayBuffer instanceof ArrayBuffer) buffer = new Int16Array(arrayBuffer);\n        else throw new Error(`argument must be Int16Array or ArrayBuffer`);\n        this.stream.port.postMessage({\n            event: \"write\",\n            buffer: buffer,\n            trackId: trackId\n        });\n        return buffer;\n    }\n    /**\n   * Gets the offset (sample count) of the currently playing stream\n   * @param {boolean} [interrupt]\n   * @returns {{trackId: string|null, offset: number, currentTime: number}}\n   */ async getTrackSampleOffset(interrupt = false) {\n        if (!this.stream) return null;\n        const requestId = crypto.randomUUID();\n        this.stream.port.postMessage({\n            event: interrupt ? \"interrupt\" : \"offset\",\n            requestId: requestId\n        });\n        let trackSampleOffset;\n        while(!trackSampleOffset){\n            trackSampleOffset = this.trackSampleOffsets[requestId];\n            await new Promise((r)=>setTimeout(()=>r(), 1));\n        }\n        const { trackId: trackId } = trackSampleOffset;\n        if (interrupt && trackId) this.interruptedTrackIds[trackId] = true;\n        return trackSampleOffset;\n    }\n    /**\n   * Strips the current stream and returns the sample offset of the audio\n   * @param {boolean} [interrupt]\n   * @returns {{trackId: string|null, offset: number, currentTime: number}}\n   */ async interrupt() {\n        return this.getTrackSampleOffset(true);\n    }\n}\nglobalThis.WavStreamPlayer = $d0a969833958d9e7$export$9698d62c78b8f366;\n\n\nconst $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet = `\nclass AudioProcessor extends AudioWorkletProcessor {\n\n  constructor() {\n    super();\n    this.port.onmessage = this.receive.bind(this);\n    this.initialize();\n  }\n\n  initialize() {\n    this.foundAudio = false;\n    this.recording = false;\n    this.chunks = [];\n  }\n\n  /**\n   * Concatenates sampled chunks into channels\n   * Format is chunk[Left[], Right[]]\n   */\n  readChannelData(chunks, channel = -1, maxChannels = 9) {\n    let channelLimit;\n    if (channel !== -1) {\n      if (chunks[0] && chunks[0].length - 1 < channel) {\n        throw new Error(\n          \\`Channel \\${channel} out of range: max \\${chunks[0].length}\\`\n        );\n      }\n      channelLimit = channel + 1;\n    } else {\n      channel = 0;\n      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);\n    }\n    const channels = [];\n    for (let n = channel; n < channelLimit; n++) {\n      const length = chunks.reduce((sum, chunk) => {\n        return sum + chunk[n].length;\n      }, 0);\n      const buffers = chunks.map((chunk) => chunk[n]);\n      const result = new Float32Array(length);\n      let offset = 0;\n      for (let i = 0; i < buffers.length; i++) {\n        result.set(buffers[i], offset);\n        offset += buffers[i].length;\n      }\n      channels[n] = result;\n    }\n    return channels;\n  }\n\n  /**\n   * Combines parallel audio data into correct format,\n   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]\n   */\n  formatAudioData(channels) {\n    if (channels.length === 1) {\n      // Simple case is only one channel\n      const float32Array = channels[0].slice();\n      const meanValues = channels[0].slice();\n      return { float32Array, meanValues };\n    } else {\n      const float32Array = new Float32Array(\n        channels[0].length * channels.length\n      );\n      const meanValues = new Float32Array(channels[0].length);\n      for (let i = 0; i < channels[0].length; i++) {\n        const offset = i * channels.length;\n        let meanValue = 0;\n        for (let n = 0; n < channels.length; n++) {\n          float32Array[offset + n] = channels[n][i];\n          meanValue += channels[n][i];\n        }\n        meanValues[i] = meanValue / channels.length;\n      }\n      return { float32Array, meanValues };\n    }\n  }\n\n  /**\n   * Converts 32-bit float data to 16-bit integers\n   */\n  floatTo16BitPCM(float32Array) {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      let s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Retrieves the most recent amplitude values from the audio stream\n   * @param {number} channel\n   */\n  getValues(channel = -1) {\n    const channels = this.readChannelData(this.chunks, channel);\n    const { meanValues } = this.formatAudioData(channels);\n    return { meanValues, channels };\n  }\n\n  /**\n   * Exports chunks as an audio/wav file\n   */\n  export() {\n    const channels = this.readChannelData(this.chunks);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const audioData = this.floatTo16BitPCM(float32Array);\n    return {\n      meanValues: meanValues,\n      audio: {\n        bitsPerSample: 16,\n        channels: channels,\n        data: audioData,\n      },\n    };\n  }\n\n  receive(e) {\n    const { event, id } = e.data;\n    let receiptData = {};\n    switch (event) {\n      case 'start':\n        this.recording = true;\n        break;\n      case 'stop':\n        this.recording = false;\n        break;\n      case 'clear':\n        this.initialize();\n        break;\n      case 'export':\n        receiptData = this.export();\n        break;\n      case 'read':\n        receiptData = this.getValues();\n        break;\n      default:\n        break;\n    }\n    // Always send back receipt\n    this.port.postMessage({ event: 'receipt', id, data: receiptData });\n  }\n\n  sendChunk(chunk) {\n    const channels = this.readChannelData([chunk]);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const rawAudioData = this.floatTo16BitPCM(float32Array);\n    const monoAudioData = this.floatTo16BitPCM(meanValues);\n    this.port.postMessage({\n      event: 'chunk',\n      data: {\n        mono: monoAudioData,\n        raw: rawAudioData,\n      },\n    });\n  }\n\n  process(inputList, outputList, parameters) {\n    // Copy input to output (e.g. speakers)\n    // Note that this creates choppy sounds with Mac products\n    const sourceLimit = Math.min(inputList.length, outputList.length);\n    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {\n      const input = inputList[inputNum];\n      const output = outputList[inputNum];\n      const channelCount = Math.min(input.length, output.length);\n      for (let channelNum = 0; channelNum < channelCount; channelNum++) {\n        input[channelNum].forEach((sample, i) => {\n          output[channelNum][i] = sample;\n        });\n      }\n    }\n    const inputs = inputList[0];\n    // There's latency at the beginning of a stream before recording starts\n    // Make sure we actually receive audio data before we start storing chunks\n    let sliceIndex = 0;\n    if (!this.foundAudio) {\n      for (const channel of inputs) {\n        sliceIndex = 0; // reset for each channel\n        if (this.foundAudio) {\n          break;\n        }\n        if (channel) {\n          for (const value of channel) {\n            if (value !== 0) {\n              // find only one non-zero entry in any channel\n              this.foundAudio = true;\n              break;\n            } else {\n              sliceIndex++;\n            }\n          }\n        }\n      }\n    }\n    if (inputs && inputs[0] && this.foundAudio && this.recording) {\n      // We need to copy the TypedArray, because the \\`process\\`\n      // internals will reuse the same buffer to hold each input\n      const chunk = inputs.map((input) => input.slice(sliceIndex));\n      this.chunks.push(chunk);\n      this.sendChunk(chunk);\n    }\n    return true;\n  }\n}\n\nregisterProcessor('audio_processor', AudioProcessor);\n`;\nconst $8e1d1e6ff08f6fb5$var$script = new Blob([\n    $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet\n], {\n    type: 'application/javascript'\n});\nconst $8e1d1e6ff08f6fb5$var$src = URL.createObjectURL($8e1d1e6ff08f6fb5$var$script);\nconst $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c = $8e1d1e6ff08f6fb5$var$src;\n\n\n\n\nclass $62bc376044a05513$export$439b217ca659a877 {\n    /**\n   * Create a new WavRecorder instance\n   * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]\n   * @returns {WavRecorder}\n   */ constructor({ sampleRate: sampleRate = 44100, outputToSpeakers: outputToSpeakers = false, debug: debug = false } = {}){\n        // Script source\n        this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);\n        // Config\n        this.sampleRate = sampleRate;\n        this.outputToSpeakers = outputToSpeakers;\n        this.debug = !!debug;\n        this._deviceChangeCallback = null;\n        this._devices = [];\n        this.deviceSelection = null;\n        // State variables\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        this.recording = false;\n        // Event handling with AudioWorklet\n        this._lastEventId = 0;\n        this.eventReceipts = {};\n        this.eventTimeout = 5000;\n        // Process chunks of audio\n        this._chunkProcessor = ()=>{};\n        this._chunkProcessorSize = void 0;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n    }\n    /**\n   * Decodes audio data from multiple formats to a Blob, url, Float32Array and AudioBuffer\n   * @param {Blob|Float32Array|Int16Array|ArrayBuffer|number[]} audioData\n   * @param {number} sampleRate\n   * @param {number} fromSampleRate\n   * @returns {Promise<DecodedAudioType>}\n   */ static async decode(audioData, sampleRate = 44100, fromSampleRate = -1) {\n        const context = new AudioContext({\n            sampleRate: sampleRate\n        });\n        let arrayBuffer;\n        let blob;\n        if (audioData instanceof Blob) {\n            if (fromSampleRate !== -1) throw new Error(`Can not specify \"fromSampleRate\" when reading from Blob`);\n            blob = audioData;\n            arrayBuffer = await blob.arrayBuffer();\n        } else if (audioData instanceof ArrayBuffer) {\n            if (fromSampleRate !== -1) throw new Error(`Can not specify \"fromSampleRate\" when reading from ArrayBuffer`);\n            arrayBuffer = audioData;\n            blob = new Blob([\n                arrayBuffer\n            ], {\n                type: 'audio/wav'\n            });\n        } else {\n            let float32Array;\n            let data;\n            if (audioData instanceof Int16Array) {\n                data = audioData;\n                float32Array = new Float32Array(audioData.length);\n                for(let i = 0; i < audioData.length; i++)float32Array[i] = audioData[i] / 0x8000;\n            } else if (audioData instanceof Float32Array) float32Array = audioData;\n            else if (audioData instanceof Array) float32Array = new Float32Array(audioData);\n            else throw new Error(`\"audioData\" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>`);\n            if (fromSampleRate === -1) throw new Error(`Must specify \"fromSampleRate\" when reading from Float32Array, In16Array or Array`);\n            else if (fromSampleRate < 3000) throw new Error(`Minimum \"fromSampleRate\" is 3000 (3kHz)`);\n            if (!data) data = (0, $6d4b7449a1e1544a$export$13afda237b1c9846).floatTo16BitPCM(float32Array);\n            const audio = {\n                bitsPerSample: 16,\n                channels: [\n                    float32Array\n                ],\n                data: data\n            };\n            const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n            const result = packer.pack(fromSampleRate, audio);\n            blob = result.blob;\n            arrayBuffer = await blob.arrayBuffer();\n        }\n        const audioBuffer = await context.decodeAudioData(arrayBuffer);\n        const values = audioBuffer.getChannelData(0);\n        const url = URL.createObjectURL(blob);\n        return {\n            blob: blob,\n            url: url,\n            values: values,\n            audioBuffer: audioBuffer\n        };\n    }\n    /**\n   * Logs data in debug mode\n   * @param {...any} arguments\n   * @returns {true}\n   */ log() {\n        if (this.debug) this.log(...arguments);\n        return true;\n    }\n    /**\n   * Retrieves the current sampleRate for the recorder\n   * @returns {number}\n   */ getSampleRate() {\n        return this.sampleRate;\n    }\n    /**\n   * Retrieves the current status of the recording\n   * @returns {\"ended\"|\"paused\"|\"recording\"}\n   */ getStatus() {\n        if (!this.processor) return 'ended';\n        else if (!this.recording) return 'paused';\n        else return 'recording';\n    }\n    /**\n   * Sends an event to the AudioWorklet\n   * @private\n   * @param {string} name\n   * @param {{[key: string]: any}} data\n   * @param {AudioWorkletNode} [_processor]\n   * @returns {Promise<{[key: string]: any}>}\n   */ async _event(name, data = {}, _processor = null) {\n        _processor = _processor || this.processor;\n        if (!_processor) throw new Error('Can not send events without recording first');\n        const message = {\n            event: name,\n            id: this._lastEventId++,\n            data: data\n        };\n        _processor.port.postMessage(message);\n        const t0 = new Date().valueOf();\n        while(!this.eventReceipts[message.id]){\n            if (new Date().valueOf() - t0 > this.eventTimeout) throw new Error(`Timeout waiting for \"${name}\" event`);\n            await new Promise((res)=>setTimeout(()=>res(true), 1));\n        }\n        const payload = this.eventReceipts[message.id];\n        delete this.eventReceipts[message.id];\n        return payload;\n    }\n    /**\n   * Sets device change callback, remove if callback provided is `null`\n   * @param {(Array<MediaDeviceInfo & {default: boolean}>): void|null} callback\n   * @returns {true}\n   */ listenForDeviceChange(callback) {\n        if (callback === null && this._deviceChangeCallback) {\n            navigator.mediaDevices.removeEventListener('devicechange', this._deviceChangeCallback);\n            this._deviceChangeCallback = null;\n        } else if (callback !== null) {\n            // Basically a debounce; we only want this called once when devices change\n            // And we only want the most recent callback() to be executed\n            // if a few are operating at the same time\n            let lastId = 0;\n            let lastDevices = [];\n            const serializeDevices = (devices)=>devices.map((d)=>d.deviceId).sort().join(',');\n            const cb = async ()=>{\n                let id = ++lastId;\n                const devices = await this.listDevices();\n                if (id === lastId) {\n                    if (serializeDevices(lastDevices) !== serializeDevices(devices)) {\n                        lastDevices = devices;\n                        callback(devices.slice());\n                    }\n                }\n            };\n            navigator.mediaDevices.addEventListener('devicechange', cb);\n            cb();\n            this._deviceChangeCallback = cb;\n        }\n        return true;\n    }\n    /**\n   * Manually request permission to use the microphone\n   * @returns {Promise<true>}\n   */ async requestPermission() {\n        const permissionStatus = await navigator.permissions.query({\n            name: 'microphone'\n        });\n        if (permissionStatus.state === 'denied') window.alert('You must grant microphone access to use this feature.');\n        else if (permissionStatus.state === 'prompt') try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            const tracks = stream.getTracks();\n            tracks.forEach((track)=>track.stop());\n        } catch (e) {\n            window.alert('You must grant microphone access to use this feature.');\n        }\n        return true;\n    }\n    /**\n   * List all eligible devices for recording, will request permission to use microphone\n   * @returns {Promise<Array<MediaDeviceInfo & {default: boolean}>>}\n   */ async listDevices() {\n        if (!navigator.mediaDevices || !('enumerateDevices' in navigator.mediaDevices)) throw new Error('Could not request user devices');\n        await this.requestPermission();\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const audioDevices = devices.filter((device)=>device.kind === 'audioinput');\n        return audioDevices;\n    // const defaultDeviceIndex = audioDevices.findIndex(\n    //   (device) => device.deviceId === 'default'\n    // );\n    // const deviceList = [];\n    // if (defaultDeviceIndex !== -1) {\n    //   let defaultDevice = audioDevices.splice(defaultDeviceIndex, 1)[0];\n    //   let existingIndex = audioDevices.findIndex(\n    //     (device) => device.groupId === defaultDevice.groupId\n    //   );\n    //   if (existingIndex !== -1) {\n    //     defaultDevice = audioDevices.splice(existingIndex, 1)[0];\n    //   }\n    //   defaultDevice.default = true;\n    //   deviceList.push(defaultDevice);\n    // }\n    // return deviceList.concat(audioDevices);\n    }\n    /**\n   * Begins a recording session and requests microphone permissions if not already granted\n   * Microphone recording indicator will appear on browser tab but status will be \"paused\"\n   * @param {string} [deviceId] if no device provided, default device will be used\n   * @returns {Promise<true>}\n   */ async begin(deviceId) {\n        if (this.processor) throw new Error(`Already connected: please call .end() to start a new session`);\n        if (!navigator.mediaDevices || !('getUserMedia' in navigator.mediaDevices)) throw new Error('Could not request user media');\n        deviceId = deviceId ?? this.deviceSelection?.deviceId;\n        try {\n            const config = {\n                audio: true\n            };\n            if (deviceId) config.audio = {\n                deviceId: {\n                    exact: deviceId\n                }\n            };\n            this.stream = await navigator.mediaDevices.getUserMedia(config);\n        } catch (err) {\n            throw new Error('Could not start media stream');\n        }\n        this.listDevices().then((devices)=>{\n            deviceId = this.stream.getAudioTracks()[0].getSettings().deviceId;\n            console.log('find current device', devices, deviceId, this.stream.getAudioTracks()[0].getSettings());\n            this.deviceSelection = devices.find((d)=>d.deviceId === deviceId);\n            console.log('current device', this.deviceSelection);\n        });\n        const context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        const source = context.createMediaStreamSource(this.stream);\n        // Load and execute the module script.\n        try {\n            await context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const processor = new AudioWorkletNode(context, 'audio_processor');\n        processor.port.onmessage = (e)=>{\n            const { event: event, id: id, data: data } = e.data;\n            if (event === 'receipt') this.eventReceipts[id] = data;\n            else if (event === 'chunk') {\n                if (this._chunkProcessorSize) {\n                    const buffer = this._chunkProcessorBuffer;\n                    this._chunkProcessorBuffer = {\n                        raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),\n                        mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)\n                    };\n                    if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {\n                        this._chunkProcessor(this._chunkProcessorBuffer);\n                        this._chunkProcessorBuffer = {\n                            raw: new ArrayBuffer(0),\n                            mono: new ArrayBuffer(0)\n                        };\n                    }\n                } else this._chunkProcessor(data);\n            }\n        };\n        const node = source.connect(processor);\n        const analyser = context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        node.connect(analyser);\n        if (this.outputToSpeakers) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Warning: Output to speakers may affect sound quality,\\nespecially due to system audio feedback preventative measures.\\nuse only for debugging\");\n            analyser.connect(context.destination);\n        }\n        this.source = source;\n        this.node = node;\n        this.analyser = analyser;\n        this.processor = processor;\n        console.log('begin completed');\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the recording track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Pauses the recording\n   * Keeps microphone stream open but halts storage of audio\n   * @returns {Promise<true>}\n   */ async pause() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        else if (!this.recording) throw new Error('Already paused: please call .record() first');\n        if (this._chunkProcessorBuffer.raw.byteLength) this._chunkProcessor(this._chunkProcessorBuffer);\n        this.log('Pausing ...');\n        await this._event('stop');\n        this.recording = false;\n        return true;\n    }\n    /**\n   * Start recording stream and storing to memory from the connected audio source\n   * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]\n   * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio\n   * @returns {Promise<true>}\n   */ async record(chunkProcessor = ()=>{}, chunkSize = 8192) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        else if (this.recording) throw new Error('Already recording: please call .pause() first');\n        else if (typeof chunkProcessor !== 'function') throw new Error(`chunkProcessor must be a function`);\n        this._chunkProcessor = chunkProcessor;\n        this._chunkProcessorSize = chunkSize;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n        this.log('Recording ...');\n        await this._event('start');\n        this.recording = true;\n        return true;\n    }\n    /**\n   * Clears the audio buffer, empties stored recording\n   * @returns {Promise<true>}\n   */ async clear() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        await this._event('clear');\n        return true;\n    }\n    /**\n   * Reads the current audio stream data\n   * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}\n   */ async read() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        this.log('Reading ...');\n        const result = await this._event('read');\n        return result;\n    }\n    /**\n   * Saves the current audio stream to a file\n   * @param {boolean} [force] Force saving while still recording\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async save(force = false) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        if (!force && this.recording) throw new Error('Currently recording: please call .pause() first, or call .save(true) to force');\n        this.log('Exporting ...');\n        const exportData = await this._event('export');\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Ends the current recording session and saves the result\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async end() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        const _processor = this.processor;\n        this.log('Stopping ...');\n        await this._event('stop');\n        this.recording = false;\n        const tracks = this.stream.getTracks();\n        tracks.forEach((track)=>track.stop());\n        this.log('Exporting ...');\n        const exportData = await this._event('export', {}, _processor);\n        this.processor.disconnect();\n        this.source.disconnect();\n        this.node.disconnect();\n        this.analyser.disconnect();\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Performs a full cleanup of WavRecorder instance\n   * Stops actively listening via microphone and removes existing listeners\n   * @returns {Promise<true>}\n   */ async quit() {\n        this.listenForDeviceChange(null);\n        // we do not reset this on end so that selections persist across starts\n        this.deviceSelection = null;\n        if (this.processor) await this.end();\n        return true;\n    }\n}\nglobalThis.WavRecorder = $62bc376044a05513$export$439b217ca659a877;\n\n\n\n\n\nclass $5fc11d7bc0d20724$export$2934cf2d25c67a48 {\n    /**\n   * Create a new MediaStreamRecorder instance\n   * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]\n   * @returns {MediaStreamRecorder}\n   */ constructor({ sampleRate: sampleRate = 44100, outputToSpeakers: outputToSpeakers = false, debug: debug = false } = {}){\n        // Script source\n        this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);\n        // Config\n        this.sampleRate = sampleRate;\n        this.outputToSpeakers = outputToSpeakers;\n        this.debug = !!debug;\n        // State variables\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        this.recording = false;\n        // Event handling with AudioWorklet\n        this._lastEventId = 0;\n        this.eventReceipts = {};\n        this.eventTimeout = 5000;\n        // Process chunks of audio\n        this._chunkProcessor = ()=>{};\n        this._chunkProcessorSize = void 0;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n    }\n    /**\n   * Logs data in debug mode\n   * @param {...any} arguments\n   * @returns {true}\n   */ log() {\n        if (this.debug) this.log(...arguments);\n        return true;\n    }\n    /**\n   * Retrieves the current sampleRate for the recorder\n   * @returns {number}\n   */ getSampleRate() {\n        return this.sampleRate;\n    }\n    /**\n   * Retrieves the current status of the recording\n   * @returns {\"ended\"|\"paused\"|\"recording\"}\n   */ getStatus() {\n        if (!this.processor) return \"ended\";\n        else if (!this.recording) return \"paused\";\n        else return \"recording\";\n    }\n    /**\n   * Sends an event to the AudioWorklet\n   * @private\n   * @param {string} name\n   * @param {{[key: string]: any}} data\n   * @param {AudioWorkletNode} [_processor]\n   * @returns {Promise<{[key: string]: any}>}\n   */ async _event(name, data = {}, _processor = null) {\n        _processor = _processor || this.processor;\n        if (!_processor) throw new Error(\"Can not send events without recording first\");\n        const message = {\n            event: name,\n            id: this._lastEventId++,\n            data: data\n        };\n        _processor.port.postMessage(message);\n        const t0 = new Date().valueOf();\n        while(!this.eventReceipts[message.id]){\n            if (new Date().valueOf() - t0 > this.eventTimeout) throw new Error(`Timeout waiting for \"${name}\" event`);\n            await new Promise((res)=>setTimeout(()=>res(true), 1));\n        }\n        const payload = this.eventReceipts[message.id];\n        delete this.eventReceipts[message.id];\n        return payload;\n    }\n    /**\n   * Begins a recording session for the given audioTrack\n   * Microphone recording indicator will appear on browser tab but status will be \"paused\"\n   * @param {MediaStreamTrack} [audioTrack] if no device provided, default device will be used\n   * @returns {Promise<true>}\n   */ async begin(audioTrack) {\n        if (this.processor) throw new Error(`Already connected: please call .end() to start a new session`);\n        if (!audioTrack || audioTrack.kind !== \"audio\") throw new Error(\"No audio track provided\");\n        this.stream = new MediaStream([\n            audioTrack\n        ]);\n        const context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        const source = context.createMediaStreamSource(this.stream);\n        // Load and execute the module script.\n        try {\n            await context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const processor = new AudioWorkletNode(context, \"audio_processor\");\n        processor.port.onmessage = (e)=>{\n            const { event: event, id: id, data: data } = e.data;\n            if (event === \"receipt\") this.eventReceipts[id] = data;\n            else if (event === \"chunk\") {\n                if (this._chunkProcessorSize) {\n                    const buffer = this._chunkProcessorBuffer;\n                    this._chunkProcessorBuffer = {\n                        raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),\n                        mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)\n                    };\n                    if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {\n                        this._chunkProcessor(this._chunkProcessorBuffer);\n                        this._chunkProcessorBuffer = {\n                            raw: new ArrayBuffer(0),\n                            mono: new ArrayBuffer(0)\n                        };\n                    }\n                } else this._chunkProcessor(data);\n            }\n        };\n        const node = source.connect(processor);\n        const analyser = context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        node.connect(analyser);\n        if (this.outputToSpeakers) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Warning: Output to speakers may affect sound quality,\\nespecially due to system audio feedback preventative measures.\\nuse only for debugging\");\n            analyser.connect(context.destination);\n        }\n        this.source = source;\n        this.node = node;\n        this.analyser = analyser;\n        this.processor = processor;\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the recording track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = \"frequency\", minDecibels = -100, maxDecibels = -30) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Pauses the recording\n   * Keeps microphone stream open but halts storage of audio\n   * @returns {Promise<true>}\n   */ async pause() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        else if (!this.recording) throw new Error(\"Already paused: please call .record() first\");\n        if (this._chunkProcessorBuffer.raw.byteLength) this._chunkProcessor(this._chunkProcessorBuffer);\n        this.log(\"Pausing ...\");\n        await this._event(\"stop\");\n        this.recording = false;\n        return true;\n    }\n    /**\n   * Start recording stream and storing to memory from the connected audio source\n   * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]\n   * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio\n   * @returns {Promise<true>}\n   */ async record(chunkProcessor = ()=>{}, chunkSize = 8192) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        else if (this.recording) throw new Error(\"Already recording: HELLO please call .pause() first\");\n        else if (typeof chunkProcessor !== \"function\") throw new Error(`chunkProcessor must be a function`);\n        this._chunkProcessor = chunkProcessor;\n        this._chunkProcessorSize = chunkSize;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n        this.log(\"Recording ...\");\n        await this._event(\"start\");\n        this.recording = true;\n        return true;\n    }\n    /**\n   * Clears the audio buffer, empties stored recording\n   * @returns {Promise<true>}\n   */ async clear() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        await this._event(\"clear\");\n        return true;\n    }\n    /**\n   * Reads the current audio stream data\n   * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}\n   */ async read() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        this.log(\"Reading ...\");\n        const result = await this._event(\"read\");\n        return result;\n    }\n    /**\n   * Saves the current audio stream to a file\n   * @param {boolean} [force] Force saving while still recording\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async save(force = false) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        if (!force && this.recording) throw new Error(\"Currently recording: please call .pause() first, or call .save(true) to force\");\n        this.log(\"Exporting ...\");\n        const exportData = await this._event(\"export\");\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Ends the current recording session and saves the result\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async end() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        const _processor = this.processor;\n        this.log(\"Stopping ...\");\n        await this._event(\"stop\");\n        this.recording = false;\n        this.log(\"Exporting ...\");\n        const exportData = await this._event(\"export\", {}, _processor);\n        this.processor.disconnect();\n        this.source.disconnect();\n        this.node.disconnect();\n        this.analyser.disconnect();\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Performs a full cleanup of WavRecorder instance\n   * Stops actively listening via microphone and removes existing listeners\n   * @returns {Promise<true>}\n   */ async quit() {\n        this.listenForDeviceChange(null);\n        if (this.processor) await this.end();\n        return true;\n    }\n}\nglobalThis.WavRecorder = WavRecorder;\n\n\n\n\nvar $fc49a56cd8739127$var$__extends =  false || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar $fc49a56cd8739127$var$__awaiter =  false || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar $fc49a56cd8739127$var$__generator =  false || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar $fc49a56cd8739127$export$4a0c46dbbe2ddb67 = /** @class */ function() {\n    function MediaManager() {\n        this._callbacks = {};\n        this._micEnabled = true;\n        this._camEnabled = false;\n    }\n    MediaManager.prototype.setUserAudioCallback = function(userAudioCallback) {\n        this._userAudioCallback = userAudioCallback;\n    };\n    MediaManager.prototype.setClientOptions = function(options, override) {\n        var _a, _b, _c;\n        if (override === void 0) override = false;\n        if (this._options && !override) return;\n        this._options = options;\n        this._callbacks = (_a = options.callbacks) !== null && _a !== void 0 ? _a : {};\n        this._micEnabled = (_b = options.enableMic) !== null && _b !== void 0 ? _b : true;\n        this._camEnabled = (_c = options.enableCam) !== null && _c !== void 0 ? _c : false;\n    };\n    return MediaManager;\n}();\nvar $fc49a56cd8739127$export$45c5b9bfba2f6304 = /** @class */ function(_super) {\n    $fc49a56cd8739127$var$__extends(WavMediaManager, _super);\n    function WavMediaManager(recorderChunkSize, recorderSampleRate) {\n        if (recorderChunkSize === void 0) recorderChunkSize = undefined;\n        if (recorderSampleRate === void 0) recorderSampleRate = 24000;\n        var _this = _super.call(this) || this;\n        _this._initialized = false;\n        _this._recorderChunkSize = undefined;\n        _this._recorderChunkSize = recorderChunkSize;\n        _this._wavRecorder = new (0, $62bc376044a05513$export$439b217ca659a877)({\n            sampleRate: recorderSampleRate\n        });\n        _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f366)({\n            sampleRate: 24000\n        });\n        return _this;\n    }\n    WavMediaManager.prototype.initialize = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.begin()\n                        ];\n                    case 1:\n                        _a.sent();\n                        this._wavRecorder.listenForDeviceChange(null);\n                        this._wavRecorder.listenForDeviceChange(this._handleAvailableDevicesUpdated.bind(this));\n                        return [\n                            4 /*yield*/ ,\n                            this._wavStreamPlayer.connect()\n                        ];\n                    case 2:\n                        _a.sent();\n                        this._initialized = true;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.connect = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            var isAlreadyRecording;\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (!!this._initialized) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.initialize()\n                        ];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        isAlreadyRecording = this._wavRecorder.getStatus() == \"recording\";\n                        if (!(this._micEnabled && !isAlreadyRecording)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._startRecording()\n                        ];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.disconnect = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (!this._initialized) return [\n                            2 /*return*/ \n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.end()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._wavStreamPlayer.interrupt()\n                        ];\n                    case 2:\n                        _a.sent();\n                        this._initialized = false;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.userStartedSpeaking = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                return [\n                    2 /*return*/ ,\n                    this._wavStreamPlayer.interrupt()\n                ];\n            });\n        });\n    };\n    WavMediaManager.prototype.bufferBotAudio = function(data, id) {\n        return this._wavStreamPlayer.add16BitPCM(data, id);\n    };\n    WavMediaManager.prototype.getAllMics = function() {\n        return this._wavRecorder.listDevices();\n    };\n    WavMediaManager.prototype.getAllCams = function() {\n        // TODO: Video not supported yet\n        return Promise.resolve([]);\n    };\n    WavMediaManager.prototype.getAllSpeakers = function() {\n        // TODO: Implement speaker support\n        return Promise.resolve([]);\n    };\n    WavMediaManager.prototype.updateMic = function(micId) {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            var prevMic, curMic;\n            var _a, _b;\n            return $fc49a56cd8739127$var$__generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        prevMic = this._wavRecorder.deviceSelection;\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.end()\n                        ];\n                    case 1:\n                        _c.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.begin(micId)\n                        ];\n                    case 2:\n                        _c.sent();\n                        if (!this._micEnabled) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._startRecording()\n                        ];\n                    case 3:\n                        _c.sent();\n                        _c.label = 4;\n                    case 4:\n                        curMic = this._wavRecorder.deviceSelection;\n                        if (curMic && prevMic && prevMic.label !== curMic.label) (_b = (_a = this._callbacks).onMicUpdated) === null || _b === void 0 || _b.call(_a, curMic);\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.updateCam = function(camId) {\n    // TODO: Video not supported yet\n    };\n    WavMediaManager.prototype.updateSpeaker = function(speakerId) {\n    // TODO: Implement speaker support\n    };\n    Object.defineProperty(WavMediaManager.prototype, \"selectedMic\", {\n        get: function() {\n            var _a;\n            return (_a = this._wavRecorder.deviceSelection) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WavMediaManager.prototype, \"selectedCam\", {\n        get: function() {\n            // TODO: Video not supported yet\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WavMediaManager.prototype, \"selectedSpeaker\", {\n        get: function() {\n            // TODO: Implement speaker support\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WavMediaManager.prototype.enableMic = function(enable) {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            var _this = this;\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        this._micEnabled = enable;\n                        if (!this._wavRecorder.stream) return [\n                            2 /*return*/ \n                        ];\n                        this._wavRecorder.stream.getAudioTracks().forEach(function(track) {\n                            var _a, _b;\n                            track.enabled = enable;\n                            if (!enable) (_b = (_a = _this._callbacks).onTrackStopped) === null || _b === void 0 || _b.call(_a, track, $fc49a56cd8739127$var$localParticipant());\n                        });\n                        if (!enable) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._startRecording()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                    case 2:\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.pause()\n                        ];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.enableCam = function(enable) {\n    // TODO: Video not supported yet\n    };\n    Object.defineProperty(WavMediaManager.prototype, \"isCamEnabled\", {\n        get: function() {\n            // TODO: Video not supported yet\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WavMediaManager.prototype, \"isMicEnabled\", {\n        get: function() {\n            return this._micEnabled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WavMediaManager.prototype.tracks = function() {\n        var _a;\n        var tracks = (_a = this._wavRecorder.stream) === null || _a === void 0 ? void 0 : _a.getTracks()[0];\n        return {\n            local: tracks ? {\n                audio: tracks\n            } : {}\n        };\n    };\n    WavMediaManager.prototype._startRecording = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, void 0, function() {\n            var track;\n            var _this = this;\n            var _a, _b, _c;\n            return $fc49a56cd8739127$var$__generator(this, function(_d) {\n                switch(_d.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.record(function(data) {\n                                _this._userAudioCallback(data.mono);\n                            }, this._recorderChunkSize)\n                        ];\n                    case 1:\n                        _d.sent();\n                        track = (_a = this._wavRecorder.stream) === null || _a === void 0 ? void 0 : _a.getAudioTracks()[0];\n                        if (track) (_c = (_b = this._callbacks).onTrackStarted) === null || _c === void 0 || _c.call(_b, track, $fc49a56cd8739127$var$localParticipant());\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype._handleAvailableDevicesUpdated = function(devices) {\n        var _a, _b, _c, _d;\n        (_b = (_a = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a, devices.filter(function(d) {\n            return d.kind === \"videoinput\";\n        }));\n        (_d = (_c = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c, devices.filter(function(d) {\n            return d.kind === \"audioinput\";\n        }));\n        // if the current device went away or we're using the default and\n        // the default changed, reset the mic.\n        var defaultDevice = devices.find(function(d) {\n            return d.deviceId === \"default\";\n        });\n        var currentDevice = this._wavRecorder.deviceSelection;\n        if (currentDevice && (!devices.some(function(d) {\n            return d.deviceId === currentDevice.deviceId;\n        }) || currentDevice.deviceId === \"default\" && currentDevice.label !== (defaultDevice === null || defaultDevice === void 0 ? void 0 : defaultDevice.label))) this.updateMic(\"\");\n    };\n    return WavMediaManager;\n}($fc49a56cd8739127$export$4a0c46dbbe2ddb67);\nvar $fc49a56cd8739127$var$localParticipant = function() {\n    return {\n        id: \"local\",\n        name: \"\",\n        local: true\n    };\n};\n\n\n\n\nvar $22ece045290c996a$var$__extends =  false || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar $22ece045290c996a$var$__awaiter =  false || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar $22ece045290c996a$var$__generator =  false || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar $22ece045290c996a$export$c95c65abc5f47125 = /** @class */ function(_super) {\n    $22ece045290c996a$var$__extends(DailyMediaManager, _super);\n    function DailyMediaManager(enablePlayer, enableRecording, onTrackStartedCallback, onTrackStoppedCallback, recorderChunkSize, recorderSampleRate, playerSampleRate) {\n        if (enablePlayer === void 0) enablePlayer = true;\n        if (enableRecording === void 0) enableRecording = true;\n        if (recorderChunkSize === void 0) recorderChunkSize = undefined;\n        if (recorderSampleRate === void 0) recorderSampleRate = 24000;\n        if (playerSampleRate === void 0) playerSampleRate = 24000;\n        var _a;\n        var _this = _super.call(this) || this;\n        _this._selectedCam = {};\n        _this._selectedMic = {};\n        _this._selectedSpeaker = {};\n        _this._remoteAudioLevelInterval = null;\n        _this._recorderChunkSize = undefined;\n        _this._initialized = false;\n        _this._connected = false;\n        _this._currentAudioTrack = null;\n        _this._connectResolve = null;\n        _this.onTrackStartedCallback = onTrackStartedCallback;\n        _this.onTrackStoppedCallback = onTrackStoppedCallback;\n        _this._recorderChunkSize = recorderChunkSize;\n        _this._daily = (_a = (0, _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).getCallInstance()) !== null && _a !== void 0 ? _a : (0, _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).createCallObject();\n        if (enableRecording) _this._mediaStreamRecorder = new (0, $5fc11d7bc0d20724$export$2934cf2d25c67a48)({\n            sampleRate: recorderSampleRate\n        });\n        if (enablePlayer) _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f366)({\n            sampleRate: playerSampleRate\n        });\n        _this._daily.on(\"track-started\", _this.handleTrackStarted.bind(_this));\n        _this._daily.on(\"track-stopped\", _this.handleTrackStopped.bind(_this));\n        _this._daily.on(\"available-devices-updated\", _this._handleAvailableDevicesUpdated.bind(_this));\n        _this._daily.on(\"selected-devices-updated\", _this._handleSelectedDevicesUpdated.bind(_this));\n        _this._daily.on(\"local-audio-level\", _this._handleLocalAudioLevel.bind(_this));\n        return _this;\n    }\n    DailyMediaManager.prototype.initialize = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var infos, devices, cams, mics, speakers;\n            var _this = this;\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n            return $22ece045290c996a$var$__generator(this, function(_o) {\n                switch(_o.label){\n                    case 0:\n                        if (this._initialized) {\n                            console.warn(\"DailyMediaManager already initialized\");\n                            return [\n                                2 /*return*/ \n                            ];\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.startCamera({\n                                startVideoOff: !this._camEnabled,\n                                startAudioOff: !this._micEnabled\n                            })\n                        ];\n                    case 1:\n                        infos = _o.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 2:\n                        devices = _o.sent().devices;\n                        cams = devices.filter(function(d) {\n                            return d.kind === \"videoinput\";\n                        });\n                        mics = devices.filter(function(d) {\n                            return d.kind === \"audioinput\";\n                        });\n                        speakers = devices.filter(function(d) {\n                            return d.kind === \"audiooutput\";\n                        });\n                        (_b = (_a = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a, cams);\n                        (_d = (_c = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c, mics);\n                        (_f = (_e = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e, speakers);\n                        this._selectedCam = infos.camera;\n                        (_h = (_g = this._callbacks).onCamUpdated) === null || _h === void 0 || _h.call(_g, infos.camera);\n                        this._selectedMic = infos.mic;\n                        (_k = (_j = this._callbacks).onMicUpdated) === null || _k === void 0 || _k.call(_j, infos.mic);\n                        this._selectedSpeaker = infos.speaker;\n                        (_m = (_l = this._callbacks).onSpeakerUpdated) === null || _m === void 0 || _m.call(_l, infos.speaker);\n                        if (!!this._daily.isLocalAudioLevelObserverRunning()) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.startLocalAudioLevelObserver(100)\n                        ];\n                    case 3:\n                        _o.sent();\n                        _o.label = 4;\n                    case 4:\n                        if (!this._wavStreamPlayer) return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._wavStreamPlayer.connect()\n                        ];\n                    case 5:\n                        _o.sent();\n                        if (!this._remoteAudioLevelInterval) this._remoteAudioLevelInterval = setInterval(function() {\n                            var _a;\n                            var frequencies = _this._wavStreamPlayer.getFrequencies();\n                            var aveVal = 0;\n                            if ((_a = frequencies.values) === null || _a === void 0 ? void 0 : _a.length) aveVal = frequencies.values.reduce(function(a, c) {\n                                return a + c;\n                            }, 0) / frequencies.values.length;\n                            _this._handleRemoteAudioLevel(aveVal);\n                        }, 100);\n                        _o.label = 6;\n                    case 6:\n                        this._initialized = true;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.connect = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _this = this;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                if (this._connected) {\n                    console.warn(\"DailyMediaManager already connected\");\n                    return [\n                        2 /*return*/ \n                    ];\n                }\n                this._connected = true;\n                if (!this._initialized) return [\n                    2 /*return*/ ,\n                    new Promise(function(resolve) {\n                        (function() {\n                            return $22ece045290c996a$var$__awaiter(_this, void 0, void 0, function() {\n                                return $22ece045290c996a$var$__generator(this, function(_a) {\n                                    switch(_a.label){\n                                        case 0:\n                                            this._connectResolve = resolve;\n                                            return [\n                                                4 /*yield*/ ,\n                                                this.initialize()\n                                            ];\n                                        case 1:\n                                            _a.sent();\n                                            return [\n                                                2 /*return*/ \n                                            ];\n                                    }\n                                });\n                            });\n                        })();\n                    })\n                ];\n                if (this._micEnabled) this._startRecording();\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    DailyMediaManager.prototype.disconnect = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _a, _b;\n            return $22ece045290c996a$var$__generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        if (this._remoteAudioLevelInterval) clearInterval(this._remoteAudioLevelInterval);\n                        this._remoteAudioLevelInterval = null;\n                        this._daily.leave();\n                        this._currentAudioTrack = null;\n                        return [\n                            4 /*yield*/ ,\n                            (_a = this._mediaStreamRecorder) === null || _a === void 0 ? void 0 : _a.end()\n                        ];\n                    case 1:\n                        _c.sent();\n                        (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.interrupt();\n                        this._initialized = false;\n                        this._connected = false;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.userStartedSpeaking = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _a;\n            return $22ece045290c996a$var$__generator(this, function(_b) {\n                return [\n                    2 /*return*/ ,\n                    (_a = this._wavStreamPlayer) === null || _a === void 0 ? void 0 : _a.interrupt()\n                ];\n            });\n        });\n    };\n    DailyMediaManager.prototype.bufferBotAudio = function(data, id) {\n        var _a;\n        return (_a = this._wavStreamPlayer) === null || _a === void 0 ? void 0 : _a.add16BitPCM(data, id);\n    };\n    DailyMediaManager.prototype.getAllMics = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var devices;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent().devices;\n                        return [\n                            2 /*return*/ ,\n                            devices.filter(function(device) {\n                                return device.kind === \"audioinput\";\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.getAllCams = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var devices;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent().devices;\n                        return [\n                            2 /*return*/ ,\n                            devices.filter(function(device) {\n                                return device.kind === \"videoinput\";\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.getAllSpeakers = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var devices;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent().devices;\n                        return [\n                            2 /*return*/ ,\n                            devices.filter(function(device) {\n                                return device.kind === \"audiooutput\";\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.updateMic = function(micId) {\n        var _this = this;\n        this._daily.setInputDevicesAsync({\n            audioDeviceId: micId\n        }).then(function(deviceInfo) {\n            _this._selectedMic = deviceInfo.mic;\n        });\n    };\n    DailyMediaManager.prototype.updateCam = function(camId) {\n        var _this = this;\n        this._daily.setInputDevicesAsync({\n            videoDeviceId: camId\n        }).then(function(deviceInfo) {\n            _this._selectedCam = deviceInfo.camera;\n        });\n    };\n    DailyMediaManager.prototype.updateSpeaker = function(speakerId) {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var sID, speakers, defaultSpeaker_1, defaultSpeakerCp;\n            var _this = this;\n            var _a, _b;\n            return $22ece045290c996a$var$__generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        if (speakerId !== \"default\" && this._selectedSpeaker.deviceId === speakerId) return [\n                            2 /*return*/ \n                        ];\n                        sID = speakerId;\n                        if (!(sID === \"default\")) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.getAllSpeakers()\n                        ];\n                    case 1:\n                        speakers = _c.sent();\n                        defaultSpeaker_1 = speakers.find(function(s) {\n                            return s.deviceId === \"default\";\n                        });\n                        if (!defaultSpeaker_1) {\n                            console.warn(\"No default speaker found\");\n                            return [\n                                2 /*return*/ \n                            ];\n                        }\n                        speakers.splice(speakers.indexOf(defaultSpeaker_1), 1);\n                        defaultSpeakerCp = speakers.find(function(s) {\n                            return defaultSpeaker_1.label.includes(s.label);\n                        });\n                        sID = (_a = defaultSpeakerCp === null || defaultSpeakerCp === void 0 ? void 0 : defaultSpeakerCp.deviceId) !== null && _a !== void 0 ? _a : speakerId;\n                        _c.label = 2;\n                    case 2:\n                        (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.updateSpeaker(sID).then(function() {\n                            var _a, _b;\n                            _this._selectedSpeaker = {\n                                deviceId: speakerId\n                            };\n                            (_b = (_a = _this._callbacks).onSpeakerUpdated) === null || _b === void 0 || _b.call(_a, _this._selectedSpeaker);\n                        });\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    Object.defineProperty(DailyMediaManager.prototype, \"selectedMic\", {\n        get: function() {\n            return this._selectedMic;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DailyMediaManager.prototype, \"selectedCam\", {\n        get: function() {\n            return this._selectedCam;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DailyMediaManager.prototype, \"selectedSpeaker\", {\n        get: function() {\n            return this._selectedSpeaker;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DailyMediaManager.prototype.enableMic = function(enable) {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _a;\n            return $22ece045290c996a$var$__generator(this, function(_b) {\n                this._micEnabled = enable;\n                if (!((_a = this._daily.participants()) === null || _a === void 0 ? void 0 : _a.local)) return [\n                    2 /*return*/ \n                ];\n                this._daily.setLocalAudio(enable);\n                if (this._mediaStreamRecorder) {\n                    if (enable) {\n                        if (this._mediaStreamRecorder.getStatus() === \"paused\") this._startRecording();\n                         // else, we'll record on the track-started event\n                    } else if (this._mediaStreamRecorder.getStatus() === \"recording\") this._mediaStreamRecorder.pause();\n                }\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    DailyMediaManager.prototype.enableCam = function(enable) {\n        this._camEnabled = enable;\n        this._daily.setLocalVideo(enable);\n    };\n    Object.defineProperty(DailyMediaManager.prototype, \"isCamEnabled\", {\n        get: function() {\n            return this._daily.localVideo();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DailyMediaManager.prototype, \"isMicEnabled\", {\n        get: function() {\n            return this._daily.localAudio();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DailyMediaManager.prototype.tracks = function() {\n        var _a, _b, _c, _d, _e, _f;\n        var participants = this._daily.participants();\n        return {\n            local: {\n                audio: (_c = (_b = (_a = participants === null || participants === void 0 ? void 0 : participants.local) === null || _a === void 0 ? void 0 : _a.tracks) === null || _b === void 0 ? void 0 : _b.audio) === null || _c === void 0 ? void 0 : _c.persistentTrack,\n                video: (_f = (_e = (_d = participants === null || participants === void 0 ? void 0 : participants.local) === null || _d === void 0 ? void 0 : _d.tracks) === null || _e === void 0 ? void 0 : _e.video) === null || _f === void 0 ? void 0 : _f.persistentTrack\n            }\n        };\n    };\n    DailyMediaManager.prototype._startRecording = function() {\n        var _this = this;\n        if (!this._connected || !this._mediaStreamRecorder) return;\n        try {\n            this._mediaStreamRecorder.record(function(data) {\n                _this._userAudioCallback(data.mono);\n            }, this._recorderChunkSize);\n        } catch (e) {\n            var err = e;\n            if (!err.message.includes(\"Already recording\")) console.error(\"Error starting recording\", e);\n        }\n    };\n    DailyMediaManager.prototype._handleAvailableDevicesUpdated = function(event) {\n        var _a, _b, _c, _d, _e, _f;\n        (_b = (_a = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a, event.availableDevices.filter(function(d) {\n            return d.kind === \"videoinput\";\n        }));\n        (_d = (_c = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c, event.availableDevices.filter(function(d) {\n            return d.kind === \"audioinput\";\n        }));\n        (_f = (_e = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e, event.availableDevices.filter(function(d) {\n            return d.kind === \"audiooutput\";\n        }));\n        if (this._selectedSpeaker.deviceId === \"default\") this.updateSpeaker(\"default\");\n    };\n    DailyMediaManager.prototype._handleSelectedDevicesUpdated = function(event) {\n        var _a, _b, _c, _d, _e, _f;\n        if (((_a = this._selectedCam) === null || _a === void 0 ? void 0 : _a.deviceId) !== event.devices.camera) {\n            this._selectedCam = event.devices.camera;\n            (_c = (_b = this._callbacks).onCamUpdated) === null || _c === void 0 || _c.call(_b, event.devices.camera);\n        }\n        if (((_d = this._selectedMic) === null || _d === void 0 ? void 0 : _d.deviceId) !== event.devices.mic) {\n            this._selectedMic = event.devices.mic;\n            (_f = (_e = this._callbacks).onMicUpdated) === null || _f === void 0 || _f.call(_e, event.devices.mic);\n        }\n    };\n    DailyMediaManager.prototype._handleLocalAudioLevel = function(ev) {\n        var _a, _b;\n        (_b = (_a = this._callbacks).onLocalAudioLevel) === null || _b === void 0 || _b.call(_a, ev.audioLevel);\n    };\n    DailyMediaManager.prototype._handleRemoteAudioLevel = function(audioLevel) {\n        var _a, _b;\n        (_b = (_a = this._callbacks).onRemoteAudioLevel) === null || _b === void 0 || _b.call(_a, audioLevel, $22ece045290c996a$var$botParticipant());\n    };\n    DailyMediaManager.prototype.handleTrackStarted = function(event) {\n        return $22ece045290c996a$var$__awaiter(this, void 0, void 0, function() {\n            var status, _a;\n            var _b, _c, _d, _e;\n            return $22ece045290c996a$var$__generator(this, function(_f) {\n                switch(_f.label){\n                    case 0:\n                        if (!((_b = event.participant) === null || _b === void 0 ? void 0 : _b.local)) return [\n                            2 /*return*/ \n                        ];\n                        if (!(event.track.kind === \"audio\")) return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                        if (!this._mediaStreamRecorder) return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                        status = this._mediaStreamRecorder.getStatus();\n                        _a = status;\n                        switch(_a){\n                            case \"ended\":\n                                return [\n                                    3 /*break*/ ,\n                                    1\n                                ];\n                            case \"paused\":\n                                return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                            case \"recording\":\n                                return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                        }\n                        return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                    case 1:\n                        return [\n                            4 /*yield*/ ,\n                            this._mediaStreamRecorder.begin(event.track)\n                        ];\n                    case 2:\n                        _f.sent();\n                        if (this._connected) {\n                            this._startRecording();\n                            if (this._connectResolve) {\n                                this._connectResolve();\n                                this._connectResolve = null;\n                            }\n                        }\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 3:\n                        this._startRecording();\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 4:\n                        if (!(this._currentAudioTrack !== event.track)) return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._mediaStreamRecorder.end()\n                        ];\n                    case 5:\n                        _f.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._mediaStreamRecorder.begin(event.track)\n                        ];\n                    case 6:\n                        _f.sent();\n                        this._startRecording();\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 7:\n                        console.warn(\"track-started event received for current track and already recording\");\n                        _f.label = 8;\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 9:\n                        this._currentAudioTrack = event.track;\n                        _f.label = 10;\n                    case 10:\n                        (_d = (_c = this._callbacks).onTrackStarted) === null || _d === void 0 || _d.call(_c, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant(event.participant) : undefined);\n                        (_e = this.onTrackStartedCallback) === null || _e === void 0 || _e.call(this, event);\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.handleTrackStopped = function(event) {\n        var _a, _b, _c, _d;\n        if (!((_a = event.participant) === null || _a === void 0 ? void 0 : _a.local)) return;\n        if (event.track.kind === \"audio\") {\n            if (this._mediaStreamRecorder && this._mediaStreamRecorder.getStatus() === \"recording\") this._mediaStreamRecorder.pause();\n        }\n        (_c = (_b = this._callbacks).onTrackStopped) === null || _c === void 0 || _c.call(_b, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant(event.participant) : undefined);\n        (_d = this.onTrackStoppedCallback) === null || _d === void 0 || _d.call(this, event);\n    };\n    return DailyMediaManager;\n}((0, $fc49a56cd8739127$export$4a0c46dbbe2ddb67));\nvar $22ece045290c996a$var$dailyParticipantToParticipant = function(p) {\n    return {\n        id: p.user_id,\n        local: p.local,\n        name: p.user_name\n    };\n};\nvar $22ece045290c996a$var$botParticipant = function() {\n    return {\n        id: \"bot\",\n        local: false,\n        name: \"Bot\"\n    };\n};\n\n\nclass $b31644dc78dca54a$var$TrackStatusMessage {\n    constructor(receiver_index, enabled){\n        this.type = \"trackStatus\";\n        this.receiver_index = receiver_index;\n        this.enabled = enabled;\n    }\n}\nconst $b31644dc78dca54a$var$RENEGOTIATE_TYPE = \"renegotiate\";\nclass $b31644dc78dca54a$var$RenegotiateMessage {\n    constructor(){\n        this.type = $b31644dc78dca54a$var$RENEGOTIATE_TYPE;\n    }\n}\nconst $b31644dc78dca54a$var$PEER_LEFT_TYPE = \"peerLeft\";\nclass $b31644dc78dca54a$var$PeerLeftMessageMessage {\n    constructor(){\n        this.type = $b31644dc78dca54a$var$PEER_LEFT_TYPE;\n    }\n}\n// Interface for the structure of the signalling message\nconst $b31644dc78dca54a$var$SIGNALLING_TYPE = \"signalling\";\nclass $b31644dc78dca54a$var$SignallingMessageObject {\n    constructor(message){\n        this.type = $b31644dc78dca54a$var$SIGNALLING_TYPE;\n        this.message = message;\n    }\n}\nconst $b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX = 0;\nconst $b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX = 1;\nclass $b31644dc78dca54a$export$62043589d053a879 extends (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.Transport) {\n    constructor(opts = {}){\n        super();\n        this._connectionUrl = null;\n        // Trigger when the peer connection is finally ready or in case it has failed all the attempts to connect\n        this._connectResolved = null;\n        this._connectFailed = null;\n        this.pc = null;\n        this.dc = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.pc_id = null;\n        this.reconnectionAttempts = 0;\n        this.maxReconnectionAttempts = 3;\n        this.isReconnecting = false;\n        this.keepAliveInterval = null;\n        this._iceServers = [];\n        this._iceServers = opts.iceServers || [];\n        this._waitForICEGathering = opts.waitForICEGathering || false;\n        this._connectionUrl = opts.connectionUrl || null;\n        this.audioCodec = opts.audioCodec || null;\n        this.videoCodec = opts.videoCodec || null;\n        this.mediaManager = new (0, $22ece045290c996a$export$c95c65abc5f47125)(false, false, async (event)=>{\n            if (!this.pc) return;\n            if (event.type == \"audio\") {\n                (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).info(\"SmallWebRTCMediaManager replacing audio track\");\n                await this.getAudioTransceiver().sender.replaceTrack(event.track);\n            } else if (event.type == \"video\") {\n                (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).info(\"SmallWebRTCMediaManager replacing video track\");\n                await this.getVideoTransceiver().sender.replaceTrack(event.track);\n            }\n        }, (event)=>(0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"SmallWebRTCMediaManager Track stopped:\", event));\n    }\n    initialize(options, messageHandler) {\n        this._options = options;\n        this._callbacks = options.callbacks ?? {};\n        this._onMessage = messageHandler;\n        this.mediaManager.setClientOptions(options);\n        this.state = \"disconnected\";\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"[RTVI Transport] Initialized\");\n    }\n    async initDevices() {\n        this.state = \"initializing\";\n        await this.mediaManager.initialize();\n        this.state = \"initialized\";\n    }\n    setAudioCodec(audioCodec) {\n        this.audioCodec = audioCodec;\n    }\n    setVideoCodec(videoCodec) {\n        this.videoCodec = videoCodec;\n    }\n    _validateConnectionParams(connectParams) {\n        if (connectParams === undefined || connectParams === null) return undefined;\n        if (typeof connectParams !== \"object\") throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.RTVIError)(\"Invalid connection parameters\");\n        for (const [key, val] of Object.entries(connectParams)){\n            if (key !== \"connectionUrl\") throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.RTVIError)(`Unrecognized connection parameter: ${key}. Only 'connectionUrl' is allowed.`);\n            else if (typeof val !== \"string\") throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.RTVIError)(`Invalid type for connectionUrl: expected string, got ${typeof val}`);\n        }\n        return connectParams;\n    }\n    async _connect(connectParams) {\n        if (this._abortController?.signal.aborted) return;\n        this.state = \"connecting\";\n        this._connectionUrl = connectParams?.connectionUrl ?? this._connectionUrl;\n        if (!this._connectionUrl) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).error(\"No url provided for connection\");\n            this.state = \"error\";\n            throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.TransportStartError)();\n        }\n        await this.mediaManager.connect();\n        await this.startNewPeerConnection();\n        if (this._abortController?.signal.aborted) return;\n        // Wait until we are actually connected and the data channel is ready\n        await new Promise((resolve, reject)=>{\n            this._connectResolved = resolve;\n            this._connectFailed = reject;\n        });\n        this.state = \"connected\";\n        this._callbacks.onConnected?.();\n    }\n    syncTrackStatus() {\n        // Sending the current status from the tracks to Pipecat\n        this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX, this.mediaManager.isMicEnabled));\n        this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX, this.mediaManager.isCamEnabled));\n    }\n    sendReadyMessage() {\n        this.state = \"ready\";\n        // Sending message that the client is ready, just for testing\n        //this.dc?.send(JSON.stringify({id: 'clientReady', label: 'rtvi-ai', type:'client-ready'}))\n        this.sendMessage((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.RTVIMessage).clientReady());\n    }\n    sendMessage(message) {\n        if (!this.dc || this.dc.readyState !== \"open\") {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).warn(`Datachannel is not ready. Message not sent: ${message}`);\n            return;\n        }\n        this.dc?.send(JSON.stringify(message));\n    }\n    sendSignallingMessage(message) {\n        if (!this.dc || this.dc.readyState !== \"open\") {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).warn(`Datachannel is not ready. Message not sent: ${message}`);\n            return;\n        }\n        const signallingMessage = new $b31644dc78dca54a$var$SignallingMessageObject(message);\n        this.dc?.send(JSON.stringify(signallingMessage));\n    }\n    async _disconnect() {\n        this.state = \"disconnecting\";\n        await this.stop();\n        this.state = \"disconnected\";\n    }\n    createPeerConnection() {\n        const config = {\n            iceServers: this._iceServers\n        };\n        let pc = new RTCPeerConnection(config);\n        pc.addEventListener(\"icegatheringstatechange\", ()=>{\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`iceGatheringState: ${this.pc.iceGatheringState}`);\n        });\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`iceGatheringState: ${pc.iceGatheringState}`);\n        pc.addEventListener(\"iceconnectionstatechange\", ()=>this.handleICEConnectionStateChange());\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`iceConnectionState: ${pc.iceConnectionState}`);\n        pc.addEventListener(\"signalingstatechange\", ()=>{\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`signalingState: ${this.pc.signalingState}`);\n            if (this.pc.signalingState == \"stable\") this.handleReconnectionCompleted();\n        });\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`signalingState: ${pc.signalingState}`);\n        pc.addEventListener(\"track\", (evt)=>{\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`Received new track ${evt.track.kind}`);\n            this._callbacks.onTrackStarted?.(evt.track);\n        });\n        return pc;\n    }\n    handleICEConnectionStateChange() {\n        if (!this.pc) return;\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`ICE Connection State: ${this.pc.iceConnectionState}`);\n        if (this.pc.iceConnectionState === \"failed\") {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"ICE connection failed, attempting restart.\");\n            this.attemptReconnection(true);\n        } else if (this.pc.iceConnectionState === \"disconnected\") // Waiting before trying to reconnect to see if it handles it automatically\n        setTimeout(()=>{\n            if (this.pc?.iceConnectionState === \"disconnected\") {\n                (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"Still disconnected, attempting reconnection.\");\n                this.attemptReconnection(true);\n            }\n        }, 5000);\n    }\n    handleReconnectionCompleted() {\n        this.reconnectionAttempts = 0;\n        this.isReconnecting = false;\n    }\n    async attemptReconnection(recreatePeerConnection = false) {\n        if (this.isReconnecting) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"Reconnection already in progress, skipping.\");\n            return;\n        }\n        if (this.reconnectionAttempts >= this.maxReconnectionAttempts) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"Max reconnection attempts reached. Stopping transport.\");\n            await this.stop();\n            return;\n        }\n        this.isReconnecting = true;\n        this.reconnectionAttempts++;\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`Reconnection attempt ${this.reconnectionAttempts}...`);\n        // aiortc does not seem to work when just trying to restart the ice\n        // so for this case we create a new peer connection on both sides\n        if (recreatePeerConnection) {\n            const oldPC = this.pc;\n            await this.startNewPeerConnection(recreatePeerConnection);\n            if (oldPC) {\n                (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"closing old peer connection\");\n                this.closePeerConnection(oldPC);\n            }\n        } else await this.negotiate();\n    }\n    async negotiate(recreatePeerConnection = false) {\n        if (!this.pc) return Promise.reject(\"Peer connection is not initialized\");\n        try {\n            // Create offer\n            const offer = await this.pc.createOffer();\n            await this.pc.setLocalDescription(offer);\n            // Wait for ICE gathering to complete\n            if (this._waitForICEGathering) await new Promise((resolve)=>{\n                if (this.pc.iceGatheringState === \"complete\") resolve();\n                else {\n                    const checkState = ()=>{\n                        if (this.pc.iceGatheringState === \"complete\") {\n                            this.pc.removeEventListener(\"icegatheringstatechange\", checkState);\n                            resolve();\n                        }\n                    };\n                    this.pc.addEventListener(\"icegatheringstatechange\", checkState);\n                }\n            });\n            let offerSdp = this.pc.localDescription;\n            // Filter audio codec\n            if (this.audioCodec && this.audioCodec !== \"default\") // @ts-ignore\n            offerSdp.sdp = this.sdpFilterCodec(\"audio\", this.audioCodec, offerSdp.sdp);\n            // Filter video codec\n            if (this.videoCodec && this.videoCodec !== \"default\") // @ts-ignore\n            offerSdp.sdp = this.sdpFilterCodec(\"video\", this.videoCodec, offerSdp.sdp);\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`Will create offer for peerId: ${this.pc_id}`);\n            // Send offer to server\n            const response = await fetch(this._connectionUrl, {\n                body: JSON.stringify({\n                    sdp: offerSdp.sdp,\n                    type: offerSdp.type,\n                    pc_id: this.pc_id,\n                    restart_pc: recreatePeerConnection\n                }),\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\"\n            });\n            const answer = await response.json();\n            // @ts-ignore\n            this.pc_id = answer.pc_id;\n            // @ts-ignore\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`Received answer for peer connection id ${answer.pc_id}`);\n            await this.pc.setRemoteDescription(answer);\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`Remote candidate supports trickle ice: ${this.pc.canTrickleIceCandidates}`);\n        } catch (e) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`Reconnection attempt ${this.reconnectionAttempts} failed: ${e}`);\n            this.isReconnecting = false;\n            setTimeout(()=>this.attemptReconnection(true), 2000);\n        }\n    }\n    addInitialTransceivers() {\n        // Transceivers always appear in creation-order for both peers\n        // For now we are only considering that we are going to have 02 transceivers,\n        // one for audio and one for video\n        this.pc.addTransceiver(\"audio\", {\n            direction: \"sendrecv\"\n        });\n        this.pc.addTransceiver(\"video\", {\n            direction: \"sendrecv\"\n        });\n    }\n    getAudioTransceiver() {\n        // Transceivers always appear in creation-order for both peers\n        // Look at addInitialTransceivers\n        return this.pc.getTransceivers()[$b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX];\n    }\n    getVideoTransceiver() {\n        // Transceivers always appear in creation-order for both peers\n        // Look at addInitialTransceivers\n        return this.pc.getTransceivers()[$b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX];\n    }\n    async startNewPeerConnection(recreatePeerConnection = false) {\n        this.pc = this.createPeerConnection();\n        this.addInitialTransceivers();\n        this.dc = this.createDataChannel(\"chat\", {\n            ordered: true\n        });\n        await this.addUserMedia();\n        await this.negotiate(recreatePeerConnection);\n    }\n    async addUserMedia() {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`addUserMedia this.tracks(): ${this.tracks()}`);\n        let audioTrack = this.tracks().local.audio;\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`addUserMedia audioTrack: ${audioTrack}`);\n        if (audioTrack) await this.getAudioTransceiver().sender.replaceTrack(audioTrack);\n        let videoTrack = this.tracks().local.video;\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(`addUserMedia videoTrack: ${videoTrack}`);\n        if (videoTrack) await this.getVideoTransceiver().sender.replaceTrack(videoTrack);\n    }\n    // Method to handle a general message (this can be expanded for other types of messages)\n    handleMessage(message) {\n        try {\n            const messageObj = JSON.parse(message); // Type is `any` initially\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"received message:\", messageObj);\n            // Check if it's a signalling message\n            if (messageObj.type === $b31644dc78dca54a$var$SIGNALLING_TYPE) this.handleSignallingMessage(messageObj); // Delegate to handleSignallingMessage\n            else // Bubble any messages with rtvi-ai label\n            if (messageObj.label === \"rtvi-ai\") this._onMessage({\n                id: messageObj.id,\n                type: messageObj.type,\n                data: messageObj.data\n            });\n        } catch (error) {\n            console.error(\"Failed to parse JSON message:\", error);\n        }\n    }\n    // Method to handle signalling messages specifically\n    async handleSignallingMessage(messageObj) {\n        // Cast the object to the correct type after verification\n        const signallingMessage = messageObj;\n        // Handle different signalling message types\n        switch(signallingMessage.message.type){\n            case $b31644dc78dca54a$var$RENEGOTIATE_TYPE:\n                this.attemptReconnection(false);\n                break;\n            case $b31644dc78dca54a$var$PEER_LEFT_TYPE:\n                this.disconnect();\n                break;\n            default:\n                console.warn(\"Unknown signalling message:\", signallingMessage.message);\n        }\n    }\n    createDataChannel(label, options) {\n        const dc = this.pc.createDataChannel(label, options);\n        dc.addEventListener(\"close\", ()=>{\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"datachannel closed\");\n            if (this.keepAliveInterval) {\n                clearInterval(this.keepAliveInterval);\n                this.keepAliveInterval = null;\n            }\n        });\n        dc.addEventListener(\"open\", ()=>{\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"datachannel opened\");\n            if (this._connectResolved) {\n                this.syncTrackStatus();\n                this._connectResolved();\n                this._connectResolved = null;\n                this._connectFailed = null;\n            }\n            // @ts-ignore\n            this.keepAliveInterval = setInterval(()=>{\n                const message = \"ping: \" + new Date().getTime();\n                dc.send(message);\n            }, 1000);\n        });\n        dc.addEventListener(\"message\", (evt)=>{\n            let message = evt.data;\n            this.handleMessage(message);\n        });\n        return dc;\n    }\n    closePeerConnection(pc) {\n        pc.getTransceivers().forEach((transceiver)=>{\n            if (transceiver.stop) transceiver.stop();\n        });\n        pc.getSenders().forEach((sender)=>{\n            sender.track?.stop();\n        });\n        pc.close();\n    }\n    async stop() {\n        if (!this.pc) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).debug(\"Peer connection is already closed or null.\");\n            return;\n        }\n        if (this.dc) this.dc.close();\n        this.closePeerConnection(this.pc);\n        this.pc = null;\n        await this.mediaManager.disconnect();\n        // For some reason after we close the peer connection, it is not triggering the listeners\n        this.pc_id = null;\n        this.reconnectionAttempts = 0;\n        this.isReconnecting = false;\n        this._callbacks.onDisconnected?.();\n        if (this._connectFailed) this._connectFailed();\n        this._connectFailed = null;\n        this._connectResolved = null;\n    }\n    getAllMics() {\n        return this.mediaManager.getAllMics();\n    }\n    getAllCams() {\n        return this.mediaManager.getAllCams();\n    }\n    getAllSpeakers() {\n        return this.mediaManager.getAllSpeakers();\n    }\n    async updateMic(micId) {\n        return this.mediaManager.updateMic(micId);\n    }\n    updateCam(camId) {\n        return this.mediaManager.updateCam(camId);\n    }\n    updateSpeaker(speakerId) {\n        return this.mediaManager.updateSpeaker(speakerId);\n    }\n    get selectedMic() {\n        return this.mediaManager.selectedMic;\n    }\n    get selectedCam() {\n        return this.mediaManager.selectedCam;\n    }\n    get selectedSpeaker() {\n        return this.mediaManager.selectedSpeaker;\n    }\n    set iceServers(iceServers) {\n        this._iceServers = iceServers;\n    }\n    get iceServers() {\n        return this._iceServers;\n    }\n    enableMic(enable) {\n        this.mediaManager.enableMic(enable);\n        this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX, enable));\n    }\n    enableCam(enable) {\n        this.mediaManager.enableCam(enable);\n        this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX, enable));\n    }\n    get isCamEnabled() {\n        return this.mediaManager.isCamEnabled;\n    }\n    get isMicEnabled() {\n        return this.mediaManager.isMicEnabled;\n    }\n    get state() {\n        return this._state;\n    }\n    set state(state) {\n        if (this._state === state) return;\n        this._state = state;\n        this._callbacks.onTransportStateChanged?.(state);\n    }\n    tracks() {\n        return this.mediaManager.tracks();\n    }\n    // Not implemented\n    enableScreenShare(enable) {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).error(\"startScreenShare not implemented for SmallWebRTCTransport\");\n        throw new Error(\"Not implemented\");\n    }\n    get isSharingScreen() {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_0__.logger).error(\"isSharingScreen not implemented for SmallWebRTCTransport\");\n        return false;\n    }\n    sdpFilterCodec(kind, codec, realSdp) {\n        const allowed = [];\n        const rtxRegex = new RegExp(\"a=fmtp:(\\\\d+) apt=(\\\\d+)\\\\r$\");\n        const codecRegex = new RegExp(\"a=rtpmap:([0-9]+) \" + this.escapeRegExp(codec));\n        const videoRegex = new RegExp(\"(m=\" + kind + \" .*?)( ([0-9]+))*\\\\s*$\");\n        const lines = realSdp.split(\"\\n\");\n        let isKind = false;\n        for(let i = 0; i < lines.length; i++){\n            if (lines[i].startsWith(\"m=\" + kind + \" \")) isKind = true;\n            else if (lines[i].startsWith(\"m=\")) isKind = false;\n            if (isKind) {\n                const match = lines[i].match(codecRegex);\n                if (match) allowed.push(parseInt(match[1]));\n                const matchRtx = lines[i].match(rtxRegex);\n                if (matchRtx && allowed.includes(parseInt(matchRtx[2]))) allowed.push(parseInt(matchRtx[1]));\n            }\n        }\n        const skipRegex = \"a=(fmtp|rtcp-fb|rtpmap):([0-9]+)\";\n        let sdp = \"\";\n        isKind = false;\n        for(let i = 0; i < lines.length; i++){\n            if (lines[i].startsWith(\"m=\" + kind + \" \")) isKind = true;\n            else if (lines[i].startsWith(\"m=\")) isKind = false;\n            if (isKind) {\n                const skipMatch = lines[i].match(skipRegex);\n                if (skipMatch && !allowed.includes(parseInt(skipMatch[2]))) continue;\n                else if (lines[i].match(videoRegex)) sdp += lines[i].replace(videoRegex, \"$1 \" + allowed.join(\" \")) + \"\\n\";\n                else sdp += lines[i] + \"\\n\";\n            } else sdp += lines[i] + \"\\n\";\n        }\n        return sdp;\n    }\n    escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    }\n}\n$b31644dc78dca54a$export$62043589d053a879.SERVICE_NAME = \"small-webrtc-transport\";\n\n\n\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@pipecat-ai/small-webrtc-transport/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@pipecat-ai/small-webrtc-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/@pipecat-ai/small-webrtc-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAILY_ACCESS_LEVEL_FULL: () => (/* binding */ Pi),\n/* harmony export */   DAILY_ACCESS_LEVEL_LOBBY: () => (/* binding */ Ai),\n/* harmony export */   DAILY_ACCESS_LEVEL_NONE: () => (/* binding */ ji),\n/* harmony export */   DAILY_ACCESS_UNKNOWN: () => (/* binding */ Oi),\n/* harmony export */   DAILY_CAMERA_ERROR_CAM_AND_MIC_IN_USE: () => (/* binding */ Wi),\n/* harmony export */   DAILY_CAMERA_ERROR_CAM_IN_USE: () => (/* binding */ qi),\n/* harmony export */   DAILY_CAMERA_ERROR_CONSTRAINTS: () => (/* binding */ Ki),\n/* harmony export */   DAILY_CAMERA_ERROR_MIC_IN_USE: () => (/* binding */ zi),\n/* harmony export */   DAILY_CAMERA_ERROR_NOT_FOUND: () => (/* binding */ Qi),\n/* harmony export */   DAILY_CAMERA_ERROR_PERMISSIONS: () => (/* binding */ Hi),\n/* harmony export */   DAILY_CAMERA_ERROR_UNDEF_MEDIADEVICES: () => (/* binding */ Gi),\n/* harmony export */   DAILY_CAMERA_ERROR_UNKNOWN: () => (/* binding */ Yi),\n/* harmony export */   DAILY_EVENT_ACCESS_STATE_UPDATED: () => (/* binding */ fo),\n/* harmony export */   DAILY_EVENT_ACTIVE_SPEAKER_CHANGE: () => (/* binding */ Uo),\n/* harmony export */   DAILY_EVENT_ACTIVE_SPEAKER_MODE_CHANGE: () => (/* binding */ Vo),\n/* harmony export */   DAILY_EVENT_APP_MSG: () => (/* binding */ Io),\n/* harmony export */   DAILY_EVENT_CAMERA_ERROR: () => (/* binding */ oo),\n/* harmony export */   DAILY_EVENT_CPU_LOAD_CHANGE: () => (/* binding */ qo),\n/* harmony export */   DAILY_EVENT_ERROR: () => (/* binding */ ns),\n/* harmony export */   DAILY_EVENT_EXIT_FULLSCREEN: () => (/* binding */ Ho),\n/* harmony export */   DAILY_EVENT_FACE_COUNTS_UPDATED: () => (/* binding */ zo),\n/* harmony export */   DAILY_EVENT_FULLSCREEN: () => (/* binding */ Wo),\n/* harmony export */   DAILY_EVENT_IFRAME_LAUNCH_CONFIG: () => (/* binding */ Zi),\n/* harmony export */   DAILY_EVENT_IFRAME_READY_FOR_LAUNCH_CONFIG: () => (/* binding */ Xi),\n/* harmony export */   DAILY_EVENT_INPUT_SETTINGS_UPDATED: () => (/* binding */ es),\n/* harmony export */   DAILY_EVENT_JOINED_MEETING: () => (/* binding */ ao),\n/* harmony export */   DAILY_EVENT_JOINING_MEETING: () => (/* binding */ so),\n/* harmony export */   DAILY_EVENT_LANG_UPDATED: () => (/* binding */ Xo),\n/* harmony export */   DAILY_EVENT_LEFT_MEETING: () => (/* binding */ co),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_ERROR: () => (/* binding */ Yo),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_STARTED: () => (/* binding */ Go),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_STOPPED: () => (/* binding */ Ko),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_UPDATED: () => (/* binding */ Qo),\n/* harmony export */   DAILY_EVENT_LOADED: () => (/* binding */ ro),\n/* harmony export */   DAILY_EVENT_LOADING: () => (/* binding */ to),\n/* harmony export */   DAILY_EVENT_LOAD_ATTEMPT_FAILED: () => (/* binding */ no),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_CANCELED: () => (/* binding */ Bo),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_STARTED: () => (/* binding */ Ro),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_STOPPED: () => (/* binding */ Fo),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_DATA_ERROR: () => (/* binding */ mo),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_STATE_UPDATED: () => (/* binding */ go),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_SUMMARY_UPDATED: () => (/* binding */ vo),\n/* harmony export */   DAILY_EVENT_NETWORK_CONNECTION: () => (/* binding */ $o),\n/* harmony export */   DAILY_EVENT_NETWORK_QUALITY_CHANGE: () => (/* binding */ Jo),\n/* harmony export */   DAILY_EVENT_NONFATAL_ERROR: () => (/* binding */ ts),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_COUNTS_UPDATED: () => (/* binding */ ho),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_JOINED: () => (/* binding */ lo),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_LEFT: () => (/* binding */ po),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_UPDATED: () => (/* binding */ uo),\n/* harmony export */   DAILY_EVENT_RECEIVE_SETTINGS_UPDATED: () => (/* binding */ Zo),\n/* harmony export */   DAILY_EVENT_RECORDING_DATA: () => (/* binding */ jo),\n/* harmony export */   DAILY_EVENT_RECORDING_ERROR: () => (/* binding */ Po),\n/* harmony export */   DAILY_EVENT_RECORDING_STARTED: () => (/* binding */ Eo),\n/* harmony export */   DAILY_EVENT_RECORDING_STATS: () => (/* binding */ Oo),\n/* harmony export */   DAILY_EVENT_RECORDING_STOPPED: () => (/* binding */ To),\n/* harmony export */   DAILY_EVENT_RECORDING_UPLOAD_COMPLETED: () => (/* binding */ Ao),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_STARTED: () => (/* binding */ Lo),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_STOPPED: () => (/* binding */ No),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_UPDATED: () => (/* binding */ Do),\n/* harmony export */   DAILY_EVENT_STARTED_CAMERA: () => (/* binding */ io),\n/* harmony export */   DAILY_EVENT_THEME_UPDATED: () => (/* binding */ eo),\n/* harmony export */   DAILY_EVENT_TRACK_STARTED: () => (/* binding */ wo),\n/* harmony export */   DAILY_EVENT_TRACK_STOPPED: () => (/* binding */ So),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_ERROR: () => (/* binding */ Co),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_MSG: () => (/* binding */ xo),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_STARTED: () => (/* binding */ ko),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_STOPPED: () => (/* binding */ Mo),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_ADDED: () => (/* binding */ yo),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_REMOVED: () => (/* binding */ _o),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_UPDATED: () => (/* binding */ bo),\n/* harmony export */   DAILY_FATAL_ERROR_CONNECTION: () => (/* binding */ $i),\n/* harmony export */   DAILY_FATAL_ERROR_EJECTED: () => (/* binding */ Li),\n/* harmony export */   DAILY_FATAL_ERROR_EOL: () => (/* binding */ Vi),\n/* harmony export */   DAILY_FATAL_ERROR_EXP_ROOM: () => (/* binding */ Ri),\n/* harmony export */   DAILY_FATAL_ERROR_EXP_TOKEN: () => (/* binding */ Fi),\n/* harmony export */   DAILY_FATAL_ERROR_MEETING_FULL: () => (/* binding */ Ui),\n/* harmony export */   DAILY_FATAL_ERROR_NBF_ROOM: () => (/* binding */ Di),\n/* harmony export */   DAILY_FATAL_ERROR_NBF_TOKEN: () => (/* binding */ Ni),\n/* harmony export */   DAILY_FATAL_ERROR_NOT_ALLOWED: () => (/* binding */ Ji),\n/* harmony export */   DAILY_FATAL_ERROR_NO_ROOM: () => (/* binding */ Bi),\n/* harmony export */   DAILY_RECEIVE_SETTINGS_ALL_PARTICIPANTS_KEY: () => (/* binding */ xi),\n/* harmony export */   DAILY_RECEIVE_SETTINGS_BASE_KEY: () => (/* binding */ Ii),\n/* harmony export */   DAILY_STATE_ERROR: () => (/* binding */ wi),\n/* harmony export */   DAILY_STATE_JOINED: () => (/* binding */ bi),\n/* harmony export */   DAILY_STATE_JOINING: () => (/* binding */ yi),\n/* harmony export */   DAILY_STATE_LEFT: () => (/* binding */ _i),\n/* harmony export */   DAILY_STATE_NEW: () => (/* binding */ vi),\n/* harmony export */   DAILY_TRACK_STATE_BLOCKED: () => (/* binding */ Si),\n/* harmony export */   DAILY_TRACK_STATE_INTERRUPTED: () => (/* binding */ Ei),\n/* harmony export */   DAILY_TRACK_STATE_LOADING: () => (/* binding */ Ci),\n/* harmony export */   DAILY_TRACK_STATE_OFF: () => (/* binding */ ki),\n/* harmony export */   DAILY_TRACK_STATE_PLAYABLE: () => (/* binding */ Ti),\n/* harmony export */   DAILY_TRACK_STATE_SENDABLE: () => (/* binding */ Mi),\n/* harmony export */   \"default\": () => (/* binding */ ic)\n/* harmony export */ });\nfunction e(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],-1===t.indexOf(n)&&{}.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function t(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function n(e){return n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},n(e)}function r(e){var t=function(e,t){if(\"object\"!=n(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,t||\"default\");if(\"object\"!=n(i))return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===t?String:Number)(e)}(e,\"string\");return\"symbol\"==n(t)?t:t+\"\"}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,r(i.key),i)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,\"prototype\",{writable:!1}),e}function s(e,t){if(t&&(\"object\"==n(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(e)}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function l(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,\"prototype\",{writable:!1}),t&&c(e,t)}function u(e,t,n){return(t=r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t,n,r,i,o,s){try{var a=e[o](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function p(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function s(e){d(o,r,i,s,a,\"next\",e)}function a(e){d(o,r,i,s,a,\"throw\",e)}s(void 0)}))}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(null!=n){var r,i,o,s,a=[],c=!0,l=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(a.push(r.value),a.length!==t);c=!0);}catch(e){l=!0,i=e}finally{try{if(!c&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw i}}return a}}(e,t)||function(e,t){if(e){if(\"string\"==typeof e)return h(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function v(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}var g,m={exports:{}},y=\"object\"==typeof Reflect?Reflect:null,b=y&&\"function\"==typeof y.apply?y.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};g=y&&\"function\"==typeof y.ownKeys?y.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var _=Number.isNaN||function(e){return e!=e};function w(){w.init.call(this)}m.exports=w,m.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){\"function\"==typeof e.removeListener&&e.removeListener(\"error\",i),n([].slice.call(arguments))}j(e,t,o,{once:!0}),\"error\"!==t&&function(e,t,n){\"function\"==typeof e.on&&j(e,\"error\",t,n)}(e,i,{once:!0})}))},w.EventEmitter=w,w.prototype._events=void 0,w.prototype._eventsCount=0,w.prototype._maxListeners=void 0;var S=10;function k(e){if(\"function\"!=typeof e)throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof e)}function M(e){return void 0===e._maxListeners?w.defaultMaxListeners:e._maxListeners}function C(e,t,n,r){var i,o,s,a;if(k(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit(\"newListener\",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if(\"function\"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=M(e))>0&&s.length>i&&!s.warned){s.warned=!0;var c=new Error(\"Possible EventEmitter memory leak detected. \"+s.length+\" \"+String(t)+\" listeners added. Use emitter.setMaxListeners() to increase limit\");c.name=\"MaxListenersExceededWarning\",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function E(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function T(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=E.bind(r);return i.listener=n,r.wrapFn=i,i}function O(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:\"function\"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):A(i,i.length)}function P(e){var t=this._events;if(void 0!==t){var n=t[e];if(\"function\"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function A(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function j(e,t,n,r){if(\"function\"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if(\"function\"!=typeof e.addEventListener)throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(w,\"defaultMaxListeners\",{enumerable:!0,get:function(){return S},set:function(e){if(\"number\"!=typeof e||e<0||_(e))throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+e+\".\");S=e}}),w.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},w.prototype.setMaxListeners=function(e){if(\"number\"!=typeof e||e<0||_(e))throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+e+\".\");return this._maxListeners=e,this},w.prototype.getMaxListeners=function(){return M(this)},w.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r=\"error\"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error(\"Unhandled error.\"+(o?\" (\"+o.message+\")\":\"\"));throw s.context=o,s}var a=i[e];if(void 0===a)return!1;if(\"function\"==typeof a)b(a,this,t);else{var c=a.length,l=A(a,c);for(n=0;n<c;++n)b(l[n],this,t)}return!0},w.prototype.addListener=function(e,t){return C(this,e,t,!1)},w.prototype.on=w.prototype.addListener,w.prototype.prependListener=function(e,t){return C(this,e,t,!0)},w.prototype.once=function(e,t){return k(t),this.on(e,T(this,e,t)),this},w.prototype.prependOnceListener=function(e,t){return k(t),this.prependListener(e,T(this,e,t)),this},w.prototype.removeListener=function(e,t){var n,r,i,o,s;if(k(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit(\"removeListener\",e,n.listener||t));else if(\"function\"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit(\"removeListener\",e,s||t)}return this},w.prototype.off=w.prototype.removeListener,w.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)\"removeListener\"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners(\"removeListener\"),this._events=Object.create(null),this._eventsCount=0,this}if(\"function\"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},w.prototype.listeners=function(e){return O(this,e,!0)},w.prototype.rawListeners=function(e){return O(this,e,!1)},w.listenerCount=function(e,t){return\"function\"==typeof e.listenerCount?e.listenerCount(t):P.call(e,t)},w.prototype.listenerCount=P,w.prototype.eventNames=function(){return this._eventsCount>0?g(this._events):[]};var I=m.exports,x=v(I),L=Object.prototype.hasOwnProperty;function D(e,t,n){for(n of e.keys())if(N(n,t))return n}function N(e,t){var n,r,i;if(e===t)return!0;if(e&&t&&(n=e.constructor)===t.constructor){if(n===Date)return e.getTime()===t.getTime();if(n===RegExp)return e.toString()===t.toString();if(n===Array){if((r=e.length)===t.length)for(;r--&&N(e[r],t[r]););return-1===r}if(n===Set){if(e.size!==t.size)return!1;for(r of e){if((i=r)&&\"object\"==typeof i&&!(i=D(t,i)))return!1;if(!t.has(i))return!1}return!0}if(n===Map){if(e.size!==t.size)return!1;for(r of e){if((i=r[0])&&\"object\"==typeof i&&!(i=D(t,i)))return!1;if(!N(r[1],t.get(i)))return!1}return!0}if(n===ArrayBuffer)e=new Uint8Array(e),t=new Uint8Array(t);else if(n===DataView){if((r=e.byteLength)===t.byteLength)for(;r--&&e.getInt8(r)===t.getInt8(r););return-1===r}if(ArrayBuffer.isView(e)){if((r=e.byteLength)===t.byteLength)for(;r--&&e[r]===t[r];);return-1===r}if(!n||\"object\"==typeof e){for(n in r=0,e){if(L.call(e,n)&&++r&&!L.call(t,n))return!1;if(!(n in t)||!N(e[n],t[n]))return!1}return Object.keys(t).length===r}}return e!=e&&t!=t}const R={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Electron:\"electron\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"},F={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",electron:\"Electron\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"},B={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"},U={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"},V={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"};class J{static getFirstMatch(e,t){const n=t.match(e);return n&&n.length>0&&n[1]||\"\"}static getSecondMatch(e,t){const n=t.match(e);return n&&n.length>1&&n[2]||\"\"}static matchAndReturnConst(e,t,n){if(e.test(t))return n}static getWindowsVersionName(e){switch(e){case\"NT\":return\"NT\";case\"XP\":case\"NT 5.1\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}}static getMacOSVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}}static getAndroidVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0}static getVersionPrecision(e){return e.split(\".\").length}static compareVersions(e,t,n=!1){const r=J.getVersionPrecision(e),i=J.getVersionPrecision(t);let o=Math.max(r,i),s=0;const a=J.map([e,t],(e=>{const t=o-J.getVersionPrecision(e),n=e+new Array(t+1).join(\".0\");return J.map(n.split(\".\"),(e=>new Array(20-e.length).join(\"0\")+e)).reverse()}));for(n&&(s=o-Math.min(r,i)),o-=1;o>=s;){if(a[0][o]>a[1][o])return 1;if(a[0][o]===a[1][o]){if(o===s)return 0;o-=1}else if(a[0][o]<a[1][o])return-1}}static map(e,t){const n=[];let r;if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n}static find(e,t){let n,r;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(n=0,r=e.length;n<r;n+=1){const r=e[n];if(t(r,n))return r}}static assign(e,...t){const n=e;let r,i;if(Object.assign)return Object.assign(e,...t);for(r=0,i=t.length;r<i;r+=1){const e=t[r];if(\"object\"==typeof e&&null!==e){Object.keys(e).forEach((t=>{n[t]=e[t]}))}}return e}static getBrowserAlias(e){return R[e]}static getBrowserTypeByAlias(e){return F[e]||\"\"}}const $=/version\\/(\\d+(\\.?_?\\d+)+)/i,q=[{test:[/googlebot/i],describe(e){const t={name:\"Googlebot\"},n=J.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/opera/i],describe(e){const t={name:\"Opera\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opr\\/|opios/i],describe(e){const t={name:\"Opera\"},n=J.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/SamsungBrowser/i],describe(e){const t={name:\"Samsung Internet for Android\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Whale/i],describe(e){const t={name:\"NAVER Whale Browser\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MZBrowser/i],describe(e){const t={name:\"MZ Browser\"},n=J.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/focus/i],describe(e){const t={name:\"Focus\"},n=J.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/swing/i],describe(e){const t={name:\"Swing\"},n=J.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/coast/i],describe(e){const t={name:\"Opera Coast\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opt\\/\\d+(?:.?_?\\d+)+/i],describe(e){const t={name:\"Opera Touch\"},n=J.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/yabrowser/i],describe(e){const t={name:\"Yandex Browser\"},n=J.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/ucbrowser/i],describe(e){const t={name:\"UC Browser\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Maxthon|mxios/i],describe(e){const t={name:\"Maxthon\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/epiphany/i],describe(e){const t={name:\"Epiphany\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/puffin/i],describe(e){const t={name:\"Puffin\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sleipnir/i],describe(e){const t={name:\"Sleipnir\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/k-meleon/i],describe(e){const t={name:\"K-Meleon\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/micromessenger/i],describe(e){const t={name:\"WeChat\"},n=J.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/qqbrowser/i],describe(e){const t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},n=J.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/msie|trident/i],describe(e){const t={name:\"Internet Explorer\"},n=J.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/\\sedg\\//i],describe(e){const t={name:\"Microsoft Edge\"},n=J.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/edg([ea]|ios)/i],describe(e){const t={name:\"Microsoft Edge\"},n=J.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/vivaldi/i],describe(e){const t={name:\"Vivaldi\"},n=J.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/seamonkey/i],describe(e){const t={name:\"SeaMonkey\"},n=J.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sailfish/i],describe(e){const t={name:\"Sailfish\"},n=J.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return n&&(t.version=n),t}},{test:[/silk/i],describe(e){const t={name:\"Amazon Silk\"},n=J.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/phantom/i],describe(e){const t={name:\"PhantomJS\"},n=J.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/slimerjs/i],describe(e){const t={name:\"SlimerJS\"},n=J.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t={name:\"BlackBerry\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(web|hpw)[o0]s/i],describe(e){const t={name:\"WebOS Browser\"},n=J.getFirstMatch($,e)||J.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/bada/i],describe(e){const t={name:\"Bada\"},n=J.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/tizen/i],describe(e){const t={name:\"Tizen\"},n=J.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/qupzilla/i],describe(e){const t={name:\"QupZilla\"},n=J.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/firefox|iceweasel|fxios/i],describe(e){const t={name:\"Firefox\"},n=J.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/electron/i],describe(e){const t={name:\"Electron\"},n=J.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MiuiBrowser/i],describe(e){const t={name:\"Miui\"},n=J.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/chromium/i],describe(e){const t={name:\"Chromium\"},n=J.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/chrome|crios|crmo/i],describe(e){const t={name:\"Chrome\"},n=J.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/GSA/i],describe(e){const t={name:\"Google Search\"},n=J.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t={name:\"Android Browser\"},n=J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/playstation 4/i],describe(e){const t={name:\"PlayStation 4\"},n=J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/safari|applewebkit/i],describe(e){const t={name:\"Safari\"},n=J.getFirstMatch($,e);return n&&(t.version=n),t}},{test:[/.*/i],describe(e){const t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:J.getFirstMatch(t,e),version:J.getSecondMatch(t,e)}}}];var z=[{test:[/Roku\\/DVP/],describe(e){const t=J.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:U.Roku,version:t}}},{test:[/windows phone/i],describe(e){const t=J.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:U.WindowsPhone,version:t}}},{test:[/windows /i],describe(e){const t=J.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),n=J.getWindowsVersionName(t);return{name:U.Windows,version:t,versionName:n}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe(e){const t={name:U.iOS},n=J.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/,e);return n&&(t.version=n),t}},{test:[/macintosh/i],describe(e){const t=J.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),n=J.getMacOSVersionName(t),r={name:U.MacOS,version:t};return n&&(r.versionName=n),r}},{test:[/(ipod|iphone|ipad)/i],describe(e){const t=J.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:U.iOS,version:t}}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t=J.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),n=J.getAndroidVersionName(t),r={name:U.Android,version:t};return n&&(r.versionName=n),r}},{test:[/(web|hpw)[o0]s/i],describe(e){const t=J.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),n={name:U.WebOS};return t&&t.length&&(n.version=t),n}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t=J.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||J.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||J.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:U.BlackBerry,version:t}}},{test:[/bada/i],describe(e){const t=J.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:U.Bada,version:t}}},{test:[/tizen/i],describe(e){const t=J.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:U.Tizen,version:t}}},{test:[/linux/i],describe:()=>({name:U.Linux})},{test:[/CrOS/],describe:()=>({name:U.ChromeOS})},{test:[/PlayStation 4/],describe(e){const t=J.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:U.PlayStation4,version:t}}}],W=[{test:[/googlebot/i],describe:()=>({type:\"bot\",vendor:\"Google\"})},{test:[/huawei/i],describe(e){const t=J.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",n={type:B.mobile,vendor:\"Huawei\"};return t&&(n.model=t),n}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:()=>({type:B.tablet,vendor:\"Nexus\"})},{test:[/ipad/i],describe:()=>({type:B.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:()=>({type:B.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/kftt build/i],describe:()=>({type:B.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"})},{test:[/silk/i],describe:()=>({type:B.tablet,vendor:\"Amazon\"})},{test:[/tablet(?! pc)/i],describe:()=>({type:B.tablet})},{test(e){const t=e.test(/ipod|iphone/i),n=e.test(/like (ipod|iphone)/i);return t&&!n},describe(e){const t=J.getFirstMatch(/(ipod|iphone)/i,e);return{type:B.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:()=>({type:B.mobile,vendor:\"Nexus\"})},{test:[/[^-]mobi/i],describe:()=>({type:B.mobile})},{test:e=>\"blackberry\"===e.getBrowserName(!0),describe:()=>({type:B.mobile,vendor:\"BlackBerry\"})},{test:e=>\"bada\"===e.getBrowserName(!0),describe:()=>({type:B.mobile})},{test:e=>\"windows phone\"===e.getBrowserName(),describe:()=>({type:B.mobile,vendor:\"Microsoft\"})},{test(e){const t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:()=>({type:B.tablet})},{test:e=>\"android\"===e.getOSName(!0),describe:()=>({type:B.mobile})},{test:e=>\"macos\"===e.getOSName(!0),describe:()=>({type:B.desktop,vendor:\"Apple\"})},{test:e=>\"windows\"===e.getOSName(!0),describe:()=>({type:B.desktop})},{test:e=>\"linux\"===e.getOSName(!0),describe:()=>({type:B.desktop})},{test:e=>\"playstation 4\"===e.getOSName(!0),describe:()=>({type:B.tv})},{test:e=>\"roku\"===e.getOSName(!0),describe:()=>({type:B.tv})}],H=[{test:e=>\"microsoft edge\"===e.getBrowserName(!0),describe(e){if(/\\sedg\\//i.test(e))return{name:V.Blink};const t=J.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:V.EdgeHTML,version:t}}},{test:[/trident/i],describe(e){const t={name:V.Trident},n=J.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:e=>e.test(/presto/i),describe(e){const t={name:V.Presto},n=J.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=e.test(/gecko/i),n=e.test(/like gecko/i);return t&&!n},describe(e){const t={name:V.Gecko},n=J.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:()=>({name:V.Blink})},{test:[/(apple)?webkit/i],describe(e){const t={name:V.WebKit},n=J.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}}];class G{constructor(e,t=!1){if(null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}getUA(){return this._ua}test(e){return e.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const e=J.find(q,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.browser=e.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const e=J.find(z,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.os=e.describe(this.getUA())),this.parsedResult.os}getOSName(e){const{name:t}=this.getOS();return e?String(t).toLowerCase()||\"\":t||\"\"}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(e=!1){const{type:t}=this.getPlatform();return e?String(t).toLowerCase()||\"\":t||\"\"}parsePlatform(){this.parsedResult.platform={};const e=J.find(W,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.platform=e.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}getEngineName(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"}parseEngine(){this.parsedResult.engine={};const e=J.find(H,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.engine=e.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return J.assign({},this.parsedResult)}satisfies(e){const t={};let n=0;const r={};let i=0;if(Object.keys(e).forEach((o=>{const s=e[o];\"string\"==typeof s?(r[o]=s,i+=1):\"object\"==typeof s&&(t[o]=s,n+=1)})),n>0){const e=Object.keys(t),n=J.find(e,(e=>this.isOS(e)));if(n){const e=this.satisfies(t[n]);if(void 0!==e)return e}const r=J.find(e,(e=>this.isPlatform(e)));if(r){const e=this.satisfies(t[r]);if(void 0!==e)return e}}if(i>0){const e=Object.keys(r),t=J.find(e,(e=>this.isBrowser(e,!0)));if(void 0!==t)return this.compareVersion(r[t])}}isBrowser(e,t=!1){const n=this.getBrowserName().toLowerCase();let r=e.toLowerCase();const i=J.getBrowserTypeByAlias(r);return t&&i&&(r=i.toLowerCase()),r===n}compareVersion(e){let t=[0],n=e,r=!1;const i=this.getBrowserVersion();if(\"string\"==typeof i)return\">\"===e[0]||\"<\"===e[0]?(n=e.substr(1),\"=\"===e[1]?(r=!0,n=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?n=e.substr(1):\"~\"===e[0]&&(r=!0,n=e.substr(1)),t.indexOf(J.compareVersions(i,n,r))>-1}isOS(e){return this.getOSName(!0)===String(e).toLowerCase()}isPlatform(e){return this.getPlatformType(!0)===String(e).toLowerCase()}isEngine(e){return this.getEngineName(!0)===String(e).toLowerCase()}is(e,t=!1){return this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)}some(e=[]){return e.some((e=>this.is(e)))}}\n/*!\n * Bowser - a browser detector\n * https://github.com/lancedikson/bowser\n * MIT License | (c) Dustin Diaz 2012-2015\n * MIT License | (c) Denis Demchenko 2015-2019\n */class Q{static getParser(e,t=!1){if(\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new G(e,t)}static parse(e){return new G(e).getResult()}static get BROWSER_MAP(){return F}static get ENGINE_MAP(){return V}static get OS_MAP(){return U}static get PLATFORMS_MAP(){return B}}function K(){return Date.now()+Math.random().toString()}function Y(){throw new Error(\"Method must be implemented in subclass\")}function X(e,t){return null!=t&&t.proxyUrl?t.proxyUrl+(\"/\"===t.proxyUrl.slice(-1)?\"\":\"/\")+e.substring(8):e}function Z(e){return null!=e&&e.callObjectBundleUrlOverride?e.callObjectBundleUrlOverride:X(\"https://c.daily.co/call-machine/versioned/\".concat(\"0.77.0\",\"/static/call-machine-object-bundle.js\"),e)}function ee(e){try{new URL(e)}catch(e){return!1}return!0}const te=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,ne=\"8.55.0\",re=globalThis;function ie(e,t,n){const r=n||re,i=r.__SENTRY__=r.__SENTRY__||{},o=i[ne]=i[ne]||{};return o[e]||(o[e]=t())}const oe=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,se=[\"debug\",\"info\",\"warn\",\"error\",\"log\",\"assert\",\"trace\"],ae={};function ce(e){if(!(\"console\"in re))return e();const t=re.console,n={},r=Object.keys(ae);r.forEach((e=>{const r=ae[e];n[e]=t[e],t[e]=r}));try{return e()}finally{r.forEach((e=>{t[e]=n[e]}))}}const le=ie(\"logger\",(function(){let e=!1;const t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return oe?se.forEach((n=>{t[n]=(...t)=>{e&&ce((()=>{re.console[n](`Sentry Logger [${n}]:`,...t)}))}})):se.forEach((e=>{t[e]=()=>{}})),t})),ue=\"?\",de=/\\(error: (.*)\\)/,pe=/captureMessage|captureException/;function he(e){return e[e.length-1]||{}}const fe=\"<anonymous>\";function ve(e){try{return e&&\"function\"==typeof e&&e.name||fe}catch(e){return fe}}function ge(e){const t=e.exception;if(t){const e=[];try{return t.values.forEach((t=>{t.stacktrace.frames&&e.push(...t.stacktrace.frames)})),e}catch(e){return}}}const me={},ye={};function be(e,t){me[e]=me[e]||[],me[e].push(t)}function _e(e,t){if(!ye[e]){ye[e]=!0;try{t()}catch(t){oe&&le.error(`Error while instrumenting ${e}`,t)}}}function we(e,t){const n=e&&me[e];if(n)for(const r of n)try{r(t)}catch(t){oe&&le.error(`Error while triggering instrumentation handler.\\nType: ${e}\\nName: ${ve(r)}\\nError:`,t)}}let Se=null;function ke(){Se=re.onerror,re.onerror=function(e,t,n,r,i){return we(\"error\",{column:r,error:i,line:n,msg:e,url:t}),!!Se&&Se.apply(this,arguments)},re.onerror.__SENTRY_INSTRUMENTED__=!0}let Me=null;function Ce(){Me=re.onunhandledrejection,re.onunhandledrejection=function(e){return we(\"unhandledrejection\",e),!Me||Me.apply(this,arguments)},re.onunhandledrejection.__SENTRY_INSTRUMENTED__=!0}function Ee(){return Te(re),re}function Te(e){const t=e.__SENTRY__=e.__SENTRY__||{};return t.version=t.version||ne,t[ne]=t[ne]||{}}const Oe=Object.prototype.toString;function Pe(e){switch(Oe.call(e)){case\"[object Error]\":case\"[object Exception]\":case\"[object DOMException]\":case\"[object WebAssembly.Exception]\":return!0;default:return Be(e,Error)}}function Ae(e,t){return Oe.call(e)===`[object ${t}]`}function je(e){return Ae(e,\"ErrorEvent\")}function Ie(e){return Ae(e,\"DOMError\")}function xe(e){return Ae(e,\"String\")}function Le(e){return\"object\"==typeof e&&null!==e&&\"__sentry_template_string__\"in e&&\"__sentry_template_values__\"in e}function De(e){return null===e||Le(e)||\"object\"!=typeof e&&\"function\"!=typeof e}function Ne(e){return Ae(e,\"Object\")}function Re(e){return\"undefined\"!=typeof Event&&Be(e,Event)}function Fe(e){return Boolean(e&&e.then&&\"function\"==typeof e.then)}function Be(e,t){try{return e instanceof t}catch(e){return!1}}function Ue(e){return!(\"object\"!=typeof e||null===e||!e.__isVue&&!e._isVue)}const Ve=re;function Je(e,t={}){if(!e)return\"<unknown>\";try{let n=e;const r=5,i=[];let o=0,s=0;const a=\" > \",c=a.length;let l;const u=Array.isArray(t)?t:t.keyAttrs,d=!Array.isArray(t)&&t.maxStringLength||80;for(;n&&o++<r&&(l=$e(n,u),!(\"html\"===l||o>1&&s+i.length*c+l.length>=d));)i.push(l),s+=l.length,n=n.parentNode;return i.reverse().join(a)}catch(e){return\"<unknown>\"}}function $e(e,t){const n=e,r=[];if(!n||!n.tagName)return\"\";if(Ve.HTMLElement&&n instanceof HTMLElement&&n.dataset){if(n.dataset.sentryComponent)return n.dataset.sentryComponent;if(n.dataset.sentryElement)return n.dataset.sentryElement}r.push(n.tagName.toLowerCase());const i=t&&t.length?t.filter((e=>n.getAttribute(e))).map((e=>[e,n.getAttribute(e)])):null;if(i&&i.length)i.forEach((e=>{r.push(`[${e[0]}=\"${e[1]}\"]`)}));else{n.id&&r.push(`#${n.id}`);const e=n.className;if(e&&xe(e)){const t=e.split(/\\s+/);for(const e of t)r.push(`.${e}`)}}const o=[\"aria-label\",\"type\",\"name\",\"title\",\"alt\"];for(const e of o){const t=n.getAttribute(e);t&&r.push(`[${e}=\"${t}\"]`)}return r.join(\"\")}function qe(e,t=0){return\"string\"!=typeof e||0===t||e.length<=t?e:`${e.slice(0,t)}...`}function ze(e,t){if(!Array.isArray(e))return\"\";const n=[];for(let t=0;t<e.length;t++){const r=e[t];try{Ue(r)?n.push(\"[VueViewModel]\"):n.push(String(r))}catch(e){n.push(\"[value cannot be serialized]\")}}return n.join(t)}function We(e,t,n=!1){return!!xe(e)&&(Ae(t,\"RegExp\")?t.test(e):!!xe(t)&&(n?e===t:e.includes(t)))}function He(e,t=[],n=!1){return t.some((t=>We(e,t,n)))}function Ge(e,t,n){if(!(t in e))return;const r=e[t],i=n(r);\"function\"==typeof i&&Ke(i,r);try{e[t]=i}catch(n){oe&&le.log(`Failed to replace method \"${t}\" in object`,e)}}function Qe(e,t,n){try{Object.defineProperty(e,t,{value:n,writable:!0,configurable:!0})}catch(n){oe&&le.log(`Failed to add non-enumerable property \"${t}\" to object`,e)}}function Ke(e,t){try{const n=t.prototype||{};e.prototype=t.prototype=n,Qe(e,\"__sentry_original__\",t)}catch(e){}}function Ye(e){return e.__sentry_original__}function Xe(e){if(Pe(e))return{message:e.message,name:e.name,stack:e.stack,...et(e)};if(Re(e)){const t={type:e.type,target:Ze(e.target),currentTarget:Ze(e.currentTarget),...et(e)};return\"undefined\"!=typeof CustomEvent&&Be(e,CustomEvent)&&(t.detail=e.detail),t}return e}function Ze(e){try{return t=e,\"undefined\"!=typeof Element&&Be(t,Element)?Je(e):Object.prototype.toString.call(e)}catch(e){return\"<unknown>\"}var t}function et(e){if(\"object\"==typeof e&&null!==e){const t={};for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}return{}}function tt(e){return nt(e,new Map)}function nt(e,t){if(function(e){if(!Ne(e))return!1;try{const t=Object.getPrototypeOf(e).constructor.name;return!t||\"Object\"===t}catch(e){return!0}}(e)){const n=t.get(e);if(void 0!==n)return n;const r={};t.set(e,r);for(const n of Object.getOwnPropertyNames(e))void 0!==e[n]&&(r[n]=nt(e[n],t));return r}if(Array.isArray(e)){const n=t.get(e);if(void 0!==n)return n;const r=[];return t.set(e,r),e.forEach((e=>{r.push(nt(e,t))})),r}return e}function rt(){return Date.now()/1e3}const it=function(){const{performance:e}=re;if(!e||!e.now)return rt;const t=Date.now()-e.now(),n=null==e.timeOrigin?t:e.timeOrigin;return()=>(n+e.now())/1e3}();function ot(){const e=re,t=e.crypto||e.msCrypto;let n=()=>16*Math.random();try{if(t&&t.randomUUID)return t.randomUUID().replace(/-/g,\"\");t&&t.getRandomValues&&(n=()=>{const e=new Uint8Array(1);return t.getRandomValues(e),e[0]})}catch(e){}return([1e7]+1e3+4e3+8e3+1e11).replace(/[018]/g,(e=>(e^(15&n())>>e/4).toString(16)))}function st(e){return e.exception&&e.exception.values?e.exception.values[0]:void 0}function at(e){const{message:t,event_id:n}=e;if(t)return t;const r=st(e);return r?r.type&&r.value?`${r.type}: ${r.value}`:r.type||r.value||n||\"<unknown>\":n||\"<unknown>\"}function ct(e,t,n){const r=e.exception=e.exception||{},i=r.values=r.values||[],o=i[0]=i[0]||{};o.value||(o.value=t||\"\"),o.type||(o.type=n||\"Error\")}function lt(e,t){const n=st(e);if(!n)return;const r=n.mechanism;if(n.mechanism={type:\"generic\",handled:!0,...r,...t},t&&\"data\"in t){const e={...r&&r.data,...t.data};n.mechanism.data=e}}function ut(e){if(function(e){try{return e.__sentry_captured__}catch(e){}}(e))return!0;try{Qe(e,\"__sentry_captured__\",!0)}catch(e){}return!1}var dt;function pt(e){return new ft((t=>{t(e)}))}function ht(e){return new ft(((t,n)=>{n(e)}))}(()=>{const{performance:e}=re;if(!e||!e.now)return;const t=36e5,n=e.now(),r=Date.now(),i=e.timeOrigin?Math.abs(e.timeOrigin+n-r):t,o=i<t,s=e.timing&&e.timing.navigationStart,a=\"number\"==typeof s?Math.abs(s+n-r):t;(o||a<t)&&(i<=a&&e.timeOrigin)})(),function(e){e[e.PENDING=0]=\"PENDING\";e[e.RESOLVED=1]=\"RESOLVED\";e[e.REJECTED=2]=\"REJECTED\"}(dt||(dt={}));class ft{constructor(e){ft.prototype.__init.call(this),ft.prototype.__init2.call(this),ft.prototype.__init3.call(this),ft.prototype.__init4.call(this),this._state=dt.PENDING,this._handlers=[];try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}then(e,t){return new ft(((n,r)=>{this._handlers.push([!1,t=>{if(e)try{n(e(t))}catch(e){r(e)}else n(t)},e=>{if(t)try{n(t(e))}catch(e){r(e)}else r(e)}]),this._executeHandlers()}))}catch(e){return this.then((e=>e),e)}finally(e){return new ft(((t,n)=>{let r,i;return this.then((t=>{i=!1,r=t,e&&e()}),(t=>{i=!0,r=t,e&&e()})).then((()=>{i?n(r):t(r)}))}))}__init(){this._resolve=e=>{this._setResult(dt.RESOLVED,e)}}__init2(){this._reject=e=>{this._setResult(dt.REJECTED,e)}}__init3(){this._setResult=(e,t)=>{this._state===dt.PENDING&&(Fe(t)?t.then(this._resolve,this._reject):(this._state=e,this._value=t,this._executeHandlers()))}}__init4(){this._executeHandlers=()=>{if(this._state===dt.PENDING)return;const e=this._handlers.slice();this._handlers=[],e.forEach((e=>{e[0]||(this._state===dt.RESOLVED&&e[1](this._value),this._state===dt.REJECTED&&e[2](this._value),e[0]=!0)}))}}}function vt(e){const t=it(),n={sid:ot(),init:!0,timestamp:t,started:t,duration:0,status:\"ok\",errors:0,ignoreDuration:!1,toJSON:()=>function(e){return tt({sid:`${e.sid}`,init:e.init,started:new Date(1e3*e.started).toISOString(),timestamp:new Date(1e3*e.timestamp).toISOString(),status:e.status,errors:e.errors,did:\"number\"==typeof e.did||\"string\"==typeof e.did?`${e.did}`:void 0,duration:e.duration,abnormal_mechanism:e.abnormal_mechanism,attrs:{release:e.release,environment:e.environment,ip_address:e.ipAddress,user_agent:e.userAgent}})}(n)};return e&&gt(n,e),n}function gt(e,t={}){if(t.user&&(!e.ipAddress&&t.user.ip_address&&(e.ipAddress=t.user.ip_address),e.did||t.did||(e.did=t.user.id||t.user.email||t.user.username)),e.timestamp=t.timestamp||it(),t.abnormal_mechanism&&(e.abnormal_mechanism=t.abnormal_mechanism),t.ignoreDuration&&(e.ignoreDuration=t.ignoreDuration),t.sid&&(e.sid=32===t.sid.length?t.sid:ot()),void 0!==t.init&&(e.init=t.init),!e.did&&t.did&&(e.did=`${t.did}`),\"number\"==typeof t.started&&(e.started=t.started),e.ignoreDuration)e.duration=void 0;else if(\"number\"==typeof t.duration)e.duration=t.duration;else{const t=e.timestamp-e.started;e.duration=t>=0?t:0}t.release&&(e.release=t.release),t.environment&&(e.environment=t.environment),!e.ipAddress&&t.ipAddress&&(e.ipAddress=t.ipAddress),!e.userAgent&&t.userAgent&&(e.userAgent=t.userAgent),\"number\"==typeof t.errors&&(e.errors=t.errors),t.status&&(e.status=t.status)}function mt(){return ot()}function yt(){return ot().substring(16)}function bt(e,t,n=2){if(!t||\"object\"!=typeof t||n<=0)return t;if(e&&t&&0===Object.keys(t).length)return e;const r={...e};for(const e in t)Object.prototype.hasOwnProperty.call(t,e)&&(r[e]=bt(r[e],t[e],n-1));return r}const _t=\"_sentrySpan\";function wt(e,t){t?Qe(e,_t,t):delete e[_t]}function St(e){return e[_t]}class kt{constructor(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._attachments=[],this._user={},this._tags={},this._extra={},this._contexts={},this._sdkProcessingMetadata={},this._propagationContext={traceId:mt(),spanId:yt()}}clone(){const e=new kt;return e._breadcrumbs=[...this._breadcrumbs],e._tags={...this._tags},e._extra={...this._extra},e._contexts={...this._contexts},this._contexts.flags&&(e._contexts.flags={values:[...this._contexts.flags.values]}),e._user=this._user,e._level=this._level,e._session=this._session,e._transactionName=this._transactionName,e._fingerprint=this._fingerprint,e._eventProcessors=[...this._eventProcessors],e._requestSession=this._requestSession,e._attachments=[...this._attachments],e._sdkProcessingMetadata={...this._sdkProcessingMetadata},e._propagationContext={...this._propagationContext},e._client=this._client,e._lastEventId=this._lastEventId,wt(e,St(this)),e}setClient(e){this._client=e}setLastEventId(e){this._lastEventId=e}getClient(){return this._client}lastEventId(){return this._lastEventId}addScopeListener(e){this._scopeListeners.push(e)}addEventProcessor(e){return this._eventProcessors.push(e),this}setUser(e){return this._user=e||{email:void 0,id:void 0,ip_address:void 0,username:void 0},this._session&&gt(this._session,{user:e}),this._notifyScopeListeners(),this}getUser(){return this._user}getRequestSession(){return this._requestSession}setRequestSession(e){return this._requestSession=e,this}setTags(e){return this._tags={...this._tags,...e},this._notifyScopeListeners(),this}setTag(e,t){return this._tags={...this._tags,[e]:t},this._notifyScopeListeners(),this}setExtras(e){return this._extra={...this._extra,...e},this._notifyScopeListeners(),this}setExtra(e,t){return this._extra={...this._extra,[e]:t},this._notifyScopeListeners(),this}setFingerprint(e){return this._fingerprint=e,this._notifyScopeListeners(),this}setLevel(e){return this._level=e,this._notifyScopeListeners(),this}setTransactionName(e){return this._transactionName=e,this._notifyScopeListeners(),this}setContext(e,t){return null===t?delete this._contexts[e]:this._contexts[e]=t,this._notifyScopeListeners(),this}setSession(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this}getSession(){return this._session}update(e){if(!e)return this;const t=\"function\"==typeof e?e(this):e,[n,r]=t instanceof Mt?[t.getScopeData(),t.getRequestSession()]:Ne(t)?[e,e.requestSession]:[],{tags:i,extra:o,user:s,contexts:a,level:c,fingerprint:l=[],propagationContext:u}=n||{};return this._tags={...this._tags,...i},this._extra={...this._extra,...o},this._contexts={...this._contexts,...a},s&&Object.keys(s).length&&(this._user=s),c&&(this._level=c),l.length&&(this._fingerprint=l),u&&(this._propagationContext=u),r&&(this._requestSession=r),this}clear(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._requestSession=void 0,this._session=void 0,wt(this,void 0),this._attachments=[],this.setPropagationContext({traceId:mt()}),this._notifyScopeListeners(),this}addBreadcrumb(e,t){const n=\"number\"==typeof t?t:100;if(n<=0)return this;const r={timestamp:rt(),...e};return this._breadcrumbs.push(r),this._breadcrumbs.length>n&&(this._breadcrumbs=this._breadcrumbs.slice(-n),this._client&&this._client.recordDroppedEvent(\"buffer_overflow\",\"log_item\")),this._notifyScopeListeners(),this}getLastBreadcrumb(){return this._breadcrumbs[this._breadcrumbs.length-1]}clearBreadcrumbs(){return this._breadcrumbs=[],this._notifyScopeListeners(),this}addAttachment(e){return this._attachments.push(e),this}clearAttachments(){return this._attachments=[],this}getScopeData(){return{breadcrumbs:this._breadcrumbs,attachments:this._attachments,contexts:this._contexts,tags:this._tags,extra:this._extra,user:this._user,level:this._level,fingerprint:this._fingerprint||[],eventProcessors:this._eventProcessors,propagationContext:this._propagationContext,sdkProcessingMetadata:this._sdkProcessingMetadata,transactionName:this._transactionName,span:St(this)}}setSDKProcessingMetadata(e){return this._sdkProcessingMetadata=bt(this._sdkProcessingMetadata,e,2),this}setPropagationContext(e){return this._propagationContext={spanId:yt(),...e},this}getPropagationContext(){return this._propagationContext}captureException(e,t){const n=t&&t.event_id?t.event_id:ot();if(!this._client)return le.warn(\"No client configured on scope - will not capture exception!\"),n;const r=new Error(\"Sentry syntheticException\");return this._client.captureException(e,{originalException:e,syntheticException:r,...t,event_id:n},this),n}captureMessage(e,t,n){const r=n&&n.event_id?n.event_id:ot();if(!this._client)return le.warn(\"No client configured on scope - will not capture message!\"),r;const i=new Error(e);return this._client.captureMessage(e,t,{originalException:e,syntheticException:i,...n,event_id:r},this),r}captureEvent(e,t){const n=t&&t.event_id?t.event_id:ot();return this._client?(this._client.captureEvent(e,{...t,event_id:n},this),n):(le.warn(\"No client configured on scope - will not capture event!\"),n)}_notifyScopeListeners(){this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach((e=>{e(this)})),this._notifyingListeners=!1)}}const Mt=kt;class Ct{constructor(e,t){let n,r;n=e||new Mt,r=t||new Mt,this._stack=[{scope:n}],this._isolationScope=r}withScope(e){const t=this._pushScope();let n;try{n=e(t)}catch(e){throw this._popScope(),e}return Fe(n)?n.then((e=>(this._popScope(),e)),(e=>{throw this._popScope(),e})):(this._popScope(),n)}getClient(){return this.getStackTop().client}getScope(){return this.getStackTop().scope}getIsolationScope(){return this._isolationScope}getStackTop(){return this._stack[this._stack.length-1]}_pushScope(){const e=this.getScope().clone();return this._stack.push({client:this.getClient(),scope:e}),e}_popScope(){return!(this._stack.length<=1)&&!!this._stack.pop()}}function Et(){const e=Te(Ee());return e.stack=e.stack||new Ct(ie(\"defaultCurrentScope\",(()=>new Mt)),ie(\"defaultIsolationScope\",(()=>new Mt)))}function Tt(e){return Et().withScope(e)}function Ot(e,t){const n=Et();return n.withScope((()=>(n.getStackTop().scope=e,t(e))))}function Pt(e){return Et().withScope((()=>e(Et().getIsolationScope())))}function At(e){const t=Te(e);return t.acs?t.acs:{withIsolationScope:Pt,withScope:Tt,withSetScope:Ot,withSetIsolationScope:(e,t)=>Pt(t),getCurrentScope:()=>Et().getScope(),getIsolationScope:()=>Et().getIsolationScope()}}function jt(){return At(Ee()).getCurrentScope()}function It(){return At(Ee()).getIsolationScope()}function xt(){return jt().getClient()}function Lt(e){const t=e.getPropagationContext(),{traceId:n,spanId:r,parentSpanId:i}=t;return tt({trace_id:n,span_id:r,parent_span_id:i})}function Dt(e){const t=e._sentryMetrics;if(!t)return;const n={};for(const[,[e,r]]of t){(n[e]||(n[e]=[])).push(tt(r))}return n}const Nt=/^sentry-/;function Rt(e){const t=function(e){if(!e||!xe(e)&&!Array.isArray(e))return;if(Array.isArray(e))return e.reduce(((e,t)=>{const n=Ft(t);return Object.entries(n).forEach((([t,n])=>{e[t]=n})),e}),{});return Ft(e)}(e);if(!t)return;const n=Object.entries(t).reduce(((e,[t,n])=>{if(t.match(Nt)){e[t.slice(7)]=n}return e}),{});return Object.keys(n).length>0?n:void 0}function Ft(e){return e.split(\",\").map((e=>e.split(\"=\").map((e=>decodeURIComponent(e.trim()))))).reduce(((e,[t,n])=>(t&&n&&(e[t]=n),e)),{})}let Bt=!1;function Ut(e){const{spanId:t,traceId:n,isRemote:r}=e.spanContext();return tt({parent_span_id:r?t:$t(e).parent_span_id,span_id:r?yt():t,trace_id:n})}function Vt(e){return\"number\"==typeof e?Jt(e):Array.isArray(e)?e[0]+e[1]/1e9:e instanceof Date?Jt(e.getTime()):it()}function Jt(e){return e>9999999999?e/1e3:e}function $t(e){if(function(e){return\"function\"==typeof e.getSpanJSON}(e))return e.getSpanJSON();try{const{spanId:t,traceId:n}=e.spanContext();if(function(e){const t=e;return!!(t.attributes&&t.startTime&&t.name&&t.endTime&&t.status)}(e)){const{attributes:r,startTime:i,name:o,endTime:s,parentSpanId:a,status:c}=e;return tt({span_id:t,trace_id:n,data:r,description:o,parent_span_id:a,start_timestamp:Vt(i),timestamp:Vt(s)||void 0,status:qt(c),op:r[\"sentry.op\"],origin:r[\"sentry.origin\"],_metrics_summary:Dt(e)})}return{span_id:t,trace_id:n}}catch(e){return{}}}function qt(e){if(e&&0!==e.code)return 1===e.code?\"ok\":e.message||\"unknown_error\"}function zt(e){return e._sentryRootSpan||e}function Wt(){Bt||(ce((()=>{console.warn(\"[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.\")})),Bt=!0)}const Ht=\"production\";function Gt(e,t){const n=t.getOptions(),{publicKey:r}=t.getDsn()||{},i=tt({environment:n.environment||Ht,release:n.release,public_key:r,trace_id:e});return t.emit(\"createDsc\",i),i}function Qt(e){const t=xt();if(!t)return{};const n=zt(e),r=n._frozenDsc;if(r)return r;const i=n.spanContext().traceState,o=i&&i.get(\"sentry.dsc\"),s=o&&Rt(o);if(s)return s;const a=Gt(e.spanContext().traceId,t),c=$t(n),l=c.data||{},u=l[\"sentry.sample_rate\"];null!=u&&(a.sample_rate=`${u}`);const d=l[\"sentry.source\"],p=c.description;return\"url\"!==d&&p&&(a.transaction=p),function(e){if(\"boolean\"==typeof __SENTRY_TRACING__&&!__SENTRY_TRACING__)return!1;const t=xt(),n=e||t&&t.getOptions();return!!n&&(n.enableTracing||\"tracesSampleRate\"in n||\"tracesSampler\"in n)}()&&(a.sampled=String(function(e){const{traceFlags:t}=e.spanContext();return 1===t}(n))),t.emit(\"createDsc\",a,n),a}const Kt=/^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;function Yt(e,t=!1){const{host:n,path:r,pass:i,port:o,projectId:s,protocol:a,publicKey:c}=e;return`${a}://${c}${t&&i?`:${i}`:\"\"}@${n}${o?`:${o}`:\"\"}/${r?`${r}/`:r}${s}`}function Xt(e){return{protocol:e.protocol,publicKey:e.publicKey||\"\",pass:e.pass||\"\",host:e.host,port:e.port||\"\",path:e.path||\"\",projectId:e.projectId}}function Zt(e){const t=\"string\"==typeof e?function(e){const t=Kt.exec(e);if(!t)return void ce((()=>{console.error(`Invalid Sentry Dsn: ${e}`)}));const[n,r,i=\"\",o=\"\",s=\"\",a=\"\"]=t.slice(1);let c=\"\",l=a;const u=l.split(\"/\");if(u.length>1&&(c=u.slice(0,-1).join(\"/\"),l=u.pop()),l){const e=l.match(/^\\d+/);e&&(l=e[0])}return Xt({host:o,pass:i,path:c,projectId:l,port:s,protocol:n,publicKey:r})}(e):Xt(e);if(t&&function(e){if(!oe)return!0;const{port:t,projectId:n,protocol:r}=e;return!([\"protocol\",\"publicKey\",\"host\",\"projectId\"].find((t=>!e[t]&&(le.error(`Invalid Sentry Dsn: ${t} missing`),!0)))||(n.match(/^\\d+$/)?function(e){return\"http\"===e||\"https\"===e}(r)?t&&isNaN(parseInt(t,10))&&(le.error(`Invalid Sentry Dsn: Invalid port ${t}`),1):(le.error(`Invalid Sentry Dsn: Invalid protocol ${r}`),1):(le.error(`Invalid Sentry Dsn: Invalid projectId ${n}`),1)))}(t))return t}function en(e,t=100,n=1/0){try{return nn(\"\",e,t,n)}catch(e){return{ERROR:`**non-serializable** (${e})`}}}function tn(e,t=3,n=102400){const r=en(e,t);return i=r,function(e){return~-encodeURI(e).split(/%..|./).length}(JSON.stringify(i))>n?tn(e,t-1,n):r;var i}function nn(e,t,n=1/0,r=1/0,i=function(){const e=\"function\"==typeof WeakSet,t=e?new WeakSet:[];return[function(n){if(e)return!!t.has(n)||(t.add(n),!1);for(let e=0;e<t.length;e++)if(t[e]===n)return!0;return t.push(n),!1},function(n){if(e)t.delete(n);else for(let e=0;e<t.length;e++)if(t[e]===n){t.splice(e,1);break}}]}()){const[o,s]=i;if(null==t||[\"boolean\",\"string\"].includes(typeof t)||\"number\"==typeof t&&Number.isFinite(t))return t;const a=function(e,t){try{if(\"domain\"===e&&t&&\"object\"==typeof t&&t._events)return\"[Domain]\";if(\"domainEmitter\"===e)return\"[DomainEmitter]\";if(\"undefined\"!=typeof global&&t===global)return\"[Global]\";if(\"undefined\"!=typeof window&&t===window)return\"[Window]\";if(\"undefined\"!=typeof document&&t===document)return\"[Document]\";if(Ue(t))return\"[VueViewModel]\";if(Ne(n=t)&&\"nativeEvent\"in n&&\"preventDefault\"in n&&\"stopPropagation\"in n)return\"[SyntheticEvent]\";if(\"number\"==typeof t&&!Number.isFinite(t))return`[${t}]`;if(\"function\"==typeof t)return`[Function: ${ve(t)}]`;if(\"symbol\"==typeof t)return`[${String(t)}]`;if(\"bigint\"==typeof t)return`[BigInt: ${String(t)}]`;const r=function(e){const t=Object.getPrototypeOf(e);return t?t.constructor.name:\"null prototype\"}(t);return/^HTML(\\w*)Element$/.test(r)?`[HTMLElement: ${r}]`:`[object ${r}]`}catch(e){return`**non-serializable** (${e})`}var n}(e,t);if(!a.startsWith(\"[object \"))return a;if(t.__sentry_skip_normalization__)return t;const c=\"number\"==typeof t.__sentry_override_normalization_depth__?t.__sentry_override_normalization_depth__:n;if(0===c)return a.replace(\"object \",\"\");if(o(t))return\"[Circular ~]\";const l=t;if(l&&\"function\"==typeof l.toJSON)try{return nn(\"\",l.toJSON(),c-1,r,i)}catch(e){}const u=Array.isArray(t)?[]:{};let d=0;const p=Xe(t);for(const e in p){if(!Object.prototype.hasOwnProperty.call(p,e))continue;if(d>=r){u[e]=\"[MaxProperties ~]\";break}const t=p[e];u[e]=nn(e,t,c-1,r,i),d++}return s(t),u}function rn(e,t=[]){return[e,t]}function on(e,t){const[n,r]=e;return[n,[...r,t]]}function sn(e,t){const n=e[1];for(const e of n){if(t(e,e[0].type))return!0}return!1}function an(e){return re.__SENTRY__&&re.__SENTRY__.encodePolyfill?re.__SENTRY__.encodePolyfill(e):(new TextEncoder).encode(e)}function cn(e){const[t,n]=e;let r=JSON.stringify(t);function i(e){\"string\"==typeof r?r=\"string\"==typeof e?r+e:[an(r),e]:r.push(\"string\"==typeof e?an(e):e)}for(const e of n){const[t,n]=e;if(i(`\\n${JSON.stringify(t)}\\n`),\"string\"==typeof n||n instanceof Uint8Array)i(n);else{let e;try{e=JSON.stringify(n)}catch(t){e=JSON.stringify(en(n))}i(e)}}return\"string\"==typeof r?r:function(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);let r=0;for(const t of e)n.set(t,r),r+=t.length;return n}(r)}function ln(e){const t=\"string\"==typeof e.data?an(e.data):e.data;return[tt({type:\"attachment\",length:t.length,filename:e.filename,content_type:e.contentType,attachment_type:e.attachmentType}),t]}const un={session:\"session\",sessions:\"session\",attachment:\"attachment\",transaction:\"transaction\",event:\"error\",client_report:\"internal\",user_report:\"default\",profile:\"profile\",profile_chunk:\"profile\",replay_event:\"replay\",replay_recording:\"replay\",check_in:\"monitor\",feedback:\"feedback\",span:\"span\",statsd:\"metric_bucket\",raw_security:\"security\"};function dn(e){return un[e]}function pn(e){if(!e||!e.sdk)return;const{name:t,version:n}=e.sdk;return{name:t,version:n}}function hn(e,t,n,r){const i=pn(n),o=e.type&&\"replay_event\"!==e.type?e.type:\"event\";!function(e,t){t&&(e.sdk=e.sdk||{},e.sdk.name=e.sdk.name||t.name,e.sdk.version=e.sdk.version||t.version,e.sdk.integrations=[...e.sdk.integrations||[],...t.integrations||[]],e.sdk.packages=[...e.sdk.packages||[],...t.packages||[]])}(e,n&&n.sdk);const s=function(e,t,n,r){const i=e.sdkProcessingMetadata&&e.sdkProcessingMetadata.dynamicSamplingContext;return{event_id:e.event_id,sent_at:(new Date).toISOString(),...t&&{sdk:t},...!!n&&r&&{dsn:Yt(r)},...i&&{trace:tt({...i})}}}(e,i,r,t);delete e.sdkProcessingMetadata;return rn(s,[[{type:o},e]])}function fn(e,t,n,r=0){return new ft(((i,o)=>{const s=e[r];if(null===t||\"function\"!=typeof s)i(t);else{const a=s({...t},n);te&&s.id&&null===a&&le.log(`Event processor \"${s.id}\" dropped event`),Fe(a)?a.then((t=>fn(e,t,n,r+1).then(i))).then(null,o):fn(e,a,n,r+1).then(i).then(null,o)}}))}let vn,gn,mn;function yn(e,t){const{fingerprint:n,span:r,breadcrumbs:i,sdkProcessingMetadata:o}=t;!function(e,t){const{extra:n,tags:r,user:i,contexts:o,level:s,transactionName:a}=t,c=tt(n);c&&Object.keys(c).length&&(e.extra={...c,...e.extra});const l=tt(r);l&&Object.keys(l).length&&(e.tags={...l,...e.tags});const u=tt(i);u&&Object.keys(u).length&&(e.user={...u,...e.user});const d=tt(o);d&&Object.keys(d).length&&(e.contexts={...d,...e.contexts});s&&(e.level=s);a&&\"transaction\"!==e.type&&(e.transaction=a)}(e,t),r&&function(e,t){e.contexts={trace:Ut(t),...e.contexts},e.sdkProcessingMetadata={dynamicSamplingContext:Qt(t),...e.sdkProcessingMetadata};const n=zt(t),r=$t(n).description;r&&!e.transaction&&\"transaction\"===e.type&&(e.transaction=r)}(e,r),function(e,t){e.fingerprint=e.fingerprint?Array.isArray(e.fingerprint)?e.fingerprint:[e.fingerprint]:[],t&&(e.fingerprint=e.fingerprint.concat(t));e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint}(e,n),function(e,t){const n=[...e.breadcrumbs||[],...t];e.breadcrumbs=n.length?n:void 0}(e,i),function(e,t){e.sdkProcessingMetadata={...e.sdkProcessingMetadata,...t}}(e,o)}function bn(e,t){const{extra:n,tags:r,user:i,contexts:o,level:s,sdkProcessingMetadata:a,breadcrumbs:c,fingerprint:l,eventProcessors:u,attachments:d,propagationContext:p,transactionName:h,span:f}=t;_n(e,\"extra\",n),_n(e,\"tags\",r),_n(e,\"user\",i),_n(e,\"contexts\",o),e.sdkProcessingMetadata=bt(e.sdkProcessingMetadata,a,2),s&&(e.level=s),h&&(e.transactionName=h),f&&(e.span=f),c.length&&(e.breadcrumbs=[...e.breadcrumbs,...c]),l.length&&(e.fingerprint=[...e.fingerprint,...l]),u.length&&(e.eventProcessors=[...e.eventProcessors,...u]),d.length&&(e.attachments=[...e.attachments,...d]),e.propagationContext={...e.propagationContext,...p}}function _n(e,t,n){e[t]=bt(e[t],n,1)}function wn(e,t,n,r,i,o){const{normalizeDepth:s=3,normalizeMaxBreadth:a=1e3}=e,c={...t,event_id:t.event_id||n.event_id||ot(),timestamp:t.timestamp||rt()},l=n.integrations||e.integrations.map((e=>e.name));!function(e,t){const{environment:n,release:r,dist:i,maxValueLength:o=250}=t;e.environment=e.environment||n||Ht,!e.release&&r&&(e.release=r);!e.dist&&i&&(e.dist=i);e.message&&(e.message=qe(e.message,o));const s=e.exception&&e.exception.values&&e.exception.values[0];s&&s.value&&(s.value=qe(s.value,o));const a=e.request;a&&a.url&&(a.url=qe(a.url,o))}(c,e),function(e,t){t.length>0&&(e.sdk=e.sdk||{},e.sdk.integrations=[...e.sdk.integrations||[],...t])}(c,l),i&&i.emit(\"applyFrameMetadata\",t),void 0===t.type&&function(e,t){const n=function(e){const t=re._sentryDebugIds;if(!t)return{};const n=Object.keys(t);return mn&&n.length===gn||(gn=n.length,mn=n.reduce(((n,r)=>{vn||(vn={});const i=vn[r];if(i)n[i[0]]=i[1];else{const i=e(r);for(let e=i.length-1;e>=0;e--){const o=i[e],s=o&&o.filename,a=t[r];if(s&&a){n[s]=a,vn[r]=[s,a];break}}}return n}),{})),mn}(t);try{e.exception.values.forEach((e=>{e.stacktrace.frames.forEach((e=>{n&&e.filename&&(e.debug_id=n[e.filename])}))}))}catch(e){}}(c,e.stackParser);const u=function(e,t){if(!t)return e;const n=e?e.clone():new Mt;return n.update(t),n}(r,n.captureContext);n.mechanism&&lt(c,n.mechanism);const d=i?i.getEventProcessors():[],p=ie(\"globalScope\",(()=>new Mt)).getScopeData();if(o){bn(p,o.getScopeData())}if(u){bn(p,u.getScopeData())}const h=[...n.attachments||[],...p.attachments];h.length&&(n.attachments=h),yn(c,p);return fn([...d,...p.eventProcessors],c,n).then((e=>(e&&function(e){const t={};try{e.exception.values.forEach((e=>{e.stacktrace.frames.forEach((e=>{e.debug_id&&(e.abs_path?t[e.abs_path]=e.debug_id:e.filename&&(t[e.filename]=e.debug_id),delete e.debug_id)}))}))}catch(e){}if(0===Object.keys(t).length)return;e.debug_meta=e.debug_meta||{},e.debug_meta.images=e.debug_meta.images||[];const n=e.debug_meta.images;Object.entries(t).forEach((([e,t])=>{n.push({type:\"sourcemap\",code_file:e,debug_id:t})}))}(e),\"number\"==typeof s&&s>0?function(e,t,n){if(!e)return null;const r={...e,...e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map((e=>({...e,...e.data&&{data:en(e.data,t,n)}})))},...e.user&&{user:en(e.user,t,n)},...e.contexts&&{contexts:en(e.contexts,t,n)},...e.extra&&{extra:en(e.extra,t,n)}};e.contexts&&e.contexts.trace&&r.contexts&&(r.contexts.trace=e.contexts.trace,e.contexts.trace.data&&(r.contexts.trace.data=en(e.contexts.trace.data,t,n)));e.spans&&(r.spans=e.spans.map((e=>({...e,...e.data&&{data:en(e.data,t,n)}}))));e.contexts&&e.contexts.flags&&r.contexts&&(r.contexts.flags=en(e.contexts.flags,3,n));return r}(e,s,a):e)))}function Sn(e){if(e)return function(e){return e instanceof Mt||\"function\"==typeof e}(e)||function(e){return Object.keys(e).some((e=>kn.includes(e)))}(e)?{captureContext:e}:e}const kn=[\"user\",\"level\",\"extra\",\"contexts\",\"tags\",\"fingerprint\",\"requestSession\",\"propagationContext\"];function Mn(e,t){return jt().captureEvent(e,t)}function Cn(e){const t=xt(),n=It(),r=jt(),{release:i,environment:o=Ht}=t&&t.getOptions()||{},{userAgent:s}=re.navigator||{},a=vt({release:i,environment:o,user:r.getUser()||n.getUser(),...s&&{userAgent:s},...e}),c=n.getSession();return c&&\"ok\"===c.status&&gt(c,{status:\"exited\"}),En(),n.setSession(a),r.setSession(a),a}function En(){const e=It(),t=jt(),n=t.getSession()||e.getSession();n&&function(e,t){let n={};t?n={status:t}:\"ok\"===e.status&&(n={status:\"exited\"}),gt(e,n)}(n),Tn(),e.setSession(),t.setSession()}function Tn(){const e=It(),t=jt(),n=xt(),r=t.getSession()||e.getSession();r&&n&&n.captureSession(r)}function On(e=!1){e?En():Tn()}function Pn(e,t,n){return t||`${function(e){return`${function(e){const t=e.protocol?`${e.protocol}:`:\"\",n=e.port?`:${e.port}`:\"\";return`${t}//${e.host}${n}${e.path?`/${e.path}`:\"\"}/api/`}(e)}${e.projectId}/envelope/`}(e)}?${function(e,t){const n={sentry_version:\"7\"};return e.publicKey&&(n.sentry_key=e.publicKey),t&&(n.sentry_client=`${t.name}/${t.version}`),new URLSearchParams(n).toString()}(e,n)}`}const An=[];function jn(e,t){for(const n of t)n&&n.afterAllSetup&&n.afterAllSetup(e)}function In(e,t,n){if(n[t.name])te&&le.log(`Integration skipped because it was already installed: ${t.name}`);else{if(n[t.name]=t,-1===An.indexOf(t.name)&&\"function\"==typeof t.setupOnce&&(t.setupOnce(),An.push(t.name)),t.setup&&\"function\"==typeof t.setup&&t.setup(e),\"function\"==typeof t.preprocessEvent){const n=t.preprocessEvent.bind(t);e.on(\"preprocessEvent\",((t,r)=>n(t,r,e)))}if(\"function\"==typeof t.processEvent){const n=t.processEvent.bind(t),r=Object.assign(((t,r)=>n(t,r,e)),{id:t.name});e.addEventProcessor(r)}te&&le.log(`Integration installed: ${t.name}`)}}class xn extends Error{constructor(e,t=\"warn\"){super(e),this.message=e,this.logLevel=t}}const Ln=\"Not capturing exception because it's already been captured.\";class Dn{constructor(e){if(this._options=e,this._integrations={},this._numProcessing=0,this._outcomes={},this._hooks={},this._eventProcessors=[],e.dsn?this._dsn=Zt(e.dsn):te&&le.warn(\"No DSN provided, client will not send events.\"),this._dsn){const t=Pn(this._dsn,e.tunnel,e._metadata?e._metadata.sdk:void 0);this._transport=e.transport({tunnel:this._options.tunnel,recordDroppedEvent:this.recordDroppedEvent.bind(this),...e.transportOptions,url:t})}const t=[\"enableTracing\",\"tracesSampleRate\",\"tracesSampler\"].find((t=>t in e&&null==e[t]));t&&ce((()=>{console.warn(`[Sentry] Deprecation warning: \\`${t}\\` is set to undefined, which leads to tracing being enabled. In v9, a value of \\`undefined\\` will result in tracing being disabled.`)}))}captureException(e,t,n){const r=ot();if(ut(e))return te&&le.log(Ln),r;const i={event_id:r,...t};return this._process(this.eventFromException(e,i).then((e=>this._captureEvent(e,i,n)))),i.event_id}captureMessage(e,t,n,r){const i={event_id:ot(),...n},o=Le(e)?e:String(e),s=De(e)?this.eventFromMessage(o,t,i):this.eventFromException(e,i);return this._process(s.then((e=>this._captureEvent(e,i,r)))),i.event_id}captureEvent(e,t,n){const r=ot();if(t&&t.originalException&&ut(t.originalException))return te&&le.log(Ln),r;const i={event_id:r,...t},o=(e.sdkProcessingMetadata||{}).capturedSpanScope;return this._process(this._captureEvent(e,i,o||n)),i.event_id}captureSession(e){\"string\"!=typeof e.release?te&&le.warn(\"Discarded session because of missing or non-string release\"):(this.sendSession(e),gt(e,{init:!1}))}getDsn(){return this._dsn}getOptions(){return this._options}getSdkMetadata(){return this._options._metadata}getTransport(){return this._transport}flush(e){const t=this._transport;return t?(this.emit(\"flush\"),this._isClientDoneProcessing(e).then((n=>t.flush(e).then((e=>n&&e))))):pt(!0)}close(e){return this.flush(e).then((e=>(this.getOptions().enabled=!1,this.emit(\"close\"),e)))}getEventProcessors(){return this._eventProcessors}addEventProcessor(e){this._eventProcessors.push(e)}init(){(this._isEnabled()||this._options.integrations.some((({name:e})=>e.startsWith(\"Spotlight\"))))&&this._setupIntegrations()}getIntegrationByName(e){return this._integrations[e]}addIntegration(e){const t=this._integrations[e.name];In(this,e,this._integrations),t||jn(this,[e])}sendEvent(e,t={}){this.emit(\"beforeSendEvent\",e,t);let n=hn(e,this._dsn,this._options._metadata,this._options.tunnel);for(const e of t.attachments||[])n=on(n,ln(e));const r=this.sendEnvelope(n);r&&r.then((t=>this.emit(\"afterSendEvent\",e,t)),null)}sendSession(e){const t=function(e,t,n,r){const i=pn(n);return rn({sent_at:(new Date).toISOString(),...i&&{sdk:i},...!!r&&t&&{dsn:Yt(t)}},[\"aggregates\"in e?[{type:\"sessions\"},e]:[{type:\"session\"},e.toJSON()]])}(e,this._dsn,this._options._metadata,this._options.tunnel);this.sendEnvelope(t)}recordDroppedEvent(e,t,n){if(this._options.sendClientReports){const r=\"number\"==typeof n?n:1,i=`${e}:${t}`;te&&le.log(`Recording outcome: \"${i}\"${r>1?` (${r} times)`:\"\"}`),this._outcomes[i]=(this._outcomes[i]||0)+r}}on(e,t){const n=this._hooks[e]=this._hooks[e]||[];return n.push(t),()=>{const e=n.indexOf(t);e>-1&&n.splice(e,1)}}emit(e,...t){const n=this._hooks[e];n&&n.forEach((e=>e(...t)))}sendEnvelope(e){return this.emit(\"beforeEnvelope\",e),this._isEnabled()&&this._transport?this._transport.send(e).then(null,(e=>(te&&le.error(\"Error while sending envelope:\",e),e))):(te&&le.error(\"Transport disabled\"),pt({}))}_setupIntegrations(){const{integrations:e}=this._options;this._integrations=function(e,t){const n={};return t.forEach((t=>{t&&In(e,t,n)})),n}(this,e),jn(this,e)}_updateSessionFromEvent(e,t){let n=\"fatal\"===t.level,r=!1;const i=t.exception&&t.exception.values;if(i){r=!0;for(const e of i){const t=e.mechanism;if(t&&!1===t.handled){n=!0;break}}}const o=\"ok\"===e.status;(o&&0===e.errors||o&&n)&&(gt(e,{...n&&{status:\"crashed\"},errors:e.errors||Number(r||n)}),this.captureSession(e))}_isClientDoneProcessing(e){return new ft((t=>{let n=0;const r=setInterval((()=>{0==this._numProcessing?(clearInterval(r),t(!0)):(n+=1,e&&n>=e&&(clearInterval(r),t(!1)))}),1)}))}_isEnabled(){return!1!==this.getOptions().enabled&&void 0!==this._transport}_prepareEvent(e,t,n=jt(),r=It()){const i=this.getOptions(),o=Object.keys(this._integrations);return!t.integrations&&o.length>0&&(t.integrations=o),this.emit(\"preprocessEvent\",e,t),e.type||r.setLastEventId(e.event_id||t.event_id),wn(i,e,t,n,this,r).then((e=>{if(null===e)return e;e.contexts={trace:Lt(n),...e.contexts};const t=function(e,t){const n=t.getPropagationContext();return n.dsc||Gt(n.traceId,e)}(this,n);return e.sdkProcessingMetadata={dynamicSamplingContext:t,...e.sdkProcessingMetadata},e}))}_captureEvent(e,t={},n){return this._processEvent(e,t,n).then((e=>e.event_id),(e=>{te&&(e instanceof xn&&\"log\"===e.logLevel?le.log(e.message):le.warn(e))}))}_processEvent(e,t,n){const r=this.getOptions(),{sampleRate:i}=r,o=Rn(e),s=Nn(e),a=e.type||\"error\",c=`before send for type \\`${a}\\``,l=void 0===i?void 0:function(e){if(\"boolean\"==typeof e)return Number(e);const t=\"string\"==typeof e?parseFloat(e):e;if(!(\"number\"!=typeof t||isNaN(t)||t<0||t>1))return t;te&&le.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(e)} of type ${JSON.stringify(typeof e)}.`)}(i);if(s&&\"number\"==typeof l&&Math.random()>l)return this.recordDroppedEvent(\"sample_rate\",\"error\",e),ht(new xn(`Discarding event because it's not included in the random sample (sampling rate = ${i})`,\"log\"));const u=\"replay_event\"===a?\"replay\":a,d=(e.sdkProcessingMetadata||{}).capturedSpanIsolationScope;return this._prepareEvent(e,t,n,d).then((n=>{if(null===n)throw this.recordDroppedEvent(\"event_processor\",u,e),new xn(\"An event processor returned `null`, will not send event.\",\"log\");if(t.data&&!0===t.data.__sentry__)return n;const i=function(e,t,n,r){const{beforeSend:i,beforeSendTransaction:o,beforeSendSpan:s}=t;if(Nn(n)&&i)return i(n,r);if(Rn(n)){if(n.spans&&s){const t=[];for(const r of n.spans){const n=s(r);n?t.push(n):(Wt(),e.recordDroppedEvent(\"before_send\",\"span\"))}n.spans=t}if(o){if(n.spans){const e=n.spans.length;n.sdkProcessingMetadata={...n.sdkProcessingMetadata,spanCountBeforeProcessing:e}}return o(n,r)}}return n}(this,r,n,t);return function(e,t){const n=`${t} must return \\`null\\` or a valid event.`;if(Fe(e))return e.then((e=>{if(!Ne(e)&&null!==e)throw new xn(n);return e}),(e=>{throw new xn(`${t} rejected with ${e}`)}));if(!Ne(e)&&null!==e)throw new xn(n);return e}(i,c)})).then((r=>{if(null===r){if(this.recordDroppedEvent(\"before_send\",u,e),o){const t=1+(e.spans||[]).length;this.recordDroppedEvent(\"before_send\",\"span\",t)}throw new xn(`${c} returned \\`null\\`, will not send event.`,\"log\")}const i=n&&n.getSession();if(!o&&i&&this._updateSessionFromEvent(i,r),o){const e=(r.sdkProcessingMetadata&&r.sdkProcessingMetadata.spanCountBeforeProcessing||0)-(r.spans?r.spans.length:0);e>0&&this.recordDroppedEvent(\"before_send\",\"span\",e)}const s=r.transaction_info;if(o&&s&&r.transaction!==e.transaction){const e=\"custom\";r.transaction_info={...s,source:e}}return this.sendEvent(r,t),r})).then(null,(e=>{if(e instanceof xn)throw e;throw this.captureException(e,{data:{__sentry__:!0},originalException:e}),new xn(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${e}`)}))}_process(e){this._numProcessing++,e.then((e=>(this._numProcessing--,e)),(e=>(this._numProcessing--,e)))}_clearOutcomes(){const e=this._outcomes;return this._outcomes={},Object.entries(e).map((([e,t])=>{const[n,r]=e.split(\":\");return{reason:n,category:r,quantity:t}}))}_flushOutcomes(){te&&le.log(\"Flushing outcomes...\");const e=this._clearOutcomes();if(0===e.length)return void(te&&le.log(\"No outcomes to send\"));if(!this._dsn)return void(te&&le.log(\"No dsn provided, will not send outcomes\"));te&&le.log(\"Sending outcomes:\",e);const t=(n=e,rn((r=this._options.tunnel&&Yt(this._dsn))?{dsn:r}:{},[[{type:\"client_report\"},{timestamp:i||rt(),discarded_events:n}]]));var n,r,i;this.sendEnvelope(t)}}function Nn(e){return void 0===e.type}function Rn(e){return\"transaction\"===e.type}function Fn(e){const t=[];function n(e){return t.splice(t.indexOf(e),1)[0]||Promise.resolve(void 0)}return{$:t,add:function(r){if(!(void 0===e||t.length<e))return ht(new xn(\"Not adding Promise because buffer limit was reached.\"));const i=r();return-1===t.indexOf(i)&&t.push(i),i.then((()=>n(i))).then(null,(()=>n(i).then(null,(()=>{})))),i},drain:function(e){return new ft(((n,r)=>{let i=t.length;if(!i)return n(!0);const o=setTimeout((()=>{e&&e>0&&n(!1)}),e);t.forEach((e=>{pt(e).then((()=>{--i||(clearTimeout(o),n(!0))}),r)}))}))}}}function Bn(e,{statusCode:t,headers:n},r=Date.now()){const i={...e},o=n&&n[\"x-sentry-rate-limits\"],s=n&&n[\"retry-after\"];if(o)for(const e of o.trim().split(\",\")){const[t,n,,,o]=e.split(\":\",5),s=parseInt(t,10),a=1e3*(isNaN(s)?60:s);if(n)for(const e of n.split(\";\"))\"metric_bucket\"===e&&o&&!o.split(\";\").includes(\"custom\")||(i[e]=r+a);else i.all=r+a}else s?i.all=r+function(e,t=Date.now()){const n=parseInt(`${e}`,10);if(!isNaN(n))return 1e3*n;const r=Date.parse(`${e}`);return isNaN(r)?6e4:r-t}(s,r):429===t&&(i.all=r+6e4);return i}function Un(e,t,n=Fn(e.bufferSize||64)){let r={};return{send:function(i){const o=[];if(sn(i,((t,n)=>{const i=dn(n);if(function(e,t,n=Date.now()){return function(e,t){return e[t]||e.all||0}(e,t)>n}(r,i)){const r=Vn(t,n);e.recordDroppedEvent(\"ratelimit_backoff\",i,r)}else o.push(t)})),0===o.length)return pt({});const s=rn(i[0],o),a=t=>{sn(s,((n,r)=>{const i=Vn(n,r);e.recordDroppedEvent(t,dn(r),i)}))};return n.add((()=>t({body:cn(s)}).then((e=>(void 0!==e.statusCode&&(e.statusCode<200||e.statusCode>=300)&&te&&le.warn(`Sentry responded with status code ${e.statusCode} to sent event.`),r=Bn(r,e),e)),(e=>{throw a(\"network_error\"),e})))).then((e=>e),(e=>{if(e instanceof xn)return te&&le.error(\"Skipped sending event because buffer is full.\"),a(\"queue_overflow\"),pt({});throw e}))},flush:e=>n.drain(e)}}function Vn(e,t){if(\"event\"===t||\"transaction\"===t)return Array.isArray(e)?e[1]:void 0}const Jn=100;function $n(e,t){const n=xt(),r=It();if(!n)return;const{beforeBreadcrumb:i=null,maxBreadcrumbs:o=Jn}=n.getOptions();if(o<=0)return;const s={timestamp:rt(),...e},a=i?ce((()=>i(s,t))):s;null!==a&&(n.emit&&n.emit(\"beforeAddBreadcrumb\",a,t),r.addBreadcrumb(a,o))}let qn;const zn=new WeakMap,Wn=()=>({name:\"FunctionToString\",setupOnce(){qn=Function.prototype.toString;try{Function.prototype.toString=function(...e){const t=Ye(this),n=zn.has(xt())&&void 0!==t?t:this;return qn.apply(n,e)}}catch(e){}},setup(e){zn.set(e,!0)}}),Hn=[/^Script error\\.?$/,/^Javascript error: Script error\\.? on line 0$/,/^ResizeObserver loop completed with undelivered notifications.$/,/^Cannot redefine property: googletag$/,\"undefined is not an object (evaluating 'a.L')\",'can\\'t redefine non-configurable property \"solana\"',\"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\",\"Can't find variable: _AutofillCallbackHandler\",/^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/],Gn=(e={})=>({name:\"InboundFilters\",processEvent(t,n,r){const i=r.getOptions(),o=function(e={},t={}){return{allowUrls:[...e.allowUrls||[],...t.allowUrls||[]],denyUrls:[...e.denyUrls||[],...t.denyUrls||[]],ignoreErrors:[...e.ignoreErrors||[],...t.ignoreErrors||[],...e.disableErrorDefaults?[]:Hn],ignoreTransactions:[...e.ignoreTransactions||[],...t.ignoreTransactions||[]],ignoreInternal:void 0===e.ignoreInternal||e.ignoreInternal}}(e,i);return function(e,t){if(t.ignoreInternal&&function(e){try{return\"SentryError\"===e.exception.values[0].type}catch(e){}return!1}(e))return te&&le.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${at(e)}`),!0;if(function(e,t){if(e.type||!t||!t.length)return!1;return function(e){const t=[];e.message&&t.push(e.message);let n;try{n=e.exception.values[e.exception.values.length-1]}catch(e){}n&&n.value&&(t.push(n.value),n.type&&t.push(`${n.type}: ${n.value}`));return t}(e).some((e=>He(e,t)))}(e,t.ignoreErrors))return te&&le.warn(`Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${at(e)}`),!0;if(function(e){if(e.type)return!1;if(!e.exception||!e.exception.values||0===e.exception.values.length)return!1;return!e.message&&!e.exception.values.some((e=>e.stacktrace||e.type&&\"Error\"!==e.type||e.value))}(e))return te&&le.warn(`Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${at(e)}`),!0;if(function(e,t){if(\"transaction\"!==e.type||!t||!t.length)return!1;const n=e.transaction;return!!n&&He(n,t)}(e,t.ignoreTransactions))return te&&le.warn(`Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${at(e)}`),!0;if(function(e,t){if(!t||!t.length)return!1;const n=Qn(e);return!!n&&He(n,t)}(e,t.denyUrls))return te&&le.warn(`Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${at(e)}.\\nUrl: ${Qn(e)}`),!0;if(!function(e,t){if(!t||!t.length)return!0;const n=Qn(e);return!n||He(n,t)}(e,t.allowUrls))return te&&le.warn(`Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${at(e)}.\\nUrl: ${Qn(e)}`),!0;return!1}(t,o)?null:t}});function Qn(e){try{let t;try{t=e.exception.values[0].stacktrace.frames}catch(e){}return t?function(e=[]){for(let t=e.length-1;t>=0;t--){const n=e[t];if(n&&\"<anonymous>\"!==n.filename&&\"[native code]\"!==n.filename)return n.filename||null}return null}(t):null}catch(t){return te&&le.error(`Cannot extract url for event ${at(e)}`),null}}function Kn(e,t,n=250,r,i,o,s){if(!(o.exception&&o.exception.values&&s&&Be(s.originalException,Error)))return;const a=o.exception.values.length>0?o.exception.values[o.exception.values.length-1]:void 0;var c,l;a&&(o.exception.values=(c=Yn(e,t,i,s.originalException,r,o.exception.values,a,0),l=n,c.map((e=>(e.value&&(e.value=qe(e.value,l)),e)))))}function Yn(e,t,n,r,i,o,s,a){if(o.length>=n+1)return o;let c=[...o];if(Be(r[i],Error)){Xn(s,a);const o=e(t,r[i]),l=c.length;Zn(o,i,l,a),c=Yn(e,t,n,r[i],i,[o,...c],o,l)}return Array.isArray(r.errors)&&r.errors.forEach(((r,o)=>{if(Be(r,Error)){Xn(s,a);const l=e(t,r),u=c.length;Zn(l,`errors[${o}]`,u,a),c=Yn(e,t,n,r,i,[l,...c],l,u)}})),c}function Xn(e,t){e.mechanism=e.mechanism||{type:\"generic\",handled:!0},e.mechanism={...e.mechanism,...\"AggregateError\"===e.type&&{is_exception_group:!0},exception_id:t}}function Zn(e,t,n,r){e.mechanism=e.mechanism||{type:\"generic\",handled:!0},e.mechanism={...e.mechanism,type:\"chained\",source:t,exception_id:n,parent_id:r}}function er(e){if(!e)return{};const t=e.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);if(!t)return{};const n=t[6]||\"\",r=t[8]||\"\";return{host:t[4],path:t[5],protocol:t[2],search:n,hash:r,relative:t[5]+n+r}}function tr(){\"console\"in re&&se.forEach((function(e){e in re.console&&Ge(re.console,e,(function(t){return ae[e]=t,function(...t){we(\"console\",{args:t,level:e});const n=ae[e];n&&n.apply(re.console,t)}}))}))}function nr(e){return\"warn\"===e?\"warning\":[\"fatal\",\"error\",\"warning\",\"log\",\"info\",\"debug\"].includes(e)?e:\"log\"}const rr=()=>{let e;return{name:\"Dedupe\",processEvent(t){if(t.type)return t;try{if(function(e,t){if(!t)return!1;if(function(e,t){const n=e.message,r=t.message;if(!n&&!r)return!1;if(n&&!r||!n&&r)return!1;if(n!==r)return!1;if(!or(e,t))return!1;if(!ir(e,t))return!1;return!0}(e,t))return!0;if(function(e,t){const n=sr(t),r=sr(e);if(!n||!r)return!1;if(n.type!==r.type||n.value!==r.value)return!1;if(!or(e,t))return!1;if(!ir(e,t))return!1;return!0}(e,t))return!0;return!1}(t,e))return te&&le.warn(\"Event dropped due to being a duplicate of previously captured event.\"),null}catch(e){}return e=t}}};function ir(e,t){let n=ge(e),r=ge(t);if(!n&&!r)return!0;if(n&&!r||!n&&r)return!1;if(r.length!==n.length)return!1;for(let e=0;e<r.length;e++){const t=r[e],i=n[e];if(t.filename!==i.filename||t.lineno!==i.lineno||t.colno!==i.colno||t.function!==i.function)return!1}return!0}function or(e,t){let n=e.fingerprint,r=t.fingerprint;if(!n&&!r)return!0;if(n&&!r||!n&&r)return!1;try{return!(n.join(\"\")!==r.join(\"\"))}catch(e){return!1}}function sr(e){return e.exception&&e.exception.values&&e.exception.values[0]}function ar(e){return void 0===e?void 0:e>=400&&e<500?\"warning\":e>=500?\"error\":void 0}const cr=re;function lr(e){return e&&/^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(e.toString())}function ur(){if(\"string\"==typeof EdgeRuntime)return!0;if(!function(){if(!(\"fetch\"in cr))return!1;try{return new Headers,new Request(\"http://www.example.com\"),new Response,!0}catch(e){return!1}}())return!1;if(lr(cr.fetch))return!0;let e=!1;const t=cr.document;if(t&&\"function\"==typeof t.createElement)try{const n=t.createElement(\"iframe\");n.hidden=!0,t.head.appendChild(n),n.contentWindow&&n.contentWindow.fetch&&(e=lr(n.contentWindow.fetch)),t.head.removeChild(n)}catch(e){oe&&le.warn(\"Could not create sandbox iframe for pure fetch check, bailing to window.fetch: \",e)}return e}function dr(e,t){const n=\"fetch\";be(n,e),_e(n,(()=>function(e,t=!1){if(t&&!ur())return;Ge(re,\"fetch\",(function(t){return function(...n){const r=new Error,{method:i,url:o}=function(e){if(0===e.length)return{method:\"GET\",url:\"\"};if(2===e.length){const[t,n]=e;return{url:hr(t),method:pr(n,\"method\")?String(n.method).toUpperCase():\"GET\"}}const t=e[0];return{url:hr(t),method:pr(t,\"method\")?String(t.method).toUpperCase():\"GET\"}}(n),s={args:n,fetchData:{method:i,url:o},startTimestamp:1e3*it(),virtualError:r};return e||we(\"fetch\",{...s}),t.apply(re,n).then((async t=>(e?e(t):we(\"fetch\",{...s,endTimestamp:1e3*it(),response:t}),t)),(e=>{throw we(\"fetch\",{...s,endTimestamp:1e3*it(),error:e}),Pe(e)&&void 0===e.stack&&(e.stack=r.stack,Qe(e,\"framesToPop\",1)),e}))}}))}(void 0,t)))}function pr(e,t){return!!e&&\"object\"==typeof e&&!!e[t]}function hr(e){return\"string\"==typeof e?e:e?pr(e,\"url\")?e.url:e.toString?e.toString():\"\":\"\"}const fr=re;const vr=re;let gr=0;function mr(){return gr>0}function yr(e,t={}){if(!function(e){return\"function\"==typeof e}(e))return e;try{const t=e.__sentry_wrapped__;if(t)return\"function\"==typeof t?t:e;if(Ye(e))return e}catch(t){return e}const n=function(...n){try{const r=n.map((e=>yr(e,t)));return e.apply(this,r)}catch(e){throw gr++,setTimeout((()=>{gr--})),function(...e){const t=At(Ee());if(2===e.length){const[n,r]=e;return n?t.withSetScope(n,r):t.withScope(r)}t.withScope(e[0])}((r=>{var i,o;r.addEventProcessor((e=>(t.mechanism&&(ct(e,void 0,void 0),lt(e,t.mechanism)),e.extra={...e.extra,arguments:n},e))),i=e,jt().captureException(i,Sn(o))})),e}};try{for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])}catch(e){}Ke(n,e),Qe(e,\"__sentry_wrapped__\",n);try{Object.getOwnPropertyDescriptor(n,\"name\").configurable&&Object.defineProperty(n,\"name\",{get:()=>e.name})}catch(e){}return n}const br=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__;function _r(e,t){const n=kr(e,t),r={type:Er(t),value:Tr(t)};return n.length&&(r.stacktrace={frames:n}),void 0===r.type&&\"\"===r.value&&(r.value=\"Unrecoverable error caught\"),r}function wr(e,t,n,r){const i=xt(),o=i&&i.getOptions().normalizeDepth,s=function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)){const n=e[t];if(n instanceof Error)return n}return}(t),a={__serialized__:tn(t,o)};if(s)return{exception:{values:[_r(e,s)]},extra:a};const c={exception:{values:[{type:Re(t)?t.constructor.name:r?\"UnhandledRejection\":\"Error\",value:Ar(t,{isUnhandledRejection:r})}]},extra:a};if(n){const t=kr(e,n);t.length&&(c.exception.values[0].stacktrace={frames:t})}return c}function Sr(e,t){return{exception:{values:[_r(e,t)]}}}function kr(e,t){const n=t.stacktrace||t.stack||\"\",r=function(e){if(e&&Mr.test(e.message))return 1;return 0}(t),i=function(e){if(\"number\"==typeof e.framesToPop)return e.framesToPop;return 0}(t);try{return e(n,r,i)}catch(e){}return[]}const Mr=/Minified React error #\\d+;/i;function Cr(e){return\"undefined\"!=typeof WebAssembly&&void 0!==WebAssembly.Exception&&e instanceof WebAssembly.Exception}function Er(e){const t=e&&e.name;if(!t&&Cr(e)){return e.message&&Array.isArray(e.message)&&2==e.message.length?e.message[0]:\"WebAssembly.Exception\"}return t}function Tr(e){const t=e&&e.message;return t?t.error&&\"string\"==typeof t.error.message?t.error.message:Cr(e)&&Array.isArray(e.message)&&2==e.message.length?e.message[1]:t:\"No error message\"}function Or(e,t,n,r,i){let o;if(je(t)&&t.error){return Sr(e,t.error)}if(Ie(t)||Ae(t,\"DOMException\")){const i=t;if(\"stack\"in t)o=Sr(e,t);else{const t=i.name||(Ie(i)?\"DOMError\":\"DOMException\"),s=i.message?`${t}: ${i.message}`:t;o=Pr(e,s,n,r),ct(o,s)}return\"code\"in i&&(o.tags={...o.tags,\"DOMException.code\":`${i.code}`}),o}if(Pe(t))return Sr(e,t);if(Ne(t)||Re(t)){return o=wr(e,t,n,i),lt(o,{synthetic:!0}),o}return o=Pr(e,t,n,r),ct(o,`${t}`,void 0),lt(o,{synthetic:!0}),o}function Pr(e,t,n,r){const i={};if(r&&n){const r=kr(e,n);r.length&&(i.exception={values:[{value:t,stacktrace:{frames:r}}]}),lt(i,{synthetic:!0})}if(Le(t)){const{__sentry_template_string__:e,__sentry_template_values__:n}=t;return i.logentry={message:e,params:n},i}return i.message=t,i}function Ar(e,{isUnhandledRejection:t}){const n=function(e,t=40){const n=Object.keys(Xe(e));n.sort();const r=n[0];if(!r)return\"[object has no keys]\";if(r.length>=t)return qe(r,t);for(let e=n.length;e>0;e--){const r=n.slice(0,e).join(\", \");if(!(r.length>t))return e===n.length?r:qe(r,t)}return\"\"}(e),r=t?\"promise rejection\":\"exception\";if(je(e))return`Event \\`ErrorEvent\\` captured as ${r} with message \\`${e.message}\\``;if(Re(e)){return`Event \\`${function(e){try{const t=Object.getPrototypeOf(e);return t?t.constructor.name:void 0}catch(e){}}(e)}\\` (type=${e.type}) captured as ${r}`}return`Object captured as ${r} with keys: ${n}`}class jr extends Dn{constructor(e){const t={parentSpanIsAlwaysRootSpan:!0,...e};!function(e,t,n=[t],r=\"npm\"){const i=e._metadata||{};i.sdk||(i.sdk={name:`sentry.javascript.${t}`,packages:n.map((e=>({name:`${r}:@sentry/${e}`,version:ne}))),version:ne}),e._metadata=i}(t,\"browser\",[\"browser\"],vr.SENTRY_SDK_SOURCE||\"npm\"),super(t),t.sendClientReports&&vr.document&&vr.document.addEventListener(\"visibilitychange\",(()=>{\"hidden\"===vr.document.visibilityState&&this._flushOutcomes()}))}eventFromException(e,t){return function(e,t,n,r){const i=Or(e,t,n&&n.syntheticException||void 0,r);return lt(i),i.level=\"error\",n&&n.event_id&&(i.event_id=n.event_id),pt(i)}(this._options.stackParser,e,t,this._options.attachStacktrace)}eventFromMessage(e,t=\"info\",n){return function(e,t,n=\"info\",r,i){const o=Pr(e,t,r&&r.syntheticException||void 0,i);return o.level=n,r&&r.event_id&&(o.event_id=r.event_id),pt(o)}(this._options.stackParser,e,t,n,this._options.attachStacktrace)}captureUserFeedback(e){if(!this._isEnabled())return void(br&&le.warn(\"SDK not enabled, will not capture user feedback.\"));const t=function(e,{metadata:t,tunnel:n,dsn:r}){const i={event_id:e.event_id,sent_at:(new Date).toISOString(),...t&&t.sdk&&{sdk:{name:t.sdk.name,version:t.sdk.version}},...!!n&&!!r&&{dsn:Yt(r)}},o=function(e){return[{type:\"user_report\"},e]}(e);return rn(i,[o])}(e,{metadata:this.getSdkMetadata(),dsn:this.getDsn(),tunnel:this.getOptions().tunnel});this.sendEnvelope(t)}_prepareEvent(e,t,n){return e.platform=e.platform||\"javascript\",super._prepareEvent(e,t,n)}}const Ir=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,xr=re;let Lr,Dr,Nr,Rr;function Fr(){if(!xr.document)return;const e=we.bind(null,\"dom\"),t=Br(e,!0);xr.document.addEventListener(\"click\",t,!1),xr.document.addEventListener(\"keypress\",t,!1),[\"EventTarget\",\"Node\"].forEach((t=>{const n=xr[t],r=n&&n.prototype;r&&r.hasOwnProperty&&r.hasOwnProperty(\"addEventListener\")&&(Ge(r,\"addEventListener\",(function(t){return function(n,r,i){if(\"click\"===n||\"keypress\"==n)try{const r=this.__sentry_instrumentation_handlers__=this.__sentry_instrumentation_handlers__||{},o=r[n]=r[n]||{refCount:0};if(!o.handler){const r=Br(e);o.handler=r,t.call(this,n,r,i)}o.refCount++}catch(e){}return t.call(this,n,r,i)}})),Ge(r,\"removeEventListener\",(function(e){return function(t,n,r){if(\"click\"===t||\"keypress\"==t)try{const n=this.__sentry_instrumentation_handlers__||{},i=n[t];i&&(i.refCount--,i.refCount<=0&&(e.call(this,t,i.handler,r),i.handler=void 0,delete n[t]),0===Object.keys(n).length&&delete this.__sentry_instrumentation_handlers__)}catch(e){}return e.call(this,t,n,r)}})))}))}function Br(e,t=!1){return n=>{if(!n||n._sentryCaptured)return;const r=function(e){try{return e.target}catch(e){return null}}(n);if(function(e,t){return\"keypress\"===e&&(!t||!t.tagName||\"INPUT\"!==t.tagName&&\"TEXTAREA\"!==t.tagName&&!t.isContentEditable)}(n.type,r))return;Qe(n,\"_sentryCaptured\",!0),r&&!r._sentryId&&Qe(r,\"_sentryId\",ot());const i=\"keypress\"===n.type?\"input\":n.type;if(!function(e){if(e.type!==Dr)return!1;try{if(!e.target||e.target._sentryId!==Nr)return!1}catch(e){}return!0}(n)){e({event:n,name:i,global:t}),Dr=n.type,Nr=r?r._sentryId:void 0}clearTimeout(Lr),Lr=xr.setTimeout((()=>{Nr=void 0,Dr=void 0}),1e3)}}function Ur(e){const t=\"history\";be(t,e),_e(t,Vr)}function Vr(){if(!function(){const e=fr.chrome,t=e&&e.app&&e.app.runtime,n=\"history\"in fr&&!!fr.history.pushState&&!!fr.history.replaceState;return!t&&n}())return;const e=xr.onpopstate;function t(e){return function(...t){const n=t.length>2?t[2]:void 0;if(n){const e=Rr,t=String(n);Rr=t;we(\"history\",{from:e,to:t})}return e.apply(this,t)}}xr.onpopstate=function(...t){const n=xr.location.href,r=Rr;Rr=n;if(we(\"history\",{from:r,to:n}),e)try{return e.apply(this,t)}catch(e){}},Ge(xr.history,\"pushState\",t),Ge(xr.history,\"replaceState\",t)}const Jr={};function $r(e){Jr[e]=void 0}const qr=\"__sentry_xhr_v3__\";function zr(){if(!xr.XMLHttpRequest)return;const e=XMLHttpRequest.prototype;e.open=new Proxy(e.open,{apply(e,t,n){const r=new Error,i=1e3*it(),o=xe(n[0])?n[0].toUpperCase():void 0,s=function(e){if(xe(e))return e;try{return e.toString()}catch(e){}return}(n[1]);if(!o||!s)return e.apply(t,n);t[qr]={method:o,url:s,request_headers:{}},\"POST\"===o&&s.match(/sentry_key/)&&(t.__sentry_own_request__=!0);const a=()=>{const e=t[qr];if(e&&4===t.readyState){try{e.status_code=t.status}catch(e){}we(\"xhr\",{endTimestamp:1e3*it(),startTimestamp:i,xhr:t,virtualError:r})}};return\"onreadystatechange\"in t&&\"function\"==typeof t.onreadystatechange?t.onreadystatechange=new Proxy(t.onreadystatechange,{apply:(e,t,n)=>(a(),e.apply(t,n))}):t.addEventListener(\"readystatechange\",a),t.setRequestHeader=new Proxy(t.setRequestHeader,{apply(e,t,n){const[r,i]=n,o=t[qr];return o&&xe(r)&&xe(i)&&(o.request_headers[r.toLowerCase()]=i),e.apply(t,n)}}),e.apply(t,n)}}),e.send=new Proxy(e.send,{apply(e,t,n){const r=t[qr];if(!r)return e.apply(t,n);void 0!==n[0]&&(r.body=n[0]);return we(\"xhr\",{startTimestamp:1e3*it(),xhr:t}),e.apply(t,n)}})}function Wr(e,t=function(e){const t=Jr[e];if(t)return t;let n=xr[e];if(lr(n))return Jr[e]=n.bind(xr);const r=xr.document;if(r&&\"function\"==typeof r.createElement)try{const t=r.createElement(\"iframe\");t.hidden=!0,r.head.appendChild(t);const i=t.contentWindow;i&&i[e]&&(n=i[e]),r.head.removeChild(t)}catch(t){Ir&&le.warn(`Could not create sandbox iframe for ${e} check, bailing to window.${e}: `,t)}return n?Jr[e]=n.bind(xr):n}(\"fetch\")){let n=0,r=0;return Un(e,(function(i){const o=i.body.length;n+=o,r++;const s={body:i.body,method:\"POST\",referrerPolicy:\"origin\",headers:e.headers,keepalive:n<=6e4&&r<15,...e.fetchOptions};if(!t)return $r(\"fetch\"),ht(\"No fetch implementation available\");try{return t(e.url,s).then((e=>(n-=o,r--,{statusCode:e.status,headers:{\"x-sentry-rate-limits\":e.headers.get(\"X-Sentry-Rate-Limits\"),\"retry-after\":e.headers.get(\"Retry-After\")}})))}catch(e){return $r(\"fetch\"),n-=o,r--,ht(e)}}))}function Hr(e,t,n,r){const i={filename:e,function:\"<anonymous>\"===t?ue:t,in_app:!0};return void 0!==n&&(i.lineno=n),void 0!==r&&(i.colno=r),i}const Gr=/^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i,Qr=/^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,Kr=/\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,Yr=/^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i,Xr=/(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,Zr=function(...e){const t=e.sort(((e,t)=>e[0]-t[0])).map((e=>e[1]));return(e,n=0,r=0)=>{const i=[],o=e.split(\"\\n\");for(let e=n;e<o.length;e++){const n=o[e];if(n.length>1024)continue;const s=de.test(n)?n.replace(de,\"$1\"):n;if(!s.match(/\\S*Error: /)){for(const e of t){const t=e(s);if(t){i.push(t);break}}if(i.length>=50+r)break}}return function(e){if(!e.length)return[];const t=Array.from(e);/sentryWrapped/.test(he(t).function||\"\")&&t.pop();t.reverse(),pe.test(he(t).function||\"\")&&(t.pop(),pe.test(he(t).function||\"\")&&t.pop());return t.slice(0,50).map((e=>({...e,filename:e.filename||he(t).filename,function:e.function||ue})))}(i.slice(r))}}(...[[30,e=>{const t=Gr.exec(e);if(t){const[,e,n,r]=t;return Hr(e,ue,+n,+r)}const n=Qr.exec(e);if(n){if(n[2]&&0===n[2].indexOf(\"eval\")){const e=Kr.exec(n[2]);e&&(n[2]=e[1],n[3]=e[2],n[4]=e[3])}const[e,t]=ei(n[1]||ue,n[2]);return Hr(t,e,n[3]?+n[3]:void 0,n[4]?+n[4]:void 0)}}],[50,e=>{const t=Yr.exec(e);if(t){if(t[3]&&t[3].indexOf(\" > eval\")>-1){const e=Xr.exec(t[3]);e&&(t[1]=t[1]||\"eval\",t[3]=e[1],t[4]=e[2],t[5]=\"\")}let e=t[3],n=t[1]||ue;return[n,e]=ei(n,e),Hr(e,n,t[4]?+t[4]:void 0,t[5]?+t[5]:void 0)}}]]),ei=(e,t)=>{const n=-1!==e.indexOf(\"safari-extension\"),r=-1!==e.indexOf(\"safari-web-extension\");return n||r?[-1!==e.indexOf(\"@\")?e.split(\"@\")[0]:ue,n?`safari-extension:${t}`:`safari-web-extension:${t}`]:[e,t]},ti=1024,ni=(e={})=>{const t={console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0,...e};return{name:\"Breadcrumbs\",setup(e){var n;t.console&&function(e){const t=\"console\";be(t,e),_e(t,tr)}(function(e){return function(t){if(xt()!==e)return;const n={category:\"console\",data:{arguments:t.args,logger:\"console\"},level:nr(t.level),message:ze(t.args,\" \")};if(\"assert\"===t.level){if(!1!==t.args[0])return;n.message=`Assertion failed: ${ze(t.args.slice(1),\" \")||\"console.assert\"}`,n.data.arguments=t.args.slice(1)}$n(n,{input:t.args,level:t.level})}}(e)),t.dom&&(n=function(e,t){return function(n){if(xt()!==e)return;let r,i,o=\"object\"==typeof t?t.serializeAttribute:void 0,s=\"object\"==typeof t&&\"number\"==typeof t.maxStringLength?t.maxStringLength:void 0;s&&s>ti&&(br&&le.warn(`\\`dom.maxStringLength\\` cannot exceed 1024, but a value of ${s} was configured. Sentry will use 1024 instead.`),s=ti),\"string\"==typeof o&&(o=[o]);try{const e=n.event,t=function(e){return!!e&&!!e.target}(e)?e.target:e;r=Je(t,{keyAttrs:o,maxStringLength:s}),i=function(e){if(!Ve.HTMLElement)return null;let t=e;for(let e=0;e<5;e++){if(!t)return null;if(t instanceof HTMLElement){if(t.dataset.sentryComponent)return t.dataset.sentryComponent;if(t.dataset.sentryElement)return t.dataset.sentryElement}t=t.parentNode}return null}(t)}catch(e){r=\"<unknown>\"}if(0===r.length)return;const a={category:`ui.${n.name}`,message:r};i&&(a.data={\"ui.component_name\":i}),$n(a,{event:n.event,name:n.name,global:n.global})}}(e,t.dom),be(\"dom\",n),_e(\"dom\",Fr)),t.xhr&&function(e){be(\"xhr\",e),_e(\"xhr\",zr)}(function(e){return function(t){if(xt()!==e)return;const{startTimestamp:n,endTimestamp:r}=t,i=t.xhr[qr];if(!n||!r||!i)return;const{method:o,url:s,status_code:a,body:c}=i,l={method:o,url:s,status_code:a},u={xhr:t.xhr,input:c,startTimestamp:n,endTimestamp:r};$n({category:\"xhr\",data:l,type:\"http\",level:ar(a)},u)}}(e)),t.fetch&&dr(function(e){return function(t){if(xt()!==e)return;const{startTimestamp:n,endTimestamp:r}=t;if(r&&(!t.fetchData.url.match(/sentry_key/)||\"POST\"!==t.fetchData.method))if(t.error){$n({category:\"fetch\",data:t.fetchData,level:\"error\",type:\"http\"},{data:t.error,input:t.args,startTimestamp:n,endTimestamp:r})}else{const e=t.response,i={...t.fetchData,status_code:e&&e.status},o={input:t.args,response:e,startTimestamp:n,endTimestamp:r};$n({category:\"fetch\",data:i,type:\"http\",level:ar(i.status_code)},o)}}}(e)),t.history&&Ur(function(e){return function(t){if(xt()!==e)return;let n=t.from,r=t.to;const i=er(vr.location.href);let o=n?er(n):void 0;const s=er(r);o&&o.path||(o=i),i.protocol===s.protocol&&i.host===s.host&&(r=s.relative),i.protocol===o.protocol&&i.host===o.host&&(n=o.relative),$n({category:\"navigation\",data:{from:n,to:r}})}}(e)),t.sentry&&e.on(\"beforeSendEvent\",function(e){return function(t){xt()===e&&$n({category:\"sentry.\"+(\"transaction\"===t.type?\"transaction\":\"event\"),event_id:t.event_id,level:t.level,message:at(t)},{event:t})}}(e))}}};const ri=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"BroadcastChannel\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"SharedWorker\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"],ii=(e={})=>{const t={XMLHttpRequest:!0,eventTarget:!0,requestAnimationFrame:!0,setInterval:!0,setTimeout:!0,...e};return{name:\"BrowserApiErrors\",setupOnce(){t.setTimeout&&Ge(vr,\"setTimeout\",oi),t.setInterval&&Ge(vr,\"setInterval\",oi),t.requestAnimationFrame&&Ge(vr,\"requestAnimationFrame\",si),t.XMLHttpRequest&&\"XMLHttpRequest\"in vr&&Ge(XMLHttpRequest.prototype,\"send\",ai);const e=t.eventTarget;if(e){(Array.isArray(e)?e:ri).forEach(ci)}}}};function oi(e){return function(...t){const n=t[0];return t[0]=yr(n,{mechanism:{data:{function:ve(e)},handled:!1,type:\"instrument\"}}),e.apply(this,t)}}function si(e){return function(t){return e.apply(this,[yr(t,{mechanism:{data:{function:\"requestAnimationFrame\",handler:ve(e)},handled:!1,type:\"instrument\"}})])}}function ai(e){return function(...t){const n=this;return[\"onload\",\"onerror\",\"onprogress\",\"onreadystatechange\"].forEach((e=>{e in n&&\"function\"==typeof n[e]&&Ge(n,e,(function(t){const n={mechanism:{data:{function:e,handler:ve(t)},handled:!1,type:\"instrument\"}},r=Ye(t);return r&&(n.mechanism.data.handler=ve(r)),yr(t,n)}))})),e.apply(this,t)}}function ci(e){const t=vr[e],n=t&&t.prototype;n&&n.hasOwnProperty&&n.hasOwnProperty(\"addEventListener\")&&(Ge(n,\"addEventListener\",(function(t){return function(n,r,i){try{\"function\"==typeof r.handleEvent&&(r.handleEvent=yr(r.handleEvent,{mechanism:{data:{function:\"handleEvent\",handler:ve(r),target:e},handled:!1,type:\"instrument\"}}))}catch(e){}return t.apply(this,[n,yr(r,{mechanism:{data:{function:\"addEventListener\",handler:ve(r),target:e},handled:!1,type:\"instrument\"}}),i])}})),Ge(n,\"removeEventListener\",(function(e){return function(t,n,r){try{const i=n.__sentry_wrapped__;i&&e.call(this,t,i,r)}catch(e){}return e.call(this,t,n,r)}})))}const li=()=>({name:\"BrowserSession\",setupOnce(){void 0!==vr.document?(Cn({ignoreDuration:!0}),On(),Ur((({from:e,to:t})=>{void 0!==e&&e!==t&&(Cn({ignoreDuration:!0}),On())}))):br&&le.warn(\"Using the `browserSessionIntegration` in non-browser environments is not supported.\")}}),ui=(e={})=>{const t={onerror:!0,onunhandledrejection:!0,...e};return{name:\"GlobalHandlers\",setupOnce(){Error.stackTraceLimit=50},setup(e){t.onerror&&(!function(e){!function(e){const t=\"error\";be(t,e),_e(t,ke)}((t=>{const{stackParser:n,attachStacktrace:r}=pi();if(xt()!==e||mr())return;const{msg:i,url:o,line:s,column:a,error:c}=t,l=function(e,t,n,r){const i=e.exception=e.exception||{},o=i.values=i.values||[],s=o[0]=o[0]||{},a=s.stacktrace=s.stacktrace||{},c=a.frames=a.frames||[],l=r,u=n,d=xe(t)&&t.length>0?t:function(){try{return Ve.document.location.href}catch(e){return\"\"}}();0===c.length&&c.push({colno:l,filename:d,function:ue,in_app:!0,lineno:u});return e}(Or(n,c||i,void 0,r,!1),o,s,a);l.level=\"error\",Mn(l,{originalException:c,mechanism:{handled:!1,type:\"onerror\"}})}))}(e),di(\"onerror\")),t.onunhandledrejection&&(!function(e){!function(e){const t=\"unhandledrejection\";be(t,e),_e(t,Ce)}((t=>{const{stackParser:n,attachStacktrace:r}=pi();if(xt()!==e||mr())return;const i=function(e){if(De(e))return e;try{if(\"reason\"in e)return e.reason;if(\"detail\"in e&&\"reason\"in e.detail)return e.detail.reason}catch(e){}return e}(t),o=De(i)?{exception:{values:[{type:\"UnhandledRejection\",value:`Non-Error promise rejection captured with value: ${String(i)}`}]}}:Or(n,i,void 0,r,!0);o.level=\"error\",Mn(o,{originalException:i,mechanism:{handled:!1,type:\"onunhandledrejection\"}})}))}(e),di(\"onunhandledrejection\"))}}};function di(e){br&&le.log(`Global Handler attached: ${e}`)}function pi(){const e=xt();return e&&e.getOptions()||{stackParser:()=>[],attachStacktrace:!1}}const hi=()=>({name:\"HttpContext\",preprocessEvent(e){if(!vr.navigator&&!vr.location&&!vr.document)return;const t=e.request&&e.request.url||vr.location&&vr.location.href,{referrer:n}=vr.document||{},{userAgent:r}=vr.navigator||{},i={...e.request&&e.request.headers,...n&&{Referer:n},...r&&{\"User-Agent\":r}},o={...e.request,...t&&{url:t},headers:i};e.request=o}}),fi=(e={})=>{const t=e.limit||5,n=e.key||\"cause\";return{name:\"LinkedErrors\",preprocessEvent(e,r,i){const o=i.getOptions();Kn(_r,o.stackParser,o.maxValueLength,n,t,e,r)}}};var vi=\"new\",gi=\"loading\",mi=\"loaded\",yi=\"joining-meeting\",bi=\"joined-meeting\",_i=\"left-meeting\",wi=\"error\",Si=\"blocked\",ki=\"off\",Mi=\"sendable\",Ci=\"loading\",Ei=\"interrupted\",Ti=\"playable\",Oi=\"unknown\",Pi=\"full\",Ai=\"lobby\",ji=\"none\",Ii=\"base\",xi=\"*\",Li=\"ejected\",Di=\"nbf-room\",Ni=\"nbf-token\",Ri=\"exp-room\",Fi=\"exp-token\",Bi=\"no-room\",Ui=\"meeting-full\",Vi=\"end-of-life\",Ji=\"not-allowed\",$i=\"connection-error\",qi=\"cam-in-use\",zi=\"mic-in-use\",Wi=\"cam-mic-in-use\",Hi=\"permissions\",Gi=\"undefined-mediadevices\",Qi=\"not-found\",Ki=\"constraints\",Yi=\"unknown\",Xi=\"iframe-ready-for-launch-config\",Zi=\"iframe-launch-config\",eo=\"theme-updated\",to=\"loading\",no=\"load-attempt-failed\",ro=\"loaded\",io=\"started-camera\",oo=\"camera-error\",so=\"joining-meeting\",ao=\"joined-meeting\",co=\"left-meeting\",lo=\"participant-joined\",uo=\"participant-updated\",po=\"participant-left\",ho=\"participant-counts-updated\",fo=\"access-state-updated\",vo=\"meeting-session-summary-updated\",go=\"meeting-session-state-updated\",mo=\"meeting-session-data-error\",yo=\"waiting-participant-added\",bo=\"waiting-participant-updated\",_o=\"waiting-participant-removed\",wo=\"track-started\",So=\"track-stopped\",ko=\"transcription-started\",Mo=\"transcription-stopped\",Co=\"transcription-error\",Eo=\"recording-started\",To=\"recording-stopped\",Oo=\"recording-stats\",Po=\"recording-error\",Ao=\"recording-upload-completed\",jo=\"recording-data\",Io=\"app-message\",xo=\"transcription-message\",Lo=\"remote-media-player-started\",Do=\"remote-media-player-updated\",No=\"remote-media-player-stopped\",Ro=\"local-screen-share-started\",Fo=\"local-screen-share-stopped\",Bo=\"local-screen-share-canceled\",Uo=\"active-speaker-change\",Vo=\"active-speaker-mode-change\",Jo=\"network-quality-change\",$o=\"network-connection\",qo=\"cpu-load-change\",zo=\"face-counts-updated\",Wo=\"fullscreen\",Ho=\"exited-fullscreen\",Go=\"live-streaming-started\",Qo=\"live-streaming-updated\",Ko=\"live-streaming-stopped\",Yo=\"live-streaming-error\",Xo=\"lang-updated\",Zo=\"receive-settings-updated\",es=\"input-settings-updated\",ts=\"nonfatal-error\",ns=\"error\",rs=4096,is=102400,os=\"iframe-call-message\",ss=\"local-screen-start\",as=\"daily-method-update-live-streaming-endpoints\",cs=\"transmit-log\",ls=\"daily-custom-track\",us={NONE:\"none\",BGBLUR:\"background-blur\",BGIMAGE:\"background-image\",FACE_DETECTION:\"face-detection\"},ds={NONE:\"none\",NOISE_CANCELLATION:\"noise-cancellation\"},ps={PLAY:\"play\",PAUSE:\"pause\"},hs=[\"jpg\",\"png\",\"jpeg\"],fs=\"add-endpoints\",vs=\"remove-endpoints\",gs=\"sip-call-transfer\";function ms(){return!ys()&&\"undefined\"!=typeof window&&window.navigator&&window.navigator.userAgent?window.navigator.userAgent:\"\"}function ys(){return\"undefined\"!=typeof navigator&&navigator.product&&\"ReactNative\"===navigator.product}function bs(){return navigator&&navigator.mediaDevices&&navigator.mediaDevices.getUserMedia}function _s(){return!!(navigator&&navigator.mediaDevices&&navigator.mediaDevices.getDisplayMedia)&&(function(e,t){if(!e||!t)return!0;switch(e){case\"Chrome\":return t.major>=75;case\"Safari\":return RTCRtpTransceiver.prototype.hasOwnProperty(\"currentDirection\")&&!(13===t.major&&0===t.minor&&0===t.point);case\"Firefox\":return t.major>=67}return!0}(Os(),Ps())||ys())}function ws(){if(ys())return!1;if(!document)return!1;var e=document.createElement(\"iframe\");return!!e.requestFullscreen||!!e.webkitRequestFullscreen}var Ss=function(){try{var e=document.createElement(\"canvas\"),t=null!=(navigator.webdriver?e.getContext(\"webgl2\"):e.getContext(\"webgl2\",{failIfMajorPerformanceCaveat:!0}));return e.remove(),t}catch(e){return!1}}();function ks(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return!ys()&&(!!Ss&&(e?function(){if(Ts())return!1;return[\"Chrome\",\"Firefox\"].includes(Os())}():function(){if(Ts())return!1;var e=Os();if(\"Safari\"===e){var t=xs();if(t.major<15||15===t.major&&t.minor<4)return!1}if(\"Chrome\"===e){return As().major>=77}if(\"Firefox\"===e){return Ls().major>=97}return[\"Chrome\",\"Firefox\",\"Safari\"].includes(e)}()))}function Ms(){if(ys())return!1;if(Es())return!1;if(\"undefined\"==typeof AudioWorkletNode)return!1;switch(Os()){case\"Chrome\":case\"Firefox\":return!0;case\"Safari\":var e=Ps();return e.major>17||17===e.major&&e.minor>=4}return!1}function Cs(){return bs()&&!function(){var e,t=Os();if(!ms())return!0;switch(t){case\"Chrome\":return(e=As()).major&&e.major>0&&e.major<75;case\"Firefox\":return(e=Ls()).major<91;case\"Safari\":return(e=xs()).major<13||13===e.major&&e.minor<1;default:return!0}}()}function Es(){return ms().match(/Linux; Android/)}function Ts(){var e,t=ms(),n=t.match(/Mac/)&&(!ys()&&\"undefined\"!=typeof window&&null!==(e=window)&&void 0!==e&&null!==(e=e.navigator)&&void 0!==e&&e.maxTouchPoints?window.navigator.maxTouchPoints:0)>=5;return!!(t.match(/Mobi/)||t.match(/Android/)||n)||(!!ms().match(/DailyAnd\\//)||void 0)}function Os(){if(\"undefined\"!=typeof window){var e=ms();return js()?\"Safari\":e.indexOf(\"Edge\")>-1?\"Edge\":e.match(/Chrome\\//)?\"Chrome\":e.indexOf(\"Safari\")>-1||Is()?\"Safari\":e.indexOf(\"Firefox\")>-1?\"Firefox\":e.indexOf(\"MSIE\")>-1||e.indexOf(\".NET\")>-1?\"IE\":\"Unknown Browser\"}}function Ps(){switch(Os()){case\"Chrome\":return As();case\"Safari\":return xs();case\"Firefox\":return Ls();case\"Edge\":return function(){var e=0,t=0;if(\"undefined\"!=typeof window){var n=ms().match(/Edge\\/(\\d+).(\\d+)/);if(n)try{e=parseInt(n[1]),t=parseInt(n[2])}catch(e){}}return{major:e,minor:t}}()}}function As(){var e=0,t=0,n=0,r=0,i=!1;if(\"undefined\"!=typeof window){var o=ms(),s=o.match(/Chrome\\/(\\d+).(\\d+).(\\d+).(\\d+)/);if(s)try{e=parseInt(s[1]),t=parseInt(s[2]),n=parseInt(s[3]),r=parseInt(s[4]),i=o.indexOf(\"OPR/\")>-1}catch(e){}}return{major:e,minor:t,build:n,patch:r,opera:i}}function js(){return!!ms().match(/iPad|iPhone|iPod/i)&&bs()}function Is(){return ms().indexOf(\"AppleWebKit/605.1.15\")>-1}function xs(){var e=0,t=0,n=0;if(\"undefined\"!=typeof window){var r=ms().match(/Version\\/(\\d+).(\\d+)(.(\\d+))?/);if(r)try{e=parseInt(r[1]),t=parseInt(r[2]),n=parseInt(r[4])}catch(e){}else(js()||Is())&&(e=14,t=0,n=3)}return{major:e,minor:t,point:n}}function Ls(){var e=0,t=0;if(\"undefined\"!=typeof window){var n=ms().match(/Firefox\\/(\\d+).(\\d+)/);if(n)try{e=parseInt(n[1]),t=parseInt(n[2])}catch(e){}}return{major:e,minor:t}}var Ds=function(){return o((function e(){t(this,e)}),[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){Y()}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){Y()}},{key:\"sendMessageToCallMachine\",value:function(e,t,n,r){Y()}},{key:\"sendMessageToDailyJs\",value:function(e,t){Y()}},{key:\"removeListener\",value:function(e){Y()}}])}();function Ns(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Rs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ns(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ns(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Fs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Fs=function(){return!!e})()}var Bs=function(){function e(){var n,r,i,o;return t(this,e),r=this,i=a(i=e),(n=s(r,Fs()?Reflect.construct(i,o||[],a(r).constructor):i.apply(r,o)))._wrappedListeners={},n._messageCallbacks={},n}return l(e,Ds),o(e,[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){var r=this,i=function(i){if(i.data&&\"iframe-call-message\"===i.data.what&&(!i.data.callClientId||i.data.callClientId===t)&&(!i.data.from||\"module\"!==i.data.from)){var o=Rs({},i.data);if(delete o.from,o.callbackStamp&&r._messageCallbacks[o.callbackStamp]){var s=o.callbackStamp;r._messageCallbacks[s].call(n,o),delete r._messageCallbacks[s]}delete o.what,delete o.callbackStamp,e.call(n,o)}};this._wrappedListeners[e]=i,window.addEventListener(\"message\",i)}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){var r=function(r){var i;if(!(!r.data||r.data.what!==os||!r.data.action||r.data.from&&\"module\"!==r.data.from||r.data.callClientId&&t&&r.data.callClientId!==t||null!=r&&null!==(i=r.data)&&void 0!==i&&i.callFrameId)){var o=r.data;e.call(n,o)}};this._wrappedListeners[e]=r,window.addEventListener(\"message\",r)}},{key:\"sendMessageToCallMachine\",value:function(e,t,n,r){if(!n)throw new Error(\"undefined callClientId. Are you trying to use a DailyCall instance previously destroyed?\");var i=Rs({},e);if(i.what=os,i.from=\"module\",i.callClientId=n,t){var o=K();this._messageCallbacks[o]=t,i.callbackStamp=o}var s=r?r.contentWindow:window,a=this._callMachineTargetOrigin(r);a&&s.postMessage(i,a)}},{key:\"sendMessageToDailyJs\",value:function(e,t){e.what=os,e.callClientId=t,e.from=\"embedded\",window.postMessage(e,this._targetOriginFromWindowLocation())}},{key:\"removeListener\",value:function(e){var t=this._wrappedListeners[e];t&&(window.removeEventListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"forwardPackagedMessageToCallMachine\",value:function(e,t,n){var r=Rs({},e);r.callClientId=n;var i=t?t.contentWindow:window,o=this._callMachineTargetOrigin(t);o&&i.postMessage(r,o)}},{key:\"addListenerForPackagedMessagesFromCallMachine\",value:function(e,t){var n=function(n){if(n.data&&\"iframe-call-message\"===n.data.what&&(!n.data.callClientId||n.data.callClientId===t)&&(!n.data.from||\"module\"!==n.data.from)){var r=n.data;e(r)}};return this._wrappedListeners[e]=n,window.addEventListener(\"message\",n),e}},{key:\"removeListenerForPackagedMessagesFromCallMachine\",value:function(e){var t=this._wrappedListeners[e];t&&(window.removeEventListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"_callMachineTargetOrigin\",value:function(e){return e?e.src?new URL(e.src).origin:void 0:this._targetOriginFromWindowLocation()}},{key:\"_targetOriginFromWindowLocation\",value:function(){return\"file:\"===window.location.protocol?\"*\":window.location.origin}}])}();function Us(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Vs=function(){return!!e})()}var Js=function(){function e(){var n,r,i,o;return t(this,e),r=this,i=a(i=e),n=s(r,Vs()?Reflect.construct(i,o||[],a(r).constructor):i.apply(r,o)),global.callMachineToDailyJsEmitter=global.callMachineToDailyJsEmitter||new I.EventEmitter,global.dailyJsToCallMachineEmitter=global.dailyJsToCallMachineEmitter||new I.EventEmitter,n._wrappedListeners={},n._messageCallbacks={},n}return l(e,Ds),o(e,[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){this._addListener(e,global.callMachineToDailyJsEmitter,t,n,\"received call machine message\")}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){this._addListener(e,global.dailyJsToCallMachineEmitter,t,n,\"received daily-js message\")}},{key:\"sendMessageToCallMachine\",value:function(e,t,n){this._sendMessage(e,global.dailyJsToCallMachineEmitter,n,t,\"sending message to call machine\")}},{key:\"sendMessageToDailyJs\",value:function(e,t){this._sendMessage(e,global.callMachineToDailyJsEmitter,t,null,\"sending message to daily-js\")}},{key:\"removeListener\",value:function(e){var t=this._wrappedListeners[e];t&&(global.callMachineToDailyJsEmitter.removeListener(\"message\",t),global.dailyJsToCallMachineEmitter.removeListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"_addListener\",value:function(e,t,n,r,i){var o=this,s=function(t){if(t.callClientId===n){if(t.callbackStamp&&o._messageCallbacks[t.callbackStamp]){var i=t.callbackStamp;o._messageCallbacks[i].call(r,t),delete o._messageCallbacks[i]}e.call(r,t)}};this._wrappedListeners[e]=s,t.addListener(\"message\",s)}},{key:\"_sendMessage\",value:function(e,t,n,r,i){var o=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Us(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Us(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e);if(o.callClientId=n,r){var s=K();this._messageCallbacks[s]=r,o.callbackStamp=s}t.emit(\"message\",o)}}])}(),$s=\"replace\",qs=\"shallow-merge\",zs=[$s,qs];var Ws=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.data,i=n.mergeStrategy,o=void 0===i?$s:i;t(this,e),e._validateMergeStrategy(o),e._validateData(r,o),this.mergeStrategy=o,this.data=r}return o(e,[{key:\"isNoOp\",value:function(){return e.isNoOpUpdate(this.data,this.mergeStrategy)}}],[{key:\"isNoOpUpdate\",value:function(e,t){return 0===Object.keys(e).length&&t===qs}},{key:\"_validateMergeStrategy\",value:function(e){if(!zs.includes(e))throw Error(\"Unrecognized mergeStrategy provided. Options are: [\".concat(zs,\"]\"))}},{key:\"_validateData\",value:function(e,t){if(!function(e){if(null==e||\"object\"!==n(e))return!1;var t=Object.getPrototypeOf(e);return null==t||t===Object.prototype}(e))throw Error(\"Meeting session data must be a plain (map-like) object\");var r;try{if(r=JSON.stringify(e),t===$s){var i=JSON.parse(r);N(i,e)||console.warn(\"The meeting session data provided will be modified when serialized.\",i,e)}else if(t===qs)for(var o in e)if(Object.hasOwnProperty.call(e,o)&&void 0!==e[o]){var s=JSON.parse(JSON.stringify(e[o]));N(e[o],s)||console.warn(\"At least one key in the meeting session data provided will be modified when serialized.\",s,e[o])}}catch(e){throw Error(\"Meeting session data must be serializable to JSON: \".concat(e))}if(r.length>is)throw Error(\"Meeting session data is too large (\".concat(r.length,\" characters). Maximum size suppported is \").concat(is,\".\"))}}])}();function Hs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Hs=function(){return!!e})()}function Gs(e){var t=\"function\"==typeof Map?new Map:void 0;return Gs=function(e){if(null===e||!function(e){try{return-1!==Function.toString.call(e).indexOf(\"[native code]\")}catch(t){return\"function\"==typeof e}}(e))return e;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return function(e,t,n){if(Hs())return Reflect.construct.apply(null,arguments);var r=[null];r.push.apply(r,t);var i=new(e.bind.apply(e,r));return n&&c(i,n.prototype),i}(e,arguments,a(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),c(n,e)},Gs(e)}function Qs(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Qs=function(){return!!e})()}function Ks(e){var t,n=null===(t=window._daily)||void 0===t?void 0:t.pendings;if(n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}var Ys=function(){return o((function e(n){t(this,e),this._currentLoad=null,this._callClientId=n}),[{key:\"load\",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0,i=arguments.length>2?arguments[2]:void 0;if(this.loaded)return window._daily.instances[this._callClientId].callMachine.reset(),void r(!0);e=this._callClientId,window._daily.pendings.push(e),this._currentLoad&&this._currentLoad.cancel(),this._currentLoad=new Xs(n,(function(){r(!1)}),(function(e,n){n||Ks(t._callClientId),i(e,n)})),this._currentLoad.start()}},{key:\"cancel\",value:function(){this._currentLoad&&this._currentLoad.cancel(),Ks(this._callClientId)}},{key:\"loaded\",get:function(){return this._currentLoad&&this._currentLoad.succeeded}}])}(),Xs=function(){return o((function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0,i=arguments.length>2?arguments[2]:void 0;t(this,e),this._attemptsRemaining=3,this._currentAttempt=null,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i}),[{key:\"start\",value:function(){var e=this;if(!this._currentAttempt){var t=function(n){e._currentAttempt.cancelled||(e._attemptsRemaining--,e._failureCallback(n,e._attemptsRemaining>0),e._attemptsRemaining<=0||setTimeout((function(){e._currentAttempt.cancelled||(e._currentAttempt=new ta(e._dailyConfig,e._successCallback,t),e._currentAttempt.start())}),3e3))};this._currentAttempt=new ta(this._dailyConfig,this._successCallback,t),this._currentAttempt.start()}}},{key:\"cancel\",value:function(){this._currentAttempt&&this._currentAttempt.cancel()}},{key:\"cancelled\",get:function(){return this._currentAttempt&&this._currentAttempt.cancelled}},{key:\"succeeded\",get:function(){return this._currentAttempt&&this._currentAttempt.succeeded}}])}(),Zs=function(){function e(){return t(this,e),n=this,i=arguments,r=a(r=e),s(n,Qs()?Reflect.construct(r,i||[],a(n).constructor):r.apply(n,i));var n,r,i}return l(e,Gs(Error)),o(e)}(),ea=2e4,ta=function(){return o((function e(n,r,i){t(this,e),this._loadAttemptImpl=ys()||!n.avoidEval?new na(n,r,i):new ra(n,r,i)}),[{key:\"start\",value:(e=p((function*(){return this._loadAttemptImpl.start()})),function(){return e.apply(this,arguments)})},{key:\"cancel\",value:function(){this._loadAttemptImpl.cancel()}},{key:\"cancelled\",get:function(){return this._loadAttemptImpl.cancelled}},{key:\"succeeded\",get:function(){return this._loadAttemptImpl.succeeded}}]);var e}(),na=function(){return o((function e(n,r,i){t(this,e),this.cancelled=!1,this.succeeded=!1,this._networkTimedOut=!1,this._networkTimeout=null,this._iosCache=\"undefined\"!=typeof iOSCallObjectBundleCache&&iOSCallObjectBundleCache,this._refetchHeaders=null,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i}),[{key:\"start\",value:(i=p((function*(){var e=Z(this._dailyConfig);!(yield this._tryLoadFromIOSCache(e))&&this._loadFromNetwork(e)})),function(){return i.apply(this,arguments)})},{key:\"cancel\",value:function(){clearTimeout(this._networkTimeout),this.cancelled=!0}},{key:\"_tryLoadFromIOSCache\",value:(r=p((function*(e){if(!this._iosCache)return!1;try{var t=yield this._iosCache.get(e);return!!this.cancelled||!!t&&(t.code?(Function('\"use strict\";'+t.code)(),this.succeeded=!0,this._successCallback(),!0):(this._refetchHeaders=t.refetchHeaders,!1))}catch(e){return!1}})),function(e){return r.apply(this,arguments)})},{key:\"_loadFromNetwork\",value:(n=p((function*(e){var t=this;this._networkTimeout=setTimeout((function(){t._networkTimedOut=!0,t._failureCallback({msg:\"Timed out (>\".concat(ea,\" ms) when loading call object bundle \").concat(e),type:\"timeout\"})}),ea);try{var n=this._refetchHeaders?{headers:this._refetchHeaders}:{},r=yield fetch(e,n);if(clearTimeout(this._networkTimeout),this.cancelled||this._networkTimedOut)throw new Zs;var i=yield this._getBundleCodeFromResponse(e,r);if(this.cancelled)throw new Zs;Function('\"use strict\";'+i)(),this._iosCache&&this._iosCache.set(e,i,r.headers),this.succeeded=!0,this._successCallback()}catch(t){if(clearTimeout(this._networkTimeout),t instanceof Zs||this.cancelled||this._networkTimedOut)return;this._failureCallback({msg:\"Failed to load call object bundle \".concat(e,\": \").concat(t),type:t.message})}})),function(e){return n.apply(this,arguments)})},{key:\"_getBundleCodeFromResponse\",value:(e=p((function*(e,t){if(t.ok)return yield t.text();if(this._iosCache&&304===t.status)return(yield this._iosCache.renew(e,t.headers)).code;throw new Error(\"Received \".concat(t.status,\" response\"))})),function(t,n){return e.apply(this,arguments)})}]);var e,n,r,i}(),ra=function(){return o((function e(n,r,i){t(this,e),this.cancelled=!1,this.succeeded=!1,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i,this._attemptId=K(),this._networkTimeout=null,this._scriptElement=null}),[{key:\"start\",value:function(){window._dailyCallMachineLoadWaitlist||(window._dailyCallMachineLoadWaitlist=new Set);var e=Z(this._dailyConfig);\"object\"===(\"undefined\"==typeof document?\"undefined\":n(document))?this._startLoading(e):this._failureCallback({msg:\"Call object bundle must be loaded in a DOM/web context\",type:\"missing context\"})}},{key:\"cancel\",value:function(){this._stopLoading(),this.cancelled=!0}},{key:\"_startLoading\",value:function(e){var t=this;this._signUpForCallMachineLoadWaitlist(),this._networkTimeout=setTimeout((function(){t._stopLoading(),t._failureCallback({msg:\"Timed out (>\".concat(ea,\" ms) when loading call object bundle \").concat(e),type:\"timeout\"})}),ea);var n=document.getElementsByTagName(\"head\")[0],r=document.createElement(\"script\");this._scriptElement=r,r.onload=function(){t._stopLoading(),t.succeeded=!0,t._successCallback()},r.onerror=function(e){t._stopLoading(),t._failureCallback({msg:\"Failed to load call object bundle \".concat(e.target.src),type:e.message})},r.src=e,n.appendChild(r)}},{key:\"_stopLoading\",value:function(){this._withdrawFromCallMachineLoadWaitlist(),clearTimeout(this._networkTimeout),this._scriptElement&&(this._scriptElement.onload=null,this._scriptElement.onerror=null)}},{key:\"_signUpForCallMachineLoadWaitlist\",value:function(){window._dailyCallMachineLoadWaitlist.add(this._attemptId)}},{key:\"_withdrawFromCallMachineLoadWaitlist\",value:function(){window._dailyCallMachineLoadWaitlist.delete(this._attemptId)}}])}(),ia=function(e,t,n){return!0===aa(e.local,t,n)},oa=function(e,t,n){return e.local.streams&&e.local.streams[t]&&e.local.streams[t].stream&&e.local.streams[t].stream[\"get\".concat(\"video\"===n?\"Video\":\"Audio\",\"Tracks\")]()[0]},sa=function(e,t,n,r){var i=ca(e,t,n,r);return i&&i.pendingTrack},aa=function(e,t,n){if(!e)return!1;var r=function(e){switch(e){case\"avatar\":return!0;case\"staged\":return e;default:return!!e}},i=e.public.subscribedTracks;return i&&i[t]?-1===[\"cam-audio\",\"cam-video\",\"screen-video\",\"screen-audio\",\"rmpAudio\",\"rmpVideo\"].indexOf(n)&&i[t].custom?[!0,\"staged\"].includes(i[t].custom)?r(i[t].custom):r(i[t].custom[n]):r(i[t][n]):!i||r(i.ALL)},ca=function(e,t,n,r){var i=Object.values(e.streams||{}).filter((function(e){return e.participantId===t&&e.type===n&&e.pendingTrack&&e.pendingTrack.kind===r})).sort((function(e,t){return new Date(t.starttime)-new Date(e.starttime)}));return i&&i[0]},la=function(e,t){var n=e.local.public.customTracks;if(n&&n[t])return n[t].track};function ua(e,t){for(var n=t.getState(),r=0,i=[\"cam\",\"screen\"];r<i.length;r++)for(var o=i[r],s=0,a=[\"video\",\"audio\"];s<a.length;s++){var c=a[s],l=\"cam\"===o?c:\"screen\".concat(c.charAt(0).toUpperCase()+c.slice(1)),u=e.tracks[l];if(u){var d=e.local?oa(n,o,c):sa(n,e.session_id,o,c);\"playable\"===u.state&&(u.track=d),u.persistentTrack=d}}}function da(e,t){try{var n=t.getState();for(var r in e.tracks)if(!pa(r)){var i=e.tracks[r].kind;if(i){var o=e.tracks[r];if(o){var s=e.local?la(n,r):sa(n,e.session_id,r,i);\"playable\"===o.state&&(e.tracks[r].track=s),o.persistentTrack=s}}else console.error(\"unknown type for custom track\")}}catch(e){console.error(e)}}function pa(e){return[\"video\",\"audio\",\"screenVideo\",\"screenAudio\"].includes(e)}function ha(e,t,n){var r=n.getState();if(e.local){if(e.audio)try{e.audioTrack=r.local.streams.cam.stream.getAudioTracks()[0],e.audioTrack||(e.audio=!1)}catch(e){}if(e.video)try{e.videoTrack=r.local.streams.cam.stream.getVideoTracks()[0],e.videoTrack||(e.video=!1)}catch(e){}if(e.screen)try{e.screenVideoTrack=r.local.streams.screen.stream.getVideoTracks()[0],e.screenAudioTrack=r.local.streams.screen.stream.getAudioTracks()[0],e.screenVideoTrack||e.screenAudioTrack||(e.screen=!1)}catch(e){}}else{var i=!0;try{var o=r.participants[e.session_id];o&&o.public&&o.public.rtcType&&\"peer-to-peer\"===o.public.rtcType.impl&&o.private&&![\"connected\",\"completed\"].includes(o.private.peeringState)&&(i=!1)}catch(e){console.error(e)}if(!i)return e.audio=!1,e.audioTrack=!1,e.video=!1,e.videoTrack=!1,e.screen=!1,void(e.screenTrack=!1);try{r.streams;if(e.audio&&ia(r,e.session_id,\"cam-audio\")){var s=sa(r,e.session_id,\"cam\",\"audio\");s&&(t&&t.audioTrack&&t.audioTrack.id===s.id?e.audioTrack=s:s.muted||(e.audioTrack=s)),e.audioTrack||(e.audio=!1)}if(e.video&&ia(r,e.session_id,\"cam-video\")){var a=sa(r,e.session_id,\"cam\",\"video\");a&&(t&&t.videoTrack&&t.videoTrack.id===a.id?e.videoTrack=a:a.muted||(e.videoTrack=a)),e.videoTrack||(e.video=!1)}if(e.screen&&ia(r,e.session_id,\"screen-audio\")){var c=sa(r,e.session_id,\"screen\",\"audio\");c&&(t&&t.screenAudioTrack&&t.screenAudioTrack.id===c.id?e.screenAudioTrack=c:c.muted||(e.screenAudioTrack=c))}if(e.screen&&ia(r,e.session_id,\"screen-video\")){var l=sa(r,e.session_id,\"screen\",\"video\");l&&(t&&t.screenVideoTrack&&t.screenVideoTrack.id===l.id?e.screenVideoTrack=l:l.muted||(e.screenVideoTrack=l))}e.screenVideoTrack||e.screenAudioTrack||(e.screen=!1)}catch(e){console.error(\"unexpected error matching up tracks\",e)}}}function fa(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if(\"string\"==typeof e)return va(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?va(e,t):void 0}}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,s=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw o}}}}function va(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var ga=new Map,ma=null;function ya(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if(\"string\"==typeof e)return ba(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ba(e,t):void 0}}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,s=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw o}}}}function ba(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var _a=new Map,wa=null;function Sa(e){Ma()?function(e){ga.has(e)||(ga.set(e,{}),navigator.mediaDevices.enumerateDevices().then((function(t){ga.has(e)&&(ga.get(e).lastDevicesString=JSON.stringify(t),ma||(ma=function(){var e=p((function*(){var e,t=yield navigator.mediaDevices.enumerateDevices(),n=fa(ga.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value,i=JSON.stringify(t);i!==ga.get(r).lastDevicesString&&(ga.get(r).lastDevicesString=i,r(t))}}catch(e){n.e(e)}finally{n.f()}}));return function(){return e.apply(this,arguments)}}(),navigator.mediaDevices.addEventListener(\"devicechange\",ma)))})).catch((function(){})))}(e):function(e){_a.has(e)||(_a.set(e,{}),navigator.mediaDevices.enumerateDevices().then((function(t){_a.has(e)&&(_a.get(e).lastDevicesString=JSON.stringify(t),wa||(wa=setInterval(p((function*(){var e,t=yield navigator.mediaDevices.enumerateDevices(),n=ya(_a.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value,i=JSON.stringify(t);i!==_a.get(r).lastDevicesString&&(_a.get(r).lastDevicesString=i,r(t))}}catch(e){n.e(e)}finally{n.f()}})),3e3)))})))}(e)}function ka(e){Ma()?function(e){ga.has(e)&&(ga.delete(e),0===ga.size&&ma&&(navigator.mediaDevices.removeEventListener(\"devicechange\",ma),ma=null))}(e):function(e){_a.has(e)&&(_a.delete(e),0===_a.size&&wa&&(clearInterval(wa),wa=null))}(e)}function Ma(){var e;return ys()||void 0!==(null===(e=navigator.mediaDevices)||void 0===e?void 0:e.ondevicechange)}var Ca=new Set;function Ea(e,t){var n=t.isLocalScreenVideo;return e&&\"live\"===e.readyState&&!function(e,t){return(!t.isLocalScreenVideo||\"Chrome\"!==Os())&&e.muted&&!Ca.has(e.id)}(e,{isLocalScreenVideo:n})}function Ta(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oa(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ta(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ta(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pa=Object.freeze({VIDEO:\"video\",AUDIO:\"audio\",SCREEN_VIDEO:\"screenVideo\",SCREEN_AUDIO:\"screenAudio\",CUSTOM_VIDEO:\"customVideo\",CUSTOM_AUDIO:\"customAudio\"}),Aa=Object.freeze({PARTICIPANTS:\"participants\",STREAMING:\"streaming\",TRANSCRIPTION:\"transcription\"}),ja=Object.values(Pa),Ia=[\"v\",\"a\",\"sv\",\"sa\",\"cv\",\"ca\"];Object.freeze(ja.reduce((function(e,t,n){return e[t]=Ia[n],e}),{})),Object.freeze(Ia.reduce((function(e,t,n){return e[t]=ja[n],e}),{}));var xa=[Pa.VIDEO,Pa.AUDIO,Pa.SCREEN_VIDEO,Pa.SCREEN_AUDIO],La=Object.values(Aa),Da=[\"p\",\"s\",\"t\"];Object.freeze(La.reduce((function(e,t,n){return e[t]=Da[n],e}),{})),Object.freeze(Da.reduce((function(e,t,n){return e[t]=La[n],e}),{}));var Na=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.base,i=n.byUserId,o=n.byParticipantId;t(this,e),this.base=r,this.byUserId=i,this.byParticipantId=o}return o(e,[{key:\"clone\",value:function(){var t=new e;if(this.base instanceof Ra?t.base=this.base.clone():t.base=this.base,void 0!==this.byUserId)for(var n in t.byUserId={},this.byUserId){var r=this.byUserId[n];t.byUserId[n]=r instanceof Ra?r.clone():r}if(void 0!==this.byParticipantId)for(var i in t.byParticipantId={},this.byParticipantId){var o=this.byParticipantId[i];t.byParticipantId[i]=o instanceof Ra?o.clone():o}return t}},{key:\"toJSONObject\",value:function(){var e={};if(\"boolean\"==typeof this.base?e.base=this.base:this.base instanceof Ra&&(e.base=this.base.toJSONObject()),void 0!==this.byUserId)for(var t in e.byUserId={},this.byUserId){var n=this.byUserId[t];e.byUserId[t]=n instanceof Ra?n.toJSONObject():n}if(void 0!==this.byParticipantId)for(var r in e.byParticipantId={},this.byParticipantId){var i=this.byParticipantId[r];e.byParticipantId[r]=i instanceof Ra?i.toJSONObject():i}return e}},{key:\"toMinifiedJSONObject\",value:function(){var e={};if(void 0!==this.base&&(\"boolean\"==typeof this.base?e.b=this.base:e.b=this.base.toMinifiedJSONObject()),void 0!==this.byUserId)for(var t in e.u={},this.byUserId){var n=this.byUserId[t];e.u[t]=\"boolean\"==typeof n?n:n.toMinifiedJSONObject()}if(void 0!==this.byParticipantId)for(var r in e.p={},this.byParticipantId){var i=this.byParticipantId[r];e.p[r]=\"boolean\"==typeof i?i:i.toMinifiedJSONObject()}return e}},{key:\"normalize\",value:function(){return this.base instanceof Ra&&(this.base=this.base.normalize()),this.byUserId&&(this.byUserId=Object.fromEntries(Object.entries(this.byUserId).map((function(e){var t=f(e,2),n=t[0],r=t[1];return[n,r instanceof Ra?r.normalize():r]})))),this.byParticipantId&&(this.byParticipantId=Object.fromEntries(Object.entries(this.byParticipantId).map((function(e){var t=f(e,2),n=t[0],r=t[1];return[n,r instanceof Ra?r.normalize():r]})))),this}}],[{key:\"fromJSONObject\",value:function(t){var n,r,i;if(void 0!==t.base&&(n=\"boolean\"==typeof t.base?t.base:Ra.fromJSONObject(t.base)),void 0!==t.byUserId)for(var o in r={},t.byUserId){var s=t.byUserId[o];r[o]=\"boolean\"==typeof s?s:Ra.fromJSONObject(s)}if(void 0!==t.byParticipantId)for(var a in i={},t.byParticipantId){var c=t.byParticipantId[a];i[a]=\"boolean\"==typeof c?c:Ra.fromJSONObject(c)}return new e({base:n,byUserId:r,byParticipantId:i})}},{key:\"fromMinifiedJSONObject\",value:function(t){var n,r,i;if(void 0!==t.b&&(n=\"boolean\"==typeof t.b?t.b:Ra.fromMinifiedJSONObject(t.b)),void 0!==t.u)for(var o in r={},t.u){var s=t.u[o];r[o]=\"boolean\"==typeof s?s:Ra.fromMinifiedJSONObject(s)}if(void 0!==t.p)for(var a in i={},t.p){var c=t.p[a];i[a]=\"boolean\"==typeof c?c:Ra.fromMinifiedJSONObject(c)}return new e({base:n,byUserId:r,byParticipantId:i})}},{key:\"validateJSONObject\",value:function(e){if(\"object\"!==n(e))return[!1,\"canReceive must be an object\"];for(var t=[\"base\",\"byUserId\",\"byParticipantId\"],r=0,i=Object.keys(e);r<i.length;r++){var o=i[r];if(!t.includes(o))return[!1,\"canReceive can only contain keys (\".concat(t.join(\", \"),\")\")];if(\"base\"===o){var s=f(Ra.validateJSONObject(e.base,!0),2),a=s[0],c=s[1];if(!a)return[!1,c]}else{if(\"object\"!==n(e[o]))return[!1,\"invalid (non-object) value for field '\".concat(o,\"' in canReceive\")];for(var l=0,u=Object.values(e[o]);l<u.length;l++){var d=u[l],p=f(Ra.validateJSONObject(d),2),h=p[0],v=p[1];if(!h)return[!1,v]}}}return[!0]}}])}(),Ra=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.video,i=n.audio,o=n.screenVideo,s=n.screenAudio,a=n.customVideo,c=n.customAudio;t(this,e),this.video=r,this.audio=i,this.screenVideo=o,this.screenAudio=s,this.customVideo=a,this.customAudio=c}return o(e,[{key:\"clone\",value:function(){var t=new e;return void 0!==this.video&&(t.video=this.video),void 0!==this.audio&&(t.audio=this.audio),void 0!==this.screenVideo&&(t.screenVideo=this.screenVideo),void 0!==this.screenAudio&&(t.screenAudio=this.screenAudio),void 0!==this.customVideo&&(t.customVideo=Oa({},this.customVideo)),void 0!==this.customAudio&&(t.customAudio=Oa({},this.customAudio)),t}},{key:\"toJSONObject\",value:function(){var e={};return void 0!==this.video&&(e.video=this.video),void 0!==this.audio&&(e.audio=this.audio),void 0!==this.screenVideo&&(e.screenVideo=this.screenVideo),void 0!==this.screenAudio&&(e.screenAudio=this.screenAudio),void 0!==this.customVideo&&(e.customVideo=Oa({},this.customVideo)),void 0!==this.customAudio&&(e.customAudio=Oa({},this.customAudio)),e}},{key:\"toMinifiedJSONObject\",value:function(){var e={};return void 0!==this.video&&(e.v=this.video),void 0!==this.audio&&(e.a=this.audio),void 0!==this.screenVideo&&(e.sv=this.screenVideo),void 0!==this.screenAudio&&(e.sa=this.screenAudio),void 0!==this.customVideo&&(e.cv=Oa({},this.customVideo)),void 0!==this.customAudio&&(e.ca=Oa({},this.customAudio)),e}},{key:\"normalize\",value:function(){function e(e,t){return e&&1===Object.keys(e).length&&e[\"*\"]===t}return!(!0!==this.video||!0!==this.audio||!0!==this.screenVideo||!0!==this.screenAudio||!e(this.customVideo,!0)||!e(this.customAudio,!0))||(!1!==this.video||!1!==this.audio||!1!==this.screenVideo||!1!==this.screenAudio||!e(this.customVideo,!1)||!e(this.customAudio,!1))&&this}}],[{key:\"fromBoolean\",value:function(t){return new e({video:t,audio:t,screenVideo:t,screenAudio:t,customVideo:{\"*\":t},customAudio:{\"*\":t}})}},{key:\"fromJSONObject\",value:function(t){return new e({video:t.video,audio:t.audio,screenVideo:t.screenVideo,screenAudio:t.screenAudio,customVideo:void 0!==t.customVideo?Oa({},t.customVideo):void 0,customAudio:void 0!==t.customAudio?Oa({},t.customAudio):void 0})}},{key:\"fromMinifiedJSONObject\",value:function(t){return new e({video:t.v,audio:t.a,screenVideo:t.sv,screenAudio:t.sa,customVideo:t.cv,customAudio:t.ca})}},{key:\"validateJSONObject\",value:function(e,t){if(\"boolean\"==typeof e)return[!0];if(\"object\"!==n(e))return[!1,\"invalid (non-object, non-boolean) value in canReceive\"];for(var r=Object.keys(e),i=0,o=r;i<o.length;i++){var s=o[i];if(!ja.includes(s))return[!1,\"invalid media type '\".concat(s,\"' in canReceive\")];if(xa.includes(s)){if(\"boolean\"!=typeof e[s])return[!1,\"invalid (non-boolean) value for media type '\".concat(s,\"' in canReceive\")]}else{if(\"object\"!==n(e[s]))return[!1,\"invalid (non-object) value for media type '\".concat(s,\"' in canReceive\")];for(var a=0,c=Object.values(e[s]);a<c.length;a++){if(\"boolean\"!=typeof c[a])return[!1,\"invalid (non-boolean) value for entry within '\".concat(s,\"' in canReceive\")]}if(t&&void 0===e[s][\"*\"])return[!1,'canReceive \"base\" permission must specify \"*\" as an entry within \\''.concat(s,\"'\")]}}return t&&r.length!==ja.length?[!1,'canReceive \"base\" permission must specify all media types: '.concat(ja.join(\", \"),\" (or be set to a boolean shorthand)\")]:[!0]}}])}(),Fa=[\"result\"],Ba=[\"preserveIframe\"];function Ua(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Va(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ua(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ua(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ja(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Ja=function(){return!!e})()}function $a(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if(\"string\"==typeof e)return qa(e,t);var n={}.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qa(e,t):void 0}}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,s=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw o}}}}function qa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var za={};var Wa=\"video\",Ha=\"voice\",Ga=ys()?{data:{}}:{data:{},topology:\"none\"},Qa={present:0,hidden:0},Ka={maxBitrate:{min:1e5,max:25e5},maxFramerate:{min:1,max:30},scaleResolutionDownBy:{min:1,max:8}},Ya=Object.keys(Ka),Xa=[\"state\",\"volume\",\"simulcastEncodings\"],Za={androidInCallNotification:{title:\"string\",subtitle:\"string\",iconName:\"string\",disableForCustomOverride:\"boolean\"},disableAutoDeviceManagement:{audio:\"boolean\",video:\"boolean\"}},ec={id:{iconPath:\"string\",iconPathDarkMode:\"string\",label:\"string\",tooltip:\"string\",visualState:\"'default' | 'sidebar-open' | 'active'\"}},tc={id:{allow:\"string\",controlledBy:\"'*' | 'owners' | string[]\",csp:\"string\",iconURL:\"string\",label:\"string\",loading:\"'eager' | 'lazy'\",location:\"'main' | 'sidebar'\",name:\"string\",referrerPolicy:\"string\",sandbox:\"string\",src:\"string\",srcdoc:\"string\",shared:\"string[] | 'owners' | boolean\"}},nc={customIntegrations:{validate:Ec,help:Mc()},customTrayButtons:{validate:Cc,help:\"customTrayButtons should be a dictionary of the type \".concat(JSON.stringify(ec))},url:{validate:function(e){return\"string\"==typeof e},help:\"url should be a string\"},baseUrl:{validate:function(e){return\"string\"==typeof e},help:\"baseUrl should be a string\"},token:{validate:function(e){return\"string\"==typeof e},help:\"token should be a string\",queryString:\"t\"},dailyConfig:{validate:function(e,t){try{return t.validateDailyConfig(e),!0}catch(e){console.error(\"Failed to validate dailyConfig\",e)}return!1},help:\"Unsupported dailyConfig. Check error logs for detailed info.\"},reactNativeConfig:{validate:function(e){return Tc(e,Za)},help:\"reactNativeConfig should look like \".concat(JSON.stringify(Za),\", all fields optional\")},lang:{validate:function(e){return[\"da\",\"de\",\"en-us\",\"en\",\"es\",\"fi\",\"fr\",\"it\",\"jp\",\"ka\",\"nl\",\"no\",\"pl\",\"pt\",\"pt-BR\",\"ru\",\"sv\",\"tr\",\"user\"].includes(e)},help:\"language not supported. Options are: da, de, en-us, en, es, fi, fr, it, jp, ka, nl, no, pl, pt, pt-BR, ru, sv, tr, user\"},userName:!0,userData:{validate:function(e){try{return vc(e),!0}catch(e){return console.error(e),!1}},help:\"invalid userData type provided\"},startVideoOff:!0,startAudioOff:!0,allowLocalVideo:!0,allowLocalAudio:!0,activeSpeakerMode:!0,showLeaveButton:!0,showLocalVideo:!0,showParticipantsBar:!0,showFullscreenButton:!0,showUserNameChangeUI:!0,iframeStyle:!0,customLayout:!0,cssFile:!0,cssText:!0,bodyClass:!0,videoSource:{validate:function(e,t){if(\"boolean\"==typeof e)return t._preloadCache.allowLocalVideo=e,!0;var n;if(e instanceof MediaStreamTrack)t._sharedTracks.videoTrack=e,n={customTrack:ls};else{if(delete t._sharedTracks.videoTrack,\"string\"!=typeof e)return console.error(\"videoSource must be a MediaStreamTrack, boolean, or a string\"),!1;n={deviceId:e}}return t._updatePreloadCacheInputSettings({video:{settings:n}},!1),!0}},audioSource:{validate:function(e,t){if(\"boolean\"==typeof e)return t._preloadCache.allowLocalAudio=e,!0;var n;if(e instanceof MediaStreamTrack)t._sharedTracks.audioTrack=e,n={customTrack:ls};else{if(delete t._sharedTracks.audioTrack,\"string\"!=typeof e)return console.error(\"audioSource must be a MediaStreamTrack, boolean, or a string\"),!1;n={deviceId:e}}return t._updatePreloadCacheInputSettings({audio:{settings:n}},!1),!0}},subscribeToTracksAutomatically:{validate:function(e,t){return t._preloadCache.subscribeToTracksAutomatically=e,!0}},theme:{validate:function(e){var t=[\"accent\",\"accentText\",\"background\",\"backgroundAccent\",\"baseText\",\"border\",\"mainAreaBg\",\"mainAreaBgAccent\",\"mainAreaText\",\"supportiveText\"],r=function(e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];if(!t.includes(i))return console.error('unsupported color \"'.concat(i,'\". Valid colors: ').concat(t.join(\", \"))),!1;if(!e[i].match(/^#[0-9a-f]{6}|#[0-9a-f]{3}$/i))return console.error(\"\".concat(i,' theme color should be provided in valid hex color format. Received: \"').concat(e[i],'\"')),!1}return!0};return\"object\"===n(e)&&(\"light\"in e&&\"dark\"in e||\"colors\"in e)?\"light\"in e&&\"dark\"in e?\"colors\"in e.light?\"colors\"in e.dark?r(e.light.colors)&&r(e.dark.colors):(console.error('Dark theme is missing \"colors\" property.',e),!1):(console.error('Light theme is missing \"colors\" property.',e),!1):r(e.colors):(console.error('Theme must contain either both \"light\" and \"dark\" properties, or \"colors\".',e),!1)},help:\"unsupported theme configuration. Check error logs for detailed info.\"},layoutConfig:{validate:function(e){if(\"grid\"in e){var t=e.grid;if(\"maxTilesPerPage\"in t){if(!Number.isInteger(t.maxTilesPerPage))return console.error(\"grid.maxTilesPerPage should be an integer. You passed \".concat(t.maxTilesPerPage,\".\")),!1;if(t.maxTilesPerPage>49)return console.error(\"grid.maxTilesPerPage can't be larger than 49 without sacrificing browser performance. Please contact us at https://www.daily.co/contact to talk about your use case.\"),!1}if(\"minTilesPerPage\"in t){if(!Number.isInteger(t.minTilesPerPage))return console.error(\"grid.minTilesPerPage should be an integer. You passed \".concat(t.minTilesPerPage,\".\")),!1;if(t.minTilesPerPage<1)return console.error(\"grid.minTilesPerPage can't be lower than 1.\"),!1;if(\"maxTilesPerPage\"in t&&t.minTilesPerPage>t.maxTilesPerPage)return console.error(\"grid.minTilesPerPage can't be higher than grid.maxTilesPerPage.\"),!1}}return!0},help:\"unsupported layoutConfig. Check error logs for detailed info.\"},receiveSettings:{validate:function(e){return gc(e,{allowAllParticipantsKey:!1})},help:kc({allowAllParticipantsKey:!1})},sendSettings:{validate:function(e,t){return!!function(e,t){try{return t.validateUpdateSendSettings(e),!0}catch(e){return console.error(\"Failed to validate send settings\",e),!1}}(e,t)&&(t._preloadCache.sendSettings=e,!0)},help:\"Invalid sendSettings provided. Check error logs for detailed info.\"},inputSettings:{validate:function(e,t){var n;return!!mc(e)&&(t._inputSettings||(t._inputSettings={}),yc(e,null===(n=t.properties)||void 0===n?void 0:n.dailyConfig,t._sharedTracks),t._updatePreloadCacheInputSettings(e,!0),!0)},help:Sc()},layout:{validate:function(e){return\"custom-v1\"===e||\"browser\"===e||\"none\"===e},help:'layout may only be set to \"custom-v1\"',queryString:\"layout\"},emb:{queryString:\"emb\"},embHref:{queryString:\"embHref\"},dailyJsVersion:{queryString:\"dailyJsVersion\"},proxy:{queryString:\"proxy\"},strictMode:!0,allowMultipleCallInstances:!0},rc={styles:{validate:function(e){for(var t in e)if(\"cam\"!==t&&\"screen\"!==t)return!1;if(e.cam)for(var n in e.cam)if(\"div\"!==n&&\"video\"!==n)return!1;if(e.screen)for(var r in e.screen)if(\"div\"!==r&&\"video\"!==r)return!1;return!0},help:\"styles format should be a subset of: { cam: {div: {}, video: {}}, screen: {div: {}, video: {}} }\"},setSubscribedTracks:{validate:function(e,t){if(t._preloadCache.subscribeToTracksAutomatically)return!1;var n=[!0,!1,\"staged\"];if(n.includes(e)||!ys()&&\"avatar\"===e)return!0;var r=[\"audio\",\"video\",\"screenAudio\",\"screenVideo\",\"rmpAudio\",\"rmpVideo\"],i=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];for(var o in e)if(\"custom\"===o){if(!n.includes(e[o])&&!i(e[o],!0))return!1}else{var s=!t&&!r.includes(o),a=!n.includes(e[o]);if(s||a)return!1}return!0};return i(e)},help:\"setSubscribedTracks cannot be used when setSubscribeToTracksAutomatically is enabled, and should be of the form: \"+\"true\".concat(ys()?\"\":\" | 'avatar'\",\" | false | 'staged' | { [audio: true|false|'staged'], [video: true|false|'staged'], [screenAudio: true|false|'staged'], [screenVideo: true|false|'staged'] }\")},setAudio:!0,setVideo:!0,setScreenShare:{validate:function(e){return!1===e},help:\"setScreenShare must be false, as it's only meant for stopping remote participants' screen shares\"},eject:!0,updatePermissions:{validate:function(e){for(var t=0,n=Object.entries(e);t<n.length;t++){var r=f(n[t],2),i=r[0],o=r[1];switch(i){case\"hasPresence\":if(\"boolean\"!=typeof o)return!1;break;case\"canSend\":if(o instanceof Set||o instanceof Array||Array.isArray(o)){var s,a=[\"video\",\"audio\",\"screenVideo\",\"screenAudio\",\"customVideo\",\"customAudio\"],c=$a(o);try{for(c.s();!(s=c.n()).done;){var l=s.value;if(!a.includes(l))return!1}}catch(e){c.e(e)}finally{c.f()}}else if(\"boolean\"!=typeof o)return!1;(o instanceof Array||Array.isArray(o))&&(e.canSend=new Set(o));break;case\"canReceive\":var u=f(Na.validateJSONObject(o),2),d=u[0],p=u[1];if(!d)return console.error(p),!1;break;case\"canAdmin\":if(o instanceof Set||o instanceof Array||Array.isArray(o)){var h,v=[\"participants\",\"streaming\",\"transcription\"],g=$a(o);try{for(g.s();!(h=g.n()).done;){var m=h.value;if(!v.includes(m))return!1}}catch(e){g.e(e)}finally{g.f()}}else if(\"boolean\"!=typeof o)return!1;(o instanceof Array||Array.isArray(o))&&(e.canAdmin=new Set(o));break;default:return!1}}return!0},help:\"updatePermissions can take hasPresence, canSend, canReceive, and canAdmin permissions. hasPresence must be a boolean. canSend can be a boolean or an Array or Set of media types (video, audio, screenVideo, screenAudio, customVideo, customAudio). canReceive must be an object specifying base, byUserId, and/or byParticipantId fields (see documentation for more details). canAdmin can be a boolean or an Array or Set of admin types (participants, streaming, transcription).\"}};Promise.any||(Promise.any=function(){var e=p((function*(e){return new Promise((function(t,n){var r=[];e.forEach((function(i){return Promise.resolve(i).then((function(e){t(e)})).catch((function(t){r.push(t),r.length===e.length&&n(r)}))}))}))}));return function(t){return e.apply(this,arguments)}}());var ic=function(){function r(e){var n,i,o,c,l,d,h=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t(this,r),o=this,c=a(c=r),u(i=s(o,Ja()?Reflect.construct(c,l||[],a(o).constructor):c.apply(o,l)),\"startListeningForDeviceChanges\",(function(){Sa(i.handleDeviceChange)})),u(i,\"stopListeningForDeviceChanges\",(function(){ka(i.handleDeviceChange)})),u(i,\"handleDeviceChange\",(function(e){e=e.map((function(e){return JSON.parse(JSON.stringify(e))})),i.emitDailyJSEvent({action:\"available-devices-updated\",availableDevices:e})})),u(i,\"handleNativeAppStateChange\",function(){var e=p((function*(e){if(\"destroyed\"===e)return console.warn(\"App has been destroyed before leaving the meeting. Cleaning up all the resources!\"),void(yield i.destroy());var t=\"active\"===e;i.disableReactNativeAutoDeviceManagement(\"video\")||(t?i.camUnmutedBeforeLosingNativeActiveState&&i.setLocalVideo(!0):(i.camUnmutedBeforeLosingNativeActiveState=i.localVideo(),i.camUnmutedBeforeLosingNativeActiveState&&i.setLocalVideo(!1)))}));return function(t){return e.apply(this,arguments)}}()),u(i,\"handleNativeAudioFocusChange\",(function(e){i.disableReactNativeAutoDeviceManagement(\"audio\")||(i._hasNativeAudioFocus=e,i.toggleParticipantAudioBasedOnNativeAudioFocus(),i._hasNativeAudioFocus?i.micUnmutedBeforeLosingNativeAudioFocus&&i.setLocalAudio(!0):(i.micUnmutedBeforeLosingNativeAudioFocus=i.localAudio(),i.setLocalAudio(!1)))})),u(i,\"handleNativeSystemScreenCaptureStop\",(function(){i.stopScreenShare()})),i.strictMode=void 0===h.strictMode||h.strictMode,i.allowMultipleCallInstances=null!==(n=h.allowMultipleCallInstances)&&void 0!==n&&n,Object.keys(za).length&&(i._logDuplicateInstanceAttempt(),!i.allowMultipleCallInstances)){if(i.strictMode)throw new Error(\"Duplicate DailyIframe instances are not allowed\");console.warn(\"Using strictMode: false to allow multiple call instances is now deprecated. Set `allowMultipleCallInstances: true`\")}if(window._daily||(window._daily={pendings:[],instances:{}}),i.callClientId=K(),za[(d=i).callClientId]=d,window._daily.instances[i.callClientId]={},i._sharedTracks={},window._daily.instances[i.callClientId].tracks=i._sharedTracks,h.dailyJsVersion=r.version(),i._iframe=e,i._callObjectMode=\"none\"===h.layout&&!i._iframe,i._preloadCache={subscribeToTracksAutomatically:!0,outputDeviceId:null,inputSettings:null,sendSettings:null,videoTrackForNetworkConnectivityTest:null,videoTrackForConnectionQualityTest:null},void 0!==h.showLocalVideo?i._callObjectMode?console.error(\"showLocalVideo is not available in call object mode\"):i._showLocalVideo=!!h.showLocalVideo:i._showLocalVideo=!0,void 0!==h.showParticipantsBar?i._callObjectMode?console.error(\"showParticipantsBar is not available in call object mode\"):i._showParticipantsBar=!!h.showParticipantsBar:i._showParticipantsBar=!0,void 0!==h.customIntegrations?i._callObjectMode?console.error(\"customIntegrations is not available in call object mode\"):i._customIntegrations=h.customIntegrations:i._customIntegrations={},void 0!==h.customTrayButtons?i._callObjectMode?console.error(\"customTrayButtons is not available in call object mode\"):i._customTrayButtons=h.customTrayButtons:i._customTrayButtons={},void 0!==h.activeSpeakerMode?i._callObjectMode?console.error(\"activeSpeakerMode is not available in call object mode\"):i._activeSpeakerMode=!!h.activeSpeakerMode:i._activeSpeakerMode=!1,h.receiveSettings?i._callObjectMode?i._receiveSettings=h.receiveSettings:console.error(\"receiveSettings is only available in call object mode\"):i._receiveSettings={},i.validateProperties(h),i.properties=Va({},h),i._inputSettings||(i._inputSettings={}),i._callObjectLoader=i._callObjectMode?new Ys(i.callClientId):null,i._callState=vi,i._isPreparingToJoin=!1,i._accessState={access:Oi},i._meetingSessionSummary={},i._finalSummaryOfPrevSession={},i._meetingSessionState=jc(Ga,i._callObjectMode),i._nativeInCallAudioMode=Wa,i._participants={},i._isScreenSharing=!1,i._participantCounts=Qa,i._rmpPlayerState={},i._waitingParticipants={},i._network={threshold:\"good\",quality:100,networkState:\"unknown\",stats:{}},i._activeSpeaker={},i._localAudioLevel=0,i._isLocalAudioLevelObserverRunning=!1,i._remoteParticipantsAudioLevel={},i._isRemoteParticipantsAudioLevelObserverRunning=!1,i._maxAppMessageSize=rs,i._messageChannel=ys()?new Js:new Bs,i._iframe&&(i._iframe.requestFullscreen?i._iframe.addEventListener(\"fullscreenchange\",(function(){document.fullscreenElement===i._iframe?(i.emitDailyJSEvent({action:Wo}),i.sendMessageToCallMachine({action:Wo})):(i.emitDailyJSEvent({action:Ho}),i.sendMessageToCallMachine({action:Ho}))})):i._iframe.webkitRequestFullscreen&&i._iframe.addEventListener(\"webkitfullscreenchange\",(function(){document.webkitFullscreenElement===i._iframe?(i.emitDailyJSEvent({action:Wo}),i.sendMessageToCallMachine({action:Wo})):(i.emitDailyJSEvent({action:Ho}),i.sendMessageToCallMachine({action:Ho}))}))),ys()){var f=i.nativeUtils();f.addAudioFocusChangeListener&&f.removeAudioFocusChangeListener&&f.addAppStateChangeListener&&f.removeAppStateChangeListener&&f.addSystemScreenCaptureStopListener&&f.removeSystemScreenCaptureStopListener||console.warn(\"expected (add|remove)(AudioFocusChange|AppActiveStateChange|SystemScreenCaptureStop)Listener to be available in React Native\"),i._hasNativeAudioFocus=!0,f.addAudioFocusChangeListener(i.handleNativeAudioFocusChange),f.addAppStateChangeListener(i.handleNativeAppStateChange),f.addSystemScreenCaptureStopListener(i.handleNativeSystemScreenCaptureStop)}return i._callObjectMode&&i.startListeningForDeviceChanges(),i._messageChannel.addListenerForMessagesFromCallMachine(i.handleMessageFromCallMachine,i.callClientId,i),i}return l(r,x),o(r,[{key:\"destroy\",value:(ee=p((function*(){var e;try{yield this.leave()}catch(e){}var t=this._iframe;if(t){var n=t.parentElement;n&&n.removeChild(t)}if(this._messageChannel.removeListener(this.handleMessageFromCallMachine),ys()){var r=this.nativeUtils();r.removeAudioFocusChangeListener(this.handleNativeAudioFocusChange),r.removeAppStateChangeListener(this.handleNativeAppStateChange),r.removeSystemScreenCaptureStopListener(this.handleNativeSystemScreenCaptureStop)}this._callObjectMode&&this.stopListeningForDeviceChanges(),this.resetMeetingDependentVars(),this._destroyed=!0,this.emitDailyJSEvent({action:\"call-instance-destroyed\"}),delete za[this.callClientId],(null===(e=window)||void 0===e||null===(e=e._daily)||void 0===e?void 0:e.instances)&&delete window._daily.instances[this.callClientId],this.strictMode&&(this.callClientId=void 0)})),function(){return ee.apply(this,arguments)})},{key:\"isDestroyed\",value:function(){return!!this._destroyed}},{key:\"loadCss\",value:function(e){var t=e.bodyClass,n=e.cssFile,r=e.cssText;return hc(),this.sendMessageToCallMachine({action:\"load-css\",cssFile:this.absoluteUrl(n),bodyClass:t,cssText:r}),this}},{key:\"iframe\",value:function(){return hc(),this._iframe}},{key:\"meetingState\",value:function(){return this._callState}},{key:\"accessState\",value:function(){return dc(this._callObjectMode,\"accessState()\"),this._accessState}},{key:\"participants\",value:function(){return this._participants}},{key:\"participantCounts\",value:function(){return this._participantCounts}},{key:\"waitingParticipants\",value:function(){return dc(this._callObjectMode,\"waitingParticipants()\"),this._waitingParticipants}},{key:\"validateParticipantProperties\",value:function(e,t){for(var n in t){if(!rc[n])throw new Error(\"unrecognized updateParticipant property \".concat(n));if(rc[n].validate&&!rc[n].validate(t[n],this,this._participants[e]))throw new Error(rc[n].help)}}},{key:\"updateParticipant\",value:function(e,t){return this._participants.local&&this._participants.local.session_id===e&&(e=\"local\"),e&&t&&(this.validateParticipantProperties(e,t),this.sendMessageToCallMachine({action:\"update-participant\",id:e,properties:t})),this}},{key:\"updateParticipants\",value:function(e){var t=this._participants.local&&this._participants.local.session_id;for(var n in e)n===t&&(n=\"local\"),n&&e[n]&&this.validateParticipantProperties(n,e[n]);return this.sendMessageToCallMachine({action:\"update-participants\",participants:e}),this}},{key:\"updateWaitingParticipant\",value:(Y=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(dc(this._callObjectMode,\"updateWaitingParticipant()\"),sc(this._callState,\"updateWaitingParticipant()\"),\"string\"!=typeof t||\"object\"!==n(r))throw new Error(\"updateWaitingParticipant() must take an id string and a updates object\");return new Promise((function(n,i){e.sendMessageToCallMachine({action:\"daily-method-update-waiting-participant\",id:t,updates:r},(function(e){e.error&&i(e.error),e.id||i(new Error(\"unknown error in updateWaitingParticipant()\")),n({id:e.id})}))}))})),function(){return Y.apply(this,arguments)})},{key:\"updateWaitingParticipants\",value:(G=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(dc(this._callObjectMode,\"updateWaitingParticipants()\"),sc(this._callState,\"updateWaitingParticipants()\"),\"object\"!==n(t))throw new Error(\"updateWaitingParticipants() must take a mapping between ids and update objects\");return new Promise((function(n,r){e.sendMessageToCallMachine({action:\"daily-method-update-waiting-participants\",updatesById:t},(function(e){e.error&&r(e.error),e.ids||r(new Error(\"unknown error in updateWaitingParticipants()\")),n({ids:e.ids})}))}))})),function(){return G.apply(this,arguments)})},{key:\"requestAccess\",value:(H=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.access,r=void 0===n?{level:Pi}:n,i=t.name,o=void 0===i?\"\":i;return dc(this._callObjectMode,\"requestAccess()\"),sc(this._callState,\"requestAccess()\"),new Promise((function(t,n){e.sendMessageToCallMachine({action:\"daily-method-request-access\",access:r,name:o},(function(e){e.error&&n(e.error),e.access||n(new Error(\"unknown error in requestAccess()\")),t({access:e.access,granted:e.granted})}))}))})),function(){return H.apply(this,arguments)})},{key:\"localAudio\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.audio.state):null}},{key:\"localVideo\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.video.state):null}},{key:\"setLocalAudio\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return\"forceDiscardTrack\"in t&&(ys()?(console.warn(\"forceDiscardTrack option not supported in React Native; ignoring\"),t={}):e&&(console.warn(\"forceDiscardTrack option only supported when calling setLocalAudio(false); ignoring\"),t={})),this.sendMessageToCallMachine({action:\"local-audio\",state:e,options:t}),this}},{key:\"localScreenAudio\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.screenAudio.state):null}},{key:\"localScreenVideo\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.screenVideo.state):null}},{key:\"updateScreenShare\",value:function(e){if(this._isScreenSharing)return this.sendMessageToCallMachine({action:\"local-screen-update\",options:e}),this;console.warn(\"There is no screen share in progress. Try calling startScreenShare first.\")}},{key:\"setLocalVideo\",value:function(e){return this.sendMessageToCallMachine({action:\"local-video\",state:e}),this}},{key:\"_setAllowLocalAudio\",value:function(e){if(this._preloadCache.allowLocalAudio=e,this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-allow-local-audio\",state:e}),this}},{key:\"_setAllowLocalVideo\",value:function(e){if(this._preloadCache.allowLocalVideo=e,this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-allow-local-video\",state:e}),this}},{key:\"getReceiveSettings\",value:(W=p((function*(e){var t=this,r=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).showInheritedValues,i=void 0!==r&&r;if(dc(this._callObjectMode,\"getReceiveSettings()\"),!this._callMachineInitialized)return this._receiveSettings;switch(n(e)){case\"string\":return new Promise((function(n){t.sendMessageToCallMachine({action:\"get-single-participant-receive-settings\",id:e,showInheritedValues:i},(function(e){n(e.receiveSettings)}))}));case\"undefined\":return this._receiveSettings;default:throw new Error('first argument to getReceiveSettings() must be a participant id (or \"base\"), or there should be no arguments')}})),function(e){return W.apply(this,arguments)})},{key:\"updateReceiveSettings\",value:(z=p((function*(e){var t=this;if(dc(this._callObjectMode,\"updateReceiveSettings()\"),!gc(e,{allowAllParticipantsKey:!0}))throw new Error(kc({allowAllParticipantsKey:!0}));return sc(this._callState,\"updateReceiveSettings()\",\"To specify receive settings earlier, use the receiveSettings config property.\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"update-receive-settings\",receiveSettings:e},(function(e){n({receiveSettings:e.receiveSettings})}))}))})),function(e){return z.apply(this,arguments)})},{key:\"_prepInputSettingsForSharing\",value:function(e,t){if(e){var n={};if(e.audio){var r,i,o;e.audio.settings&&(!Object.keys(e.audio.settings).length&&t||(n.audio={settings:Va({},e.audio.settings)})),t&&null!==(r=n.audio)&&void 0!==r&&null!==(r=r.settings)&&void 0!==r&&r.customTrack&&(n.audio.settings={customTrack:this._sharedTracks.audioTrack});var s=\"none\"===(null===(i=e.audio.processor)||void 0===i?void 0:i.type)&&(null===(o=e.audio.processor)||void 0===o?void 0:o._isDefaultWhenNone);if(e.audio.processor&&!s){var a=Va({},e.audio.processor);delete a._isDefaultWhenNone,n.audio=Va(Va({},n.audio),{},{processor:a})}}if(e.video){var c,l,u;e.video.settings&&(!Object.keys(e.video.settings).length&&t||(n.video={settings:Va({},e.video.settings)})),t&&null!==(c=n.video)&&void 0!==c&&null!==(c=c.settings)&&void 0!==c&&c.customTrack&&(n.video.settings={customTrack:this._sharedTracks.videoTrack});var d=\"none\"===(null===(l=e.video.processor)||void 0===l?void 0:l.type)&&(null===(u=e.video.processor)||void 0===u?void 0:u._isDefaultWhenNone);if(e.video.processor&&!d){var p=Va({},e.video.processor);delete p._isDefaultWhenNone,n.video=Va(Va({},n.video),{},{processor:p})}}return n}}},{key:\"getInputSettings\",value:function(){var e=this;return hc(),new Promise((function(t){t(e._getInputSettings())}))}},{key:\"_getInputSettings\",value:function(){var e,t,n,r,i,o,s={processor:{type:\"none\",_isDefaultWhenNone:!0}};this._inputSettings?(e=(null===(n=this._inputSettings)||void 0===n?void 0:n.video)||s,t=(null===(r=this._inputSettings)||void 0===r?void 0:r.audio)||s):(e=(null===(i=this._preloadCache)||void 0===i||null===(i=i.inputSettings)||void 0===i?void 0:i.video)||s,t=(null===(o=this._preloadCache)||void 0===o||null===(o=o.inputSettings)||void 0===o?void 0:o.audio)||s);var a={audio:t,video:e};return this._prepInputSettingsForSharing(a,!0)}},{key:\"_updatePreloadCacheInputSettings\",value:function(e,t){var n=this._inputSettings||{},r={};if(e.video){var i,o,s;if(r.video={},e.video.settings)r.video.settings={},t||e.video.settings.customTrack||null===(s=n.video)||void 0===s||!s.settings?r.video.settings=e.video.settings:r.video.settings=Va(Va({},n.video.settings),e.video.settings),Object.keys(r.video.settings).length||delete r.video.settings;else null!==(i=n.video)&&void 0!==i&&i.settings&&(r.video.settings=n.video.settings);e.video.processor?r.video.processor=e.video.processor:null!==(o=n.video)&&void 0!==o&&o.processor&&(r.video.processor=n.video.processor)}else n.video&&(r.video=n.video);if(e.audio){var a,c,l;if(r.audio={},e.audio.settings)r.audio.settings={},t||e.audio.settings.customTrack||null===(l=n.audio)||void 0===l||!l.settings?r.audio.settings=e.audio.settings:r.audio.settings=Va(Va({},n.audio.settings),e.audio.settings),Object.keys(r.audio.settings).length||delete r.audio.settings;else null!==(a=n.audio)&&void 0!==a&&a.settings&&(r.audio.settings=n.audio.settings);e.audio.processor?r.audio.processor=e.audio.processor:null!==(c=n.audio)&&void 0!==c&&c.processor&&(r.audio.processor=n.audio.processor)}else n.audio&&(r.audio=n.audio);this._maybeUpdateInputSettings(r)}},{key:\"_devicesFromInputSettings\",value:function(e){var t,n,r=(null==e||null===(t=e.video)||void 0===t||null===(t=t.settings)||void 0===t?void 0:t.deviceId)||null,i=(null==e||null===(n=e.audio)||void 0===n||null===(n=n.settings)||void 0===n?void 0:n.deviceId)||null,o=this._preloadCache.outputDeviceId||null;return{camera:r?{deviceId:r}:{},mic:i?{deviceId:i}:{},speaker:o?{deviceId:o}:{}}}},{key:\"updateInputSettings\",value:(q=p((function*(e){var t=this;return hc(),mc(e)?e.video||e.audio?(yc(e,this.properties.dailyConfig,this._sharedTracks),this._callObjectMode&&!this._callMachineInitialized?(this._updatePreloadCacheInputSettings(e,!0),this._getInputSettings()):new Promise((function(n,r){t.sendMessageToCallMachine({action:\"update-input-settings\",inputSettings:e},(function(i){if(i.error)r(i.error);else{if(i.returnPreloadCache)return t._updatePreloadCacheInputSettings(e,!0),void n(t._getInputSettings());t._maybeUpdateInputSettings(i.inputSettings),n(t._prepInputSettingsForSharing(i.inputSettings,!0))}}))}))):this._getInputSettings():(console.error(Sc()),Promise.reject(Sc()))})),function(e){return q.apply(this,arguments)})},{key:\"setBandwidth\",value:function(e){var t=e.kbs,n=e.trackConstraints;if(hc(),this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-bandwidth\",kbs:t,trackConstraints:n}),this}},{key:\"getDailyLang\",value:function(){var e=this;if(hc(),this._callMachineInitialized)return new Promise((function(t){e.sendMessageToCallMachine({action:\"get-daily-lang\"},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))}},{key:\"setDailyLang\",value:function(e){return hc(),this.sendMessageToCallMachine({action:\"set-daily-lang\",lang:e}),this}},{key:\"setProxyUrl\",value:function(e){return this.sendMessageToCallMachine({action:\"set-proxy-url\",proxyUrl:e}),this}},{key:\"setIceConfig\",value:function(e){return this.sendMessageToCallMachine({action:\"set-ice-config\",iceConfig:e}),this}},{key:\"meetingSessionSummary\",value:function(){return[_i,wi].includes(this._callState)?this._finalSummaryOfPrevSession:this._meetingSessionSummary}},{key:\"getMeetingSession\",value:($=p((function*(){var e=this;return console.warn(\"getMeetingSession() is deprecated: use meetingSessionSummary(), which will return immediately\"),sc(this._callState,\"getMeetingSession()\"),new Promise((function(t){e.sendMessageToCallMachine({action:\"get-meeting-session\"},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))})),function(){return $.apply(this,arguments)})},{key:\"meetingSessionState\",value:function(){return sc(this._callState,\"meetingSessionState\"),this._meetingSessionState}},{key:\"setMeetingSessionData\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"replace\";dc(this._callObjectMode,\"setMeetingSessionData()\"),sc(this._callState,\"setMeetingSessionData\");try{!function(e,t){new Ws({data:e,mergeStrategy:t})}(e,t)}catch(e){throw console.error(e),e}try{this.sendMessageToCallMachine({action:\"set-session-data\",data:e,mergeStrategy:t})}catch(e){throw new Error(\"Error setting meeting session data: \".concat(e))}}},{key:\"setUserName\",value:function(e,t){var n=this;return this.properties.userName=e,new Promise((function(r){n.sendMessageToCallMachine({action:\"set-user-name\",name:null!=e?e:\"\",thisMeetingOnly:ys()||!!t&&!!t.thisMeetingOnly},(function(e){delete e.action,delete e.callbackStamp,r(e)}))}))}},{key:\"setUserData\",value:(J=p((function*(e){var t=this;try{vc(e)}catch(e){throw console.error(e),e}if(this.properties.userData=e,this._callMachineInitialized)return new Promise((function(n){try{t.sendMessageToCallMachine({action:\"set-user-data\",userData:e},(function(e){delete e.action,delete e.callbackStamp,n(e)}))}catch(e){throw new Error(\"Error setting user data: \".concat(e))}}))})),function(e){return J.apply(this,arguments)})},{key:\"validateAudioLevelInterval\",value:function(e){if(e&&(e<100||\"number\"!=typeof e))throw new Error(\"The interval must be a number greater than or equal to 100 milliseconds.\")}},{key:\"startLocalAudioLevelObserver\",value:function(e){var t=this;if(\"undefined\"==typeof AudioWorkletNode&&!ys())throw new Error(\"startLocalAudioLevelObserver() is not supported on this browser\");if(this.validateAudioLevelInterval(e),this._callMachineInitialized)return this._isLocalAudioLevelObserverRunning=!0,new Promise((function(n,r){t.sendMessageToCallMachine({action:\"start-local-audio-level-observer\",interval:e},(function(e){t._isLocalAudioLevelObserverRunning=!e.error,e.error?r({error:e.error}):n()}))}));this._preloadCache.localAudioLevelObserver={enabled:!0,interval:e}}},{key:\"isLocalAudioLevelObserverRunning\",value:function(){return this._isLocalAudioLevelObserverRunning}},{key:\"stopLocalAudioLevelObserver\",value:function(){this._preloadCache.localAudioLevelObserver=null,this._localAudioLevel=0,this._isLocalAudioLevelObserverRunning=!1,this.sendMessageToCallMachine({action:\"stop-local-audio-level-observer\"})}},{key:\"startRemoteParticipantsAudioLevelObserver\",value:function(e){var t=this;if(this.validateAudioLevelInterval(e),this._callMachineInitialized)return this._isRemoteParticipantsAudioLevelObserverRunning=!0,new Promise((function(n,r){t.sendMessageToCallMachine({action:\"start-remote-participants-audio-level-observer\",interval:e},(function(e){t._isRemoteParticipantsAudioLevelObserverRunning=!e.error,e.error?r({error:e.error}):n()}))}));this._preloadCache.remoteParticipantsAudioLevelObserver={enabled:!0,interval:e}}},{key:\"isRemoteParticipantsAudioLevelObserverRunning\",value:function(){return this._isRemoteParticipantsAudioLevelObserverRunning}},{key:\"stopRemoteParticipantsAudioLevelObserver\",value:function(){this._preloadCache.remoteParticipantsAudioLevelObserver=null,this._remoteParticipantsAudioLevel={},this._isRemoteParticipantsAudioLevelObserverRunning=!1,this.sendMessageToCallMachine({action:\"stop-remote-participants-audio-level-observer\"})}},{key:\"startCamera\",value:(V=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(dc(this._callObjectMode,\"startCamera()\"),cc(this._callState,this._isPreparingToJoin,\"startCamera()\",\"Did you mean to use setLocalAudio() and/or setLocalVideo() instead?\"),this.needsLoad())try{yield this.load(t)}catch(e){return Promise.reject(e)}else{if(this._didPreAuth){if(t.url&&t.url!==this.properties.url)return console.error(\"url in startCamera() is different than the one used in preAuth()\"),Promise.reject();if(t.token&&t.token!==this.properties.token)return console.error(\"token in startCamera() is different than the one used in preAuth()\"),Promise.reject()}this.validateProperties(t),this.properties=Va(Va({},this.properties),t)}return new Promise((function(t){e._preloadCache.inputSettings=e._prepInputSettingsForSharing(e._inputSettings,!1),e.sendMessageToCallMachine({action:\"start-camera\",properties:oc(e.properties,e.callClientId),preloadCache:oc(e._preloadCache,e.callClientId)},(function(e){t({camera:e.camera,mic:e.mic,speaker:e.speaker})}))}))})),function(){return V.apply(this,arguments)})},{key:\"validateCustomTrack\",value:function(e,t,n){if(n&&n.length>50)throw new Error(\"Custom track `trackName` must not be more than 50 characters\");if(t&&\"music\"!==t&&\"speech\"!==t&&!(t instanceof Object))throw new Error(\"Custom track `mode` must be either `music` | `speech` | `DailyMicAudioModeSettings` or `undefined`\");if(!!n&&[\"cam-audio\",\"cam-video\",\"screen-video\",\"screen-audio\",\"rmpAudio\",\"rmpVideo\",\"customVideoDefaults\"].includes(n))throw new Error(\"Custom track `trackName` must not match a track name already used by daily: cam-audio, cam-video, customVideoDefaults, screen-video, screen-audio, rmpAudio, rmpVideo\");if(!(e instanceof MediaStreamTrack))throw new Error(\"Custom tracks provided must be instances of MediaStreamTrack\")}},{key:\"startCustomTrack\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{track:track,mode:mode,trackName:trackName};return hc(),sc(this._callState,\"startCustomTrack()\"),this.validateCustomTrack(t.track,t.mode,t.trackName),new Promise((function(n,r){e._sharedTracks.customTrack=t.track,t.track=ls,e.sendMessageToCallMachine({action:\"start-custom-track\",properties:t},(function(e){e.error?r({error:e.error}):n(e.mediaTag)}))}))}},{key:\"stopCustomTrack\",value:function(e){var t=this;return hc(),sc(this._callState,\"stopCustomTrack()\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"stop-custom-track\",mediaTag:e},(function(e){n(e.mediaTag)}))}))}},{key:\"setCamera\",value:function(e){var t=this;return fc(),lc(this._callMachineInitialized,\"setCamera()\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"set-camera\",cameraDeviceId:e},(function(e){n({device:e.device})}))}))}},{key:\"setAudioDevice\",value:(U=p((function*(e){return fc(),this.nativeUtils().setAudioDevice(e),{deviceId:yield this.nativeUtils().getAudioDevice()}})),function(e){return U.apply(this,arguments)})},{key:\"cycleCamera\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Promise((function(n){e.sendMessageToCallMachine({action:\"cycle-camera\",properties:t},(function(e){n({device:e.device})}))}))}},{key:\"cycleMic\",value:function(){var e=this;return hc(),new Promise((function(t){e.sendMessageToCallMachine({action:\"cycle-mic\"},(function(e){t({device:e.device})}))}))}},{key:\"getCameraFacingMode\",value:function(){var e=this;return fc(),new Promise((function(t){e.sendMessageToCallMachine({action:\"get-camera-facing-mode\"},(function(e){t(e.facingMode)}))}))}},{key:\"setInputDevicesAsync\",value:(B=p((function*(e){var t=this,n=e.audioDeviceId,r=e.videoDeviceId,i=e.audioSource,o=e.videoSource;if(hc(),void 0!==i&&(n=i),void 0!==o&&(r=o),\"boolean\"==typeof n&&(this._setAllowLocalAudio(n),n=void 0),\"boolean\"==typeof r&&(this._setAllowLocalVideo(r),r=void 0),!n&&!r)return yield this.getInputDevices();var s={};return n&&(n instanceof MediaStreamTrack?(this._sharedTracks.audioTrack=n,n=ls,s.audio={settings:{customTrack:n}}):(delete this._sharedTracks.audioTrack,s.audio={settings:{deviceId:n}})),r&&(r instanceof MediaStreamTrack?(this._sharedTracks.videoTrack=r,r=ls,s.video={settings:{customTrack:r}}):(delete this._sharedTracks.videoTrack,s.video={settings:{deviceId:r}})),this._callObjectMode&&this.needsLoad()?(this._updatePreloadCacheInputSettings(s,!1),this._devicesFromInputSettings(this._inputSettings)):new Promise((function(e){t.sendMessageToCallMachine({action:\"set-input-devices\",audioDeviceId:n,videoDeviceId:r},(function(n){if(delete n.action,delete n.callbackStamp,n.returnPreloadCache)return t._updatePreloadCacheInputSettings(s,!1),void e(t._devicesFromInputSettings(t._inputSettings));e(n)}))}))})),function(e){return B.apply(this,arguments)})},{key:\"setOutputDeviceAsync\",value:(F=p((function*(e){var t=this,n=e.outputDeviceId;return hc(),n&&(this._preloadCache.outputDeviceId=n),this._callObjectMode&&this.needsLoad()?this._devicesFromInputSettings(this._inputSettings):new Promise((function(e){t.sendMessageToCallMachine({action:\"set-output-device\",outputDeviceId:n},(function(n){delete n.action,delete n.callbackStamp,n.returnPreloadCache?e(t._devicesFromInputSettings(t._inputSettings)):e(n)}))}))})),function(e){return F.apply(this,arguments)})},{key:\"getInputDevices\",value:(R=p((function*(){var e=this;return this._callObjectMode&&this.needsLoad()?this._devicesFromInputSettings(this._inputSettings):new Promise((function(t){e.sendMessageToCallMachine({action:\"get-input-devices\"},(function(n){n.returnPreloadCache?t(e._devicesFromInputSettings(e._inputSettings)):t({camera:n.camera,mic:n.mic,speaker:n.speaker})}))}))})),function(){return R.apply(this,arguments)})},{key:\"nativeInCallAudioMode\",value:function(){return fc(),this._nativeInCallAudioMode}},{key:\"setNativeInCallAudioMode\",value:function(e){if(fc(),[Wa,Ha].includes(e)){if(e!==this._nativeInCallAudioMode)return this._nativeInCallAudioMode=e,!this.disableReactNativeAutoDeviceManagement(\"audio\")&&ac(this._callState,this._isPreparingToJoin)&&this.nativeUtils().setAudioMode(this._nativeInCallAudioMode),this}else console.error(\"invalid in-call audio mode specified: \",e)}},{key:\"preAuth\",value:(D=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(dc(this._callObjectMode,\"preAuth()\"),cc(this._callState,this._isPreparingToJoin,\"preAuth()\"),this.needsLoad()&&(yield this.load(t)),!t.url)throw new Error(\"preAuth() requires at least a url to be provided\");return this.validateProperties(t),this.properties=Va(Va({},this.properties),t),new Promise((function(t,n){e._preloadCache.inputSettings=e._prepInputSettingsForSharing(e._inputSettings,!1),e.sendMessageToCallMachine({action:\"daily-method-preauth\",properties:oc(e.properties,e.callClientId),preloadCache:oc(e._preloadCache,e.callClientId)},(function(r){return r.error?n(r.error):r.access?(e._didPreAuth=!0,void t({access:r.access})):n(new Error(\"unknown error in preAuth()\"))}))}))})),function(){return D.apply(this,arguments)})},{key:\"load\",value:(L=p((function*(e){var t=this;if(this.needsLoad()){if(this._destroyed&&(this._logUseAfterDestroy(),this.strictMode))throw new Error(\"Use after destroy\");if(e&&(this.validateProperties(e),this.properties=Va(Va({},this.properties),e)),!this._callObjectMode&&!this.properties.url)throw new Error(\"can't load iframe meeting because url property isn't set\");return this._updateCallState(gi),this.emitDailyJSEvent({action:to}),this._callObjectMode?new Promise((function(e,n){t._callObjectLoader.cancel();var r=Date.now();t._callObjectLoader.load(t.properties.dailyConfig,(function(n){t._bundleLoadTime=n?\"no-op\":Date.now()-r,t._updateCallState(mi),n&&t.emitDailyJSEvent({action:ro}),e()}),(function(e,r){if(t.emitDailyJSEvent({action:no}),!r){t._updateCallState(wi),t.resetMeetingDependentVars();var i={action:ns,errorMsg:e.msg,error:{type:\"connection-error\",msg:\"Failed to load call object bundle.\",details:{on:\"load\",sourceError:e,bundleUrl:Z(t.properties.dailyConfig)}}};t._maybeSendToSentry(i),t.emitDailyJSEvent(i),n(e.msg)}}))})):(this._iframe.src=X(this.assembleMeetingUrl(),this.properties.dailyConfig),new Promise((function(e,n){t._loadedCallback=function(r){t._callState!==wi?(t._updateCallState(mi),(t.properties.cssFile||t.properties.cssText)&&t.loadCss(t.properties),e()):n(r)}})))}})),function(e){return L.apply(this,arguments)})},{key:\"join\",value:(I=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._testCallInProgress&&this.stopTestCallQuality();var n=!1;if(this.needsLoad()){this.updateIsPreparingToJoin(!0);try{yield this.load(t)}catch(e){return this.updateIsPreparingToJoin(!1),Promise.reject(e)}}else{if(n=!(!this.properties.cssFile&&!this.properties.cssText),this._didPreAuth){if(t.url&&t.url!==this.properties.url)return console.error(\"url in join() is different than the one used in preAuth()\"),this.updateIsPreparingToJoin(!1),Promise.reject();if(t.token&&t.token!==this.properties.token)return console.error(\"token in join() is different than the one used in preAuth()\"),this.updateIsPreparingToJoin(!1),Promise.reject()}if(t.url&&!this._callObjectMode&&t.url&&t.url!==this.properties.url)return console.error(\"url in join() is different than the one used in load() (\".concat(this.properties.url,\" -> \").concat(t.url,\")\")),this.updateIsPreparingToJoin(!1),Promise.reject();this.validateProperties(t),this.properties=Va(Va({},this.properties),t)}return void 0!==t.showLocalVideo&&(this._callObjectMode?console.error(\"showLocalVideo is not available in callObject mode\"):this._showLocalVideo=!!t.showLocalVideo),void 0!==t.showParticipantsBar&&(this._callObjectMode?console.error(\"showParticipantsBar is not available in callObject mode\"):this._showParticipantsBar=!!t.showParticipantsBar),this._callState===bi||this._callState===yi?(console.warn(\"already joined meeting, call leave() before joining again\"),void this.updateIsPreparingToJoin(!1)):(this._updateCallState(yi,!1),this.emitDailyJSEvent({action:so}),this._preloadCache.inputSettings=this._prepInputSettingsForSharing(this._inputSettings||{},!1),this.sendMessageToCallMachine({action:\"join-meeting\",properties:oc(this.properties,this.callClientId),preloadCache:oc(this._preloadCache,this.callClientId)}),new Promise((function(t,r){e._joinedCallback=function(i,o){if(e._callState!==wi){if(e._updateCallState(bi),i)for(var s in i){if(e._callObjectMode){var a=e._callMachine().store;ua(i[s],a),da(i[s],a),ha(i[s],e._participants[s],a)}e._participants[s]=Va({},i[s]),e.toggleParticipantAudioBasedOnNativeAudioFocus()}n&&e.loadCss(e.properties),t(i)}else r(o)}})))})),function(){return I.apply(this,arguments)})},{key:\"leave\",value:(j=p((function*(){var e=this;return this._testCallInProgress&&this.stopTestCallQuality(),new Promise((function(t){e._callState===_i||e._callState===wi?t():e._callObjectLoader&&!e._callObjectLoader.loaded?(e._callObjectLoader.cancel(),e._updateCallState(_i),e.resetMeetingDependentVars(),e.emitDailyJSEvent({action:_i}),t()):(e._resolveLeave=t,e.sendMessageToCallMachine({action:\"leave-meeting\"}))}))})),function(){return j.apply(this,arguments)})},{key:\"startScreenShare\",value:(A=p((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(lc(this._callMachineInitialized,\"startScreenShare()\"),t.screenVideoSendSettings&&this._validateVideoSendSettings(\"screenVideo\",t.screenVideoSendSettings),t.mediaStream&&(this._sharedTracks.screenMediaStream=t.mediaStream,t.mediaStream=ls),\"undefined\"!=typeof DailyNativeUtils&&void 0!==DailyNativeUtils.isIOS&&DailyNativeUtils.isIOS){var n=this.nativeUtils();if(yield n.isScreenBeingCaptured())return void this.emitDailyJSEvent({action:ts,type:\"screen-share-error\",errorMsg:\"Could not start the screen sharing. The screen is already been captured!\"});n.setSystemScreenCaptureStartCallback((function(){n.setSystemScreenCaptureStartCallback(null),e.sendMessageToCallMachine({action:ss,captureOptions:t})})),n.presentSystemScreenCapturePrompt()}else this.sendMessageToCallMachine({action:ss,captureOptions:t})})),function(){return A.apply(this,arguments)})},{key:\"stopScreenShare\",value:function(){lc(this._callMachineInitialized,\"stopScreenShare()\"),this.sendMessageToCallMachine({action:\"local-screen-stop\"})}},{key:\"startRecording\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.type;if(t&&\"cloud\"!==t&&\"raw-tracks\"!==t&&\"local\"!==t)throw new Error(\"invalid type: \".concat(t,\", allowed values 'cloud', 'raw-tracks', or 'local'\"));this.sendMessageToCallMachine(Va({action:\"local-recording-start\"},e))}},{key:\"updateRecording\",value:function(e){var t=e.layout,n=void 0===t?{preset:\"default\"}:t,r=e.instanceId;this.sendMessageToCallMachine({action:\"daily-method-update-recording\",layout:n,instanceId:r})}},{key:\"stopRecording\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(Va({action:\"local-recording-stop\"},e))}},{key:\"startLiveStreaming\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(Va({action:\"daily-method-start-live-streaming\"},e))}},{key:\"updateLiveStreaming\",value:function(e){var t=e.layout,n=void 0===t?{preset:\"default\"}:t,r=e.instanceId;this.sendMessageToCallMachine({action:\"daily-method-update-live-streaming\",layout:n,instanceId:r})}},{key:\"addLiveStreamingEndpoints\",value:function(e){var t=e.endpoints,n=e.instanceId;this.sendMessageToCallMachine({action:as,endpointsOp:fs,endpoints:t,instanceId:n})}},{key:\"removeLiveStreamingEndpoints\",value:function(e){var t=e.endpoints,n=e.instanceId;this.sendMessageToCallMachine({action:as,endpointsOp:vs,endpoints:t,instanceId:n})}},{key:\"stopLiveStreaming\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(Va({action:\"daily-method-stop-live-streaming\"},e))}},{key:\"validateDailyConfig\",value:function(e){e.camSimulcastEncodings&&(console.warn(\"camSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide camera simulcast settings.\"),this.validateSimulcastEncodings(e.camSimulcastEncodings)),e.screenSimulcastEncodings&&console.warn(\"screenSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide screen simulcast settings.\"),Es()&&e.noAutoDefaultDeviceChange&&console.warn(\"noAutoDefaultDeviceChange is not supported on Android, and will be ignored.\")}},{key:\"validateSimulcastEncodings\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(e){if(!(e instanceof Array||Array.isArray(e)))throw new Error(\"encodings must be an Array\");if(!Ac(e.length,1,3))throw new Error(\"encodings must be an Array with between 1 to \".concat(3,\" layers\"));for(var r=0;r<e.length;r++){var i=e[r];for(var o in this._validateEncodingLayerHasValidProperties(i),i)if(Ya.includes(o)){if(\"number\"!=typeof i[o])throw new Error(\"\".concat(o,\" must be a number\"));if(t){var s=t[o],a=s.min,c=s.max;if(!Ac(i[o],a,c))throw new Error(\"\".concat(o,\" value not in range. valid range: \").concat(a,\" to \").concat(c))}}else if(![\"active\",\"scalabilityMode\"].includes(o))throw new Error(\"Invalid key \".concat(o,\", valid keys are:\")+Object.values(Ya));if(n&&!i.hasOwnProperty(\"maxBitrate\"))throw new Error(\"maxBitrate is not specified\")}}}},{key:\"startRemoteMediaPlayer\",value:(P=p((function*(e){var t=this,n=e.url,r=e.settings,i=void 0===r?{state:ps.PLAY}:r;try{!function(e){if(\"string\"!=typeof e)throw new Error('url parameter must be \"string\" type')}(n),Pc(i),function(e){for(var t in e)if(!Xa.includes(t))throw new Error(\"Invalid key \".concat(t,\", valid keys are: \").concat(Xa));e.simulcastEncodings&&this.validateSimulcastEncodings(e.simulcastEncodings,Ka,!0)}(i)}catch(e){throw console.error(\"invalid argument Error: \".concat(e)),console.error('startRemoteMediaPlayer arguments must be of the form:\\n  { url: \"playback url\",\\n  settings?:\\n  {state: \"play\"|\"pause\", simulcastEncodings?: [{}] } }'),e}return new Promise((function(e,r){t.sendMessageToCallMachine({action:\"daily-method-start-remote-media-player\",url:n,settings:i},(function(t){t.error?r({error:t.error,errorMsg:t.errorMsg}):e({session_id:t.session_id,remoteMediaPlayerState:{state:t.state,settings:t.settings}})}))}))})),function(e){return P.apply(this,arguments)})},{key:\"stopRemoteMediaPlayer\",value:(O=p((function*(e){var t=this;if(\"string\"!=typeof e)throw new Error(\" remotePlayerID must be of type string\");return new Promise((function(n,r){t.sendMessageToCallMachine({action:\"daily-method-stop-remote-media-player\",session_id:e},(function(e){e.error?r({error:e.error,errorMsg:e.errorMsg}):n()}))}))})),function(e){return O.apply(this,arguments)})},{key:\"updateRemoteMediaPlayer\",value:(T=p((function*(e){var t=this,n=e.session_id,r=e.settings;try{Pc(r)}catch(e){throw console.error(\"invalid argument Error: \".concat(e)),console.error('updateRemoteMediaPlayer arguments must be of the form:\\n  session_id: \"participant session\",\\n  { settings?: {state: \"play\"|\"pause\"} }'),e}return new Promise((function(e,i){t.sendMessageToCallMachine({action:\"daily-method-update-remote-media-player\",session_id:n,settings:r},(function(t){t.error?i({error:t.error,errorMsg:t.errorMsg}):e({session_id:t.session_id,remoteMediaPlayerState:{state:t.state,settings:t.settings}})}))}))})),function(e){return T.apply(this,arguments)})},{key:\"startTranscription\",value:function(e){sc(this._callState,\"startTranscription()\"),this.sendMessageToCallMachine(Va({action:\"daily-method-start-transcription\"},e))}},{key:\"updateTranscription\",value:function(e){if(sc(this._callState,\"updateTranscription()\"),!e)throw new Error(\"updateTranscription Error: options is mandatory\");if(\"object\"!==n(e))throw new Error(\"updateTranscription Error: options must be object type\");if(e.participants&&!Array.isArray(e.participants))throw new Error(\"updateTranscription Error: participants must be an array\");this.sendMessageToCallMachine(Va({action:\"daily-method-update-transcription\"},e))}},{key:\"stopTranscription\",value:function(e){if(sc(this._callState,\"stopTranscription()\"),e&&\"object\"!==n(e))throw new Error(\"stopTranscription Error: options must be object type\");if(e&&!e.instanceId)throw new Error('\"instanceId\" not provided');this.sendMessageToCallMachine(Va({action:\"daily-method-stop-transcription\"},e))}},{key:\"startDialOut\",value:(E=p((function*(e){var t=this;sc(this._callState,\"startDialOut()\");var n=function(e){if(e){if(!Array.isArray(e))throw new Error(\"Error starting dial out: audio codec must be an array\");if(e.length<=0)throw new Error(\"Error starting dial out: audio codec array specified but empty\");e.forEach((function(e){if(\"string\"!=typeof e)throw new Error(\"Error starting dial out: audio codec must be a string\");if(\"OPUS\"!==e&&\"PCMU\"!==e&&\"PCMA\"!==e&&\"G722\"!==e)throw new Error(\"Error starting dial out: audio codec must be one of OPUS, PCMU, PCMA, G722\")}))}};if(!e.sipUri&&!e.phoneNumber)throw new Error(\"Error starting dial out: either a sip uri or phone number must be provided\");if(e.sipUri&&e.phoneNumber)throw new Error(\"Error starting dial out: only one of sip uri or phone number must be provided\");if(e.sipUri){if(\"string\"!=typeof e.sipUri)throw new Error(\"Error starting dial out: sipUri must be a string\");if(!e.sipUri.startsWith(\"sip:\"))throw new Error(\"Error starting dial out: Invalid SIP URI, must start with 'sip:'\");if(e.video&&\"boolean\"!=typeof e.video)throw new Error(\"Error starting dial out: video must be a boolean value\");!function(e){if(e&&(n(e.audio),e.video)){if(!Array.isArray(e.video))throw new Error(\"Error starting dial out: video codec must be an array\");if(e.video.length<=0)throw new Error(\"Error starting dial out: video codec array specified but empty\");e.video.forEach((function(e){if(\"string\"!=typeof e)throw new Error(\"Error starting dial out: video codec must be a string\");if(\"H264\"!==e&&\"VP8\"!==e)throw new Error(\"Error starting dial out: video codec must be H264 or VP8\")}))}}(e.codecs)}if(e.phoneNumber){if(\"string\"!=typeof e.phoneNumber)throw new Error(\"Error starting dial out: phoneNumber must be a string\");if(!/^\\+\\d{1,}$/.test(e.phoneNumber))throw new Error(\"Error starting dial out: Invalid phone number, must be valid phone number as per E.164\");e.codecs&&n(e.codecs.audio)}if(e.callerId){if(\"string\"!=typeof e.callerId)throw new Error(\"Error starting dial out: callerId must be a string\");if(e.sipUri)throw new Error(\"Error starting dial out: callerId not allowed with sipUri\")}if(e.displayName){if(\"string\"!=typeof e.displayName)throw new Error(\"Error starting dial out: displayName must be a string\");if(e.displayName.length>=200)throw new Error(\"Error starting dial out: displayName length must be less than 200\")}if(e.userId){if(\"string\"!=typeof e.userId)throw new Error(\"Error starting dial out: userId must be a string\");if(e.userId.length>36)throw new Error(\"Error starting dial out: userId length must be less than or equal to 36\")}return new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:\"dialout-start\"},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return E.apply(this,arguments)})},{key:\"stopDialOut\",value:function(e){var t=this;return sc(this._callState,\"stopDialOut()\"),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:\"dialout-stop\"},e),(function(e){e.error?r(e.error):n(e)}))}))}},{key:\"sipCallTransfer\",value:(C=p((function*(e){var t=this;if(sc(this._callState,\"sipCallTransfer()\"),!e)throw new Error(\"sipCallTransfer() requires a sessionId and toEndPoint\");return e.useSipRefer=!1,Oc(e,\"sipCallTransfer\"),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:gs},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return C.apply(this,arguments)})},{key:\"sipRefer\",value:(M=p((function*(e){var t=this;if(sc(this._callState,\"sipRefer()\"),!e)throw new Error(\"sessionId and toEndPoint are mandatory parameter\");return e.useSipRefer=!0,Oc(e,\"sipRefer\"),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:gs},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return M.apply(this,arguments)})},{key:\"sendDTMF\",value:(k=p((function*(e){var t=this;return sc(this._callState,\"sendDTMF()\"),function(e){var t=e.sessionId,n=e.tones;if(!t||!n)throw new Error(\"sessionId and tones are mandatory parameter\");if(\"string\"!=typeof t||\"string\"!=typeof n)throw new Error(\"sessionId and tones should be of string type\");if(n.length>20)throw new Error(\"tones string must be upto 20 characters\");var r=/[^0-9A-D*#]/g,i=n.match(r);if(i&&i[0])throw new Error(\"\".concat(i[0],\" is not valid DTMF tone\"))}(e),new Promise((function(n,r){t.sendMessageToCallMachine(Va({action:\"send-dtmf\"},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return k.apply(this,arguments)})},{key:\"getNetworkStats\",value:function(){var e=this;if(this._callState!==bi){return Promise.resolve(Va({stats:{latest:{}}},this._network))}return new Promise((function(t){e.sendMessageToCallMachine({action:\"get-calc-stats\"},(function(n){t(Va(Va({},e._network),{},{stats:n.stats}))}))}))}},{key:\"testWebsocketConnectivity\",value:(S=p((function*(){var e=this;if(uc(this._testCallInProgress,\"testWebsocketConnectivity()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}return new Promise((function(t,n){e.sendMessageToCallMachine({action:\"test-websocket-connectivity\"},(function(e){e.error?n(e.error):t(e.results)}))}))})),function(){return S.apply(this,arguments)})},{key:\"abortTestWebsocketConnectivity\",value:function(){this.sendMessageToCallMachine({action:\"abort-test-websocket-connectivity\"})}},{key:\"_validateVideoTrackForNetworkTests\",value:function(e){return e?e instanceof MediaStreamTrack?!!Ea(e,{isLocalScreenVideo:!1})||(console.error(\"Video track is not playable. This test needs a live video track.\"),!1):(console.error(\"Video track needs to be of type `MediaStreamTrack`.\"),!1):(console.error(\"Missing video track. You must provide a video track in order to run this test.\"),!1)}},{key:\"testCallQuality\",value:(w=p((function*(){var t=this;hc(),dc(this._callObjectMode,\"testCallQuality()\"),lc(this._callMachineInitialized,\"testCallQuality()\",null,!0),cc(this._callState,this._isPreparingToJoin,\"testCallQuality()\");var n=this._testCallAlreadyInProgress,r=function(e){n||(t._testCallInProgress=e)};if(r(!0),this.needsLoad())try{var i=this._callState;yield this.load(),this._callState=i}catch(e){return r(!1),Promise.reject(e)}return new Promise((function(n){t.sendMessageToCallMachine({action:\"test-call-quality\",dailyJsVersion:t.properties.dailyJsVersion},(function(i){var o=i.results,s=o.result,a=e(o,Fa);if(\"failed\"===s){var c,l=Va({},a);null!==(c=a.error)&&void 0!==c&&c.details?(a.error.details=JSON.parse(a.error.details),l.error=Va(Va({},l.error),{},{details:Va({},l.error.details)}),l.error.details.duringTest=\"testCallQuality\"):(l.error=l.error?Va({},l.error):{},l.error.details={duringTest:\"testCallQuality\"}),t._maybeSendToSentry(l)}r(!1),n(Va({result:s},a))}))}))})),function(){return w.apply(this,arguments)})},{key:\"stopTestCallQuality\",value:function(){this.sendMessageToCallMachine({action:\"stop-test-call-quality\"})}},{key:\"testConnectionQuality\",value:(_=p((function*(e){var t;ys()?(console.warn(\"testConnectionQuality() is deprecated: use testPeerToPeerCallQuality() instead\"),t=yield this.testPeerToPeerCallQuality(e)):(console.warn(\"testConnectionQuality() is deprecated: use testCallQuality() instead\"),t=yield this.testCallQuality());var n={result:t.result,secondsElapsed:t.secondsElapsed};return t.data&&(n.data={maxRTT:t.data.maxRoundTripTime,packetLoss:t.data.avgRecvPacketLoss}),n})),function(e){return _.apply(this,arguments)})},{key:\"testPeerToPeerCallQuality\",value:(b=p((function*(e){var t=this;if(uc(this._testCallInProgress,\"testPeerToPeerCallQuality()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}var n=e.videoTrack,r=e.duration;if(!this._validateVideoTrackForNetworkTests(n))throw new Error(\"Video track error\");return this._sharedTracks.videoTrackForConnectionQualityTest=n,new Promise((function(e,n){t.sendMessageToCallMachine({action:\"test-p2p-call-quality\",duration:r},(function(t){t.error?n(t.error):e(t.results)}))}))})),function(e){return b.apply(this,arguments)})},{key:\"stopTestConnectionQuality\",value:function(){ys()?(console.warn(\"stopTestConnectionQuality() is deprecated: use testPeerToPeerCallQuality() and stopTestPeerToPeerCallQuality() instead\"),this.stopTestPeerToPeerCallQuality()):(console.warn(\"stopTestConnectionQuality() is deprecated: use testCallQuality() and stopTestCallQuality() instead\"),this.stopTestCallQuality())}},{key:\"stopTestPeerToPeerCallQuality\",value:function(){this.sendMessageToCallMachine({action:\"stop-test-p2p-call-quality\"})}},{key:\"testNetworkConnectivity\",value:(y=p((function*(e){var t=this;if(uc(this._testCallInProgress,\"testNetworkConnectivity()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}if(!this._validateVideoTrackForNetworkTests(e))throw new Error(\"Video track error\");return this._sharedTracks.videoTrackForNetworkConnectivityTest=e,new Promise((function(e,n){t.sendMessageToCallMachine({action:\"test-network-connectivity\"},(function(t){t.error?n(t.error):e(t.results)}))}))})),function(e){return y.apply(this,arguments)})},{key:\"abortTestNetworkConnectivity\",value:function(){this.sendMessageToCallMachine({action:\"abort-test-network-connectivity\"})}},{key:\"getCpuLoadStats\",value:function(){var e=this;return new Promise((function(t){if(e._callState===bi){e.sendMessageToCallMachine({action:\"get-cpu-load-stats\"},(function(e){t(e.cpuStats)}))}else t({cpuLoadState:void 0,cpuLoadStateReason:void 0,stats:{}})}))}},{key:\"_validateEncodingLayerHasValidProperties\",value:function(e){var t;if(!((null===(t=Object.keys(e))||void 0===t?void 0:t.length)>0))throw new Error(\"Empty encoding is not allowed. At least one of these valid keys should be specified:\"+Object.values(Ya))}},{key:\"_validateVideoSendSettings\",value:function(e,t){var r=\"screenVideo\"===e?[\"default-screen-video\",\"detail-optimized\",\"motion-optimized\",\"motion-and-detail-balanced\"]:[\"default-video\",\"bandwidth-optimized\",\"bandwidth-and-quality-balanced\",\"quality-optimized\",\"adaptive-2-layers\",\"adaptive-3-layers\"],i=\"Video send settings should be either an object or one of the supported presets: \".concat(r.join());if(\"string\"==typeof t){if(!r.includes(t))throw new Error(i)}else{if(\"object\"!==n(t))throw new Error(i);if(!t.maxQuality&&!t.encodings&&void 0===t.allowAdaptiveLayers)throw new Error(\"Video send settings must contain at least maxQuality, allowAdaptiveLayers or encodings attribute\");if(t.maxQuality&&-1===[\"low\",\"medium\",\"high\"].indexOf(t.maxQuality))throw new Error(\"maxQuality must be either low, medium or high\");if(t.encodings){var o=!1;switch(Object.keys(t.encodings).length){case 1:o=!t.encodings.low;break;case 2:o=!t.encodings.low||!t.encodings.medium;break;case 3:o=!t.encodings.low||!t.encodings.medium||!t.encodings.high;break;default:o=!0}if(o)throw new Error(\"Encodings must be defined as: low, low and medium, or low, medium and high.\");t.encodings.low&&this._validateEncodingLayerHasValidProperties(t.encodings.low),t.encodings.medium&&this._validateEncodingLayerHasValidProperties(t.encodings.medium),t.encodings.high&&this._validateEncodingLayerHasValidProperties(t.encodings.high)}}}},{key:\"validateUpdateSendSettings\",value:function(e){var t=this;if(!e||0===Object.keys(e).length)throw new Error(\"Send settings must contain at least information for one track!\");Object.entries(e).forEach((function(e){var n=f(e,2),r=n[0],i=n[1];t._validateVideoSendSettings(r,i)}))}},{key:\"updateSendSettings\",value:function(e){var t=this;return this.validateUpdateSendSettings(e),this.needsLoad()?(this._preloadCache.sendSettings=e,{sendSettings:this._preloadCache.sendSettings}):new Promise((function(n,r){t.sendMessageToCallMachine({action:\"update-send-settings\",sendSettings:e},(function(e){e.error?r(e.error):n(e.sendSettings)}))}))}},{key:\"getSendSettings\",value:function(){return this._sendSettings||this._preloadCache.sendSettings}},{key:\"getLocalAudioLevel\",value:function(){return this._localAudioLevel}},{key:\"getRemoteParticipantsAudioLevel\",value:function(){return this._remoteParticipantsAudioLevel}},{key:\"getActiveSpeaker\",value:function(){return hc(),this._activeSpeaker}},{key:\"setActiveSpeakerMode\",value:function(e){return hc(),this.sendMessageToCallMachine({action:\"set-active-speaker-mode\",enabled:e}),this}},{key:\"activeSpeakerMode\",value:function(){return hc(),this._activeSpeakerMode}},{key:\"subscribeToTracksAutomatically\",value:function(){return this._preloadCache.subscribeToTracksAutomatically}},{key:\"setSubscribeToTracksAutomatically\",value:function(e){return sc(this._callState,\"setSubscribeToTracksAutomatically()\",\"Use the subscribeToTracksAutomatically configuration property.\"),this._preloadCache.subscribeToTracksAutomatically=e,this.sendMessageToCallMachine({action:\"daily-method-subscribe-to-tracks-automatically\",enabled:e}),this}},{key:\"enumerateDevices\",value:(m=p((function*(){var e=this;if(this._callObjectMode){var t=yield navigator.mediaDevices.enumerateDevices();return\"Firefox\"===Os()&&Ps().major>115&&Ps().major<123&&(t=t.filter((function(e){return\"audiooutput\"!==e.kind}))),{devices:t.map((function(e){var t=JSON.parse(JSON.stringify(e));if(!ys()&&\"videoinput\"===e.kind&&e.getCapabilities){var n,r=e.getCapabilities();t.facing=(null==r||null===(n=r.facingMode)||void 0===n?void 0:n.length)>=1?r.facingMode[0]:void 0}return t}))}}return new Promise((function(t){e.sendMessageToCallMachine({action:\"enumerate-devices\"},(function(e){t({devices:e.devices})}))}))})),function(){return m.apply(this,arguments)})},{key:\"sendAppMessage\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"*\";if(sc(this._callState,\"sendAppMessage()\"),JSON.stringify(e).length>this._maxAppMessageSize)throw new Error(\"Message data too large. Max size is \"+this._maxAppMessageSize);return this.sendMessageToCallMachine({action:\"app-msg\",data:e,to:t}),this}},{key:\"addFakeParticipant\",value:function(e){return hc(),sc(this._callState,\"addFakeParticipant()\"),this.sendMessageToCallMachine(Va({action:\"add-fake-participant\"},e)),this}},{key:\"setShowNamesMode\",value:function(e){return pc(this._callObjectMode,\"setShowNamesMode()\"),hc(),e&&\"always\"!==e&&\"never\"!==e?(console.error('setShowNamesMode argument should be \"always\", \"never\", or false'),this):(this.sendMessageToCallMachine({action:\"set-show-names\",mode:e}),this)}},{key:\"setShowLocalVideo\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return pc(this._callObjectMode,\"setShowLocalVideo()\"),hc(),sc(this._callState,\"setShowLocalVideo()\"),\"boolean\"!=typeof e?(console.error(\"setShowLocalVideo only accepts a boolean value\"),this):(this.sendMessageToCallMachine({action:\"set-show-local-video\",show:e}),this._showLocalVideo=e,this)}},{key:\"showLocalVideo\",value:function(){return pc(this._callObjectMode,\"showLocalVideo()\"),hc(),this._showLocalVideo}},{key:\"setShowParticipantsBar\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return pc(this._callObjectMode,\"setShowParticipantsBar()\"),hc(),sc(this._callState,\"setShowParticipantsBar()\"),\"boolean\"!=typeof e?(console.error(\"setShowParticipantsBar only accepts a boolean value\"),this):(this.sendMessageToCallMachine({action:\"set-show-participants-bar\",show:e}),this._showParticipantsBar=e,this)}},{key:\"showParticipantsBar\",value:function(){return pc(this._callObjectMode,\"showParticipantsBar()\"),hc(),this._showParticipantsBar}},{key:\"customIntegrations\",value:function(){return hc(),pc(this._callObjectMode,\"customIntegrations()\"),this._customIntegrations}},{key:\"setCustomIntegrations\",value:function(e){return hc(),pc(this._callObjectMode,\"setCustomIntegrations()\"),sc(this._callState,\"setCustomIntegrations()\"),Ec(e)?(this.sendMessageToCallMachine({action:\"set-custom-integrations\",integrations:e}),this._customIntegrations=e,this):this}},{key:\"startCustomIntegrations\",value:function(e){var t=this;if(hc(),pc(this._callObjectMode,\"startCustomIntegrations()\"),sc(this._callState,\"startCustomIntegrations()\"),Array.isArray(e)&&e.some((function(e){return\"string\"!=typeof e}))||!Array.isArray(e)&&\"string\"!=typeof e)return console.error(\"startCustomIntegrations() only accepts string | string[]\"),this;var n=\"string\"==typeof e?[e]:e,r=n.filter((function(e){return!(e in t._customIntegrations)}));return r.length?(console.error(\"Can't find custom integration(s): \\\"\".concat(r.join(\", \"),'\"')),this):(this.sendMessageToCallMachine({action:\"start-custom-integrations\",ids:n}),this)}},{key:\"stopCustomIntegrations\",value:function(e){var t=this;if(hc(),pc(this._callObjectMode,\"stopCustomIntegrations()\"),sc(this._callState,\"stopCustomIntegrations()\"),Array.isArray(e)&&e.some((function(e){return\"string\"!=typeof e}))||!Array.isArray(e)&&\"string\"!=typeof e)return console.error(\"stopCustomIntegrations() only accepts string | string[]\"),this;var n=\"string\"==typeof e?[e]:e,r=n.filter((function(e){return!(e in t._customIntegrations)}));return r.length?(console.error(\"Can't find custom integration(s): \\\"\".concat(r.join(\", \"),'\"')),this):(this.sendMessageToCallMachine({action:\"stop-custom-integrations\",ids:n}),this)}},{key:\"customTrayButtons\",value:function(){return pc(this._callObjectMode,\"customTrayButtons()\"),hc(),this._customTrayButtons}},{key:\"updateCustomTrayButtons\",value:function(e){return pc(this._callObjectMode,\"updateCustomTrayButtons()\"),hc(),sc(this._callState,\"updateCustomTrayButtons()\"),Cc(e)?(this.sendMessageToCallMachine({action:\"update-custom-tray-buttons\",btns:e}),this._customTrayButtons=e,this):(console.error(\"updateCustomTrayButtons only accepts a dictionary of the type \".concat(JSON.stringify(ec))),this)}},{key:\"theme\",value:function(){return pc(this._callObjectMode,\"theme()\"),this.properties.theme}},{key:\"setTheme\",value:function(e){var t=this;return pc(this._callObjectMode,\"setTheme()\"),new Promise((function(n,r){try{t.validateProperties({theme:e}),t.properties.theme=Va({},e),t.sendMessageToCallMachine({action:\"set-theme\",theme:t.properties.theme});try{t.emitDailyJSEvent({action:eo,theme:t.properties.theme})}catch(e){console.log(\"could not emit 'theme-updated'\",e)}n(t.properties.theme)}catch(e){r(e)}}))}},{key:\"requestFullscreen\",value:(g=p((function*(){if(hc(),this._iframe&&!document.fullscreenElement&&ws())try{(yield this._iframe.requestFullscreen)?this._iframe.requestFullscreen():this._iframe.webkitRequestFullscreen()}catch(e){console.log(\"could not make video call fullscreen\",e)}})),function(){return g.apply(this,arguments)})},{key:\"exitFullscreen\",value:function(){hc(),document.fullscreenElement?document.exitFullscreen():document.webkitFullscreenElement&&document.webkitExitFullscreen()}},{key:\"getSidebarView\",value:(v=p((function*(){var e=this;return this._callObjectMode?(console.error(\"getSidebarView is not available in callObject mode\"),Promise.resolve(null)):new Promise((function(t){e.sendMessageToCallMachine({action:\"get-sidebar-view\"},(function(e){t(e.view)}))}))})),function(){return v.apply(this,arguments)})},{key:\"setSidebarView\",value:function(e){return this._callObjectMode?(console.error(\"setSidebarView is not available in callObject mode\"),this):(this.sendMessageToCallMachine({action:\"set-sidebar-view\",view:e}),this)}},{key:\"room\",value:(h=p((function*(){var e=this,t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).includeRoomConfigDefaults,n=void 0===t||t;return this._accessState.access===Oi||this.needsLoad()?this.properties.url?{roomUrlPendingJoin:this.properties.url}:null:new Promise((function(t){e.sendMessageToCallMachine({action:\"lib-room-info\",includeRoomConfigDefaults:n},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))})),function(){return h.apply(this,arguments)})},{key:\"geo\",value:(d=p((function*(){try{var e=yield fetch(\"https://gs.daily.co/_ks_/x-swsl/:\");return{current:(yield e.json()).geo}}catch(e){return console.error(\"geo lookup failed\",e),{current:\"\"}}})),function(){return d.apply(this,arguments)})},{key:\"setNetworkTopology\",value:(c=p((function*(e){var t=this;return hc(),sc(this._callState,\"setNetworkTopology()\"),new Promise((function(n,r){t.sendMessageToCallMachine({action:\"set-network-topology\",opts:e},(function(e){e.error?r({error:e.error}):n({workerId:e.workerId})}))}))})),function(e){return c.apply(this,arguments)})},{key:\"getNetworkTopology\",value:(i=p((function*(){var e=this;return new Promise((function(t,n){e.needsLoad()&&t({topology:\"none\"}),e.sendMessageToCallMachine({action:\"get-network-topology\"},(function(e){e.error?n({error:e.error}):t({topology:e.topology})}))}))})),function(){return i.apply(this,arguments)})},{key:\"setPlayNewParticipantSound\",value:function(e){if(hc(),\"number\"!=typeof e&&!0!==e&&!1!==e)throw new Error(\"argument to setShouldPlayNewParticipantSound should be true, false, or a number, but is \".concat(e));this.sendMessageToCallMachine({action:\"daily-method-set-play-ding\",arg:e})}},{key:\"on\",value:function(e,t){return x.prototype.on.call(this,e,t)}},{key:\"once\",value:function(e,t){return x.prototype.once.call(this,e,t)}},{key:\"off\",value:function(e,t){return x.prototype.off.call(this,e,t)}},{key:\"validateProperties\",value:function(e){var t,n;if(null!=e&&null!==(t=e.dailyConfig)&&void 0!==t&&t.userMediaAudioConstraints){var r,i;ys()||console.warn(\"userMediaAudioConstraints is deprecated. You can override constraints with inputSettings.audio.settings, found in DailyCallOptions.\");var o=e.inputSettings||{};o.audio=(null===(r=e.inputSettings)||void 0===r?void 0:r.audio)||{},o.audio.settings=(null===(i=e.inputSettings)||void 0===i||null===(i=i.audio)||void 0===i?void 0:i.settings)||{},o.audio.settings=Va(Va({},o.audio.settings),e.dailyConfig.userMediaAudioConstraints),e.inputSettings=o,delete e.dailyConfig.userMediaAudioConstraints}if(null!=e&&null!==(n=e.dailyConfig)&&void 0!==n&&n.userMediaVideoConstraints){var s,a;ys()||console.warn(\"userMediaVideoConstraints is deprecated. You can override constraints with inputSettings.video.settings, found in DailyCallOptions.\");var c=e.inputSettings||{};c.video=(null===(s=e.inputSettings)||void 0===s?void 0:s.video)||{},c.video.settings=(null===(a=e.inputSettings)||void 0===a||null===(a=a.video)||void 0===a?void 0:a.settings)||{},c.video.settings=Va(Va({},c.video.settings),e.dailyConfig.userMediaVideoConstraints),e.inputSettings=c,delete e.dailyConfig.userMediaVideoConstraints}for(var l in e){if(!nc[l])throw new Error(\"unrecognized property '\".concat(l,\"'\"));if(nc[l].validate&&!nc[l].validate(e[l],this))throw new Error(\"property '\".concat(l,\"': \").concat(nc[l].help))}}},{key:\"assembleMeetingUrl\",value:function(){var e,t,n=Va(Va({},this.properties),{},{emb:this.callClientId,embHref:encodeURIComponent(window.location.href),proxy:null!==(e=this.properties.dailyConfig)&&void 0!==e&&e.proxyUrl?encodeURIComponent(null===(t=this.properties.dailyConfig)||void 0===t?void 0:t.proxyUrl):void 0}),r=n.url.match(/\\?/)?\"&\":\"?\";return n.url+r+Object.keys(nc).filter((function(e){return nc[e].queryString&&void 0!==n[e]})).map((function(e){return\"\".concat(nc[e].queryString,\"=\").concat(n[e])})).join(\"&\")}},{key:\"needsLoad\",value:function(){return[vi,gi,_i,wi].includes(this._callState)}},{key:\"sendMessageToCallMachine\",value:function(e,t){if(this._destroyed&&(this._logUseAfterDestroy(),this.strictMode))throw new Error(\"Use after destroy\");this._messageChannel.sendMessageToCallMachine(e,t,this.callClientId,this._iframe)}},{key:\"forwardPackagedMessageToCallMachine\",value:function(e){this._messageChannel.forwardPackagedMessageToCallMachine(e,this._iframe,this.callClientId)}},{key:\"addListenerForPackagedMessagesFromCallMachine\",value:function(e){return this._messageChannel.addListenerForPackagedMessagesFromCallMachine(e,this.callClientId)}},{key:\"removeListenerForPackagedMessagesFromCallMachine\",value:function(e){this._messageChannel.removeListenerForPackagedMessagesFromCallMachine(e)}},{key:\"handleMessageFromCallMachine\",value:function(t){switch(t.action){case Xi:this.sendMessageToCallMachine(Va({action:Zi},this.properties));break;case\"call-machine-initialized\":this._callMachineInitialized=!0;var n={action:cs,level:\"log\",code:1011,stats:{event:\"bundle load\",time:\"no-op\"===this._bundleLoadTime?0:this._bundleLoadTime,preLoaded:\"no-op\"===this._bundleLoadTime,url:Z(this.properties.dailyConfig)}};this.sendMessageToCallMachine(n),this._delayDuplicateInstanceLog&&this._logDuplicateInstanceAttempt();break;case ro:this._loadedCallback&&(this._loadedCallback(),this._loadedCallback=null),this.emitDailyJSEvent(t);break;case ao:var r,i=Va({},t);delete i.internal,this._maxAppMessageSize=(null===(r=t.internal)||void 0===r?void 0:r._maxAppMessageSize)||rs,this._joinedCallback&&(this._joinedCallback(t.participants),this._joinedCallback=null),this.emitDailyJSEvent(i);break;case lo:case uo:if(this._callState===_i)return;if(t.participant&&t.participant.session_id){var o=t.participant.local?\"local\":t.participant.session_id;if(this._callObjectMode){var s=this._callMachine().store;ua(t.participant,s),da(t.participant,s),ha(t.participant,this._participants[o],s)}try{this.maybeParticipantTracksStopped(this._participants[o],t.participant),this.maybeParticipantTracksStarted(this._participants[o],t.participant),this.maybeEventRecordingStopped(this._participants[o],t.participant),this.maybeEventRecordingStarted(this._participants[o],t.participant)}catch(e){console.error(\"track events error\",e)}this.compareEqualForParticipantUpdateEvent(t.participant,this._participants[o])||(this._participants[o]=Va({},t.participant),this.toggleParticipantAudioBasedOnNativeAudioFocus(),this.emitDailyJSEvent(t))}break;case po:if(t.participant&&t.participant.session_id){var a=this._participants[t.participant.session_id];a&&this.maybeParticipantTracksStopped(a,null),delete this._participants[t.participant.session_id],this.emitDailyJSEvent(t)}break;case ho:N(this._participantCounts,t.participantCounts)||(this._participantCounts=t.participantCounts,this.emitDailyJSEvent(t));break;case fo:var c={access:t.access};t.awaitingAccess&&(c.awaitingAccess=t.awaitingAccess),N(this._accessState,c)||(this._accessState=c,this.emitDailyJSEvent(t));break;case vo:if(t.meetingSession){this._meetingSessionSummary=t.meetingSession,this.emitDailyJSEvent(t);var l=Va(Va({},t),{},{action:\"meeting-session-updated\"});this.emitDailyJSEvent(l)}break;case ns:var u;this._iframe&&!t.preserveIframe&&(this._iframe.src=\"\"),this._updateCallState(wi),this.resetMeetingDependentVars(),this._loadedCallback&&(this._loadedCallback(t.errorMsg),this._loadedCallback=null),t.preserveIframe;var d=e(t,Ba);null!=d&&null!==(u=d.error)&&void 0!==u&&u.details&&(d.error.details=JSON.parse(d.error.details)),this._maybeSendToSentry(t),this._joinedCallback&&(this._joinedCallback(null,d),this._joinedCallback=null),this.emitDailyJSEvent(d);break;case co:this._callState!==wi&&this._updateCallState(_i),this.resetMeetingDependentVars(),this._resolveLeave&&(this._resolveLeave(),this._resolveLeave=null),this.emitDailyJSEvent(t);break;case\"selected-devices-updated\":t.devices&&this.emitDailyJSEvent(t);break;case Jo:var p=t.state,h=t.threshold,f=t.quality,v=p.state,g=p.reasons;v===this._network.networkState&&N(g,this._network.networkStateReasons)&&h===this._network.threshold&&f===this._network.quality||(this._network.networkState=v,this._network.networkStateReasons=g,this._network.quality=f,this._network.threshold=h,t.networkState=v,g.length&&(t.networkStateReasons=g),delete t.state,this.emitDailyJSEvent(t));break;case qo:t&&t.cpuLoadState&&this.emitDailyJSEvent(t);break;case zo:t&&void 0!==t.faceCounts&&this.emitDailyJSEvent(t);break;case Uo:var m=t.activeSpeaker;this._activeSpeaker.peerId!==m.peerId&&(this._activeSpeaker.peerId=m.peerId,this.emitDailyJSEvent({action:t.action,activeSpeaker:this._activeSpeaker}));break;case\"show-local-video-changed\":if(this._callObjectMode)return;var y=t.show;this._showLocalVideo=y,this.emitDailyJSEvent({action:t.action,show:y});break;case Vo:var b=t.enabled;this._activeSpeakerMode!==b&&(this._activeSpeakerMode=b,this.emitDailyJSEvent({action:t.action,enabled:this._activeSpeakerMode}));break;case yo:case bo:case _o:this._waitingParticipants=t.allWaitingParticipants,this.emitDailyJSEvent({action:t.action,participant:t.participant});break;case Zo:N(this._receiveSettings,t.receiveSettings)||(this._receiveSettings=t.receiveSettings,this.emitDailyJSEvent({action:t.action,receiveSettings:t.receiveSettings}));break;case es:this._maybeUpdateInputSettings(t.inputSettings);break;case\"send-settings-updated\":N(this._sendSettings,t.sendSettings)||(this._sendSettings=t.sendSettings,this._preloadCache.sendSettings=null,this.emitDailyJSEvent({action:t.action,sendSettings:t.sendSettings}));break;case\"local-audio-level\":this._localAudioLevel=t.audioLevel,this._preloadCache.localAudioLevelObserver=null,this.emitDailyJSEvent(t);break;case\"remote-participants-audio-level\":this._remoteParticipantsAudioLevel=t.participantsAudioLevel,this._preloadCache.remoteParticipantsAudioLevelObserver=null,this.emitDailyJSEvent(t);break;case Lo:var _=t.session_id;this._rmpPlayerState[_]=t.playerState,this.emitDailyJSEvent(t);break;case No:delete this._rmpPlayerState[t.session_id],this.emitDailyJSEvent(t);break;case Do:var w=t.session_id,S=this._rmpPlayerState[w];S&&this.compareEqualForRMPUpdateEvent(S,t.remoteMediaPlayerState)||(this._rmpPlayerState[w]=t.remoteMediaPlayerState,this.emitDailyJSEvent(t));break;case\"custom-button-click\":case\"sidebar-view-changed\":this.emitDailyJSEvent(t);break;case go:var k=this._meetingSessionState.topology!==(t.meetingSessionState&&t.meetingSessionState.topology);this._meetingSessionState=jc(t.meetingSessionState,this._callObjectMode),(this._callObjectMode||k)&&this.emitDailyJSEvent(t);break;case Ro:this._isScreenSharing=!0,this.emitDailyJSEvent(t);break;case Fo:case Bo:this._isScreenSharing=!1,this.emitDailyJSEvent(t);break;case Eo:case To:case Oo:case Po:case Ao:case ko:case Mo:case Co:case io:case oo:case Io:case xo:case\"test-completed\":case $o:case jo:case Go:case Qo:case Ko:case Yo:case ts:case Xo:case\"dialin-ready\":case\"dialin-connected\":case\"dialin-error\":case\"dialin-stopped\":case\"dialin-warning\":case\"dialout-connected\":case\"dialout-answered\":case\"dialout-error\":case\"dialout-stopped\":case\"dialout-warning\":this.emitDailyJSEvent(t);break;case\"request-fullscreen\":this.requestFullscreen();break;case\"request-exit-fullscreen\":this.exitFullscreen()}}},{key:\"maybeEventRecordingStopped\",value:function(e,t){var n=\"record\";e&&(t.local||!1!==t[n]||e[n]===t[n]||this.emitDailyJSEvent({action:To}))}},{key:\"maybeEventRecordingStarted\",value:function(e,t){var n=\"record\";e&&(t.local||!0!==t[n]||e[n]===t[n]||this.emitDailyJSEvent({action:Eo}))}},{key:\"_trackStatePlayable\",value:function(e){return!(!e||e.state!==Ti)}},{key:\"_trackChanged\",value:function(e,t){return!((null==e?void 0:e.id)===(null==t?void 0:t.id))}},{key:\"maybeEventTrackStopped\",value:function(e,t,n){var r,i,o=null!==(r=null==t?void 0:t.tracks[e])&&void 0!==r?r:null,s=null!==(i=null==n?void 0:n.tracks[e])&&void 0!==i?i:null,a=null==o?void 0:o.track;if(a){var c=this._trackStatePlayable(o),l=this._trackStatePlayable(s),u=this._trackChanged(a,null==s?void 0:s.track);c&&(l&&!u||this.emitDailyJSEvent({action:So,track:a,participant:null!=n?n:t,type:e}))}}},{key:\"maybeEventTrackStarted\",value:function(e,t,n){var r,i,o=null!==(r=null==t?void 0:t.tracks[e])&&void 0!==r?r:null,s=null!==(i=null==n?void 0:n.tracks[e])&&void 0!==i?i:null,a=null==s?void 0:s.track;if(a){var c=this._trackStatePlayable(o),l=this._trackStatePlayable(s),u=this._trackChanged(null==o?void 0:o.track,a);l&&(c&&!u||this.emitDailyJSEvent({action:wo,track:a,participant:n,type:e}))}}},{key:\"maybeParticipantTracksStopped\",value:function(e,t){if(e)for(var n in e.tracks)this.maybeEventTrackStopped(n,e,t)}},{key:\"maybeParticipantTracksStarted\",value:function(e,t){if(t)for(var n in t.tracks)this.maybeEventTrackStarted(n,e,t)}},{key:\"compareEqualForRMPUpdateEvent\",value:function(e,t){var n,r;return e.state===t.state&&(null===(n=e.settings)||void 0===n?void 0:n.volume)===(null===(r=t.settings)||void 0===r?void 0:r.volume)}},{key:\"emitDailyJSEvent\",value:function(e){try{e.callClientId=this.callClientId,this.emit(e.action,e)}catch(t){console.log(\"could not emit\",e,t)}}},{key:\"compareEqualForParticipantUpdateEvent\",value:function(e,t){return!!N(e,t)&&((!e.videoTrack||!t.videoTrack||e.videoTrack.id===t.videoTrack.id&&e.videoTrack.muted===t.videoTrack.muted&&e.videoTrack.enabled===t.videoTrack.enabled)&&(!e.audioTrack||!t.audioTrack||e.audioTrack.id===t.audioTrack.id&&e.audioTrack.muted===t.audioTrack.muted&&e.audioTrack.enabled===t.audioTrack.enabled))}},{key:\"nativeUtils\",value:function(){return ys()?\"undefined\"==typeof DailyNativeUtils?(console.warn(\"in React Native, DailyNativeUtils is expected to be available\"),null):DailyNativeUtils:null}},{key:\"updateIsPreparingToJoin\",value:function(e){this._updateCallState(this._callState,e)}},{key:\"_updateCallState\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._isPreparingToJoin;if(e!==this._callState||t!==this._isPreparingToJoin){var n=this._callState,r=this._isPreparingToJoin;this._callState=e,this._isPreparingToJoin=t;var i=this._callState===bi;this.updateShowAndroidOngoingMeetingNotification(i);var o=ac(n,r),s=ac(this._callState,this._isPreparingToJoin);o!==s&&(this.updateKeepDeviceAwake(s),this.updateDeviceAudioMode(s),this.updateNoOpRecordingEnsuringBackgroundContinuity(s))}}},{key:\"resetMeetingDependentVars\",value:function(){this._participants={},this._participantCounts=Qa,this._waitingParticipants={},this._activeSpeaker={},this._activeSpeakerMode=!1,this._didPreAuth=!1,this._accessState={access:Oi},this._finalSummaryOfPrevSession=this._meetingSessionSummary,this._meetingSessionSummary={},this._meetingSessionState=jc(Ga,this._callObjectMode),this._isScreenSharing=!1,this._receiveSettings={},this._inputSettings=void 0,this._sendSettings={},this._localAudioLevel=0,this._isLocalAudioLevelObserverRunning=!1,this._remoteParticipantsAudioLevel={},this._isRemoteParticipantsAudioLevelObserverRunning=!1,this._maxAppMessageSize=rs,this._callMachineInitialized=!1,this._bundleLoadTime=void 0,this._preloadCache}},{key:\"updateKeepDeviceAwake\",value:function(e){ys()&&this.nativeUtils().setKeepDeviceAwake(e,this.callClientId)}},{key:\"updateDeviceAudioMode\",value:function(e){if(ys()&&!this.disableReactNativeAutoDeviceManagement(\"audio\")){var t=e?this._nativeInCallAudioMode:\"idle\";this.nativeUtils().setAudioMode(t)}}},{key:\"updateShowAndroidOngoingMeetingNotification\",value:function(e){if(ys()&&this.nativeUtils().setShowOngoingMeetingNotification){var t,n,r,i;if(this.properties.reactNativeConfig&&this.properties.reactNativeConfig.androidInCallNotification){var o=this.properties.reactNativeConfig.androidInCallNotification;t=o.title,n=o.subtitle,r=o.iconName,i=o.disableForCustomOverride}i&&(e=!1),this.nativeUtils().setShowOngoingMeetingNotification(e,t,n,r,this.callClientId)}}},{key:\"updateNoOpRecordingEnsuringBackgroundContinuity\",value:function(e){ys()&&this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity&&this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity(e)}},{key:\"toggleParticipantAudioBasedOnNativeAudioFocus\",value:function(){var e;if(ys()){var t=null===(e=this._callMachine())||void 0===e||null===(e=e.store)||void 0===e?void 0:e.getState();for(var n in null==t?void 0:t.streams){var r=t.streams[n];r&&r.pendingTrack&&\"audio\"===r.pendingTrack.kind&&(r.pendingTrack.enabled=this._hasNativeAudioFocus)}}}},{key:\"disableReactNativeAutoDeviceManagement\",value:function(e){return this.properties.reactNativeConfig&&this.properties.reactNativeConfig.disableAutoDeviceManagement&&this.properties.reactNativeConfig.disableAutoDeviceManagement[e]}},{key:\"absoluteUrl\",value:function(e){if(void 0!==e){var t=document.createElement(\"a\");return t.href=e,t.href}}},{key:\"sayHello\",value:function(){var e=\"hello, world.\";return console.log(e),e}},{key:\"_logUseAfterDestroy\",value:function(){var e=Object.values(za)[0];if(this.needsLoad()){if(e&&!e.needsLoad()){var t={action:cs,level:\"error\",code:this.strictMode?9995:9997};e.sendMessageToCallMachine(t)}else if(!this.strictMode){console.error(\"You are are attempting to use a call instance that was previously destroyed, which is unsupported. Please remove `strictMode: false` from your constructor properties to enable strict mode to track down and fix this unsupported usage.\")}}else{var n={action:cs,level:\"error\",code:this.strictMode?9995:9997};this._messageChannel.sendMessageToCallMachine(n,null,this.callClientId,this._iframe)}}},{key:\"_logDuplicateInstanceAttempt\",value:function(){for(var e=0,t=Object.values(za);e<t.length;e++){var n=t[e];n._callMachineInitialized?(n.sendMessageToCallMachine({action:cs,level:\"warn\",code:this.allowMultipleCallInstances?9993:9992}),n._delayDuplicateInstanceLog=!1):n._delayDuplicateInstanceLog=!0}}},{key:\"_maybeSendToSentry\",value:function(e){var t,n,i,o;if(null!==(t=e.error)&&void 0!==t&&t.type){if(![$i,Vi,Bi].includes(e.error.type))return;if(e.error.type===Bi&&e.error.msg.includes(\"deleted\"))return}var s=null!==(n=this.properties)&&void 0!==n&&n.url?new URL(this.properties.url):void 0,a=\"production\";s&&s.host.includes(\".staging.daily\")&&(a=\"staging\");var c,l,u,d,p,h=function(e){const t=[Gn(),Wn(),ii(),ni(),ui(),fi(),rr(),hi()];return!1!==e.autoSessionTracking&&t.push(li()),t}({}).filter((function(e){return![\"BrowserApiErrors\",\"Breadcrumbs\",\"GlobalHandlers\"].includes(e.name)})),f=new jr({dsn:\"https://f10f1c81e5d44a4098416c0867a8b740@o77906.ingest.sentry.io/168844\",transport:Wr,stackParser:Zr,integrations:h,environment:a}),v=new Mt;if(v.setClient(f),f.init(),this.session_id&&v.setExtra(\"sessionId\",this.session_id),this.properties){var g=Va({},this.properties);g.userName=g.userName?\"[Filtered]\":void 0,g.userData=g.userData?\"[Filtered]\":void 0,g.token=g.token?\"[Filtered]\":void 0,v.setExtra(\"properties\",g)}if(s){var m=s.searchParams.get(\"domain\");if(!m){var y=s.host.match(/(.*?)\\./);m=y&&y[1]||\"\"}m&&v.setTag(\"domain\",m)}e.error&&(v.setTag(\"fatalErrorType\",e.error.type),v.setExtra(\"errorDetails\",e.error.details),(null===(c=e.error.details)||void 0===c?void 0:c.uri)&&v.setTag(\"serverAddress\",e.error.details.uri),(null===(l=e.error.details)||void 0===l?void 0:l.workerGroup)&&v.setTag(\"workerGroup\",e.error.details.workerGroup),(null===(u=e.error.details)||void 0===u?void 0:u.geoGroup)&&v.setTag(\"geoGroup\",e.error.details.geoGroup),(null===(d=e.error.details)||void 0===d?void 0:d.on)&&v.setTag(\"connectionAttempt\",e.error.details.on),null!==(p=e.error.details)&&void 0!==p&&p.bundleUrl&&(v.setTag(\"bundleUrl\",e.error.details.bundleUrl),v.setTag(\"bundleError\",e.error.details.sourceError.type)));v.setTags({callMode:this._callObjectMode?ys()?\"reactNative\":null!==(i=this.properties)&&void 0!==i&&null!==(i=i.dailyConfig)&&void 0!==i&&null!==(i=i.callMode)&&void 0!==i&&i.includes(\"prebuilt\")?this.properties.dailyConfig.callMode:\"custom\":\"prebuilt-frame\",version:r.version()});var b=(null===(o=e.error)||void 0===o?void 0:o.msg)||e.errorMsg;v.captureException(new Error(b))}},{key:\"_callMachine\",value:function(){var e;return null===(e=window._daily)||void 0===e||null===(e=e.instances)||void 0===e||null===(e=e[this.callClientId])||void 0===e?void 0:e.callMachine}},{key:\"_maybeUpdateInputSettings\",value:function(e){if(!N(this._inputSettings,e)){var t=this._getInputSettings();this._inputSettings=e;var n=this._getInputSettings();N(t,n)||this.emitDailyJSEvent({action:es,inputSettings:n})}}}],[{key:\"supportedBrowser\",value:function(){if(ys())return{supported:!0,mobile:!0,name:\"React Native\",version:null,supportsScreenShare:!0,supportsSfu:!0,supportsVideoProcessing:!1,supportsAudioProcessing:!1};var e=Q.getParser(ms());return{supported:!!Cs(),mobile:\"mobile\"===e.getPlatformType(),name:e.getBrowserName(),version:e.getBrowserVersion(),supportsFullscreen:!!ws(),supportsScreenShare:!!_s(),supportsSfu:!!Cs(),supportsVideoProcessing:ks(),supportsAudioProcessing:Ms()}}},{key:\"version\",value:function(){return\"0.77.0\"}},{key:\"createCallObject\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.layout=\"none\",new r(null,e)}},{key:\"wrap\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(hc(),!e||!e.contentWindow||\"string\"!=typeof e.src)throw new Error(\"DailyIframe::Wrap needs an iframe-like first argument\");return t.layout||(t.customLayout?t.layout=\"custom-v1\":t.layout=\"browser\"),new r(e,t)}},{key:\"createFrame\",value:function(e,t){var n,i;hc(),e&&t?(n=e,i=t):e&&e.append?(n=e,i={}):(n=document.body,i=e||{});var o=i.iframeStyle;o||(o=n===document.body?{position:\"fixed\",border:\"1px solid black\",backgroundColor:\"white\",width:\"375px\",height:\"450px\",right:\"1em\",bottom:\"1em\"}:{border:0,width:\"100%\",height:\"100%\"});var s=document.createElement(\"iframe\");window.navigator&&window.navigator.userAgent.match(/Chrome\\/61\\./)?s.allow=\"microphone, camera\":s.allow=\"microphone; camera; autoplay; display-capture; screen-wake-lock\",s.style.visibility=\"hidden\",n.appendChild(s),s.style.visibility=null,Object.keys(o).forEach((function(e){return s.style[e]=o[e]})),i.layout||(i.customLayout?i.layout=\"custom-v1\":i.layout=\"browser\");try{return new r(s,i)}catch(e){throw n.removeChild(s),e}}},{key:\"createTransparentFrame\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};hc();var t=document.createElement(\"iframe\");return t.allow=\"microphone; camera; autoplay\",t.style.cssText=\"\\n      position: fixed;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      border: 0;\\n      pointer-events: none;\\n    \",document.body.appendChild(t),e.layout||(e.layout=\"custom-v1\"),r.wrap(t,e)}},{key:\"getCallInstance\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return e?za[e]:Object.values(za)[0]}}]);var i,c,d,h,v,g,m,y,b,_,w,S,k,M,C,E,T,O,P,A,j,I,L,D,R,F,B,U,V,J,$,q,z,W,H,G,Y,ee}();function oc(e,t){var n={};for(var r in e)if(e[r]instanceof MediaStreamTrack)console.warn(\"MediaStreamTrack found in props or cache.\",r),n[r]=ls;else if(\"dailyConfig\"===r){if(e[r].modifyLocalSdpHook){var i=window._daily.instances[t].customCallbacks||{};i.modifyLocalSdpHook=e[r].modifyLocalSdpHook,window._daily.instances[t].customCallbacks=i,delete e[r].modifyLocalSdpHook}if(e[r].modifyRemoteSdpHook){var o=window._daily.instances[t].customCallbacks||{};o.modifyRemoteSdpHook=e[r].modifyRemoteSdpHook,window._daily.instances[t].customCallbacks=o,delete e[r].modifyRemoteSdpHook}n[r]=e[r]}else n[r]=e[r];return n}function sc(e){var t=arguments.length>2?arguments[2]:void 0;if(e!==bi){var n=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" only supported after join.\");throw t&&(n+=\" \".concat(t)),console.error(n),new Error(n)}}function ac(e,t){return[yi,bi].includes(e)||t}function cc(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"This daily-js method\",r=arguments.length>3?arguments[3]:void 0;if(ac(e,t)){var i=\"\".concat(n,\" not supported after joining a meeting.\");throw r&&(i+=\" \".concat(r)),console.error(i),new Error(i)}}function lc(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",n=arguments.length>2?arguments[2]:void 0;if(!e){var r=\"\".concat(t,arguments.length>3&&void 0!==arguments[3]&&arguments[3]?\" requires preAuth() or startCamera() to initialize call state.\":\" requires preAuth(), startCamera(), or join() to initialize call state.\");throw n&&(r+=\" \".concat(n)),console.error(r),new Error(r)}}function uc(e){if(e){var t=\"A pre-call quality test is in progress. Please try \".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" again once testing has completed. Use stopTestCallQuality() to end it early.\");throw console.error(t),new Error(t)}}function dc(e){if(!e){var t=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" is only supported on custom callObject instances\");throw console.error(t),new Error(t)}}function pc(e){if(e){var t=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" is only supported as part of Daily's Prebuilt\");throw console.error(t),new Error(t)}}function hc(){if(ys())throw new Error(\"This daily-js method is not currently supported in React Native\")}function fc(){if(!ys())throw new Error(\"This daily-js method is only supported in React Native\")}function vc(e){if(void 0===e)return!0;var t;if(\"string\"==typeof e)t=e;else try{t=JSON.stringify(e),N(JSON.parse(t),e)||console.warn(\"The userData provided will be modified when serialized.\")}catch(e){throw Error(\"userData must be serializable to JSON: \".concat(e))}if(t.length>4096)throw Error(\"userData is too large (\".concat(t.length,\" characters). Maximum size suppported is \").concat(4096,\".\"));return!0}function gc(e,t){for(var n=t.allowAllParticipantsKey,r=function(e){var t=[\"local\"];return n||t.push(\"*\"),e&&!t.includes(e)},i=function(e){return!!(void 0===e.layer||Number.isInteger(e.layer)&&e.layer>=0||\"inherit\"===e.layer)},o=function(e){return!!e&&(!(e.video&&!i(e.video))&&!(e.screenVideo&&!i(e.screenVideo)))},s=0,a=Object.entries(e);s<a.length;s++){var c=f(a[s],2),l=c[0],u=c[1];if(!r(l)||!o(u))return!1}return!0}function mc(e){if(\"object\"!==n(e))return!1;for(var t=0,r=Object.entries(e);t<r.length;t++){var i=f(r[t],2),o=i[0],s=i[1];switch(o){case\"video\":if(\"object\"!==n(s))return!1;for(var a=0,c=Object.entries(s);a<c.length;a++){var l=f(c[a],2),u=l[0],d=l[1];switch(u){case\"processor\":if(!_c(d))return!1;break;case\"settings\":if(!wc(d))return!1;break;default:return!1}}break;case\"audio\":if(\"object\"!==n(s))return!1;for(var p=0,h=Object.entries(s);p<h.length;p++){var v=f(h[p],2),g=v[0],m=v[1];switch(g){case\"processor\":if(!bc(m))return!1;break;case\"settings\":if(!wc(m))return!1;break;default:return!1}}break;default:return!1}}return!0}function yc(e,t,n){var r,i=[];e.video&&e.video.processor&&(ks(null!==(r=null==t?void 0:t.useLegacyVideoProcessor)&&void 0!==r&&r)||(e.video.settings?delete e.video.processor:delete e.video,i.push(\"video\")));e.audio&&e.audio.processor&&(Ms()||(e.audio.settings?delete e.audio.processor:delete e.audio,i.push(\"audio\"))),i.length>0&&console.error(\"Ignoring settings for browser- or platform-unsupported input processor(s): \".concat(i.join(\", \"))),e.audio&&e.audio.settings&&(e.audio.settings.customTrack?(n.audioTrack=e.audio.settings.customTrack,e.audio.settings={customTrack:ls}):delete n.audioTrack),e.video&&e.video.settings&&(e.video.settings.customTrack?(n.videoTrack=e.video.settings.customTrack,e.video.settings={customTrack:ls}):delete n.videoTrack)}function bc(e){if(ys())return console.warn(\"Video processing is not yet supported in React Native\"),!1;var t=[\"type\"];return!!e&&(\"object\"===n(e)&&(Object.keys(e).filter((function(e){return!t.includes(e)})).forEach((function(t){console.warn(\"invalid key inputSettings -> audio -> processor : \".concat(t)),delete e[t]})),!!function(e){if(\"string\"!=typeof e)return!1;if(!Object.values(ds).includes(e))return console.error(\"inputSettings audio processor type invalid\"),!1;return!0}(e.type)))}function _c(e){if(ys())return console.warn(\"Video processing is not yet supported in React Native\"),!1;var t=[\"type\",\"config\"];if(!e)return!1;if(\"object\"!==n(e))return!1;if(!function(e){if(\"string\"!=typeof e)return!1;if(!Object.values(us).includes(e))return console.error(\"inputSettings video processor type invalid\"),!1;return!0}(e.type))return!1;if(e.config){if(\"object\"!==n(e.config))return!1;if(!function(e,t){var n=Object.keys(t);if(0===n.length)return!0;var r=\"invalid object in inputSettings -> video -> processor -> config\";switch(e){case us.BGBLUR:return n.length>1||\"strength\"!==n[0]?(console.error(r),!1):!(\"number\"!=typeof t.strength||t.strength<=0||t.strength>1||isNaN(t.strength))||(console.error(\"\".concat(r,\"; expected: {0 < strength <= 1}, got: \").concat(t.strength)),!1);case us.BGIMAGE:return!(void 0!==t.source&&!function(e){if(\"default\"===e.source)return e.type=\"default\",!0;if(e.source instanceof ArrayBuffer)return!0;if(ee(e.source))return e.type=\"url\",!!function(e){var t=new URL(e),n=t.pathname;if(\"data:\"===t.protocol)try{var r=n.substring(n.indexOf(\":\")+1,n.indexOf(\";\")).split(\"/\")[1];return hs.includes(r)}catch(e){return console.error(\"failed to deduce blob content type\",e),!1}var i=n.split(\".\").at(-1).toLowerCase().trim();return hs.includes(i)}(e.source)||(console.error(\"invalid image type; supported types: [\".concat(hs.join(\", \"),\"]\")),!1);return t=e.source,n=Number(t),isNaN(n)||!Number.isInteger(n)||n<=0||n>10?(console.error(\"invalid image selection; must be an int, > 0, <= \".concat(10)),!1):(e.type=\"daily-preselect\",!0);var t,n}(t));default:return!0}}(e.type,e.config))return!1}return Object.keys(e).filter((function(e){return!t.includes(e)})).forEach((function(t){console.warn(\"invalid key inputSettings -> video -> processor : \".concat(t)),delete e[t]})),!0}function wc(e){return\"object\"===n(e)&&(!e.customTrack||e.customTrack instanceof MediaStreamTrack)}function Sc(){var e=Object.values(us).join(\" | \"),t=Object.values(ds).join(\" | \");return\"inputSettings must be of the form: { video?: { processor?: { type: [ \".concat(e,\" ], config?: {} } }, audio?: { processor: {type: [ \").concat(t,\" ] } } }\")}function kc(e){var t=e.allowAllParticipantsKey;return\"receiveSettings must be of the form { [<remote participant id> | \".concat(Ii).concat(t?' | \"'.concat(\"*\",'\"'):\"\",\"]: \")+'{ [video: [{ layer: [<non-negative integer> | \"inherit\"] } | \"inherit\"]], [screenVideo: [{ layer: [<non-negative integer> | \"inherit\"] } | \"inherit\"]] }}}'}function Mc(){return\"customIntegrations should be an object of type \".concat(JSON.stringify(tc),\".\")}function Cc(e){if(e&&\"object\"!==n(e)||Array.isArray(e))return console.error(\"customTrayButtons should be an Object of the type \".concat(JSON.stringify(ec),\".\")),!1;if(e)for(var t=0,r=Object.entries(e);t<r.length;t++)for(var i=f(r[t],1)[0],o=0,s=Object.entries(e[i]);o<s.length;o++){var a=f(s[o],2),c=a[0],l=a[1],u=ec.id[c];if(!u)return console.error(\"customTrayButton does not support key \".concat(c)),!1;switch(c){case\"iconPath\":case\"iconPathDarkMode\":if(!ee(l))return console.error(\"customTrayButton \".concat(c,\" should be a url.\")),!1;break;case\"visualState\":if(![\"default\",\"sidebar-open\",\"active\"].includes(l))return console.error(\"customTrayButton \".concat(c,\" should be \").concat(u,\". Got: \").concat(l)),!1;break;default:if(n(l)!==u)return console.error(\"customTrayButton \".concat(c,\" should be a \").concat(u,\".\")),!1}}return!0}function Ec(e){if(!e||e&&\"object\"!==n(e)||Array.isArray(e))return console.error(Mc()),!1;for(var t=function(e){return\"\".concat(e,\" should be \").concat(tc.id[e])},r=function(e,t){return console.error(\"customIntegration \".concat(e,\": \").concat(t))},i=0,o=Object.entries(e);i<o.length;i++){var s=f(o[i],1)[0];if(!(\"label\"in e[s]))return r(s,\"label is required\"),!1;if(!(\"location\"in e[s]))return r(s,\"location is required\"),!1;if(!(\"src\"in e[s])&&!(\"srcdoc\"in e[s]))return r(s,\"src or srcdoc is required\"),!1;for(var a=0,c=Object.entries(e[s]);a<c.length;a++){var l=f(c[a],2),u=l[0],d=l[1];switch(u){case\"allow\":case\"csp\":case\"name\":case\"referrerPolicy\":case\"sandbox\":if(\"string\"!=typeof d)return r(s,t(u)),!1;break;case\"iconURL\":if(!ee(d))return r(s,\"\".concat(u,\" should be a url\")),!1;break;case\"src\":if(\"srcdoc\"in e[s])return r(s,\"cannot have both src and srcdoc\"),!1;if(!ee(d))return r(s,'src \"'.concat(d,'\" is not a valid URL')),!1;break;case\"srcdoc\":if(\"src\"in e[s])return r(s,\"cannot have both src and srcdoc\"),!1;if(\"string\"!=typeof d)return r(s,t(u)),!1;break;case\"location\":if(![\"main\",\"sidebar\"].includes(d))return r(s,t(u)),!1;break;case\"controlledBy\":if(\"*\"!==d&&\"owners\"!==d&&(!Array.isArray(d)||d.some((function(e){return\"string\"!=typeof e}))))return r(s,t(u)),!1;break;case\"shared\":if((!Array.isArray(d)||d.some((function(e){return\"string\"!=typeof e})))&&\"owners\"!==d&&\"boolean\"!=typeof d)return r(s,t(u)),!1;break;default:if(!tc.id[u])return console.error(\"customIntegration does not support key \".concat(u)),!1}}}return!0}function Tc(e,t){if(void 0===t)return!1;switch(n(t)){case\"string\":return n(e)===t;case\"object\":if(\"object\"!==n(e))return!1;for(var r in e)if(!Tc(e[r],t[r]))return!1;return!0;default:return!1}}function Oc(e,t){var n=e.sessionId,r=e.toEndPoint,i=e.callerId,o=e.useSipRefer;if(!n||!r)throw new Error(\"\".concat(t,\"() requires a sessionId and toEndPoint\"));if(\"string\"!=typeof n||\"string\"!=typeof r)throw new Error(\"Invalid paramater: sessionId and toEndPoint must be of type string\");if(o&&!r.startsWith(\"sip:\"))throw new Error('\"toEndPoint\" must be a \"sip\" address');if(!r.startsWith(\"sip:\")&&!r.startsWith(\"+\"))throw new Error(\"toEndPoint: \".concat(r,' must starts with either \"sip:\" or \"+\"'));if(i&&\"string\"!=typeof i)throw new Error(\"callerId must be of type string\");if(i&&!r.startsWith(\"+\"))throw new Error(\"callerId is only valid when transferring to a PSTN number\")}function Pc(e){if(\"object\"!==n(e))throw new Error('RemoteMediaPlayerSettings: must be \"object\" type');if(e.state&&!Object.values(ps).includes(e.state))throw new Error(\"Invalid value for RemoteMediaPlayerSettings.state, valid values are: \"+JSON.stringify(ps));if(e.volume){if(\"number\"!=typeof e.volume)throw new Error('RemoteMediaPlayerSettings.volume: must be \"number\" type');if(e.volume<0||e.volume>2)throw new Error(\"RemoteMediaPlayerSettings.volume: must be between 0.0 - 2.0\")}}function Ac(e,t,n){return!(\"number\"!=typeof e||e<t||e>n)}function jc(e,t){return e&&!t&&delete e.data,e}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@pipecat-ai/small-webrtc-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js\n");

/***/ })

};
;